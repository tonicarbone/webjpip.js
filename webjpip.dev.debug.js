var webjpip =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 4);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// JPEG2000 codestream markers

module.exports.j2kMarkers = {
    StartOfCodestream: [0xFF, 0x4F], // SOC
    ImageAndTileSize: [0xFF, 0x51], // SIZ
    CodingStyleDefault: [0xFF, 0x52], // COD
    CodingStyleComponent: [0xFF, 0x53], // COC
    QuantizationDefault: [0xFF, 0x5C], // QCD
    ProgressionOrderChange: [0xFF, 0x5F], // POC
    PackedPacketHeadersInMainHeader: [0xFF, 0x60], // PPM
    PackedPacketHeadersInTileHeader: [0xFF, 0x61], // PPT
    StartOfTile: [0xFF, 0x90], // SOT
    StartOfData: [0xFF, 0x93], // SOD
    EndOfCodestream: [0xFF, 0xD9], // EOC
    Comment: [0xFF, 0x64] // COM
};

// JPEG2000 offsets
module.exports.j2kOffsets = {
    MARKER_SIZE: 2,
    LENGTH_FIELD_SIZE: 2,

    NUM_COMPONENTS_OFFSET_AFTER_SIZ_MARKER: 38,
    REFERENCE_GRID_SIZE_OFFSET_AFTER_SIZ_MARKER: 6

};

// JPIP end of response reasons
module.exports.jpipEndOfResponseReasons = {
    IMAGE_DONE: 1,
    WINDOW_DONE: 2,
    WINDOW_CHANGE: 3,
    BYTE_LIMIT: 4,
    QUALITY_LIMIT: 5,
    SESSION_LIMIT: 6,
    RESPONSE_LIMIT: 7,
    NON_SPECIFIED: 8
};

// JPEG2000 exceptions (errors)
module.exports.j2kExceptions = {
    UnsupportedFeatureException: function UnsupportedFeatureException(feature, standardSection) {
        this.description = feature;
        if (standardSection) {
            this.description += ' (specified in section ' + standardSection + ' of part 1: Core Coding System standard) is not supported yet';
        }

        this.toString = function () {
            return 'J2k UnsupportedFeatureException: ' + this.description;
        };

        return this;
    },

    ParseException: function ParseException(description) {
        this.description = description;

        this.toString = function () {
            return 'J2k ParseException: ' + this.description;
        };

        return this;
    },

    IllegalDataException: function IllegalDataException(illegalDataDescription, standardSection) {
        this.description = illegalDataDescription + ' (see section ' + standardSection + ' of part 9: Interactivity tools, APIs and Protocols)';

        this.toString = function () {
            return 'J2k IllegalDataException: ' + this.description;
        };

        return this;
    }
};

// JPIP exceptions (errors)
module.exports.jpipExceptions = {
    UnsupportedFeatureException: function UnsupportedFeatureException(feature, standardSection) {
        this.description = feature;
        if (standardSection) {
            this.description += ' (specified in section ' + standardSection + ' of part 9: Interactivity tools, APIs and Protocols) is not supported yet';
        }

        this.toString = function () {
            return 'Jpip UnsupportedFeatureException: ' + this.description;
        };

        return this;
    },

    ParseException: function ParseException(description) {
        this.description = description;

        this.toString = function () {
            return 'Jpip ParseException: ' + this.description;
        };

        return this;
    },

    IllegalDataException: function IllegalDataException(illegalDataDescription, standardSection) {
        this.description = illegalDataDescription + ' (see section ' + standardSection + ' of part 9: Interactivity tools, APIs and Protocols)';

        this.toString = function () {
            return 'Jpip IllegalDataException: ' + this.description;
        };

        return this;
    },

    IllegalOperationException: function IllegalOperationException(description) {
        this.description = description;

        this.toString = function () {
            return 'Jpip IllegalOperationException: ' + this.description;
        };

        return this;
    },

    ArgumentException: function ArgumentException(argumentName, argumentValue, description) {
        this.description = 'Argument ' + argumentName + ' has invalid value ' + argumentValue + (description !== undefined ? ' :' + description : '');

        this.toString = function () {
            return 'Jpip ArgumentException: ' + this.description;
        };

        return this;
    },

    WrongStreamException: function WrongStreamException(requestedOperation, isJPT) {
        var correctStream = 'JPP (JPIP Precinct)';
        var wrongStream = 'JPT (JPIP Tile-part)';

        if (isJPT) {
            var swap = correctStream;
            correctStream = wrongStream;
            wrongStream = swap;
        }

        this.description = 'Stream type is ' + wrongStream + ', but ' + requestedOperation + ' is allowed only in ' + correctStream + ' stream';

        this.toString = function () {
            return 'Jpip WrongStreamException: ' + this.description;
        };

        return this;
    },

    InternalErrorException: function InternalErrorException(description) {
        this.description = description;

        this.toString = function () {
            return 'Jpip InternalErrorException: ' + this.description;
        };

        return this;
    }
};

// Other exceptions
module.exports.j2kExceptions.UnsupportedFeatureException.Name = 'j2kExceptions.UnsupportedFeatureException';
module.exports.j2kExceptions.ParseException.Name = 'j2kExceptions.ParseException';
module.exports.j2kExceptions.IllegalDataException.Name = 'j2kExceptions.IllegalDataException';

module.exports.jpipExceptions.UnsupportedFeatureException.Name = 'jpipExceptions.UnsupportedFeatureException';
module.exports.jpipExceptions.ParseException.Name = 'jpipExceptions.ParseException';
module.exports.jpipExceptions.IllegalDataException.Name = 'jpipExceptions.IllegalDataException';
module.exports.jpipExceptions.IllegalOperationException.Name = 'jpipExceptions.IllegalOperationException';
module.exports.jpipExceptions.ArgumentException.Name = 'jpipExceptions.ArgumentException';
module.exports.jpipExceptions.WrongStreamException.Name = 'jpipExceptions.WrongStreamException';
module.exports.jpipExceptions.InternalErrorException.Name = 'jpipExceptions.InternalErrorException';

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// Handles XMLHttp requests and information? transactions

var simpleAjaxHelper = __webpack_require__(6);
var mutualExclusiveTransactionHelper = __webpack_require__(7);

// Handles some (cryptic) bitstream stuff and parses message headers
var jpipCodingPassesNumberParser = __webpack_require__(8);
var jpipMessageHeaderParser = __webpack_require__(9);

var JpipChannel = __webpack_require__(10);
var JpipCodestreamReconstructor = __webpack_require__(11);
var JpipCodestreamStructure = __webpack_require__(12);
var JpipComponentStructure = __webpack_require__(13);
var CompositeArray = __webpack_require__(14);
var JpipDatabinParts = __webpack_require__(15);
var JpipDatabinsSaver = __webpack_require__(16);
var JpipFetch = __webpack_require__(17);
var JpipFetcher = __webpack_require__(18);
var JpipHeaderModifier = __webpack_require__(19);
var JpipImageDataContext = __webpack_require__(20);
var JpipLevelCalculator = __webpack_require__(21);
var JpipMarkersParser = __webpack_require__(22);
var JpipOffsetsCalculator = __webpack_require__(23);
var JpipPacketsDataCollector = __webpack_require__(24);
var JpipParamsCodestreamPart = __webpack_require__(25);
var JpipParamsPrecinctIterator = __webpack_require__(26);
var JpipPrecinctCodestreamPart = __webpack_require__(27);
var JpipPrecinctsIteratorWaiter = __webpack_require__(28);
var JpipQualityWaiter = __webpack_require__(29);
var JpipRequestParamsModifier = __webpack_require__(30);
var JpipRequest = __webpack_require__(31);
var JpipSessionHelper = __webpack_require__(32);
var JpipSession = __webpack_require__(33);
var JpipReconnectableRequester = __webpack_require__(34);
var JpipStructureParser = __webpack_require__(35);
var JpipTileStructure = __webpack_require__(36);
var JpipBitstreamReader = __webpack_require__(37);
var JpipTagTree = __webpack_require__(38);
var JpipCodeblockLengthParser = __webpack_require__(39);
var JpipSubbandLengthInPacketHeaderCalculator = __webpack_require__(40);
var JpipPacketLengthCalculator = __webpack_require__(41);
var JpipQualityLayersCache = __webpack_require__(42);

var jpipRuntimeFactory = {
    createChannel: function createChannel(maxRequestsWaitingForResponseInChannel, sessionHelper) {

        return new JpipChannel(maxRequestsWaitingForResponseInChannel, sessionHelper, jpipRuntimeFactory);
    },

    createCodestreamReconstructor: function createCodestreamReconstructor(databinsSaver, headerModifier, qualityLayersCache) {

        return new JpipCodestreamReconstructor(databinsSaver, headerModifier, qualityLayersCache);
    },

    createLevelCalculator: function createLevelCalculator(params) {
        return new JpipLevelCalculator(params);
    },

    createCodestreamStructure: function createCodestreamStructure(structureParser, progressionOrder) {
        return new JpipCodestreamStructure(structureParser, jpipRuntimeFactory, progressionOrder);
    },

    createComponentStructure: function createComponentStructure(params, tileStructure) {
        return new JpipComponentStructure(params, tileStructure);
    },

    createCompositeArray: function createCompositeArray(offset) {
        return new CompositeArray(offset);
    },

    createDatabinParts: function createDatabinParts(classId, inClassId) {
        return new JpipDatabinParts(classId, inClassId, jpipRuntimeFactory);
    },

    createDatabinsSaver: function createDatabinsSaver(isJpipTilepartStream) {
        return new JpipDatabinsSaver(isJpipTilepartStream, jpipRuntimeFactory);
    },

    createFetcher: function createFetcher(databinsSaver, fetcherSharedObjects, options) {
        return new JpipFetcher(databinsSaver, fetcherSharedObjects, options, jpipRuntimeFactory);
    },

    createFetch: function createFetch(fetchContext, requester, progressiveness) {
        return new JpipFetch(fetchContext, requester, progressiveness);
    },

    createHeaderModifier: function createHeaderModifier(offsetsCalculator, progressionOrder) {

        return new JpipHeaderModifier(offsetsCalculator, progressionOrder);
    },

    createImageDataContext: function createImageDataContext(jpipObjects, codestreamPartParams, maxQuality, progressiveness) {

        return new JpipImageDataContext(jpipObjects, codestreamPartParams, maxQuality, progressiveness);
    },

    createMarkersParser: function createMarkersParser(mainHeaderDatabin) {
        return new JpipMarkersParser(mainHeaderDatabin, jpipMessageHeaderParser, jpipRuntimeFactory);
    },

    createOffsetsCalculator: function createOffsetsCalculator(mainHeaderDatabin, markersParser) {
        return new JpipOffsetsCalculator(mainHeaderDatabin, markersParser);
    },

    createPacketsDataCollector: function createPacketsDataCollector(databinsSaver, qualityLayersCache) {

        return new JpipPacketsDataCollector(databinsSaver, qualityLayersCache, jpipRuntimeFactory);
    },

    createParamsCodestreamPart: function createParamsCodestreamPart(codestreamPartParams, codestreamStructure) {

        return new JpipParamsCodestreamPart(codestreamPartParams, codestreamStructure, jpipRuntimeFactory);
    },

    createParamsPrecinctIterator: function createParamsPrecinctIterator(codestreamStructure, idx, codestreamPartParams, isIteratePrecinctsNotInCodestreamPart) {

        return new JpipParamsPrecinctIterator(codestreamStructure, idx, codestreamPartParams, isIteratePrecinctsNotInCodestreamPart);
    },

    createPrecinctCodestreamPart: function createPrecinctCodestreamPart(sizesCalculator, tileStructure, tileIndex, component, level, precinctX, precinctY) {

        return new JpipPrecinctCodestreamPart(sizesCalculator, tileStructure, tileIndex, component, level, precinctX, precinctY);
    },

    createPrecinctsIteratorWaiter: function createPrecinctsIteratorWaiter(codestreamPart, codestreamStructure, databinsSaver, iteratePrecinctCallback) {

        return new JpipPrecinctsIteratorWaiter(codestreamPart, codestreamStructure, databinsSaver, iteratePrecinctCallback, jpipRuntimeFactory);
    },

    createQualityWaiter: function createQualityWaiter(codestreamPart, progressiveness, maxQuality, qualityLayerReachedCallback, codestreamStructure, databinsSaver, startTrackPrecinct, callbacksThis) {

        return new JpipQualityWaiter(codestreamPart, progressiveness, maxQuality, qualityLayerReachedCallback, codestreamStructure, databinsSaver, startTrackPrecinct, callbacksThis, jpipRuntimeFactory);
    },

    createRequestParamsModifier: function createRequestParamsModifier(codestreamStructure) {

        return new JpipRequestParamsModifier(codestreamStructure);
    },

    createRequest: function createRequest(sessionHelper, channel, requestUrl, callback, failureCallback) {

        return new JpipRequest(sessionHelper, jpipMessageHeaderParser, channel, requestUrl, callback, failureCallback);
    },

    createSessionHelper: function createSessionHelper(dataRequestUrl, knownTargetId, codestreamStructure, databinsSaver) {

        return new JpipSessionHelper(dataRequestUrl, knownTargetId, codestreamStructure, databinsSaver, simpleAjaxHelper);
    },

    createSession: function createSession(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, targetId, codestreamStructure, databinsSaver) {

        return new JpipSession(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, targetId, codestreamStructure, databinsSaver, setInterval, clearInterval, jpipRuntimeFactory);
    },

    createReconnectableRequester: function createReconnectableRequester(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, codestreamStructure, databinsSaver) {

        return new JpipReconnectableRequester(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, codestreamStructure, databinsSaver, jpipRuntimeFactory);
    },

    createStructureParser: function createStructureParser(databinsSaver, markersParser, offsetsCalculator) {
        return new JpipStructureParser(databinsSaver, markersParser, jpipMessageHeaderParser, offsetsCalculator);
    },

    createTileStructure: function createTileStructure(sizeParams, codestreamStructure, progressionOrder) {
        return new JpipTileStructure(sizeParams, codestreamStructure, jpipRuntimeFactory, progressionOrder);
    },

    createBitstreamReader: function createBitstreamReader(databin) {
        return new JpipBitstreamReader(databin, mutualExclusiveTransactionHelper);
    },

    createTagTree: function createTagTree(bitstreamReader, width, height) {
        return new JpipTagTree(bitstreamReader, width, height, mutualExclusiveTransactionHelper);
    },

    createCodeblockLengthParser: function createCodeblockLengthParser(bitstreamReader, transactionHelper) {

        return new JpipCodeblockLengthParser(bitstreamReader, mutualExclusiveTransactionHelper);
    },

    createSubbandLengthInPacketHeaderCalculator: function createSubbandLengthInPacketHeaderCalculator(bitstreamReader, numCodeblocksXInSubband, numCodeblocksYInSubband) {

        return new JpipSubbandLengthInPacketHeaderCalculator(bitstreamReader, numCodeblocksXInSubband, numCodeblocksYInSubband, jpipCodingPassesNumberParser, mutualExclusiveTransactionHelper, jpipRuntimeFactory);
    },

    createPacketLengthCalculator: function createPacketLengthCalculator(tileStructure, componentStructure, databin, startOffsetInDatabin, precinct) {

        return new JpipPacketLengthCalculator(tileStructure, componentStructure, databin, startOffsetInDatabin, precinct, jpipRuntimeFactory);
    },

    createQualityLayersCache: function createQualityLayersCache(codestreamStructure) {

        return new JpipQualityLayersCache(codestreamStructure, jpipRuntimeFactory);
    }
};

module.exports = jpipRuntimeFactory;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JpxImage = undefined;

var _util = __webpack_require__(44);

var _arithmetic_decoder = __webpack_require__(45);

/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var JpxError = function JpxErrorClosure() {
  function JpxError(msg) {
    this.message = 'JPX error: ' + msg;
  }

  JpxError.prototype = new Error();
  JpxError.prototype.name = 'JpxError';
  JpxError.constructor = JpxError;

  return JpxError;
}();

var JpxImage = function JpxImageClosure() {
  // Table E.1
  var SubbandsGainLog2 = {
    'LL': 0,
    'LH': 1,
    'HL': 1,
    'HH': 2
  };
  function JpxImage() {
    this.failOnCorruptedImage = false;
  }
  JpxImage.prototype = {
    parse: function JpxImage_parse(data) {

      var head = (0, _util.readUint16)(data, 0);
      // No box header, immediate start of codestream (SOC)
      if (head === 0xFF4F) {
        this.parseCodestream(data, 0, data.length);
        return;
      }

      var position = 0,
          length = data.length;
      while (position < length) {
        var headerSize = 8;
        var lbox = (0, _util.readUint32)(data, position);
        var tbox = (0, _util.readUint32)(data, position + 4);
        position += headerSize;
        if (lbox === 1) {
          // XLBox: read UInt64 according to spec.
          // JavaScript's int precision of 53 bit should be sufficient here.
          lbox = (0, _util.readUint32)(data, position) * 4294967296 + (0, _util.readUint32)(data, position + 4);
          position += 8;
          headerSize += 8;
        }
        if (lbox === 0) {
          lbox = length - position + headerSize;
        }
        if (lbox < headerSize) {
          throw new JpxError('Invalid box field size');
        }
        var dataLength = lbox - headerSize;
        var jumpDataLength = true;
        switch (tbox) {
          case 0x6A703268:
            // 'jp2h'
            jumpDataLength = false; // parsing child boxes
            break;
          case 0x636F6C72:
            // 'colr'
            // Colorspaces are not used, the CS from the PDF is used.
            var method = data[position];
            if (method === 1) {
              // enumerated colorspace
              var colorspace = (0, _util.readUint32)(data, position + 3);
              switch (colorspace) {
                case 16: // this indicates a sRGB colorspace
                case 17: // this indicates a grayscale colorspace
                case 18:
                  // this indicates a YUV colorspace
                  break;
                default:
                  (0, _util.warn)('Unknown colorspace ' + colorspace);
                  break;
              }
            } else if (method === 2) {
              (0, _util.info)('ICC profile not supported');
            }
            break;
          case 0x6A703263:
            // 'jp2c'
            this.parseCodestream(data, position, position + dataLength);
            break;
          case 0x6A502020:
            // 'jP\024\024'
            if ((0, _util.readUint32)(data, position) !== 0x0d0a870a) {
              (0, _util.warn)('Invalid JP2 signature');
            }
            break;
          // The following header types are valid but currently not used:
          case 0x6A501A1A: // 'jP\032\032'
          case 0x66747970: // 'ftyp'
          case 0x72726571: // 'rreq'
          case 0x72657320: // 'res '
          case 0x69686472:
            // 'ihdr'
            break;
          default:
            var headerType = String.fromCharCode(tbox >> 24 & 0xFF, tbox >> 16 & 0xFF, tbox >> 8 & 0xFF, tbox & 0xFF);
            (0, _util.warn)('Unsupported header type ' + tbox + ' (' + headerType + ')');
            break;
        }
        if (jumpDataLength) {
          position += dataLength;
        }
      }
    },
    parseImageProperties: function JpxImage_parseImageProperties(stream) {
      var newByte = stream.getByte();
      while (newByte >= 0) {
        var oldByte = newByte;
        newByte = stream.getByte();
        var code = oldByte << 8 | newByte;
        // Image and tile size (SIZ)
        if (code === 0xFF51) {
          stream.skip(4);
          var Xsiz = stream.getInt32() >>> 0; // Byte 4
          var Ysiz = stream.getInt32() >>> 0; // Byte 8
          var XOsiz = stream.getInt32() >>> 0; // Byte 12
          var YOsiz = stream.getInt32() >>> 0; // Byte 16
          stream.skip(16);
          var Csiz = stream.getUint16(); // Byte 36
          this.width = Xsiz - XOsiz;
          this.height = Ysiz - YOsiz;
          this.componentsCount = Csiz;
          // Results are always returned as `Uint8ClampedArray`s.
          this.bitsPerComponent = 8;
          return;
        }
      }
      throw new JpxError('No size marker found in JPX stream');
    },
    parseCodestream: function JpxImage_parseCodestream(data, start, end, options) {
      var context = {};
      options = options || {};
      var isOnlyParseHeaders = !!options.isOnlyParseHeaders;
      var regionToParse = options.regionToParse;
      if (regionToParse !== undefined && isOnlyParseHeaders) {
        throw 'JPX Error: options.regionToParse is uneffective if ' + 'options.isOnlyParseHeaders = true';
      }

      var doNotRecover = false;
      try {
        var position = start;
        while (position + 1 < end) {
          var code = (0, _util.readUint16)(data, position);
          position += 2;

          var length = 0,
              j,
              sqcd,
              spqcds,
              spqcdSize,
              scalarExpounded,
              tile;
          switch (code) {
            case 0xFF4F:
              // Start of codestream (SOC)
              context.mainHeader = true;
              break;
            case 0xFFD9:
              // End of codestream (EOC)
              break;
            case 0xFF51:
              // Image and tile size (SIZ)
              length = (0, _util.readUint16)(data, position);
              var siz = {};
              siz.Xsiz = (0, _util.readUint32)(data, position + 4);
              siz.Ysiz = (0, _util.readUint32)(data, position + 8);
              siz.XOsiz = (0, _util.readUint32)(data, position + 12);
              siz.YOsiz = (0, _util.readUint32)(data, position + 16);
              siz.XTsiz = (0, _util.readUint32)(data, position + 20);
              siz.YTsiz = (0, _util.readUint32)(data, position + 24);
              siz.XTOsiz = (0, _util.readUint32)(data, position + 28);
              siz.YTOsiz = (0, _util.readUint32)(data, position + 32);
              var componentsCount = (0, _util.readUint16)(data, position + 36);
              siz.Csiz = componentsCount;
              var components = [];
              var isComponentSizesSupported = true;
              j = position + 38;
              for (var i = 0; i < componentsCount; i++) {
                var component = {
                  precision: (data[j] & 0x7F) + 1,
                  isSigned: !!(data[j] & 0x80),
                  XRsiz: data[j + 1],
                  YRsiz: data[j + 2]
                };
                j += 3;
                calculateComponentDimensions(component, siz);
                components.push(component);

                if (regionToParse !== undefined) {
                  isComponentSizesSupported &= component.XRsiz === 1 && component.YRsiz === 1;
                }
              }
              context.SIZ = siz;
              context.components = components;
              calculateTileGrids(context, components);
              context.QCC = [];
              context.COC = [];

              if (!isComponentSizesSupported) {
                throw new Error('JPX Error: When regionToParse is used, ' + 'component size other than 1 is not supported');
              }
              break;
            case 0xFF5C:
              // Quantization default (QCD)
              length = (0, _util.readUint16)(data, position);
              var qcd = {};
              j = position + 2;
              sqcd = data[j++];
              switch (sqcd & 0x1F) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded = true;
                  break;
                default:
                  throw new Error('Invalid SQcd value ' + sqcd);
              }
              qcd.noQuantization = spqcdSize === 8;
              qcd.scalarExpounded = scalarExpounded;
              qcd.guardBits = sqcd >> 5;
              spqcds = [];
              while (j < length + position) {
                var spqcd = {};
                if (spqcdSize === 8) {
                  spqcd.epsilon = data[j++] >> 3;
                  spqcd.mu = 0;
                } else {
                  spqcd.epsilon = data[j] >> 3;
                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
                  j += 2;
                }
                spqcds.push(spqcd);
              }
              qcd.SPqcds = spqcds;
              if (context.mainHeader) {
                context.QCD = qcd;
              } else {
                context.currentTile.QCD = qcd;
                context.currentTile.QCC = [];
              }
              break;
            case 0xFF5D:
              // Quantization component (QCC)
              length = (0, _util.readUint16)(data, position);
              var qcc = {};
              j = position + 2;
              var cqcc;
              if (context.SIZ.Csiz < 257) {
                cqcc = data[j++];
              } else {
                cqcc = (0, _util.readUint16)(data, j);
                j += 2;
              }
              sqcd = data[j++];
              switch (sqcd & 0x1F) {
                case 0:
                  spqcdSize = 8;
                  scalarExpounded = true;
                  break;
                case 1:
                  spqcdSize = 16;
                  scalarExpounded = false;
                  break;
                case 2:
                  spqcdSize = 16;
                  scalarExpounded = true;
                  break;
                default:
                  throw new Error('Invalid SQcd value ' + sqcd);
              }
              qcc.noQuantization = spqcdSize === 8;
              qcc.scalarExpounded = scalarExpounded;
              qcc.guardBits = sqcd >> 5;
              spqcds = [];
              while (j < length + position) {
                spqcd = {};
                if (spqcdSize === 8) {
                  spqcd.epsilon = data[j++] >> 3;
                  spqcd.mu = 0;
                } else {
                  spqcd.epsilon = data[j] >> 3;
                  spqcd.mu = (data[j] & 0x7) << 8 | data[j + 1];
                  j += 2;
                }
                spqcds.push(spqcd);
              }
              qcc.SPqcds = spqcds;
              if (context.mainHeader) {
                context.QCC[cqcc] = qcc;
              } else {
                context.currentTile.QCC[cqcc] = qcc;
              }
              break;
            case 0xFF52:
              // Coding style default (COD)
              length = (0, _util.readUint16)(data, position);
              var cod = {};
              j = position + 2;
              var scod = data[j++];
              cod.entropyCoderWithCustomPrecincts = !!(scod & 1);
              cod.sopMarkerUsed = !!(scod & 2);
              cod.ephMarkerUsed = !!(scod & 4);
              cod.progressionOrder = data[j++];
              cod.layersCount = (0, _util.readUint16)(data, j);
              j += 2;
              cod.multipleComponentTransform = data[j++];

              cod.decompositionLevelsCount = data[j++];
              cod.xcb = (data[j++] & 0xF) + 2;
              cod.ycb = (data[j++] & 0xF) + 2;
              var blockStyle = data[j++];
              cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);
              cod.resetContextProbabilities = !!(blockStyle & 2);
              cod.terminationOnEachCodingPass = !!(blockStyle & 4);
              cod.verticallyStripe = !!(blockStyle & 8);
              cod.predictableTermination = !!(blockStyle & 16);
              cod.segmentationSymbolUsed = !!(blockStyle & 32);
              cod.reversibleTransformation = data[j++];
              if (cod.entropyCoderWithCustomPrecincts) {
                var precinctsSizes = [];
                while (j < length + position) {
                  var precinctsSize = data[j++];
                  precinctsSizes.push({
                    PPx: precinctsSize & 0xF,
                    PPy: precinctsSize >> 4
                  });
                }
                cod.precinctsSizes = precinctsSizes;
              }
              var unsupported = [];
              if (cod.selectiveArithmeticCodingBypass) {
                unsupported.push('selectiveArithmeticCodingBypass');
              }
              if (cod.resetContextProbabilities) {
                unsupported.push('resetContextProbabilities');
              }
              if (cod.terminationOnEachCodingPass) {
                unsupported.push('terminationOnEachCodingPass');
              }
              if (cod.verticallyStripe) {
                unsupported.push('verticallyStripe');
              }
              if (cod.predictableTermination) {
                unsupported.push('predictableTermination');
              }
              if (unsupported.length > 0) {
                doNotRecover = true;
                throw new Error('Unsupported COD options (' + unsupported.join(', ') + ')');
              }
              if (context.mainHeader) {
                context.COD = cod;
              } else {
                context.currentTile.COD = cod;
                context.currentTile.COC = [];
              }
              break;
            case 0xFF90:
              // Start of tile-part (SOT)
              length = (0, _util.readUint16)(data, position);
              tile = {};
              tile.index = (0, _util.readUint16)(data, position + 2);
              tile.length = (0, _util.readUint32)(data, position + 4);
              tile.dataEnd = tile.length + position - 2;
              tile.partIndex = data[position + 8];
              tile.partsCount = data[position + 9];

              context.mainHeader = false;
              if (tile.partIndex === 0) {
                // reset component specific settings
                tile.COD = context.COD;
                tile.COC = context.COC.slice(0); // clone of the global COC
                tile.QCD = context.QCD;
                tile.QCC = context.QCC.slice(0); // clone of the global COC
              }
              context.currentTile = tile;
              break;
            case 0xFF93:
              // Start of data (SOD)
              tile = context.currentTile;
              if (tile.partIndex === 0) {
                initializeTile(context, tile.index);
                buildPackets(context);
              }

              // moving to the end of the data
              length = tile.dataEnd - position;
              if (!isOnlyParseHeaders) {
                parseTilePackets(context, data, position, length);
              }

              break;
            case 0xFF55: // Tile-part lengths, main header (TLM)
            case 0xFF57: // Packet length, main header (PLM)
            case 0xFF58: // Packet length, tile-part header (PLT)
            case 0xFF64:
              // Comment (COM)
              length = (0, _util.readUint16)(data, position);
              // skipping content
              break;
            case 0xFF53:
              // Coding style component (COC)
              throw new Error('Codestream code 0xFF53 (COC) is ' + 'not implemented');
            default:
              throw new Error('Unknown codestream code: ' + code.toString(16));
          }
          position += length;
        }
      } catch (e) {
        if (doNotRecover || this.failOnCorruptedImage) {
          throw new JpxError(e.message);
        } else {
          (0, _util.warn)('JPX: Trying to recover from: ' + e.message);
        }
      }
      if (!isOnlyParseHeaders) {
        this.decode(context, options);
      }
      this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;
      this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;
      this.componentsCount = context.SIZ.Csiz;
      return context;
    },
    invalidateData: function JpxImage_invalidateData(context) {
      context.dataInvalidationId = (context.dataInvalidationId || 0) + 1;
    },
    addPacketsData: function JpxImage_addPacketData(context, packetsData) {
      for (var j = 0; j < packetsData.packetDataOffsets.length; ++j) {
        var packetOffsets = packetsData.packetDataOffsets[j];
        var tile = context.tiles[packetOffsets.tileIndex];
        var component = tile.components[packetOffsets.c];
        var resolution = component.resolutions[packetOffsets.r];
        var p = packetOffsets.p;
        var pixelsPrecinct = resolution.pixelsPrecincts[p];
        var codeblocks = pixelsPrecinct.codeblocks;
        pixelsPrecinct.hasData = true;
        for (var i = 0; i < packetOffsets.codeblockOffsets.length; ++i) {
          var codeblockOffsets = packetOffsets.codeblockOffsets[i];
          var isNoData = codeblockOffsets.start === codeblockOffsets.end;
          if (isNoData) {
            continue;
          }
          var codeblock = codeblocks[i];
          if (codeblock.dataInvalidationId !== context.dataInvalidationId) {
            codeblock.dataInvalidationId = context.dataInvalidationId;
            codeblock.data = undefined;
            codeblock.zeroBitPlanes = undefined;
            var subbandDataId = codeblock.parentSubband.dataInvalidationId;
            if (subbandDataId !== context.dataInvalidationId) {
              subbandDataId = context.dataInvalidationId;
              codeblock.parentSubband.dataInvalidationId = subbandDataId;
              codeblock.parentSubband.codeblocksWithData = [];
            }
          }
          if (codeblock['data'] === undefined) {
            codeblock.data = [];
            codeblock.parentSubband.codeblocksWithData.push(codeblock);
          }
          if (codeblockOffsets.zeroBitPlanes !== undefined) {
            if (codeblock.zeroBitPlanes === undefined) {
              codeblock.zeroBitPlanes = codeblockOffsets.zeroBitPlanes;
            }
            if (codeblock.zeroBitPlanes !== codeblockOffsets.zeroBitPlanes) {
              throw 'JPX Error: Unmatched zero bit planes';
            }
          } else if (codeblock.zeroBitPlanes === undefined) {
            throw 'JPX Error: zeroBitPlanes is unknown';
          }
          codeblock.included = true;
          codeblock.data.push({
            data: packetsData.data,
            start: codeblockOffsets.start,
            end: codeblockOffsets.end,
            codingpasses: codeblockOffsets.codingpasses
          });
        }
      }
    },
    decodePrecinctCoefficients: function JpxImage_decodeCodeblockCoefficients(context, tileIdx, componentIdx, resolutionIdx, precinctIdx) {
      var tile = context.tiles[tileIdx];
      var component = tile.components[componentIdx];
      var resolution = component.resolutions[resolutionIdx];
      var pixelsPrecinct = resolution.pixelsPrecincts[precinctIdx];

      var codingStyleParameters = component.codingStyleParameters;
      var quantizationParameters = component.quantizationParameters;
      var spqcds = quantizationParameters.SPqcds;
      var scalarExpounded = quantizationParameters.scalarExpounded;
      var guardBits = quantizationParameters.guardBits;
      var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
      var precision = context.components[componentIdx].precision;
      var reversible = codingStyleParameters.reversibleTransformation;

      var regionInLevel = calculateRegionInLevelOfPixelsPrecinct(pixelsPrecinct, resolution);
      var coefficients = getCoefficientsOfResolution(resolution, spqcds, scalarExpounded, precision, guardBits, reversible, segmentationSymbolUsed, regionInLevel, context.dataInvalidationId);

      return coefficients;
    },
    setPrecinctCoefficients: function JpxImage_addPrecinctCoefficients(context, coefficients, tileIdx, componentIdx, resolutionIdx, precinctIdx) {
      var tile = context.tiles[tileIdx];
      var component = tile.components[componentIdx];
      var resolution = component.resolutions[resolutionIdx];
      var pixelsPrecinct = resolution.pixelsPrecincts[precinctIdx];

      if (resolution.dataInvalidationId !== context.dataInvalidationId) {
        resolution.dataInvalidationId = context.dataInvalidationId;
        resolution.pixelsPrecinctsWithDecodedCoefficients = [];
      }
      if (!pixelsPrecinct.hasDecodedCoefficients) {
        resolution.pixelsPrecinctsWithDecodedCoefficients.push(pixelsPrecinct);
      }
      pixelsPrecinct.decodedCoefficients = coefficients;
      resolution.hasDecodedCoefficients = true;
      pixelsPrecinct.dataInvalidationId = context.dataInvalidationId;
    },
    decode: function JpxImage_decode(context, options) {
      if (options !== undefined && options.regionToParse !== undefined) {
        var region = options.regionToParse;
        if (region.top === undefined || region.left === undefined || region.right === undefined || region.bottom === undefined) {
          throw new Error('JPX Error: Either left, top, right or ' + 'bottom are undefined in regionToParse');
        }
        context.regionToParse = region;
      }
      this.tiles = transformComponents(context);
      context.regionToParse = undefined;
    }
  };
  function calculateRegionInLevelOfPixelsPrecinct(pixelsPrecincts, resolution) {
    var regionInLevel;
    var subbands = resolution.subbands;
    for (var i = 0; i < pixelsPrecincts.subbandPrecincts.length; ++i) {
      var interleave = resolution.subbands[i].type !== 'LL';
      var x0 = pixelsPrecincts.subbandPrecincts[i].tbxMin_;
      var y0 = pixelsPrecincts.subbandPrecincts[i].tbyMin_;
      var x1 = pixelsPrecincts.subbandPrecincts[i].tbxMax_;
      var y1 = pixelsPrecincts.subbandPrecincts[i].tbyMax_;
      if (interleave) {
        x0 = (x0 - resolution.subbands[i].tbx0) * 2 + resolution.trx0;
        y0 = (y0 - resolution.subbands[i].tby0) * 2 + resolution.try0;
        x1 = (x1 - resolution.subbands[i].tbx0) * 2 + resolution.trx0;
        y1 = (y1 - resolution.subbands[i].tby0) * 2 + resolution.try0;
      }
      if (i === 0) {
        regionInLevel = { x0: x0, y0: y0, x1: x1, y1: y1 };
      } else {
        regionInLevel.x0 = Math.min(regionInLevel.x0, x0);
        regionInLevel.y0 = Math.min(regionInLevel.y0, y0);
        regionInLevel.x1 = Math.max(regionInLevel.x1, x1);
        regionInLevel.y1 = Math.max(regionInLevel.y1, y1);
      }
    }
    return regionInLevel;
  }
  function calculateComponentDimensions(component, siz) {
    // Section B.2 Component mapping
    component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);
    component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);
    component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);
    component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);
    component.width = component.x1 - component.x0;
    component.height = component.y1 - component.y0;
  }
  function calculateTileGrids(context, components) {
    var siz = context.SIZ;
    // Section B.3 Division into tile and tile-components
    var tile,
        tiles = [];
    var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);
    var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);
    for (var q = 0; q < numYtiles; q++) {
      for (var p = 0; p < numXtiles; p++) {
        tile = {};
        tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);
        tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);
        tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);
        tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);
        tile.width = tile.tx1 - tile.tx0;
        tile.height = tile.ty1 - tile.ty0;
        tile.components = [];
        tiles.push(tile);
      }
    }
    context.tiles = tiles;

    var componentsCount = siz.Csiz;
    for (var i = 0, ii = componentsCount; i < ii; i++) {
      var component = components[i];
      for (var j = 0, jj = tiles.length; j < jj; j++) {
        var tileComponent = {};
        tile = tiles[j];
        tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);
        tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);
        tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);
        tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);
        tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;
        tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;
        tile.components[i] = tileComponent;
      }
    }
  }
  function getBlocksDimensions(context, component, r) {
    var codOrCoc = component.codingStyleParameters;
    var result = {};
    if (!codOrCoc.entropyCoderWithCustomPrecincts) {
      result.PPx = 15;
      result.PPy = 15;
    } else {
      result.PPx = codOrCoc.precinctsSizes[r].PPx;
      result.PPy = codOrCoc.precinctsSizes[r].PPy;
    }
    // calculate codeblock size as described in section B.7
    result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);
    result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);
    return result;
  }
  function buildPrecincts(context, resolution, dimensions) {
    // Section B.6 Division resolution to precincts
    var precinctWidth = 1 << dimensions.PPx;
    var precinctHeight = 1 << dimensions.PPy;
    // Jasper introduces codeblock groups for mapping each subband codeblocks
    // to precincts. Precinct partition divides a resolution according to width
    // and height parameters. The subband that belongs to the resolution level
    // has a different size than the level, unless it is the zero resolution.

    // From Jasper documentation: jpeg2000.pdf, section K: Tier-2 coding:
    // The precinct partitioning for a particular subband is derived from a
    // partitioning of its parent LL band (i.e., the LL band at the next higher
    // resolution level)... The LL band associated with each resolution level is
    // divided into precincts... Each of the resulting precinct regions is then
    // mapped into its child subbands (if any) at the next lower resolution
    // level. This is accomplished by using the coordinate transformation
    // (u, v) = (ceil(x/2), ceil(y/2)) where (x, y) and (u, v) are the
    // coordinates of a point in the LL band and child subband, respectively.
    var isZeroRes = resolution.resLevel === 0;
    var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);
    var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);
    var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;
    var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;
    var numprecincts = numprecinctswide * numprecinctshigh;

    resolution.precinctParameters = {
      precinctWidth: precinctWidth,
      precinctHeight: precinctHeight,
      numprecinctswide: numprecinctswide,
      numprecinctshigh: numprecinctshigh,
      numprecincts: numprecincts,
      precinctWidthInSubband: precinctWidthInSubband,
      precinctHeightInSubband: precinctHeightInSubband
    };
  }
  function buildCodeblocks(context, subband, dimensions, index) {
    // Section B.7 Division sub-band into code-blocks
    var xcb_ = dimensions.xcb_;
    var ycb_ = dimensions.ycb_;
    var codeblockWidth = 1 << xcb_;
    var codeblockHeight = 1 << ycb_;
    var cbx0 = subband.tbx0 >> xcb_;
    var cby0 = subband.tby0 >> ycb_;
    var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;
    var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;
    var precinctParameters = subband.resolution.precinctParameters;
    var codeblocks = [];
    var precincts = [];
    var i, j, codeblock, precinctNumber;
    for (j = cby0; j < cby1; j++) {
      for (i = cbx0; i < cbx1; i++) {
        codeblock = {
          cbx: i,
          cby: j,
          tbx0: codeblockWidth * i,
          tby0: codeblockHeight * j,
          tbx1: codeblockWidth * (i + 1),
          tby1: codeblockHeight * (j + 1),
          parentSubband: subband
        };

        codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);
        codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);
        codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);
        codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);

        // Calculate precinct number for this codeblock, codeblock position
        // should be relative to its subband, use actual dimension and position
        // See comment about codeblock group width and height
        var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);
        var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);
        precinctNumber = pi + pj * precinctParameters.numprecinctswide;

        codeblock.precinctNumber = precinctNumber;
        codeblock.subbandType = subband.type;
        codeblock.Lblock = 3;

        if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {
          continue;
        }
        codeblocks.push(codeblock);
        // building precinct for the sub-band
        var precinct = precincts[precinctNumber];
        if (precinct !== undefined) {
          if (i < precinct.cbxMin) {
            precinct.cbxMin = i;
            precinct.tbxMin_ = codeblock.tbx0_;
          } else if (i > precinct.cbxMax) {
            precinct.cbxMax = i;
            precinct.tbxMax_ = codeblock.tbx1_;
          }
          if (j < precinct.cbyMin) {
            precinct.cbyMin = j;
            precinct.tbyMin_ = codeblock.tby0_;
          } else if (j > precinct.cbyMax) {
            precinct.cbyMax = j;
            precinct.tbyMax_ = codeblock.tby1_;
          }
        } else {
          precincts[precinctNumber] = precinct = {
            cbxMin: i,
            cbyMin: j,
            cbxMax: i,
            cbyMax: j,
            tbxMin_: codeblock.tbx0_,
            tbxMax_: codeblock.tbx1_,
            tbyMin_: codeblock.tby0_,
            tbyMax_: codeblock.tby1_,
            pixelsPrecinct: subband.resolution.pixelsPrecincts[precinctNumber]
          };
        }
        if (precinct['pixelsPrecinct'] === undefined) {
          precinct.pixelsPrecinct = {
            codeblocks: [],
            subbandPrecincts: [],
            hasData: false
          };
          subband.resolution.pixelsPrecincts[precinctNumber] = precinct.pixelsPrecinct;
        }
        codeblock.precinct = precinct;
        var pixelsPrecinct = precinct.pixelsPrecinct;
        pixelsPrecinct.codeblocks.push(codeblock);
        if (pixelsPrecinct.subbandPrecincts[index] === undefined) {
          pixelsPrecinct.subbandPrecincts[index] = precinct;
        }
      }
    }
    subband.codeblockParameters = {
      codeblockWidth: xcb_,
      codeblockHeight: ycb_,
      numcodeblockwide: cbx1 - cbx0 + 1,
      numcodeblockhigh: cby1 - cby0 + 1
    };
    subband.codeblocks = codeblocks;
    subband.subbandPrecincts = precincts;
    subband.codeblocksWithData = [];
  }
  function createPacket(resolution, precinctNumber, layerNumber) {
    // Section B.10.8 Order of info in packet
    // sub-bands already ordered in 'LL', 'HL', 'LH', and 'HH' sequence
    return {
      layerNumber: layerNumber,
      codeblocks: resolution.pixelsPrecincts[precinctNumber].codeblocks
    };
  }
  function LayerResolutionComponentPositionIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var maxDecompositionLevelsCount = 0;
    for (var q = 0; q < componentsCount; q++) {
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
    }

    var l = 0,
        r = 0,
        i = 0,
        k = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.1 Layer-resolution-component-position
      for (; l < layersCount; l++) {
        for (; r <= maxDecompositionLevelsCount; r++) {
          for (; i < componentsCount; i++) {
            var component = tile.components[i];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }

            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            for (; k < numprecincts;) {
              var packet = createPacket(resolution, k, l);
              k++;
              return packet;
            }
            k = 0;
          }
          i = 0;
        }
        r = 0;
      }
      throw new JpxError('Out of packets');
    };
  }
  function ResolutionLayerComponentPositionIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var maxDecompositionLevelsCount = 0;
    for (var q = 0; q < componentsCount; q++) {
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);
    }

    var r = 0,
        l = 0,
        i = 0,
        k = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.2 Resolution-layer-component-position
      for (; r <= maxDecompositionLevelsCount; r++) {
        for (; l < layersCount; l++) {
          for (; i < componentsCount; i++) {
            var component = tile.components[i];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }

            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            for (; k < numprecincts;) {
              var packet = createPacket(resolution, k, l);
              k++;
              return packet;
            }
            k = 0;
          }
          i = 0;
        }
        l = 0;
      }
      throw new JpxError('Out of packets');
    };
  }
  function ResolutionPositionComponentLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var l, r, c, p;
    var maxDecompositionLevelsCount = 0;
    for (c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);
    }
    var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);
    for (r = 0; r <= maxDecompositionLevelsCount; ++r) {
      var maxNumPrecincts = 0;
      for (c = 0; c < componentsCount; ++c) {
        var resolutions = tile.components[c].resolutions;
        if (r < resolutions.length) {
          maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);
        }
      }
      maxNumPrecinctsInLevel[r] = maxNumPrecincts;
    }
    l = 0;
    r = 0;
    c = 0;
    p = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.3 Resolution-position-component-layer
      for (; r <= maxDecompositionLevelsCount; r++) {
        for (; p < maxNumPrecinctsInLevel[r]; p++) {
          for (; c < componentsCount; c++) {
            var component = tile.components[c];
            if (r > component.codingStyleParameters.decompositionLevelsCount) {
              continue;
            }
            var resolution = component.resolutions[r];
            var numprecincts = resolution.precinctParameters.numprecincts;
            if (p >= numprecincts) {
              continue;
            }
            for (; l < layersCount;) {
              var packet = createPacket(resolution, p, l);
              l++;
              return packet;
            }
            l = 0;
          }
          c = 0;
        }
        p = 0;
      }
      throw new JpxError('Out of packets');
    };
  }
  function PositionComponentResolutionLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var precinctsSizes = getPrecinctSizesInImageScale(tile);
    var precinctsIterationSizes = precinctsSizes;
    var l = 0,
        r = 0,
        c = 0,
        px = 0,
        py = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.4 Position-component-resolution-layer
      for (; py < precinctsIterationSizes.maxNumHigh; py++) {
        for (; px < precinctsIterationSizes.maxNumWide; px++) {
          for (; c < componentsCount; c++) {
            var component = tile.components[c];
            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
            for (; r <= decompositionLevelsCount; r++) {
              var resolution = component.resolutions[r];
              var sizeInImageScale = precinctsSizes.components[c].resolutions[r];
              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
              if (k === null) {
                continue;
              }
              for (; l < layersCount;) {
                var packet = createPacket(resolution, k, l);
                l++;
                return packet;
              }
              l = 0;
            }
            r = 0;
          }
          c = 0;
        }
        px = 0;
      }
      throw new JpxError('Out of packets');
    };
  }
  function ComponentPositionResolutionLayerIterator(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var layersCount = tile.codingStyleDefaultParameters.layersCount;
    var componentsCount = siz.Csiz;
    var precinctsSizes = getPrecinctSizesInImageScale(tile);
    var l = 0,
        r = 0,
        c = 0,
        px = 0,
        py = 0;

    this.nextPacket = function JpxImage_nextPacket() {
      // Section B.12.1.5 Component-position-resolution-layer
      for (; c < componentsCount; ++c) {
        var component = tile.components[c];
        var precinctsIterationSizes = precinctsSizes.components[c];
        var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
        for (; py < precinctsIterationSizes.maxNumHigh; py++) {
          for (; px < precinctsIterationSizes.maxNumWide; px++) {
            for (; r <= decompositionLevelsCount; r++) {
              var resolution = component.resolutions[r];
              var sizeInImageScale = precinctsIterationSizes.resolutions[r];
              var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);
              if (k === null) {
                continue;
              }
              for (; l < layersCount;) {
                var packet = createPacket(resolution, k, l);
                l++;
                return packet;
              }
              l = 0;
            }
            r = 0;
          }
          px = 0;
        }
        py = 0;
      }
      throw new JpxError('Out of packets');
    };
  }
  function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {
    var posX = pxIndex * precinctIterationSizes.minWidth;
    var posY = pyIndex * precinctIterationSizes.minHeight;
    if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {
      return null;
    }
    var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;
    return posX / sizeInImageScale.height + startPrecinctRowIndex;
  }
  function getPrecinctSizesInImageScale(tile) {
    var componentsCount = tile.components.length;
    var minWidth = Number.MAX_VALUE;
    var minHeight = Number.MAX_VALUE;
    var maxNumWide = 0;
    var maxNumHigh = 0;
    var sizePerComponent = new Array(componentsCount);
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
      var sizePerResolution = new Array(decompositionLevelsCount + 1);
      var minWidthCurrentComponent = Number.MAX_VALUE;
      var minHeightCurrentComponent = Number.MAX_VALUE;
      var maxNumWideCurrentComponent = 0;
      var maxNumHighCurrentComponent = 0;
      var scale = 1;
      for (var r = decompositionLevelsCount; r >= 0; --r) {
        var resolution = component.resolutions[r];
        var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;
        var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;
        minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);
        minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);
        maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);
        maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);
        sizePerResolution[r] = {
          width: widthCurrentResolution,
          height: heightCurrentResolution
        };
        scale <<= 1;
      }
      minWidth = Math.min(minWidth, minWidthCurrentComponent);
      minHeight = Math.min(minHeight, minHeightCurrentComponent);
      maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);
      maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);
      sizePerComponent[c] = {
        resolutions: sizePerResolution,
        minWidth: minWidthCurrentComponent,
        minHeight: minHeightCurrentComponent,
        maxNumWide: maxNumWideCurrentComponent,
        maxNumHigh: maxNumHighCurrentComponent
      };
    }
    return {
      components: sizePerComponent,
      minWidth: minWidth,
      minHeight: minHeight,
      maxNumWide: maxNumWide,
      maxNumHigh: maxNumHigh
    };
  }
  function buildPackets(context) {
    var siz = context.SIZ;
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var componentsCount = siz.Csiz;
    // Creating resolutions and sub-bands for each component
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;
      // Section B.5 Resolution levels and sub-bands
      var resolutions = [];
      var subbands = [];
      var indexInTileComponent = 0;
      for (var r = 0; r <= decompositionLevelsCount; r++) {
        var blocksDimensions = getBlocksDimensions(context, component, r);
        var resolution = {};
        var scale = 1 << decompositionLevelsCount - r;
        resolution.trx0 = Math.ceil(component.tcx0 / scale);
        resolution.try0 = Math.ceil(component.tcy0 / scale);
        resolution.trx1 = Math.ceil(component.tcx1 / scale);
        resolution.try1 = Math.ceil(component.tcy1 / scale);
        resolution.resLevel = r;
        resolution.pixelsPrecincts = [];
        resolution.pixelsPrecinctsWithDecodedCoefficients = [];
        buildPrecincts(context, resolution, blocksDimensions);
        resolutions.push(resolution);

        var subband;
        if (r === 0) {
          // one sub-band (LL) with last decomposition
          subband = {};
          subband.type = 'LL';
          subband.tbx0 = Math.ceil(component.tcx0 / scale);
          subband.tby0 = Math.ceil(component.tcy0 / scale);
          subband.tbx1 = Math.ceil(component.tcx1 / scale);
          subband.tby1 = Math.ceil(component.tcy1 / scale);
          subband.resolution = resolution;
          subband.indexInTileComponent = indexInTileComponent++;
          buildCodeblocks(context, subband, blocksDimensions, 0);
          subbands.push(subband);
          resolution.subbands = [subband];
        } else {
          var bscale = 1 << decompositionLevelsCount - r + 1;
          var resolutionSubbands = [];
          // three sub-bands (HL, LH and HH) with rest of decompositions
          subband = {};
          subband.type = 'HL';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
          subband.tby0 = Math.ceil(component.tcy0 / bscale);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
          subband.tby1 = Math.ceil(component.tcy1 / bscale);
          subband.resolution = resolution;
          subband.indexInTileComponent = indexInTileComponent++;
          buildCodeblocks(context, subband, blocksDimensions, 0);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          subband = {};
          subband.type = 'LH';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale);
          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale);
          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
          subband.resolution = resolution;
          subband.indexInTileComponent = indexInTileComponent++;
          buildCodeblocks(context, subband, blocksDimensions, 1);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          subband = {};
          subband.type = 'HH';
          subband.tbx0 = Math.ceil(component.tcx0 / bscale - 0.5);
          subband.tby0 = Math.ceil(component.tcy0 / bscale - 0.5);
          subband.tbx1 = Math.ceil(component.tcx1 / bscale - 0.5);
          subband.tby1 = Math.ceil(component.tcy1 / bscale - 0.5);
          subband.resolution = resolution;
          subband.indexInTileComponent = indexInTileComponent++;
          buildCodeblocks(context, subband, blocksDimensions, 2);
          subbands.push(subband);
          resolutionSubbands.push(subband);

          resolution.subbands = resolutionSubbands;
        }
      }
      component.resolutions = resolutions;
      component.subbands = subbands;
    }
    // Generate the packets sequence
    var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;
    switch (progressionOrder) {
      case 0:
        tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);
        break;
      case 1:
        tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);
        break;
      case 2:
        tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);
        break;
      case 3:
        tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);
        break;
      case 4:
        tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);
        break;
      default:
        throw new JpxError('Unsupported progression order ' + progressionOrder);
    }
  }
  function parseTilePackets(context, data, offset, dataLength) {
    var position = 0;
    var buffer,
        bufferSize = 0,
        skipNextBit = false;
    function readBits(count) {
      while (bufferSize < count) {
        var b = data[offset + position];
        position++;
        if (skipNextBit) {
          buffer = buffer << 7 | b;
          bufferSize += 7;
          skipNextBit = false;
        } else {
          buffer = buffer << 8 | b;
          bufferSize += 8;
        }
        if (b === 0xFF) {
          skipNextBit = true;
        }
      }
      bufferSize -= count;
      return buffer >>> bufferSize & (1 << count) - 1;
    }
    function skipMarkerIfEqual(value) {
      if (data[offset + position - 1] === 0xFF && data[offset + position] === value) {
        skipBytes(1);
        return true;
      } else if (data[offset + position] === 0xFF && data[offset + position + 1] === value) {
        skipBytes(2);
        return true;
      }
      return false;
    }
    function skipBytes(count) {
      position += count;
    }
    function alignToByte() {
      bufferSize = 0;
      if (skipNextBit) {
        position++;
        skipNextBit = false;
      }
    }
    function readCodingpasses() {
      if (readBits(1) === 0) {
        return 1;
      }
      if (readBits(1) === 0) {
        return 2;
      }
      var value = readBits(2);
      if (value < 3) {
        return value + 3;
      }
      value = readBits(5);
      if (value < 31) {
        return value + 6;
      }
      value = readBits(7);
      return value + 37;
    }
    var tileIndex = context.currentTile.index;
    var tile = context.tiles[tileIndex];
    var sopMarkerUsed = context.COD.sopMarkerUsed;
    var ephMarkerUsed = context.COD.ephMarkerUsed;
    var packetsIterator = tile.packetsIterator;
    while (position < dataLength) {
      alignToByte();
      if (sopMarkerUsed && skipMarkerIfEqual(0x91)) {
        // Skip also marker segment length and packet sequence ID
        skipBytes(4);
      }
      var packet = packetsIterator.nextPacket();
      if (!readBits(1)) {
        continue;
      }
      var layerNumber = packet.layerNumber;
      var queue = [],
          codeblock;
      for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {
        codeblock = packet.codeblocks[i];
        var precinct = codeblock.precinct;
        var codeblockColumn = codeblock.cbx - precinct.cbxMin;
        var codeblockRow = codeblock.cby - precinct.cbyMin;
        var codeblockIncluded = false;
        var firstTimeInclusion = false;
        var valueReady;
        if (codeblock['included'] !== undefined) {
          codeblockIncluded = !!readBits(1);
        } else {
          // reading inclusion tree
          precinct = codeblock.precinct;
          var inclusionTree, zeroBitPlanesTree;
          if (precinct['inclusionTree'] !== undefined) {
            inclusionTree = precinct.inclusionTree;
          } else {
            // building inclusion and zero bit-planes trees
            var width = precinct.cbxMax - precinct.cbxMin + 1;
            var height = precinct.cbyMax - precinct.cbyMin + 1;
            inclusionTree = new InclusionTree(width, height, layerNumber);
            zeroBitPlanesTree = new TagTree(width, height);
            precinct.inclusionTree = inclusionTree;
            precinct.zeroBitPlanesTree = zeroBitPlanesTree;
          }

          if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {
            while (true) {
              if (readBits(1)) {
                valueReady = !inclusionTree.nextLevel();
                if (valueReady) {
                  codeblock.included = true;
                  codeblockIncluded = firstTimeInclusion = true;
                  break;
                }
              } else {
                inclusionTree.incrementValue(layerNumber);
                break;
              }
            }
          }
        }
        if (!codeblockIncluded) {
          continue;
        }
        if (firstTimeInclusion) {
          zeroBitPlanesTree = precinct.zeroBitPlanesTree;
          zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);
          while (true) {
            if (readBits(1)) {
              valueReady = !zeroBitPlanesTree.nextLevel();
              if (valueReady) {
                break;
              }
            } else {
              zeroBitPlanesTree.incrementValue();
            }
          }
          codeblock.zeroBitPlanes = zeroBitPlanesTree.value;
        }
        var codingpasses = readCodingpasses();
        while (readBits(1)) {
          codeblock.Lblock++;
        }
        var codingpassesLog2 = (0, _util.log2)(codingpasses);
        // rounding down log2
        var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;
        var codedDataLength = readBits(bits);
        queue.push({
          codeblock: codeblock,
          codingpasses: codingpasses,
          dataLength: codedDataLength
        });
      }
      alignToByte();
      if (ephMarkerUsed) {
        skipMarkerIfEqual(0x92);
      }
      while (queue.length > 0) {
        var packetItem = queue.shift();
        codeblock = packetItem.codeblock;
        if (codeblock['data'] === undefined || codeblock.dataInvalidationId !== context.dataInvalidationId) {
          codeblock.data = [];
          codeblock.parentSubband.codeblocksWithData.push(codeblock);
          codeblock.parentSubband.dataInvalidationId = context.dataInvalidationId;
          codeblock.dataInvalidationId = context.dataInvalidationId;
        }
        codeblock.data.push({
          data: data,
          start: offset + position,
          end: offset + position + packetItem.dataLength,
          codingpasses: packetItem.codingpasses
        });
        codeblock.precinct.pixelsPrecinct.hasData = true;
        position += packetItem.dataLength;
      }
    }
    return position;
  }
  function getCoefficientsOfResolution(resolution, spqcds, scalarExpounded, precision, guardBits, reversible, segmentationSymbolUsed, regionInLevel, dataInvalidationId) {
    // Allocate space for the whole sublevel.
    var arrayWidth = regionInLevel.x1 - regionInLevel.x0;
    var arrayHeight = regionInLevel.y1 - regionInLevel.y0;
    var coefficients = new Float32Array(arrayWidth * arrayHeight);
    var regionInSubband;
    var regionTmp = { x0: 0, x1: 0, y0: 0, y1: 1 };

    if (resolution.hasDecodedCoefficients && resolution.dataInvalidationId === dataInvalidationId) {

      var isAllCoefficientsCopied = copyDecodedCoefficients(resolution, regionInLevel, coefficients, arrayWidth, dataInvalidationId);

      if (isAllCoefficientsCopied) {
        return coefficients;
      }
    }

    for (var s = 0, ss = resolution.subbands.length; s < ss; s++) {
      var subband = resolution.subbands[s];
      if (subband.dataInvalidationId !== dataInvalidationId) {
        continue;
      }

      var interleave = subband.type !== 'LL';
      var regionInSubband;
      if (!interleave) {
        regionInSubband = regionInLevel;
      } else {
        regionTmp.x0 = (regionInLevel.x0 - resolution.trx0) / 2 + subband.tbx0;
        regionTmp.y0 = (regionInLevel.y0 - resolution.try0) / 2 + subband.tby0;
        regionTmp.x1 = (regionInLevel.x1 - resolution.trx0) / 2 + subband.tbx0;
        regionTmp.y1 = (regionInLevel.y1 - resolution.try0) / 2 + subband.tby0;
        regionInSubband = regionTmp;
      }

      // In the first resolution level, copyCoefficients will fill the
      // whole array with coefficients. In the succeeding passes,
      // copyCoefficients will consecutively fill in the values that belong
      // to the interleaved positions of the HL, LH, and HH coefficients.
      // The LL coefficients will then be interleaved in Transform.iterate().

      var x0 = subband.tbx0;
      var y0 = subband.tby0;
      var width = subband.tbx1 - subband.tbx0;
      var codeblocks = subband.codeblocksWithData;
      var right = subband.type.charAt(0) === 'H' ? 1 : 0;
      var bottom = subband.type.charAt(1) === 'H' ? arrayWidth : 0;
      var interleaveOffset = right + bottom;
      var interleave = subband.type !== 'LL';
      var targetStep = interleave ? 2 : 1;
      var targetRowStep = arrayWidth * targetStep;

      var regionInCodeblock = {
        x0: 0,
        y0: 0,
        x1: 0,
        y1: 0
      };

      var mu, epsilon;
      if (!scalarExpounded) {
        // formula E-5
        mu = spqcds[0].mu;
        var r = subband.resolution.resLevel;
        epsilon = spqcds[0].epsilon + (r > 0 ? 1 - r : 0);
      } else {
        var indexInTileComponent = subband.indexInTileComponent;
        mu = spqcds[indexInTileComponent].mu;
        epsilon = spqcds[indexInTileComponent].epsilon;
      }

      var gainLog2 = SubbandsGainLog2[subband.type];

      // calculate quantization coefficient (Section E.1.1.1)
      var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);
      var mb = guardBits + epsilon - 1;

      for (var i = 0, ii = codeblocks.length; i < ii; ++i) {
        var codeblock = codeblocks[i];
        if (codeblock.precinct.pixelsPrecinct.decodedCoefficients && codeblock.dataInvalidationId === dataInvalidationId) {
          continue;
        }

        regionInCodeblock.x0 = Math.max(codeblock.tbx0_, regionInSubband.x0);
        regionInCodeblock.y0 = Math.max(codeblock.tby0_, regionInSubband.y0);
        regionInCodeblock.x1 = Math.min(codeblock.tbx1_, regionInSubband.x1);
        regionInCodeblock.y1 = Math.min(codeblock.tby1_, regionInSubband.y1);
        if (regionInCodeblock.x0 >= regionInCodeblock.x1 || regionInCodeblock.y0 >= regionInCodeblock.y1) {
          continue;
        }

        var targetStartOffset = (regionInCodeblock.x0 - regionInSubband.x0) * targetStep + (regionInCodeblock.y0 - regionInSubband.y0) * targetRowStep + interleaveOffset;

        var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;
        var blockHeight = codeblock.tby1_ - codeblock.tby0_;
        var bitModel, currentCodingpassType;
        bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);
        currentCodingpassType = 2; // first bit plane starts from cleanup

        // collect data
        var data = codeblock.data,
            totalLength = 0,
            codingpasses = 0;
        var j, jj, dataItem;
        for (j = 0, jj = data.length; j < jj; j++) {
          dataItem = data[j];
          totalLength += dataItem.end - dataItem.start;
          codingpasses += dataItem.codingpasses;
        }
        var encodedData = new Uint8Array(totalLength);
        var position = 0;
        for (j = 0, jj = data.length; j < jj; j++) {
          dataItem = data[j];
          var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);
          encodedData.set(chunk, position);
          position += chunk.length;
        }
        // decoding the item
        var decoder = new _arithmetic_decoder.ArithmeticDecoder(encodedData, 0, totalLength);
        bitModel.setDecoder(decoder);

        for (j = 0; j < codingpasses; j++) {
          switch (currentCodingpassType) {
            case 0:
              bitModel.runSignificancePropagationPass();
              break;
            case 1:
              bitModel.runMagnitudeRefinementPass();
              break;
            case 2:
              bitModel.runCleanupPass();
              if (segmentationSymbolUsed) {
                bitModel.checkSegmentationSymbol();
              }
              break;
          }
          currentCodingpassType = (currentCodingpassType + 1) % 3;
        }

        var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;
        var sign = bitModel.coefficentsSign;
        var magnitude = bitModel.coefficentsMagnitude;
        var bitsDecoded = bitModel.bitsDecoded;
        var magnitudeCorrection = reversible ? 0 : 0.5;
        var k, n, nb;
        var codeblockRowStart = regionInCodeblock.x0 - codeblock.tbx0_ + (regionInCodeblock.y0 - codeblock.tby0_) * blockWidth;
        var targetRowStart = targetStartOffset;
        // Do the interleaving of Section F.3.3 here, so we do not need
        // to copy later. LL level is not interleaved, just copied.
        for (var j = regionInCodeblock.y0; j < regionInCodeblock.y1; j++) {
          var position = codeblockRowStart;
          var pos = targetRowStart;
          codeblockRowStart += blockWidth;
          targetRowStart += targetRowStep;

          for (k = regionInCodeblock.x0; k < regionInCodeblock.x1; k++) {
            n = magnitude[position];
            if (n !== 0) {
              n = (n + magnitudeCorrection) * delta;
              if (sign[position] !== 0) {
                n = -n;
              }
              nb = bitsDecoded[position];
              if (reversible && nb >= mb) {
                coefficients[pos] = n;
              } else {
                coefficients[pos] = n * (1 << mb - nb);
              }
            }
            offset++;
            position++;
            pos += targetStep;
          }
          offset += width - blockWidth;
        }
      }
    }
    return coefficients;
  }
  function copyDecodedCoefficients(resolution, regionInLevel, coefficients, arrayWidth, dataInvalidationId) {
    var isAllCoefficientsCopied = true;
    var subbands = resolution.subbands;
    var interleave = subbands[0].type !== 'LL';

    var kk = resolution.pixelsPrecinctsWithDecodedCoefficients.length;
    for (var k = 0; k < kk; ++k) {
      var pixelsPrecinct = resolution.pixelsPrecinctsWithDecodedCoefficients[k];
      var precinctRegionInLevel = calculateRegionInLevelOfPixelsPrecinct(pixelsPrecinct, resolution);
      var x0 = Math.max(precinctRegionInLevel.x0, regionInLevel.x0);
      var y0 = Math.max(precinctRegionInLevel.y0, regionInLevel.y0);
      var x1 = Math.min(precinctRegionInLevel.x1, regionInLevel.x1);
      var y1 = Math.min(precinctRegionInLevel.y1, regionInLevel.y1);
      if (x0 >= x1 || y0 >= y1) {
        continue;
      }
      if (pixelsPrecinct.dataInvalidationId !== dataInvalidationId) {
        continue;
      }
      if (!pixelsPrecinct['decodedCoefficients']) {
        if (pixelsPrecinct.hasData) {
          isAllCoefficientsCopied = false;
        }
        continue;
      }
      var decoded = pixelsPrecinct.decodedCoefficients;
      var width = x1 - x0;
      var sourceWidth = precinctRegionInLevel.x1 - precinctRegionInLevel.x0;
      var targetWidth = arrayWidth;
      var source = x0 - precinctRegionInLevel.x0 + (y0 - precinctRegionInLevel.y0) * sourceWidth;
      var target = x0 - regionInLevel.x0 + (y0 - regionInLevel.y0) * targetWidth;

      for (var row = y0; row < y1; ++row) {
        coefficients.set(decoded.subarray(source, source + width), target);
        source += sourceWidth;
        target += targetWidth;
      }
    }

    return isAllCoefficientsCopied;
  }
  function transformTile(context, tile, c) {
    var component = tile.components[c];
    var codingStyleParameters = component.codingStyleParameters;

    var quantizationParameters = component.quantizationParameters;
    var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;
    var spqcds = quantizationParameters.SPqcds;
    var scalarExpounded = quantizationParameters.scalarExpounded;
    var guardBits = quantizationParameters.guardBits;
    var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;
    var precision = context.components[c].precision;

    var reversible = codingStyleParameters.reversibleTransformation;
    var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();

    var relativeRegionInTile;
    if (context.regionToParse !== undefined) {
      var x1 = Math.min(component.tcx1, context.regionToParse.right);
      var y1 = Math.min(component.tcy1, context.regionToParse.bottom);
      relativeRegionInTile = {
        x0: Math.max(0, context.regionToParse.left - component.tcx0),
        y0: Math.max(0, context.regionToParse.top - component.tcy0),
        x1: x1 - component.tcx0,
        y1: y1 - component.tcy0
      };
    }

    var subbandCoefficients = [];
    var regionInLevel = { x0: 0, y0: 0, x1: 0, y1: 0 };
    var region = { x0: 0, y0: 0, x1: 0, y1: 0 };

    for (var i = 0; i <= decompositionLevelsCount; i++) {
      var resolution = component.resolutions[i];

      var levelWidth = resolution.trx1 - resolution.trx0;
      var levelHeight = resolution.try1 - resolution.try0;

      var regionInLevel;
      if (relativeRegionInTile === undefined) {
        regionInLevel.x0 = resolution.trx0;
        regionInLevel.y0 = resolution.try0;
        regionInLevel.x1 = resolution.trx1;
        regionInLevel.y1 = resolution.try1;
      } else {
        var scale = 1 << decompositionLevelsCount - i;
        var redundantCoeffs = 4;
        regionInLevel.x0 = Math.ceil(relativeRegionInTile.x0 / scale) - redundantCoeffs;
        regionInLevel.y0 = Math.ceil(relativeRegionInTile.y0 / scale) - redundantCoeffs;
        regionInLevel.x1 = Math.ceil(relativeRegionInTile.x1 / scale) + redundantCoeffs;
        regionInLevel.y1 = Math.ceil(relativeRegionInTile.y1 / scale) + redundantCoeffs;

        regionInLevel.x0 = 2 * Math.floor(regionInLevel.x0 / 2) + resolution.trx0;
        regionInLevel.y0 = 2 * Math.floor(regionInLevel.y0 / 2) + resolution.try0;
        regionInLevel.x1 = 2 * Math.floor(regionInLevel.x1 / 2) + resolution.trx0;
        regionInLevel.y1 = 2 * Math.floor(regionInLevel.y1 / 2) + resolution.try0;

        regionInLevel.x0 = Math.max(regionInLevel.x0, resolution.trx0);
        regionInLevel.y0 = Math.max(regionInLevel.y0, resolution.try0);
        regionInLevel.x1 = Math.min(regionInLevel.x1, resolution.trx1);
        regionInLevel.y1 = Math.min(regionInLevel.y1, resolution.try1);
      }

      var coefficients = getCoefficientsOfResolution(resolution, spqcds, scalarExpounded, precision, guardBits, reversible, segmentationSymbolUsed, regionInLevel, context.dataInvalidationId);

      var relativeRegionInLevel = {
        x0: regionInLevel.x0 - resolution.trx0,
        y0: regionInLevel.y0 - resolution.try0,
        x1: regionInLevel.x1 - resolution.trx0,
        y1: regionInLevel.y1 - resolution.try0
      };
      subbandCoefficients.push({
        levelWidth: levelWidth,
        levelHeight: levelHeight,
        items: coefficients,
        relativeRegionInLevel: relativeRegionInLevel
      });
    }
    var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);
    var relativeRegionInLevel = result.relativeRegionInLevel;

    if (context.regionToParse !== undefined) {
      var needCropTile = relativeRegionInTile.x0 !== relativeRegionInLevel.x0 || relativeRegionInTile.y0 !== relativeRegionInLevel.y0 || relativeRegionInTile.x1 !== relativeRegionInLevel.x1 || relativeRegionInTile.y1 !== relativeRegionInLevel.y1;
      if (needCropTile) {
        var croppedItems = cropTile(relativeRegionInTile, relativeRegionInLevel, result.items);
        return {
          left: component.tcx0 + relativeRegionInTile.x0,
          top: component.tcy0 + relativeRegionInTile.y0,
          width: relativeRegionInTile.x1 - relativeRegionInTile.x0,
          height: relativeRegionInTile.y1 - relativeRegionInTile.y0,
          items: croppedItems
        };
      }
    }
    return {
      left: component.tcx0,
      top: component.tcy0,
      width: relativeRegionInLevel.x1 - relativeRegionInLevel.x0,
      height: relativeRegionInLevel.y1 - relativeRegionInLevel.y0,
      items: result.items
    };
  }
  function cropTile(relativeRegionInTile, relativeRegionInLevel, items) {
    // Crop the 4 redundant pixels used for the DWT

    var width = relativeRegionInTile.x1 - relativeRegionInTile.x0;
    var height = relativeRegionInTile.y1 - relativeRegionInTile.y0;
    var sourceWidth = relativeRegionInLevel.x1 - relativeRegionInLevel.x0;

    var result = new Float32Array(width * height);

    var redundantRowsTop = relativeRegionInTile.y0 - relativeRegionInLevel.y0;
    var redundantColumnsLeft = relativeRegionInTile.x0 - relativeRegionInLevel.x0;

    var targetOffset = 0;
    var sourceOffset = redundantColumnsLeft + sourceWidth * redundantRowsTop;
    for (var i = 0; i < height; ++i) {
      var sourceEnd = sourceOffset + width;

      result.set(items.subarray(sourceOffset, sourceEnd), targetOffset);

      sourceOffset += sourceWidth;
      targetOffset += width;
    }

    return result;
  }
  function transformComponents(context) {
    var siz = context.SIZ;
    var components = context.components;
    var componentsCount = siz.Csiz;
    var resultImages = [];
    for (var i = 0, ii = context.tiles.length; i < ii; i++) {
      var tile = context.tiles[i];

      if (context.regionToParse !== undefined) {
        if (context.regionToParse.left >= tile.tx1 || context.regionToParse.top >= tile.ty1 || context.regionToParse.right <= tile.tx0 || context.regionToParse.bottom <= tile.ty0) {
          continue;
        }
      }

      var transformedTiles = [];
      var c;
      for (c = 0; c < componentsCount; c++) {
        transformedTiles[c] = transformTile(context, tile, c);
      }
      var tile0 = transformedTiles[0];
      var out = new Uint8ClampedArray(tile0.items.length * componentsCount);
      var result = {
        left: tile0.left,
        top: tile0.top,
        width: tile0.width,
        height: tile0.height,
        items: out
      };

      // Section G.2.2 Inverse multi component transform
      var shift, offset;
      var pos = 0,
          j,
          jj,
          y0,
          y1,
          y2;
      if (tile.codingStyleDefaultParameters.multipleComponentTransform) {
        var fourComponents = componentsCount === 4;
        var y0items = transformedTiles[0].items;
        var y1items = transformedTiles[1].items;
        var y2items = transformedTiles[2].items;
        var y3items = fourComponents ? transformedTiles[3].items : null;

        // HACK: The multiple component transform formulas below assume that
        // all components have the same precision. With this in mind, we
        // compute shift and offset only once.
        shift = components[0].precision - 8;
        offset = (128 << shift) + 0.5;

        var component0 = tile.components[0];
        var alpha01 = componentsCount - 3;
        jj = y0items.length;
        if (!component0.codingStyleParameters.reversibleTransformation) {
          // inverse irreversible multiple component transform
          for (j = 0; j < jj; j++, pos += alpha01) {
            y0 = y0items[j] + offset;
            y1 = y1items[j];
            y2 = y2items[j];
            out[pos++] = y0 + 1.402 * y2 >> shift;
            out[pos++] = y0 - 0.34413 * y1 - 0.71414 * y2 >> shift;
            out[pos++] = y0 + 1.772 * y1 >> shift;
          }
        } else {
          // inverse reversible multiple component transform
          for (j = 0; j < jj; j++, pos += alpha01) {
            y0 = y0items[j] + offset;
            y1 = y1items[j];
            y2 = y2items[j];
            var g = y0 - (y2 + y1 >> 2);

            out[pos++] = g + y2 >> shift;
            out[pos++] = g >> shift;
            out[pos++] = g + y1 >> shift;
          }
        }
        if (fourComponents) {
          for (j = 0, pos = 3; j < jj; j++, pos += 4) {
            out[pos] = y3items[j] + offset >> shift;
          }
        }
      } else {
        // no multi-component transform
        for (c = 0; c < componentsCount; c++) {
          var items = transformedTiles[c].items;
          shift = components[c].precision - 8;
          offset = (128 << shift) + 0.5;
          for (pos = c, j = 0, jj = items.length; j < jj; j++) {
            out[pos] = items[j] + offset >> shift;
            pos += componentsCount;
          }
        }
      }
      resultImages.push(result);
    }
    return resultImages;
  }
  function initializeTile(context, tileIndex) {
    var siz = context.SIZ;
    var componentsCount = siz.Csiz;
    var tile = context.tiles[tileIndex];
    for (var c = 0; c < componentsCount; c++) {
      var component = tile.components[c];
      var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;
      component.quantizationParameters = qcdOrQcc;
      var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;
      component.codingStyleParameters = codOrCoc;
    }
    tile.codingStyleDefaultParameters = context.currentTile.COD;
  }

  // Section B.10.2 Tag trees
  var TagTree = function TagTreeClosure() {
    function TagTree(width, height) {
      var levelsLength = (0, _util.log2)(Math.max(width, height)) + 1;
      this.levels = [];
      for (var i = 0; i < levelsLength; i++) {
        var level = {
          width: width,
          height: height,
          items: []
        };
        this.levels.push(level);
        width = Math.ceil(width / 2);
        height = Math.ceil(height / 2);
      }
    }
    TagTree.prototype = {
      reset: function TagTree_reset(i, j) {
        var currentLevel = 0,
            value = 0,
            level;
        while (currentLevel < this.levels.length) {
          level = this.levels[currentLevel];
          var index = i + j * level.width;
          if (level.items[index] !== undefined) {
            value = level.items[index];
            break;
          }
          level.index = index;
          i >>= 1;
          j >>= 1;
          currentLevel++;
        }
        currentLevel--;
        level = this.levels[currentLevel];
        level.items[level.index] = value;
        this.currentLevel = currentLevel;
        delete this.value;
      },
      incrementValue: function TagTree_incrementValue() {
        var level = this.levels[this.currentLevel];
        level.items[level.index]++;
      },
      nextLevel: function TagTree_nextLevel() {
        var currentLevel = this.currentLevel;
        var level = this.levels[currentLevel];
        var value = level.items[level.index];
        currentLevel--;
        if (currentLevel < 0) {
          this.value = value;
          return false;
        }

        this.currentLevel = currentLevel;
        level = this.levels[currentLevel];
        level.items[level.index] = value;
        return true;
      }
    };
    return TagTree;
  }();

  var InclusionTree = function InclusionTreeClosure() {
    function InclusionTree(width, height, defaultValue) {
      var levelsLength = (0, _util.log2)(Math.max(width, height)) + 1;
      this.levels = [];
      for (var i = 0; i < levelsLength; i++) {
        var items = new Uint8Array(width * height);
        for (var j = 0, jj = items.length; j < jj; j++) {
          items[j] = defaultValue;
        }

        var level = {
          width: width,
          height: height,
          items: items
        };
        this.levels.push(level);

        width = Math.ceil(width / 2);
        height = Math.ceil(height / 2);
      }
    }
    InclusionTree.prototype = {
      reset: function InclusionTree_reset(i, j, stopValue) {
        var currentLevel = 0;
        while (currentLevel < this.levels.length) {
          var level = this.levels[currentLevel];
          var index = i + j * level.width;
          level.index = index;
          var value = level.items[index];

          if (value === 0xFF) {
            break;
          }

          if (value > stopValue) {
            this.currentLevel = currentLevel;
            // already know about this one, propagating the value to top levels
            this.propagateValues();
            return false;
          }

          i >>= 1;
          j >>= 1;
          currentLevel++;
        }
        this.currentLevel = currentLevel - 1;
        return true;
      },
      incrementValue: function InclusionTree_incrementValue(stopValue) {
        var level = this.levels[this.currentLevel];
        level.items[level.index] = stopValue + 1;
        this.propagateValues();
      },
      propagateValues: function InclusionTree_propagateValues() {
        var levelIndex = this.currentLevel;
        var level = this.levels[levelIndex];
        var currentValue = level.items[level.index];
        while (--levelIndex >= 0) {
          level = this.levels[levelIndex];
          level.items[level.index] = currentValue;
        }
      },
      nextLevel: function InclusionTree_nextLevel() {
        var currentLevel = this.currentLevel;
        var level = this.levels[currentLevel];
        var value = level.items[level.index];
        level.items[level.index] = 0xFF;
        currentLevel--;
        if (currentLevel < 0) {
          return false;
        }

        this.currentLevel = currentLevel;
        level = this.levels[currentLevel];
        level.items[level.index] = value;
        return true;
      }
    };
    return InclusionTree;
  }();

  // Section D. Coefficient bit modeling
  var BitModel = function BitModelClosure() {
    var UNIFORM_CONTEXT = 17;
    var RUNLENGTH_CONTEXT = 18;
    // Table D-1
    // The index is binary presentation: 0dddvvhh, ddd - sum of Di (0..4),
    // vv - sum of Vi (0..2), and hh - sum of Hi (0..2)
    var LLAndLHContextsLabel = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]);
    var HLContextLabel = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]);
    var HHContextLabel = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);

    function BitModel(width, height, subband, zeroBitPlanes, mb) {
      this.width = width;
      this.height = height;

      this.contextLabelTable = subband === 'HH' ? HHContextLabel : subband === 'HL' ? HLContextLabel : LLAndLHContextsLabel;

      var coefficientCount = width * height;

      // coefficients outside the encoding region treated as insignificant
      // add border state cells for significanceState
      this.neighborsSignificance = new Uint8Array(coefficientCount);
      this.coefficentsSign = new Uint8Array(coefficientCount);
      this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) : mb > 6 ? new Uint16Array(coefficientCount) : new Uint8Array(coefficientCount);
      this.processingFlags = new Uint8Array(coefficientCount);

      var bitsDecoded = new Uint8Array(coefficientCount);
      if (zeroBitPlanes !== 0) {
        for (var i = 0; i < coefficientCount; i++) {
          bitsDecoded[i] = zeroBitPlanes;
        }
      }
      this.bitsDecoded = bitsDecoded;

      this.reset();
    }

    BitModel.prototype = {
      setDecoder: function BitModel_setDecoder(decoder) {
        this.decoder = decoder;
      },
      reset: function BitModel_reset() {
        // We have 17 contexts that are accessed via context labels,
        // plus the uniform and runlength context.
        this.contexts = new Int8Array(19);

        // Contexts are packed into 1 byte:
        // highest 7 bits carry the index, lowest bit carries mps
        this.contexts[0] = 4 << 1 | 0;
        this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;
        this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;
      },
      setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {
        var neighborsSignificance = this.neighborsSignificance;
        var width = this.width,
            height = this.height;
        var left = column > 0;
        var right = column + 1 < width;
        var i;

        if (row > 0) {
          i = index - width;
          if (left) {
            neighborsSignificance[i - 1] += 0x10;
          }
          if (right) {
            neighborsSignificance[i + 1] += 0x10;
          }
          neighborsSignificance[i] += 0x04;
        }

        if (row + 1 < height) {
          i = index + width;
          if (left) {
            neighborsSignificance[i - 1] += 0x10;
          }
          if (right) {
            neighborsSignificance[i + 1] += 0x10;
          }
          neighborsSignificance[i] += 0x04;
        }

        if (left) {
          neighborsSignificance[index - 1] += 0x01;
        }
        if (right) {
          neighborsSignificance[index + 1] += 0x01;
        }
        neighborsSignificance[index] |= 0x80;
      },
      runSignificancePropagationPass: function BitModel_runSignificancePropagationPass() {
        var decoder = this.decoder;
        var width = this.width,
            height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var neighborsSignificance = this.neighborsSignificance;
        var processingFlags = this.processingFlags;
        var contexts = this.contexts;
        var labels = this.contextLabelTable;
        var bitsDecoded = this.bitsDecoded;
        var processedInverseMask = ~1;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;

        for (var i0 = 0; i0 < height; i0 += 4) {
          for (var j = 0; j < width; j++) {
            var index = i0 * width + j;
            for (var i1 = 0; i1 < 4; i1++, index += width) {
              var i = i0 + i1;
              if (i >= height) {
                break;
              }
              // clear processed flag first
              processingFlags[index] &= processedInverseMask;

              if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {
                continue;
              }

              var contextLabel = labels[neighborsSignificance[index]];
              var decision = decoder.readBit(contexts, contextLabel);
              if (decision) {
                var sign = this.decodeSignBit(i, j, index);
                coefficentsSign[index] = sign;
                coefficentsMagnitude[index] = 1;
                this.setNeighborsSignificance(i, j, index);
                processingFlags[index] |= firstMagnitudeBitMask;
              }
              bitsDecoded[index]++;
              processingFlags[index] |= processedMask;
            }
          }
        }
      },
      decodeSignBit: function BitModel_decodeSignBit(row, column, index) {
        var width = this.width,
            height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var contribution, sign0, sign1, significance1;
        var contextLabel, decoded;

        // calculate horizontal contribution
        significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;
        if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {
          sign1 = coefficentsSign[index + 1];
          if (significance1) {
            sign0 = coefficentsSign[index - 1];
            contribution = 1 - sign1 - sign0;
          } else {
            contribution = 1 - sign1 - sign1;
          }
        } else if (significance1) {
          sign0 = coefficentsSign[index - 1];
          contribution = 1 - sign0 - sign0;
        } else {
          contribution = 0;
        }
        var horizontalContribution = 3 * contribution;

        // calculate vertical contribution and combine with the horizontal
        significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;
        if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {
          sign1 = coefficentsSign[index + width];
          if (significance1) {
            sign0 = coefficentsSign[index - width];
            contribution = 1 - sign1 - sign0 + horizontalContribution;
          } else {
            contribution = 1 - sign1 - sign1 + horizontalContribution;
          }
        } else if (significance1) {
          sign0 = coefficentsSign[index - width];
          contribution = 1 - sign0 - sign0 + horizontalContribution;
        } else {
          contribution = horizontalContribution;
        }

        if (contribution >= 0) {
          contextLabel = 9 + contribution;
          decoded = this.decoder.readBit(this.contexts, contextLabel);
        } else {
          contextLabel = 9 - contribution;
          decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;
        }
        return decoded;
      },
      runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {
        var decoder = this.decoder;
        var width = this.width,
            height = this.height;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var neighborsSignificance = this.neighborsSignificance;
        var contexts = this.contexts;
        var bitsDecoded = this.bitsDecoded;
        var processingFlags = this.processingFlags;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;
        var length = width * height;
        var width4 = width * 4;

        for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {
          indexNext = Math.min(length, index0 + width4);
          for (var j = 0; j < width; j++) {
            for (var index = index0 + j; index < indexNext; index += width) {

              // significant but not those that have just become
              if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                continue;
              }

              var contextLabel = 16;
              if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {
                processingFlags[index] ^= firstMagnitudeBitMask;
                // first refinement
                var significance = neighborsSignificance[index] & 127;
                contextLabel = significance === 0 ? 15 : 14;
              }

              var bit = decoder.readBit(contexts, contextLabel);
              coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;
              bitsDecoded[index]++;
              processingFlags[index] |= processedMask;
            }
          }
        }
      },
      runCleanupPass: function BitModel_runCleanupPass() {
        var decoder = this.decoder;
        var width = this.width,
            height = this.height;
        var neighborsSignificance = this.neighborsSignificance;
        var coefficentsMagnitude = this.coefficentsMagnitude;
        var coefficentsSign = this.coefficentsSign;
        var contexts = this.contexts;
        var labels = this.contextLabelTable;
        var bitsDecoded = this.bitsDecoded;
        var processingFlags = this.processingFlags;
        var processedMask = 1;
        var firstMagnitudeBitMask = 2;
        var oneRowDown = width;
        var twoRowsDown = width * 2;
        var threeRowsDown = width * 3;
        var iNext;
        for (var i0 = 0; i0 < height; i0 = iNext) {
          iNext = Math.min(i0 + 4, height);
          var indexBase = i0 * width;
          var checkAllEmpty = i0 + 3 < height;
          for (var j = 0; j < width; j++) {
            var index0 = indexBase + j;
            // using the property: labels[neighborsSignificance[index]] === 0
            // when neighborsSignificance[index] === 0
            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;
            var i1 = 0,
                index = index0;
            var i = i0,
                sign;
            if (allEmpty) {
              var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);
              if (!hasSignificantCoefficent) {
                bitsDecoded[index0]++;
                bitsDecoded[index0 + oneRowDown]++;
                bitsDecoded[index0 + twoRowsDown]++;
                bitsDecoded[index0 + threeRowsDown]++;
                continue; // next column
              }
              i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
              if (i1 !== 0) {
                i = i0 + i1;
                index += i1 * width;
              }

              sign = this.decodeSignBit(i, j, index);
              coefficentsSign[index] = sign;
              coefficentsMagnitude[index] = 1;
              this.setNeighborsSignificance(i, j, index);
              processingFlags[index] |= firstMagnitudeBitMask;

              index = index0;
              for (var i2 = i0; i2 <= i; i2++, index += width) {
                bitsDecoded[index]++;
              }

              i1++;
            }
            for (i = i0 + i1; i < iNext; i++, index += width) {
              if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {
                continue;
              }

              var contextLabel = labels[neighborsSignificance[index]];
              var decision = decoder.readBit(contexts, contextLabel);
              if (decision === 1) {
                sign = this.decodeSignBit(i, j, index);
                coefficentsSign[index] = sign;
                coefficentsMagnitude[index] = 1;
                this.setNeighborsSignificance(i, j, index);
                processingFlags[index] |= firstMagnitudeBitMask;
              }
              bitsDecoded[index]++;
            }
          }
        }
      },
      checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {
        var decoder = this.decoder;
        var contexts = this.contexts;
        var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);
        if (symbol !== 0xA) {
          throw new JpxError('Invalid segmentation symbol');
        }
      }
    };

    return BitModel;
  }();

  // Section F, Discrete wavelet transformation
  var Transform = function TransformClosure() {
    function Transform() {}

    Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {
      var ll = subbands[0];
      for (var i = 1, ii = subbands.length; i < ii; i++) {
        ll = this.iterate(ll, subbands[i], u0, v0);
      }
      return ll;
    };
    Transform.prototype.extend = function extend(buffer, offset, size) {
      // Section F.3.7 extending... using max extension of 4
      var i1 = offset - 1,
          j1 = offset + 1;
      var i2 = offset + size - 2,
          j2 = offset + size;
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1--] = buffer[j1++];
      buffer[j2++] = buffer[i2--];
      buffer[i1] = buffer[j1];
      buffer[j2] = buffer[i2];
    };
    Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {
      var levelRegion = hl_lh_hh.relativeRegionInLevel;
      if (ll.relativeRegionInLevel.x0 * 2 > levelRegion.x0 || ll.relativeRegionInLevel.y0 * 2 > levelRegion.y0 || ll.relativeRegionInLevel.x1 * 2 < levelRegion.x1 || ll.relativeRegionInLevel.y1 * 2 < levelRegion.y1) {
        throw new Error('JPX Error: region in LL is smaller than region in ' + 'higher resolution level');
      }
      if (levelRegion.x0 % 2 !== 0 || levelRegion.y0 % 2 !== 0) {
        throw new Error('JPX Error: region in HL/LH/HH subbands begins in ' + 'odd coefficients');
      }
      var llItems = ll.items;
      var width = levelRegion.x1 - levelRegion.x0;
      var height = levelRegion.y1 - levelRegion.y0;
      var llWidth = ll.relativeRegionInLevel.x1 - ll.relativeRegionInLevel.x0;
      var llOffsetX = levelRegion.x0 / 2 - ll.relativeRegionInLevel.x0;
      var llOffsetY = levelRegion.y0 / 2 - ll.relativeRegionInLevel.y0;
      var llOffset = llOffsetX + llOffsetY * llWidth;
      var items = hl_lh_hh.items;
      var i, j, k, l, u, v;

      // Interleave LL according to Section F.3.3
      for (i = 0; i < height; i += 2) {
        l = i * width;
        k = llOffset + llWidth * i / 2;
        for (j = 0; j < width; j += 2, k++, l += 2) {
          items[l] = llItems[k];
        }
      }
      // The LL band is not needed anymore.
      llItems = ll.items = null;

      var bufferPadding = 4;
      var rowBuffer = new Float32Array(width + 2 * bufferPadding);

      // Section F.3.4 HOR_SR
      if (width === 1) {
        // if width = 1, when u0 even keep items as is, when odd divide by 2
        if ((u0 & 1) !== 0) {
          for (v = 0, k = 0; v < height; v++, k += width) {
            items[k] *= 0.5;
          }
        }
      } else {
        for (v = 0, k = 0; v < height; v++, k += width) {
          rowBuffer.set(items.subarray(k, k + width), bufferPadding);

          this.extend(rowBuffer, bufferPadding, width);
          this.filter(rowBuffer, bufferPadding, width);

          items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);
        }
      }

      // Accesses to the items array can take long, because it may not fit into
      // CPU cache and has to be fetched from main memory. Since subsequent
      // accesses to the items array are not local when reading columns, we
      // have a cache miss every time. To reduce cache misses, get up to
      // 'numBuffers' items at a time and store them into the individual
      // buffers. The colBuffers should be small enough to fit into CPU cache.
      var numBuffers = 16;
      var colBuffers = [];
      for (i = 0; i < numBuffers; i++) {
        colBuffers.push(new Float32Array(height + 2 * bufferPadding));
      }
      var b,
          currentBuffer = 0;
      ll = bufferPadding + height;

      // Section F.3.5 VER_SR
      if (height === 1) {
        // if height = 1, when v0 even keep items as is, when odd divide by 2
        if ((v0 & 1) !== 0) {
          for (u = 0; u < width; u++) {
            items[u] *= 0.5;
          }
        }
      } else {
        for (u = 0; u < width; u++) {
          // if we ran out of buffers, copy several image columns at once
          if (currentBuffer === 0) {
            numBuffers = Math.min(width - u, numBuffers);
            for (k = u, l = bufferPadding; l < ll; k += width, l++) {
              for (b = 0; b < numBuffers; b++) {
                colBuffers[b][l] = items[k + b];
              }
            }
            currentBuffer = numBuffers;
          }

          currentBuffer--;
          var buffer = colBuffers[currentBuffer];
          this.extend(buffer, bufferPadding, height);
          this.filter(buffer, bufferPadding, height);

          // If this is last buffer in this group of buffers, flush all buffers.
          if (currentBuffer === 0) {
            k = u - numBuffers + 1;
            for (l = bufferPadding; l < ll; k += width, l++) {
              for (b = 0; b < numBuffers; b++) {
                items[k + b] = colBuffers[b][l];
              }
            }
          }
        }
      }

      return {
        relativeRegionInLevel: levelRegion,
        width: width,
        height: height,
        items: items
      };
    };
    return Transform;
  }();

  // Section 3.8.2 Irreversible 9-7 filter
  var IrreversibleTransform = function IrreversibleTransformClosure() {
    function IrreversibleTransform() {
      Transform.call(this);
    }

    IrreversibleTransform.prototype = Object.create(Transform.prototype);
    IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {
      var len = length >> 1;
      offset = offset | 0;
      var j, n, current, next;

      var alpha = -1.586134342059924;
      var beta = -0.052980118572961;
      var gamma = 0.882911075530934;
      var delta = 0.443506852043971;
      var K = 1.230174104914001;
      var K_ = 1 / K;

      // step 1 is combined with step 3

      // step 2
      j = offset - 3;
      for (n = len + 4; n--; j += 2) {
        x[j] *= K_;
      }

      // step 1 & 3
      j = offset - 2;
      current = delta * x[j - 1];
      for (n = len + 3; n--; j += 2) {
        next = delta * x[j + 1];
        x[j] = K * x[j] - current - next;
        if (n--) {
          j += 2;
          current = delta * x[j + 1];
          x[j] = K * x[j] - current - next;
        } else {
          break;
        }
      }

      // step 4
      j = offset - 1;
      current = gamma * x[j - 1];
      for (n = len + 2; n--; j += 2) {
        next = gamma * x[j + 1];
        x[j] -= current + next;
        if (n--) {
          j += 2;
          current = gamma * x[j + 1];
          x[j] -= current + next;
        } else {
          break;
        }
      }

      // step 5
      j = offset;
      current = beta * x[j - 1];
      for (n = len + 1; n--; j += 2) {
        next = beta * x[j + 1];
        x[j] -= current + next;
        if (n--) {
          j += 2;
          current = beta * x[j + 1];
          x[j] -= current + next;
        } else {
          break;
        }
      }

      // step 6
      if (len !== 0) {
        j = offset + 1;
        current = alpha * x[j - 1];
        for (n = len; n--; j += 2) {
          next = alpha * x[j + 1];
          x[j] -= current + next;
          if (n--) {
            j += 2;
            current = alpha * x[j + 1];
            x[j] -= current + next;
          } else {
            break;
          }
        }
      }
    };

    return IrreversibleTransform;
  }();

  // Section 3.8.1 Reversible 5-3 filter
  var ReversibleTransform = function ReversibleTransformClosure() {
    function ReversibleTransform() {
      Transform.call(this);
    }

    ReversibleTransform.prototype = Object.create(Transform.prototype);
    ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {
      var len = length >> 1;
      offset = offset | 0;
      var j, n;

      for (j = offset, n = len + 1; n--; j += 2) {
        x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;
      }

      for (j = offset + 1, n = len; n--; j += 2) {
        x[j] += x[j - 1] + x[j + 1] >> 1;
      }
    };

    return ReversibleTransform;
  }();

  return JpxImage;
}();

exports.JpxImage = JpxImage;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jpx = __webpack_require__(2);

module.exports = PdfjsJpxContextPool;

function PdfjsJpxContextPool() {
    this._image = new _jpx.JpxImage();
    this._cachedContexts = [];
}

Object.defineProperty(PdfjsJpxContextPool.prototype, 'image', { get: function get() {
        return this._image;
    } });

PdfjsJpxContextPool.prototype.getContext = function getContext(headersCodestream) {
    var contextsOfSameLength = this._cachedContexts[headersCodestream.length];
    if (!contextsOfSameLength) {
        contextsOfSameLength = [];
        this._cachedContexts[headersCodestream.length] = contextsOfSameLength;
    }

    var contextIndex = 0;
    var isMatchingContext = false;
    while (contextIndex < contextsOfSameLength.length && !isMatchingContext) {
        var codestream = contextsOfSameLength[contextIndex].codestream;
        var i = 0;
        while (i < codestream.length && codestream[i] === headersCodestream[i]) {
            ++i;
        }

        isMatchingContext = i === codestream.length;
        ++contextIndex;
    }

    var currentContext;
    if (isMatchingContext) {
        currentContext = contextsOfSameLength[contextIndex - 1].context;
        this._image.invalidateData(currentContext);
    } else {
        currentContext = this._image.parseCodestream(headersCodestream, 0, headersCodestream.length, { isOnlyParseHeaders: true });
        contextsOfSameLength.push({
            codestream: headersCodestream,
            context: currentContext
        });
    }

    return currentContext;
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports.JpipImage = __webpack_require__(5);
module.exports.j2kExceptions = jGlobals.j2kExceptions;
module.exports.jpipExceptions = jGlobals.jpipExceptions;
module.exports.Internals = {
    PdfjsJpxDecoderLegacy: __webpack_require__(43),
    PdfjsJpxPixelsDecoder: __webpack_require__(46),
    PdfjsJpxCoefficientsDecoder: __webpack_require__(47),
    jpipRuntimeFactory: __webpack_require__(1),
    jGlobals: jGlobals
};

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jpipFactory = __webpack_require__(1);
var jGlobals = __webpack_require__(0);

module.exports = JpipImage;

// Type of worker??
var WORKER_TYPE_PIXELS = 1;
var WORKER_TYPE_COEFFS = 2;

var TASK_ABORTED_RESULT_PLACEHOLDER = 'aborted'; // Redundant?

///////////////////////////////
/* ANTHONY'S JSDOC TYPEDEF'S */

/**
 * @typedef {Object[]} Progressiveness
 * @property {number} minNumQualityLayers - The number of quality layers.
 * @property {'no' | 'force' | 'forceAll'} [forceMaxQuality='no'] -
 * Force delivering image at given quality level while later levels are still being worked on.
 */

/**
 * @typedef {Object} FetcherOptions Options to be supplied to the fetcher.
 * @property {string} url
 */

/**
 * @typedef {Object} JpipObjects
 * @property {Object} Reconstructor
 * @property {Object} PacketsDataCollector
 * @property {Object} QualityLayersCache
 * @property {Object} CodestreamStructure
 * @property {Object} DatabinsSaver
 * @property {Object} ParamsModifier
 * @property {Object} FetcherSharedObjects
 * @property {FetcherOptions} FetcherOptions
 * @property {Object} JpipFactory
 */

///////////////////////////////

/**
 * ??
 * @param {JpipObjects | FetcherOptions} arg - If first instance simply fetcher options which MUST have a URL, otherwise an already created JpipObjects.
 * @param {Object[]} progressiveness
 * @param {number} progressiveness.minNumQualityLayers - The number of quality layers.
 * @param {'no' | 'force' | 'forceAll'} [progressiveness.forceMaxQuality='no'] -
 * Force delivering image at given quality level while later levels are still being worked on.
 */
function JpipImage(arg, progressiveness) {

    // Validate arguments
    var jpipObjects;
    if (arg && arg.jpipFactory) {
        jpipObjects = arg;
    } else {
        if (!arg || !arg.url) {
            throw new jGlobals.jpipExceptions.ArgumentException('options.url', undefined);
        }
        jpipObjects = createJpipObjects( /*fetcherOptionsArg=*/arg);
    }

    var progressivenessModified; // Validated and complete progressiveness

    var imageParams = null; // ??
    var levelCalculator = null; // ??

    // NOTE: Proxying fetcher to web worker might boost performance
    var fetcher = jpipFactory.createFetcher(jpipObjects.databinsSaver, jpipObjects.fetcherSharedObjects, jpipObjects.fetcherOptions);

    /**
     * Returns a non-progressive instance of JpipImage for a given quality.
     * @param {integer | 'max'} [quality='max'] Amount of quality layers of final image delivered.
     * @returns {JpipImage}
     */
    this.nonProgressive = function nonProgressive(quality) {
        var qualityModified = quality || 'max';
        return this.customProgressive([{
            minNumQualityLayers: qualityModified,
            forceMaxQuality: 'force'
        }]);
    };

    /**
     * Returns instance of JpipImage with progressiveness [1, 2, 3, maxQuality/2, maxQuality].
     * @param {number} maxQuality
     * @returns {JpipImage}
     */
    this.autoProgressive = function autoProgressive(maxQuality) {
        var autoProgressiveness = this.getAutomaticProgressiveness(maxQuality);
        return this.customProgressive(autoProgressiveness);
    };

    /**
     * Return new JpipImage with custom progressiveness.
     * @param {Progressiveness} customProgressiveness
     * @returns {JpipImage}
     */
    this.customProgressive = function customProgressive(customProgressiveness) {
        var customProgressivenessModified = jpipObjects.paramsModifier.modifyCustomProgressiveness(customProgressiveness);
        return new JpipImage(jpipObjects, customProgressivenessModified);
    };

    /**
     * Used by IDF. Called after fetcher 
     * @param {ImageDecoder} imageDecoder
     */
    this.opened = function opened(imageDecoder) {
        imageParams = imageDecoder.getImageParams();
    };

    this.getLevelCalculator = getLevelCalculator;

    this.getDecoderWorkersInputRetreiver = function getDecoderWorkersInputRetreiver() {
        return this;
    };

    this.getFetcher = function getFetcher() {
        return fetcher;
    };

    this.getWorkerTypeOptions = function getWorkerTypeOptions(workerType) {
        switch (workerType) {
            case WORKER_TYPE_PIXELS:
                return {
                    ctorName: 'webjpip.Internals.PdfjsJpxPixelsDecoder',
                    ctorArgs: [],
                    scriptsToImport: [getScriptName(new Error())],
                    pathToTransferablesInPromiseResult: [[0, 'data', 'buffer']]
                };
            case WORKER_TYPE_COEFFS:
                var codestreamTransferable = [0, 'headersCodestream', 'buffer'];
                var codeblockTransferable = [0, 'codeblocksData', 'data', 'buffer'];
                return {
                    ctorName: 'webjpip.Internals.PdfjsJpxCoefficientsDecoder',
                    ctorArgs: [],
                    scriptsToImport: [getScriptName(new Error())],
                    transferables: [codestreamTransferable, codeblockTransferable],
                    pathToTransferablesInPromiseResult: [[0, 'coefficients', 'buffer']]
                };
            default:
                throw new jGlobals.jpipExceptions.InternalErrorException('webjpip error: Unexpected worker type in ' + 'getWorkerTypeOptions ' + workerType);
        }
    };

    this.getKeyAsString = function getKeyAsString(key) {
        if (key.taskType === 'COEFFS') {
            return 'C:' + key.inClassIndex;
        } else {
            var partParams = jpipObjects.paramsModifier.modifyCodestreamPartParams( /*codestreamTaskParams=*/key);
            return 'P:xmin' + partParams.minX + 'ymin' + partParams.minY + 'xmax' + partParams.maxXExclusive + 'ymax' + partParams.maxYExclusive + 'r' + partParams.level;
        }
    };

    this.taskStarted = function taskStarted(task) {
        validateProgressiveness();
        if (task.key.taskType === 'COEFFS') {
            startCoefficientsTask(task);
        } else {
            startPixelsTask(task);
        }
    };

    function createJpipObjects(fetcherOptionsArg) {
        var databinsSaver = jpipFactory.createDatabinsSaver( /*isJpipTilepartStream=*/false);
        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();

        var markersParser = jpipFactory.createMarkersParser(mainHeaderDatabin);
        var offsetsCalculator = jpipFactory.createOffsetsCalculator(mainHeaderDatabin, markersParser);
        var structureParser = jpipFactory.createStructureParser(databinsSaver, markersParser, offsetsCalculator);

        var progressionOrder = 'RPCL';
        var codestreamStructure = jpipFactory.createCodestreamStructure(structureParser, progressionOrder);

        var qualityLayersCache = jpipFactory.createQualityLayersCache(codestreamStructure);

        var headerModifier = jpipFactory.createHeaderModifier(offsetsCalculator, progressionOrder);
        var reconstructor = jpipFactory.createCodestreamReconstructor(databinsSaver, headerModifier, qualityLayersCache);
        var packetsDataCollector = jpipFactory.createPacketsDataCollector(databinsSaver, qualityLayersCache);

        var paramsModifier = jpipFactory.createRequestParamsModifier(codestreamStructure);

        return {
            reconstructor: reconstructor,
            packetsDataCollector: packetsDataCollector,
            qualityLayersCache: qualityLayersCache,
            codestreamStructure: codestreamStructure,
            databinsSaver: databinsSaver,
            paramsModifier: paramsModifier,
            fetcherSharedObjects: {},
            fetcherOptions: fetcherOptionsArg,
            jpipFactory: jpipFactory
        };
    }

    function validateProgressiveness() {
        if (!progressivenessModified) {
            progressivenessModified = progressiveness ? jpipObjects.paramsModifier.modifyCustomProgressiveness(progressiveness) : jpipObjects.paramsModifier.getAutomaticProgressiveness();

            fetcher.setProgressiveness(progressivenessModified);
        }
    }

    function startPixelsTask(task) {
        var params = jpipObjects.paramsModifier.modifyCodestreamPartParams( /*codestreamTaskParams=*/task.key);
        var codestreamPart = jpipFactory.createParamsCodestreamPart(params, jpipObjects.codestreamStructure);

        var qualityWaiter;
        var dependencies = 0;
        var dependencyIndexByInClassIndex = [];

        task.on('dependencyTaskData', function (data, dependencyKey) {
            var index = dependencyIndexByInClassIndex[dependencyKey.inClassIndex];
            qualityWaiter.precinctQualityLayerReached(dependencyKey.inClassIndex, data.minQuality);
        });

        var isEnded = false;
        task.on('statusUpdated', function (status) {
            if (!isEnded && !status.isWaitingForWorkerResult && status.terminatedDependsTasks === status.dependsTasks) {

                throw new jGlobals.jpipExceptions.InternalErrorException('jpip error: Unexpected unended task without pending depend tasks');
            }
        });

        task.on('custom', function (customEventName) {
            if (customEventName === 'aborting') {
                taskEnded();
            }
        });

        qualityWaiter = jpipFactory.createQualityWaiter(codestreamPart, progressivenessModified,
        /*maxQuality=*/0, // TODO: Eliminate this unused argument
        qualityLayerReachedCallback, jpipObjects.codestreamStructure, jpipObjects.databinsSaver, startTrackPrecinctCallback);

        qualityWaiter.register();

        function startTrackPrecinctCallback(precinctDatabin, qualityInTile, precinctIterator, inClassIndex, tileStructure) {

            dependencyIndexByInClassIndex[inClassIndex] = dependencies++;

            var precinctIndex = tileStructure.precinctPositionToIndexInComponentResolution(precinctIterator);

            // Depends on precincts tasks
            task.registerTaskDependency({
                taskType: 'COEFFS',
                tileIndex: precinctIterator.tileIndex,
                resolutionLevel: precinctIterator.resolutionLevel,
                precinctX: precinctIterator.precinctX,
                precinctY: precinctIterator.precinctY,
                component: precinctIterator.component,
                inClassIndex: inClassIndex,
                precinctIndexInComponentResolution: precinctIndex
            });
        }

        var headersCodestream = null;
        var offsetInRegion = null;
        var imageTilesX;
        var tilesBounds;

        function qualityLayerReachedCallback() {
            if (headersCodestream === null) {
                headersCodestream = jpipObjects.reconstructor.createHeadersCodestream(codestreamPart);
                offsetInRegion = getOffsetInRegion(codestreamPart, params);
                imageTilesX = jpipObjects.codestreamStructure.getNumTilesX();
                tilesBounds = codestreamPart.tilesBounds;
            }

            // TODO: Aggregate results to support 'forceAll'
            var stage = qualityWaiter.getProgressiveStagesFinished();
            var canSkip = progressivenessModified[stage - 1].force === 'force' || progressivenessModified[stage - 1].force === 'forceAll';
            task.dataReady({
                headersCodestream: headersCodestream,
                offsetInRegion: offsetInRegion,
                imageTilesX: imageTilesX,
                tilesBounds: tilesBounds,
                precinctCoefficients: task.dependTaskResults // NOTE: dependTaskResults might be changed while work (passed by ref)
            }, WORKER_TYPE_PIXELS, canSkip);

            if (qualityWaiter.isDone()) {
                taskEnded();
                task.terminate();
            }
        }

        function taskEnded() {
            if (!isEnded) {
                isEnded = true;
                qualityWaiter.unregister();
            }
        }
    }

    function startCoefficientsTask(task) {
        var codestreamPart = jpipFactory.createPrecinctCodestreamPart(getLevelCalculator(), jpipObjects.codestreamStructure.getTileStructure(task.key.tileIndex), task.key.tileIndex, task.key.component, task.key.resolutionLevel, task.key.precinctX, task.key.precinctY);

        task.on('custom', function (customEventName) {
            if (customEventName === 'aborting') {
                taskEnded();
            }
        });

        var context = jpipFactory.createImageDataContext(jpipObjects, codestreamPart, task.key.maxQuality, // TODO: Eliminate this unused argument
        progressivenessModified);

        var hadData = false;
        var isTerminated = false;

        context.on('data', onData);
        if (context.getProgressiveStagesFinished() > 0) {
            onData(context);
        }

        function onData(context_) {
            if (context !== context_) {
                throw new jGlobals.jpipExceptions.InternalErrorException('webjpip error: Unexpected context in data event');
            }

            hadData = true;

            var quality;
            var stage = context.getProgressiveStagesFinished();
            var canSkip = progressivenessModified[stage - 1].force !== 'force' && progressivenessModified[stage - 1].force !== 'forceAll';
            if (!canSkip) {
                quality = progressivenessModified[stage - 1].minNumQualityLayers;
            }

            var data = context.getFetchedData(quality);
            task.dataReady(data, WORKER_TYPE_COEFFS, canSkip);

            if (context.isDone()) {
                if (!hadData) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('webjpip error: Coefficients task without data');
                }
                taskEnded();
                task.terminate();
            }
        }

        function taskEnded() {
            if (!isTerminated) {
                isTerminated = true;
                context.dispose();
            }
        }
    }

    // TODO: Remove
    if (!JpipImage.useLegacy) {
        return;
    }
    //*
    this.getWorkerTypeOptions = function getWorkerTypeOptions(taskType) {
        var codestreamTransferable = [0, 'headersCodestream', 'buffer'];
        var codeblockTransferable = [0, 'codeblocksData', 'data', 'buffer'];
        return {
            ctorName: 'webjpip.Internals.PdfjsJpxDecoderLegacy',
            ctorArgs: [],
            scriptsToImport: [getScriptName(new Error())],
            transferables: [codestreamTransferable, codeblockTransferable],
            pathToTransferablesInPromiseResult: [[]]
        };
    };

    this.getKeyAsString = function getKeyAsString(key) {
        return JSON.stringify(key);
    };

    this.taskStarted = function taskStarted(task) {
        validateProgressiveness();
        var params = jpipObjects.paramsModifier.modifyCodestreamPartParams( /*codestreamTaskParams=*/task.key);
        var codestreamPart = jpipFactory.createParamsCodestreamPart(params, jpipObjects.codestreamStructure);

        var context = jpipFactory.createImageDataContext(jpipObjects, codestreamPart, params.quality, progressivenessModified);

        var offsetInRegion = getOffsetInRegion(codestreamPart, params);

        context.on('data', onData);
        if (context.hasData()) {
            onData(context);
        }

        function onData(context_) {
            if (context !== context_) {
                throw new jGlobals.jpipExceptions.InternalErrorException('webjpip error: Unexpected context in data event');
            }

            var data = context.getFetchedData();
            data.offsetInRegion = offsetInRegion;
            task.dataReady(data, /*canSkip=*/true);

            if (context.isDone()) {
                task.terminate();
                context.dispose();
            }
        }
    };
    //*/

    function getOffsetInRegion(codestreamPart, codestreamPartParams) {
        if (codestreamPartParams) {
            var tileIterator = codestreamPart.getTileIterator();
            if (!tileIterator.tryAdvance()) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Empty codestreamPart in JpipImageDataContext');
            }
            var firstTileId = tileIterator.tileIndex;

            var firstTileLeft = jpipObjects.codestreamStructure.getTileLeft(firstTileId, codestreamPart.level);
            var firstTileTop = jpipObjects.codestreamStructure.getTileTop(firstTileId, codestreamPart.level);

            return {
                offsetX: codestreamPartParams.minX - firstTileLeft,
                offsetY: codestreamPartParams.minY - firstTileTop,
                width: codestreamPartParams.maxXExclusive - codestreamPartParams.minX,
                height: codestreamPartParams.maxYExclusive - codestreamPartParams.minY
            };
        } else {
            return {
                offsetX: 0,
                offsetY: 0,
                width: jpipObjects.codestreamStructure.getImageWidth(),
                height: jpipObjects.codestreamStructure.getImageHeight()
            };
        }
    }

    function getLevelCalculator() {
        if (levelCalculator === null) {
            levelCalculator = jpipFactory.createLevelCalculator(imageParams);
        }
        return levelCalculator;
    }
}

JpipImage.toggleLegacy = function () {
    JpipImage.useLegacy = !JpipImage.useLegacy;
};

var currentStackFrameRegex = /at (|[^ ]+ \()([^ ]+):\d+:\d+/;
var lastStackFrameRegexWithStrudel = new RegExp(/.+@(.*?):\d+:\d+/);
var lastStackFrameRegex = new RegExp(/.+\/(.*?):\d+(:\d+)*$/);

function getScriptName(errorWithStackTrace) {
    var stack = errorWithStackTrace.stack.trim();

    var source = currentStackFrameRegex.exec(stack);
    if (source && source[2] !== "") {
        return source[2];
    }

    source = lastStackFrameRegexWithStrudel.exec(stack);
    if (source && source[1] !== "") {
        return source[1];
    }

    source = lastStackFrameRegex.exec(stack);
    if (source && source[1] !== "") {
        return source[1];
    }

    if (errorWithStackTrace.fileName !== undefined) {
        return errorWithStackTrace.fileName;
    }

    throw new jGlobals.jpipExceptions.InternalErrorException('webjpip.js: Could not get current script URL');
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = {
    /**
     * Sends Ajax request and returns Ajax response
     * @param {string} url 
     * @param {function} callbackForAsynchronousRequest - successful callback
     * @param {function} failureCallbackForAsynchronousRequest - failure callback
     * @param {number} progressiveRequestQuantBytes - quantity of bytes in progressive response
     */
    request: function request(url, callbackForAsynchronousRequest, failureCallbackForAsynchronousRequest, progressiveRequestQuantBytes) {

        var ajaxResponse = new XMLHttpRequest(); // Create XMLHttp request
        var isSynchronous = callbackForAsynchronousRequest === undefined; // Is synchronous

        var isFinishedRequest = false; // Is the request finished?
        var bytesRecievedOnLastQuant = 0; // Bytes received on last quant??

        function internalAjaxCallback(e) {
            if (isFinishedRequest) {
                return;
            }

            if (ajaxResponse.readyState !== 4) {
                if (progressiveRequestQuantBytes === undefined || ajaxResponse.response === null || ajaxResponse.readyState < 3) {

                    return;
                }

                var bytesRecieved = ajaxResponse.response.byteLength;
                var bytesTillLastQuant = bytesRecieved - bytesRecievedOnLastQuant;

                if (bytesTillLastQuant < progressiveRequestQuantBytes) {
                    return;
                }

                bytesRecievedOnLastQuant = bytesRecieved;
            } else {
                isFinishedRequest = true;

                if (ajaxResponse.status !== 200 || ajaxResponse.response === null) {

                    failureCallbackForAsynchronousRequest(ajaxResponse);
                    return;
                }
            }

            if (!isSynchronous) {
                callbackForAsynchronousRequest(ajaxResponse, isFinishedRequest);
            }
        }

        ajaxResponse.open('GET', url, !isSynchronous);
        ajaxResponse.onreadystatechange = internalAjaxCallback;

        if (!isSynchronous) {
            // Not supported for synchronous requests
            ajaxResponse.mozResponseType = ajaxResponse.responseType = 'arraybuffer';
        }

        if (progressiveRequestQuantBytes !== undefined) {
            ajaxResponse.setRequestHeader('X-Content-Type-Options', 'nosniff');
            ajaxResponse.onprogress = internalAjaxCallback;
        }

        ajaxResponse.send(null);

        if (isSynchronous && !isFinishedRequest) {
            throw new jGlobals.jpipExceptions.InternalErrorException('synchronous ajax call was not finished synchronously');
        }

        return ajaxResponse;
    }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// Handle transactions of info?
module.exports = {
    createTransaction: function createTransaction() {
        // This code is executed a LOT. For optimization, state is represented
        // directly as numbers (I couldn't think about more readable way which
        // is performance-equivalent).

        // state = 1 ==> Transaction is active
        // state = 2 ==> Transaction has committed successfully
        // state = 3 ==> Transaction has been aborted

        var state = 1;

        var transaction = {
            get isAborted() {
                return state === 3;
            },

            get isActive() {
                return state === 1;
            },

            commit: function commit() {
                terminate(true);
            },

            abort: function abort() {
                terminate(false);
            }
        };

        function terminate(isSuccessful_) {
            if (!transaction.isActive) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Cannot terminate an already terminated transaction');
            }
            state = isSuccessful_ ? 2 : 3;
        }

        return transaction;
    },

    createTransactionalObject: function createTransactionalObject(initialValue, clone) {

        var value = null;
        var prevValue = initialValue;
        var lastAccessedTransaction = {
            isActive: false,
            isAborted: true
        };

        var transactionalObject = {
            getValue: function getValue(activeTransaction) {
                ensureAllowedAccess(activeTransaction);

                if (lastAccessedTransaction === activeTransaction) {
                    return value;
                }

                if (lastAccessedTransaction.isAborted) {
                    value = clone(prevValue);
                } else {
                    prevValue = clone(value);
                }

                lastAccessedTransaction = activeTransaction;
                return value;
            },

            setValue: function setValue(activeTransaction, newValue) {
                ensureAllowedAccess(activeTransaction);

                if (lastAccessedTransaction === activeTransaction) {
                    value = newValue;
                    return;
                }

                if (!lastAccessedTransaction.isAborted) {
                    prevValue = clone(value);
                }

                lastAccessedTransaction = activeTransaction;
                value = newValue;
            }
        };

        function ensureAllowedAccess(activeTransaction) {
            if (!activeTransaction.isActive) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Cannot use terminated transaction to access objects');
            }

            if (activeTransaction !== lastAccessedTransaction && lastAccessedTransaction.isActive) {

                throw new jGlobals.jpipExceptions.InternalErrorException('Cannot simultanously access transactional object ' + 'from two active transactions');
            }
        }

        return transactionalObject;
    }
};

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// Deals with some bitstream coding

module.exports = function JpipCodingPassesNumberParserClosure() {
    // Table B.4 in part 1 of the Jpeg2000 standard shows 7 cases
    // of values. The algorithm shown here separates those cases
    // into 16 cases, depends on the number of ones in the prefix
    // of the coded number until the first zero.
    // The parsing is done in two stages: first we count the ones until
    // the first zero, later we parse the other bits.

    // For example, the case of 1101 (which represents 4 according to
    // table B.4) is parsed in two stages. First we count the ones in
    // the beginning until the first zero, the result is 2 ('110'). Then we
    // parse the other bits ('1').

    // After the first parsing stage (count of ones), we know two things:
    // - How many bits we need to take after the first zero (single bit in
    //   the above case of '110' prefix).
    // - How much we need to add to the result of parsing the other bits (3
    //     in the above case of '110' prefix).

    // Actually the 16 cases were extracted from the table without any formula,
    // so we can refer the number of ones as 'keywords' only.

    var bitsNeededAfterCountOfOnes = createBitsNeededAfterCountOfOnesMap();
    var addToResultAfterCountOfOnes = createAddToResultAfterCountOfOnesMap();

    var jpipCodingPassesNumberParser = {
        parse: function parse(bitstreamReader) {

            var onesCount = bitstreamReader.countOnesAndShiftUntilFirstZeroBit(
            /*maxBitsToShift=*/16);

            if (onesCount === null) {
                return null;
            }

            var moreBitsNeeded = bitsNeededAfterCountOfOnes[onesCount];
            var moreBits = bitstreamReader.shiftBits(moreBitsNeeded);

            if (moreBits === null) {
                return null;
            }

            var addToResult = addToResultAfterCountOfOnes[onesCount];
            var result = moreBits + addToResult;

            return result;
        }
    };

    function createBitsNeededAfterCountOfOnesMap() {
        var result = new Array(17);

        // The case of '0': After 0 ones and single zero, needs no more bits
        result[0] = 0;

        // The case of '10': After 1 ones and single zero, needs no more bits
        result[1] = 0;

        // The cases of '110x': After 2 ones and single zero, needs another bit
        result[2] = 1;

        // The case of '1110': After 3 ones and single zero, needs no more bits
        result[3] = 0;

        // The cases of '1111 0000 0' to '1111 1111 0':
        // After 4 to 8 ones and single zero, needs bits to complete to 9 bits
        result[4] = 4;
        result[5] = 3;
        result[6] = 2;
        result[7] = 1;
        result[8] = 0;

        // The cases of '1111 11111 ...'
        // After at least 9 ones and single zero, needs bits to complete to 16 bits
        result[9] = 6;
        result[10] = 5;
        result[11] = 4;
        result[12] = 3;
        result[13] = 2;
        result[14] = 1;
        result[15] = 0;

        // The case of '1111 11111 1111 111'
        result[16] = 0;

        return result;
    }

    function createAddToResultAfterCountOfOnesMap() {
        var result = new Array(17);

        // The case of '0' (codeword for 1):
        // After 0 ones and single zero, add 1 to other 0 bits value
        result[0] = 1;

        // The case of '10' (codeword for 2):
        // After 1 ones and single zero, add 2 to other 0 bits value
        result[1] = 2;

        // The cases of '110x' (codewords for 3 and 4):
        // After 2 ones and single zero, add 3 to other single bit value
        result[2] = 3;

        // The case of '1110' (codeword for 5):
        // After 3 ones and single zero, add 5 to other 0 bits value
        result[3] = 5;

        // The cases of '1111 0000 0' to '1111 1111 0' (codewords for 6 to 36):
        // After 4 ones and single zero, add 6 to other 0/1/2/3/4 bits value
        result[4] = 6 + 0x00; // b00000
        result[5] = 6 + 0x10; // b10000
        result[6] = 6 + 0x18; // b11000
        result[7] = 6 + 0x1C; // b11100
        result[8] = 6 + 0x1E; // b11110

        // The cases of '1111 11111 ...' (codewords for 37 to 164):
        // After 9 ones and single zero, add 37 to other 0/1/2/3/4/5/6 bits value
        result[9] = 37 + 0x00; // b000000
        result[10] = 37 + 0x40; // b100000
        result[11] = 37 + 0x60; // b110000
        result[12] = 37 + 0x70; // b111000
        result[13] = 37 + 0x78; // b111100
        result[14] = 37 + 0x7C; // b111110
        result[15] = 37 + 0x7E; // b111111
        result[16] = 37 + 0x7F; // b111111

        return result;
    }

    return jpipCodingPassesNumberParser;
}();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// Parse (make sense of) JPIP message header
var jpipMessageHeaderParser = {

    LSB_MASK: 0x1,
    BIT_4_MASK: 0x10,
    BITS_56_MASK: 0x60,
    MSB_MASK: 0x80,

    LSB_7_MASK: 0x7F,

    // A.2.1
    parseNumberInVbas: function parseNumberInVbasClosure(message, startOffset, bitsToTakeInFirstByte) {

        var self = jpipMessageHeaderParser;
        var currentOffset = startOffset;

        var result;
        if (bitsToTakeInFirstByte) {
            var maskFirstByte = (1 << bitsToTakeInFirstByte) - 1;
            result = message[currentOffset] & maskFirstByte;
        } else {
            result = message[currentOffset] & self.LSB_7_MASK;
        }

        while (!!(message[currentOffset] & self.MSB_MASK)) {
            ++currentOffset;

            result <<= 7;
            result |= message[currentOffset] & self.LSB_7_MASK;
        }

        return {
            endOffset: currentOffset + 1,
            number: result
        };
    },

    // A.2
    parseMessageHeader: function parseMessageHeaderClosure(message, startOffset, previousMessageHeader) {

        var self = jpipMessageHeaderParser;

        // A.2.1

        // First Vbas: Bin-ID

        var classAndCsnPrecense = (message[startOffset] & self.BITS_56_MASK) >>> 5;

        if (classAndCsnPrecense === 0) {
            throw new jGlobals.jpipExceptions.ParseException('Failed parsing message header ' + '(A.2.1): prohibited existance class and csn bits 00');
        }

        var hasClassVbas = !!(classAndCsnPrecense & 0x2);
        var hasCodeStreamIndexVbas = classAndCsnPrecense === 3;

        var isLastByteInDatabin = !!(message[startOffset] & self.BIT_4_MASK);

        // A.2.3
        var parsedInClassId = self.parseNumberInVbas(message, startOffset, /*bitsToTakeInFirstByte=*/4);
        var inClassId = parsedInClassId.number;
        var currentOffset = parsedInClassId.endOffset;

        // Second optional Vbas: Class ID

        var classId = 0;
        if (hasClassVbas) {
            var parsedClassId = self.parseNumberInVbas(message, currentOffset);
            classId = parsedClassId.number;
            currentOffset = parsedClassId.endOffset;
        } else if (previousMessageHeader) {
            classId = previousMessageHeader.classId;
        }

        // Third optional Vbas: Code Stream Index (Csn)

        var codestreamIndex = 0;
        if (hasCodeStreamIndexVbas) {
            var parsedCsn = self.parseNumberInVbas(message, currentOffset);
            codestreamIndex = parsedCsn.number;
            currentOffset = parsedCsn.endOffset;
        } else if (previousMessageHeader) {
            codestreamIndex = previousMessageHeader.codestreamIndex;
        }

        // 4th Vbas: Message offset

        var parsedOffset = self.parseNumberInVbas(message, currentOffset);
        var messageOffsetFromDatabinStart = parsedOffset.number;
        currentOffset = parsedOffset.endOffset;

        // 5th Vbas: Message length

        var parsedLength = self.parseNumberInVbas(message, currentOffset);
        var messageBodyLength = parsedLength.number;
        currentOffset = parsedLength.endOffset;

        // 6th optional Vbas: Aux

        // A.2.2
        var hasAuxVbas = !!(classId & self.LSB_MASK);

        var aux;
        if (hasAuxVbas) {
            var parsedAux = self.parseNumberInVbas(message, currentOffset);
            aux = parsedAux.number;
            currentOffset = parsedAux.endOffset;
        }

        // Return

        var result = {
            isLastByteInDatabin: isLastByteInDatabin,
            inClassId: inClassId,
            bodyStart: currentOffset,
            classId: classId,
            codestreamIndex: codestreamIndex,
            messageOffsetFromDatabinStart: messageOffsetFromDatabinStart,
            messageBodyLength: messageBodyLength
        };

        if (hasAuxVbas) {
            result.aux = aux;
        }

        return result;
    },

    getInt32: function getInt32Closure(data, offset) {
        var msb = data[offset] * Math.pow(2, 24); // Avoid negative result due to signed calculation
        var byte2 = data[offset + 1] << 16;
        var byte1 = data[offset + 2] << 8;
        var lsb = data[offset + 3];

        var result = msb + byte2 + byte1 + lsb;
        return result;
    },

    getInt16: function getInt16Closure(data, offset) {
        var msb = data[offset] << 8;
        var lsb = data[offset + 1];

        var result = msb + lsb;
        return result;
    }
};

module.exports = jpipMessageHeaderParser;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// Contains functions to do with JPIP channel
module.exports = function JpipChannel(maxRequestsWaitingForResponseInChannel, sessionHelper, jpipFactory) {

    var self = this;
    var channelId = null; // Channel ID
    var requestId = 0; // Request ID
    var requestsWaitingForChannelCreation = []; // Requests waiting for channel creation
    var requestsWaitingForResponse = []; // Requests waiting for response
    var isDedicatedForMovableRequest = false; // Is it dedicated for a movable request

    // Request data
    this.requestData = function requestData(codestreamPartParams, callback, failureCallback, numQualityLayers) {

        // Throw exception if too channel has too many current requests
        if (!isDedicatedForMovableRequest) {
            // No need to check if there are too many concurrent requests
            // if channel was dedicated for movable request. The reason is
            // that any request in dedicated channel cancel the previous one.

            var allWaitingRequests = getAllQueuedRequestCount(); // Get number of waiting requests, both for response and channel creation

            if (allWaitingRequests >= maxRequestsWaitingForResponseInChannel) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Channel has too many requests not responded yet');
            }
        }

        // Otherwise create the request
        var url = createRequestUrl(codestreamPartParams, numQualityLayers);
        var request = jpipFactory.createRequest(sessionHelper, self, url, callback, failureCallback);

        // Start request if only one
        // else if priority release all requests
        // else push to queue
        if (channelId !== null || requestsWaitingForResponse.length === 0) {
            requestsWaitingForResponse.push(request);
            request.startRequest();
        } else if (isDedicatedForMovableRequest) {
            // Those requests cancel all previous requests in channel, so no
            // need to log old requests
            requestsWaitingForChannelCreation = [request];
        } else {
            requestsWaitingForChannelCreation.push(request);
        }

        return request;
    };

    // Send minimal request for first request or keep alive
    this.sendMinimalRequest = function sendMinimalRequest(callback) {
        // If no channel and requests waiting throw exception
        if (channelId === null && requestsWaitingForResponse.length > 0) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Minimal requests should be used for first request or keep ' + 'alive message. Keep alive requires an already initialized ' + 'channel, and first request requires to not have any ' + 'previous request');
        }

        // Otherwise create and start minimal request
        var url = createMinimalRequestUrl();
        var request = jpipFactory.createRequest(sessionHelper, self, url, callback);

        requestsWaitingForResponse.push(request);
        request.startRequest();
    };

    // Is dedicated for movable request?
    this.getIsDedicatedForMovableRequest = function getIsDedicatedForMovableRequest() {

        return isDedicatedForMovableRequest;
    };

    // Dedicate for movable request
    this.dedicateForMovableRequest = function dedicateForMovableRequest() {
        if (isDedicatedForMovableRequest) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Channel already dedicated for movable request');
        }

        isDedicatedForMovableRequest = true;
    };

    // Get channel ID
    this.getChannelId = function getChannelId() {
        return channelId;
    };

    // Set new channel ID
    this.setChannelId = function setChannelId(newChannelId) {
        if (newChannelId === null) {
            return;
        }

        channelId = newChannelId;

        var requestsToSend = requestsWaitingForChannelCreation;
        requestsWaitingForChannelCreation = [];

        for (var i = 0; i < requestsToSend.length; ++i) {
            requestsWaitingForResponse.push(requestsToSend[i]);
            requestsToSend[i].startRequest();
        }
    };

    // What's the next request ID
    this.nextRequestId = function nextRequestId() {
        return ++requestId;
    };

    // Get requests waiting for response
    this.getRequestsWaitingForResponse = function getRequestsWaitingForResponse() {

        return requestsWaitingForResponse;
    };

    // Get count of all queued requests
    this.getAllQueuedRequestCount = getAllQueuedRequestCount;

    // End request
    this.requestEnded = function requestEnded(ajaxResponse, request) {
        var requests = requestsWaitingForResponse;
        var isFound = false;
        for (var i = 0; i < requests.length; ++i) {
            if (requests[i] === request) {
                requests[i] = requests[requests.length - 1];
                requests.length -= 1;
                isFound = true;
                break;
            }
        }

        if (!isFound) {
            throw new jGlobals.jpipExceptions.InternalErrorException('channel.requestsWaitingForResponse inconsistency');
        }

        sessionHelper.requestEnded(ajaxResponse, self);

        if (channelId === null && requestsWaitingForChannelCreation.length > 0) {
            // If not succeeded to create a channel ID yet,
            // perform an additional request

            var nextRequest = requestsWaitingForChannelCreation.shift();

            requestsWaitingForResponse.push(nextRequest);
            nextRequest.startRequest();
        }
    };

    // Are all the requests done?
    this.isAllOldRequestsEnded = function isAllOldRequestsEnded(priorToId) {
        for (var i = 0; i < requestsWaitingForResponse.length; ++i) {
            if (requestsWaitingForResponse[i].lastRequestId <= priorToId) {
                return false;
            }
        }

        return true;
    };

    // How many requests are in queued
    function getAllQueuedRequestCount() {
        var allWaitingRequests = requestsWaitingForResponse.length + requestsWaitingForChannelCreation.length;

        return allWaitingRequests;
    }

    // Create minimal request
    function createMinimalRequestUrl(allowStopPreviousRequestsInChannel) {
        var requestUrl = sessionHelper.getDataRequestUrl();
        var targetId = sessionHelper.getTargetId();

        if (targetId !== '0') {
            requestUrl += '&tid=' + targetId;
        }

        var alreadySentMessagesOnChannel = channelId !== null;

        if (alreadySentMessagesOnChannel) {
            var isStopPrevious = isDedicatedForMovableRequest && allowStopPreviousRequestsInChannel;

            if (isStopPrevious) {
                requestUrl += '&wait=no';
            } else {
                requestUrl += '&wait=yes';
            }
        }

        return requestUrl;
    }

    // Create request URL given parameters
    function createRequestUrl(codestreamPartParams, numQualityLayers) {
        var requestUrl = createMinimalRequestUrl(
        /*allowStopPreviousRequestsInChannel=*/true);

        var codestreamStructure = sessionHelper.getCodestreamStructure();

        var frameWidth = codestreamStructure.getLevelWidth(codestreamPartParams.level);
        var frameHeight = codestreamStructure.getLevelHeight(codestreamPartParams.level);

        var regionWidth = codestreamPartParams.maxXExclusive - codestreamPartParams.minX;
        var regionHeight = codestreamPartParams.maxYExclusive - codestreamPartParams.minY;

        requestUrl += '&fsiz=' + frameWidth + ',' + frameHeight + ',closest' + '&rsiz=' + regionWidth + ',' + regionHeight + '&roff=' + codestreamPartParams.minX + ',' + codestreamPartParams.minY;

        if (numQualityLayers !== 'max') {
            requestUrl += '&layers=' + numQualityLayers;
        }

        return requestUrl;
    }
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// Create codestream or header codestream
module.exports = function JpipCodestreamReconstructor(databinsSaver, headerModifier, qualityLayersCache) {

    var dummyBufferForLengthCalculation = { isDummyBufferForLengthCalculation: true }; // What is this?

    // Create codestream
    this.createCodestream = function createCodestream(codestreamPart, minQuality, maxQuality) {

        return createCodestreamInternal(codestreamPart, minQuality, maxQuality);
    };

    // Create headers codestream
    this.createHeadersCodestream = function createHeadersCodestream(codestreamPart) {
        var dummyQuality = 1; // What is this?
        var isOnlyHeaders = true;
        return createCodestreamInternal(codestreamPart, dummyQuality, dummyQuality, isOnlyHeaders);
    };

    // Create codestream skeleton
    function createCodestreamInternal(codestreamPart, minQuality, maxQuality, isOnlyHeadersWithoutBitstream) {

        // How long should the codestream be
        var calculatedLength = createCodestreamOrCalculateLength(dummyBufferForLengthCalculation, codestreamPart, minQuality, maxQuality, isOnlyHeadersWithoutBitstream);

        if (calculatedLength === null) {
            return null;
        }

        // Make array of 80bit unsigned integers, check actual and calculated are same
        var result = new Uint8Array(calculatedLength);
        var actualLength = createCodestreamOrCalculateLength(result, codestreamPart, minQuality, maxQuality, isOnlyHeadersWithoutBitstream);

        if (actualLength === calculatedLength) {
            return result;
        } else if (actualLength === null) {
            return null;
        }
        // If actual != calcualated throw exception
        throw new jGlobals.jpipExceptions.InternalErrorException('JpipCodestreamReconstructor: Unmatched actualLength ' + actualLength + ' and calculatedLength ' + calculatedLength);
    }

    function createCodestreamOrCalculateLength(result, codestreamPart, minQuality, maxQuality, isOnlyHeadersWithoutBitstream) {

        var currentOffset = createMainHeader(result, codestreamPart.level);

        if (currentOffset === null) {
            return null;
        }

        var tileIdToWrite = 0;
        var tileIterator = codestreamPart.getTileIterator();
        while (tileIterator.tryAdvance()) {
            var tileIdOriginal = tileIterator.tileIndex;

            var tileBytesCopied = createTile(result, currentOffset, tileIdToWrite++, tileIterator, codestreamPart.level, minQuality, maxQuality, isOnlyHeadersWithoutBitstream);

            currentOffset += tileBytesCopied;

            if (tileBytesCopied === null) {
                return null;
            }
        }

        var markerBytesCopied = copyBytes(result, currentOffset, jGlobals.j2kMarkers.EndOfCodestream);
        currentOffset += markerBytesCopied;

        headerModifier.modifyImageSize(result, codestreamPart.fullTilesSize);

        if (result === null) {
            return null;
        }

        return currentOffset;
    }

    function createMainHeader(result, level) {
        if (databinsSaver.getIsJpipTilePartStream()) {
            throw new jGlobals.jpipExceptions.UnsupportedFeatureException('reconstruction of codestream from JPT (Jpip Tile-part) stream', 'A.3.4');
        }

        var mainHeader = databinsSaver.getMainHeaderDatabin();
        var currentOffset = mainHeader.copyBytes(result, /*startOffset=*/0, {
            forceCopyAllRange: true
        });

        if (currentOffset === null) {
            return null;
        }

        var bytesAdded = headerModifier.modifyMainOrTileHeader(result, mainHeader, /*offset=*/0, level);

        currentOffset += bytesAdded;

        bytesAdded = addMamazavComment(result, currentOffset);
        currentOffset += bytesAdded;

        return currentOffset;
    }

    function createTile(result, currentOffset, tileIdToWrite, tileIterator, level, minNumQualityLayers, maxNumQualityLayers, isOnlyHeadersWithoutBitstream) {

        var tileIdOriginal = tileIterator.tileIndex;

        var startTileOffset = currentOffset;
        var tileHeaderDatabin = databinsSaver.getTileHeaderDatabin(tileIdOriginal);

        var tileHeaderOffsets = createTileHeaderAndGetOffsets(result, currentOffset, tileHeaderDatabin, tileIdToWrite, level);

        if (tileHeaderOffsets === null) {
            return null;
        }

        currentOffset = tileHeaderOffsets.endTileHeaderOffset;

        if (!isOnlyHeadersWithoutBitstream) {
            var tileBytesCopied = createTileBitstream(result, currentOffset, tileIterator, minNumQualityLayers, maxNumQualityLayers);

            currentOffset += tileBytesCopied;

            if (tileBytesCopied === null) {
                return null;
            }
        }

        var endTileOffset = currentOffset;

        var headerAndDataLength = endTileOffset - tileHeaderOffsets.startOfTileHeaderOffset;

        headerModifier.modifyInt32(result, tileHeaderOffsets.headerAndDataLengthPlaceholderOffset, headerAndDataLength);

        var bytesCopied = endTileOffset - startTileOffset;
        return bytesCopied;
    }

    function createTileHeaderAndGetOffsets(result, currentOffset, tileHeaderDatabin, tileIdToWrite, level) {

        var startOfTileHeaderOffset = currentOffset;

        var bytesCopied = copyBytes(result, currentOffset, jGlobals.j2kMarkers.StartOfTile);
        currentOffset += bytesCopied;

        // A.4.2

        var startOfTileSegmentLength = [0, 10]; // Lsot
        bytesCopied = copyBytes(result, currentOffset, startOfTileSegmentLength);
        currentOffset += bytesCopied;

        var tileIndex = [tileIdToWrite >>> 8, tileIdToWrite & 0xFF]; // Isot
        bytesCopied = copyBytes(result, currentOffset, tileIndex);
        currentOffset += bytesCopied;

        var headerAndDataLengthPlaceholderOffset = currentOffset;
        var headerAndDataLengthPlaceholder = [0, 0, 0, 0]; // Psot
        bytesCopied = copyBytes(result, currentOffset, headerAndDataLengthPlaceholder);
        currentOffset += bytesCopied;

        var tilePartIndex = [0]; // TPsot
        bytesCopied = copyBytes(result, currentOffset, tilePartIndex);
        currentOffset += bytesCopied;

        var numberOfTileparts = [1]; // TNsot
        bytesCopied = copyBytes(result, currentOffset, numberOfTileparts);
        currentOffset += bytesCopied;

        var afterStartOfTileSegmentOffset = currentOffset;
        bytesCopied = tileHeaderDatabin.copyBytes(result, currentOffset, {
            forceCopyAllRange: true
        });
        currentOffset += bytesCopied;

        if (bytesCopied === null) {
            // NOTE: Can create empty tile
            return null;
        }

        var optionalMarker = new Array(2);
        var databinLength = tileHeaderDatabin.getDatabinLengthIfKnown();
        tileHeaderDatabin.copyBytes(optionalMarker, 0, {
            databinStartOffset: databinLength - 2
        });

        var isEndedWithStartOfDataMarker = optionalMarker[0] === jGlobals.j2kMarkers.StartOfData[0] && optionalMarker[1] === jGlobals.j2kMarkers.StartOfData[1];

        if (!isEndedWithStartOfDataMarker) {
            bytesCopied = copyBytes(result, currentOffset, jGlobals.j2kMarkers.StartOfData);
            currentOffset += bytesCopied;
        }

        var bytesAdded = headerModifier.modifyMainOrTileHeader(result, tileHeaderDatabin, afterStartOfTileSegmentOffset, level);

        currentOffset += bytesAdded;

        var offsets = {
            startOfTileHeaderOffset: startOfTileHeaderOffset,
            headerAndDataLengthPlaceholderOffset: headerAndDataLengthPlaceholderOffset,
            endTileHeaderOffset: currentOffset
        };

        return offsets;
    }

    function createTileBitstream(result, currentOffset, tileIterator, minNumQualityLayers, maxNumQualityLayers) {

        var numQualityLayersInTile = tileIterator.tileStructure.getNumQualityLayers();

        var allBytesCopied = 0;
        var hasMorePackets;

        if (minNumQualityLayers === 'max') {
            minNumQualityLayers = numQualityLayersInTile;
        }

        var precinctIterator = tileIterator.createPrecinctIterator(
        /*isIteratePrecinctsNotInCodestreamPart=*/true);

        while (precinctIterator.tryAdvance()) {
            var emptyPacketsToPush = numQualityLayersInTile;

            if (precinctIterator.isInCodestreamPart) {
                var inClassIndex = tileIterator.tileStructure.precinctPositionToInClassIndex(precinctIterator);
                var precinctDatabin = databinsSaver.getPrecinctDatabin(inClassIndex);

                var qualityLayerOffset = qualityLayersCache.getQualityLayerOffset(precinctDatabin, maxNumQualityLayers, precinctIterator);

                var bytesToCopy = qualityLayerOffset.endOffset;
                emptyPacketsToPush = numQualityLayersInTile - qualityLayerOffset.numQualityLayers;

                if (qualityLayerOffset.numQualityLayers < minNumQualityLayers) {
                    return null;
                }

                var bytesCopied = precinctDatabin.copyBytes(result, currentOffset, {
                    forceCopyAllRange: true,
                    maxLengthToCopy: bytesToCopy
                });

                if (bytesCopied === null) {
                    bytesCopied = 0;
                    emptyPacketsToPush = numQualityLayersInTile;
                }

                allBytesCopied += bytesCopied;
                currentOffset += bytesCopied;
            }

            if (!result.isDummyBufferForLengthCalculation) {
                for (var i = 0; i < emptyPacketsToPush; ++i) {
                    result[currentOffset++] = 0;
                }
            }
            allBytesCopied += emptyPacketsToPush;
        }

        return allBytesCopied;
    }

    function addMamazavComment(result, currentOffset) {
        var startOffset = currentOffset;

        putByte(result, currentOffset++, 0xFF);
        putByte(result, currentOffset++, 0x64);
        putByte(result, currentOffset++, 0x00);
        putByte(result, currentOffset++, 0x09);
        putByte(result, currentOffset++, 77);
        putByte(result, currentOffset++, 97);
        putByte(result, currentOffset++, 109);
        putByte(result, currentOffset++, 97);
        putByte(result, currentOffset++, 122);
        putByte(result, currentOffset++, 97);
        putByte(result, currentOffset++, 118);

        var bytesAdded = currentOffset - startOffset;
        return bytesAdded;
    }

    function copyBytes(result, resultStartOffset, bytesToCopy) {
        if (!result.isDummyBufferForLengthCalculation) {
            for (var i = 0; i < bytesToCopy.length; ++i) {
                result[i + resultStartOffset] = bytesToCopy[i];
            }
        }

        return bytesToCopy.length;
    }

    function putByte(result, offset, value) {
        if (!result.isDummyBufferForLengthCalculation) {
            result[offset] = value;
        }
    }
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// 
module.exports = function JpipCodestreamStructure(jpipStructureParser, jpipFactory, progressionOrder) {

    var self = this;
    var params;
    var sizesCalculator;

    var defaultTileStructureByEdgeType;

    var cachedTileStructures = [];

    // Get sizes parameters
    this.getSizesParams = function getSizesParams() {
        validateParams();
        return params;
    };

    // Get number of X and Y tiles
    this.getNumTilesX = function getNumTilesX() {
        validateParams();

        var numTiles = sizesCalculator.getNumTilesX();
        return numTiles;
    };

    this.getNumTilesY = function getNumTilesY() {
        validateParams();

        var numTiles = sizesCalculator.getNumTilesY();
        return numTiles;
    };

    // Get number of components
    this.getNumComponents = function () {
        validateParams();
        return params.numComponents;
    };

    // Get image width and height
    this.getImageWidth = function () {
        validateParams();

        var size = sizesCalculator.getLevelWidth();
        return size;
    };

    this.getImageHeight = function () {
        validateParams();

        var size = sizesCalculator.getLevelHeight();
        return size;
    };

    // Get level width and height
    this.getLevelWidth = function (level) {
        validateParams();

        var size = sizesCalculator.getLevelWidth(level);
        return size;
    };

    this.getLevelHeight = function (level) {
        validateParams();

        var size = sizesCalculator.getLevelHeight(level);
        return size;
    };

    // Get tile width and height
    this.getTileWidth = function (level) {
        validateParams();

        var size = sizesCalculator.getTileWidth(level);
        return size;
    };

    this.getTileHeight = function (level) {
        validateParams();

        var size = sizesCalculator.getTileHeight(level);
        return size;
    };

    // Get first tile offset X and Y
    this.getFirstTileOffsetX = function () {
        validateParams();

        var offset = sizesCalculator.getFirstTileOffsetX();
        return offset;
    };

    this.getFirstTileOffsetY = function () {
        validateParams();

        var offset = sizesCalculator.getFirstTileOffsetY();
        return offset;
    };

    // Get left or top tile?
    this.getTileLeft = function getTileLeft(tileIndex, level) {

        validateParams();

        var tileX = tileIndex % sizesCalculator.getNumTilesX();
        if (tileX === 0) {
            return 0;
        }

        var tileLeft = (tileX - 1) * sizesCalculator.getTileWidth(level) + sizesCalculator.getFirstTileWidth(level);

        return tileLeft;
    };

    this.getTileTop = function getTileTop(tileIndex, level) {
        validateParams();

        var tileY = Math.floor(tileIndex / sizesCalculator.getNumTilesX());
        if (tileY === 0) {
            return 0;
        }

        var tileTop = (tileY - 1) * sizesCalculator.getTileHeight(level) + sizesCalculator.getFirstTileHeight(level);

        return tileTop;
    };

    // Get default tile structure?
    this.getDefaultTileStructure = function getDefaultTileStructure() {
        validateParams();
        var result = getDefaultTileStructureInternal({
            horizontalEdgeType: sizesCalculator.EDGE_TYPE_NO_EDGE,
            verticalEdgeType: sizesCalculator.EDGE_TYPE_NO_EDGE
        });

        return result;
    };

    // Get tile structure
    this.getTileStructure = getTileStructure;

    // Tile position to in class index?
    this.tilePositionToInClassIndex = function (tilePosition) {
        validateParams();
        var tilesX = sizesCalculator.getNumTilesX();
        var tilesY = sizesCalculator.getNumTilesY();

        validateArgumentInRange('tilePosition.tileX', tilePosition.tileX, tilesX);
        validateArgumentInRange('tilePosition.tileY', tilePosition.tileY, tilesY);

        var inClassIndex = tilePosition.tileX + tilePosition.tileY * tilesX;

        return inClassIndex;
    };

    // Tile in class index to position?
    this.tileInClassIndexToPosition = function (inClassIndex) {
        validateParams();
        var tilesX = sizesCalculator.getNumTilesX();
        var tilesY = sizesCalculator.getNumTilesY();
        var numTiles = tilesX * tilesY;

        validateArgumentInRange('inClassIndex', inClassIndex, tilesX * tilesY);

        var tileX = inClassIndex % tilesX;
        var tileY = (inClassIndex - tileX) / tilesX;

        var result = {
            tileX: tileX,
            tileY: tileY
        };

        return result;
    };

    // Get tiles from pixels?
    this.getTilesFromPixels = function getTilesFromPixels(codestreamPartParams) {

        validateParams();

        return sizesCalculator.getTilesFromPixels(codestreamPartParams);
    };

    // Get size of tiles
    this.getSizeOfTiles = function getSizeOfTiles(tileBounds) {
        validateParams();

        var size = sizesCalculator.getSizeOfTiles(tileBounds);
        return size;
    };

    function getTileStructure(tileId) {
        validateParams();

        var maxTileId = sizesCalculator.getNumTilesX() * sizesCalculator.getNumTilesY() - 1;

        if (tileId < 0 || tileId > maxTileId) {
            throw new jGlobals.jpipExceptions.ArgumentException('tileId', tileId, 'Expected value between 0 and ' + maxTileId);
        }

        var isEdge = sizesCalculator.isEdgeTileId(tileId);

        if (cachedTileStructures[tileId] === undefined) {
            var tileParams = jpipStructureParser.parseOverridenTileParams(tileId);

            if (!!tileParams) {
                cachedTileStructures[tileId] = createTileStructure(tileParams, isEdge);
            } else {
                cachedTileStructures[tileId] = null;
            }
        }

        if (cachedTileStructures[tileId]) {
            return cachedTileStructures[tileId];
        }

        var result = getDefaultTileStructureInternal(isEdge);
        return result;
    }

    function validateArgumentInRange(paramName, paramValue, suprimumParamValue) {
        if (paramValue < 0 || paramValue >= suprimumParamValue) {
            throw new jGlobals.jpipExceptions.ArgumentException(paramName, paramValue, paramName + ' is expected to be between 0 and ' + suprimumParamValue - 1);
        }
    }

    function getDefaultTileStructureInternal(edgeType) {
        if (!defaultTileStructureByEdgeType) {
            var defaultTileParams = jpipStructureParser.parseDefaultTileParams();

            defaultTileStructureByEdgeType = new Array(3);

            for (var horizontalEdge = 0; horizontalEdge < 3; ++horizontalEdge) {
                defaultTileStructureByEdgeType[horizontalEdge] = new Array(3);

                for (var verticalEdge = 0; verticalEdge < 3; ++verticalEdge) {
                    var edge = {
                        horizontalEdgeType: horizontalEdge,
                        verticalEdgeType: verticalEdge
                    };

                    defaultTileStructureByEdgeType[horizontalEdge][verticalEdge] = createTileStructure(defaultTileParams, edge);
                }
            }
        }

        var structureByVerticalType = defaultTileStructureByEdgeType[edgeType.horizontalEdgeType];

        var tileStructure = structureByVerticalType[edgeType.verticalEdgeType];

        return tileStructure;
    }

    function createTileStructure(tileParams, edgeType) {
        validateParams();

        var sizeParams = JSON.parse(JSON.stringify(tileParams));

        sizeParams.tileSize = sizesCalculator.getTileSize(edgeType);

        sizeParams.defaultComponentParams.scaleX = 1;
        sizeParams.defaultComponentParams.scaleY = 1;

        for (var i = 0; i < sizeParams.paramsPerComponent.length; ++i) {
            sizeParams.paramsPerComponent[i].scaleX = params.componentsScaleX[i];
            sizeParams.paramsPerComponent[i].scaleY = params.componentsScaleY[i];
        }

        var tileStructure = jpipFactory.createTileStructure(sizeParams, self, progressionOrder);

        return tileStructure;
    }

    function validateParams(self) {
        if (!params) {
            params = jpipStructureParser.parseCodestreamStructure();
            sizesCalculator = jpipFactory.createLevelCalculator(params);
        }
    }

    return this;
};

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipComponentStructure(params, tileStructure) {

    var tileWidthLevel0;
    var tileHeightLevel0;

    initialize();

    this.getComponentScaleX = function getComponentScaleX() {
        return params.scaleX;
    };

    this.getComponentScaleY = function getComponentScaleY() {
        return params.scaleY;
    };

    this.getNumResolutionLevels = function () {
        return params.numResolutionLevels;
    };

    this.getPrecinctWidth = function (resolutionLevel) {
        var width = params.precinctWidthPerLevel[resolutionLevel];

        return width;
    };

    this.getPrecinctHeight = function (resolutionLevel) {
        var height = params.precinctHeightPerLevel[resolutionLevel];

        return height;
    };

    this.getMaxCodeblockWidth = function getMaxCodeblockWidth() {
        var width = params.maxCodeblockWidth;

        return width;
    };

    this.getMaxCodeblockHeight = function getMaxCodeblockHeight() {
        var height = params.maxCodeblockHeight;

        return height;
    };

    this.getNumCodeblocksXInPrecinct = function getNumCodeblocksX(precinct) {

        var numCodeblocksX = calculateNumCodeblocks(precinct, precinct.precinctX, params.maxCodeblockWidth, params.precinctWidthPerLevel, tileWidthLevel0);

        return numCodeblocksX;
    };

    this.getNumCodeblocksYInPrecinct = function getNumCodeblocksY(precinct) {

        var numCodeblocksY = calculateNumCodeblocks(precinct, precinct.precinctY, params.maxCodeblockHeight, params.precinctHeightPerLevel, tileHeightLevel0);

        return numCodeblocksY;
    };

    this.getNumPrecinctsX = function (resolutionLevel) {
        var precinctsX = calculateNumPrecincts(tileWidthLevel0, params.precinctWidthPerLevel, resolutionLevel);

        return precinctsX;
    };

    this.getNumPrecinctsY = function (resolutionLevel) {
        var precinctsY = calculateNumPrecincts(tileHeightLevel0, params.precinctHeightPerLevel, resolutionLevel);

        return precinctsY;
    };

    function calculateNumPrecincts(tileSizeLevel0, precinctSizePerLevel, resolutionLevel) {

        var resolutionFactor = getResolutionFactor(resolutionLevel);
        var tileSizeInLevel = tileSizeLevel0 / resolutionFactor;

        var precinctSizeInLevel = precinctSizePerLevel[resolutionLevel];

        var numPrecincts = Math.ceil(tileSizeInLevel / precinctSizeInLevel);
        return numPrecincts;
    }

    function calculateNumCodeblocks(precinct, precinctIndex, maxCodeblockSize, precinctSizePerLevel, tileSizeLevel0) {

        var resolutionFactor = getResolutionFactor(precinct.resolutionLevel);
        var tileSizeInLevel = Math.ceil(tileSizeLevel0 / resolutionFactor);

        var precinctBeginPixel = precinctIndex * precinctSizePerLevel[precinct.resolutionLevel];

        var precinctSize = Math.min(precinctSizePerLevel[precinct.resolutionLevel], tileSizeInLevel - precinctBeginPixel);

        var subbandTypeFactor = precinct.resolutionLevel === 0 ? 1 : 2;
        var subbandOfPrecinctSize = Math.ceil(precinctSize / subbandTypeFactor);

        var numCodeblocks = subbandTypeFactor * Math.ceil(subbandOfPrecinctSize / maxCodeblockSize);

        if (precinctSize % maxCodeblockSize === 1 && precinct.resolutionLevel > 0) {

            --numCodeblocks;
        }

        return numCodeblocks;
    }

    function getResolutionFactor(resolutionLevel) {
        var differenceFromBestLevel = params.numResolutionLevels - resolutionLevel - 1;

        var factor = 1 << differenceFromBestLevel;

        return factor;
    }

    function initialize() {
        if (params.scaleX !== 1 || params.scaleY !== 1) {
            throw new jGlobals.j2kExceptions.UnsupportedFeatureException('Non 1 component scale', 'A.5.1');
        }

        tileWidthLevel0 = Math.floor(tileStructure.getTileWidth() / params.scaleX);
        tileHeightLevel0 = Math.floor(tileStructure.getTileHeight() / params.scaleY);
    }
};

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

// 'Composite' array tools
module.exports = function CompositeArray(offset) {
    var length = 0;
    var internalParts = [];

    // Get length
    this.getLength = function getLength() {
        return length;
    };

    // Get offset
    this.getOffset = function getOffset() {
        return offset;
    };

    // Push sub-array onto internalParts array and correct length
    this.pushSubArray = function pushSubArray(subArray) {
        internalParts.push(subArray);
        length += subArray.length;
    };

    // ??
    this.copyToOtherAtTheEnd = function copyToOtherAtTheEnd(result, minOffset, maxOffset) {
        checkOffsetsToCopy(minOffset, maxOffset);

        var iterator = getInternalPartsIterator(minOffset, maxOffset);

        // NOTE: What if data not in first part?

        while (tryAdvanceIterator(iterator)) {
            result.pushSubArray(iterator.subArray);
        }
    };

    // ??
    this.copyToTypedArray = function copyToTypedArray(resultArray, resultArrayOffset, minOffset, maxOffset) {

        checkOffsetsToCopy(minOffset, maxOffset);

        var iterator = getInternalPartsIterator(minOffset, maxOffset);

        // NOTE: What if data not in first part?

        while (tryAdvanceIterator(iterator)) {
            var offsetInResult = iterator.offset - resultArrayOffset;

            resultArray.set(iterator.subArray, offsetInResult);
        }
    };

    this.copyToArray = function copyToArray(resultArray, resultArrayOffset, minOffset, maxOffset) {

        checkOffsetsToCopy(minOffset, maxOffset);

        var iterator = getInternalPartsIterator(minOffset, maxOffset);

        // NOTE: What if data not in first part?

        while (tryAdvanceIterator(iterator)) {
            var offsetInResult = iterator.offset - resultArrayOffset;

            for (var j = 0; j < iterator.subArray.length; ++j) {
                resultArray[offsetInResult++] = iterator.subArray[j];
            }
        }
    };

    this.copyToOther = function copyToOther(other) {
        if (other.getOffset() > offset) {
            throw new jGlobals.jpipExceptions.InternalErrorException('CompositeArray: Trying to copy part into a latter part');
        }

        var otherEndOffset = other.getOffset() + other.getLength();
        var isOtherContainsThis = offset + length <= otherEndOffset;
        if (isOtherContainsThis) {
            return;
        }

        // Do not override already exist data (for efficiency)
        var minOffset = otherEndOffset;

        var iterator = getInternalPartsIterator(minOffset);

        if (!tryAdvanceIterator(iterator)) {
            throw new jGlobals.jpipExceptions.InternalErrorException('CompositeArray: Could not merge parts');
        }

        var expectedOffsetValue = minOffset;

        do {
            if (iterator.offset !== expectedOffsetValue) {
                throw new jGlobals.jpipExceptions.InternalErrorException('CompositeArray: Non-continuous value of ' + 'rangeToCopy.offset. Expected: ' + expectedOffsetValue + ', Actual: ' + iterator.offset);
            }

            other.pushSubArray(iterator.subArray);
            expectedOffsetValue += iterator.subArray.length;
        } while (tryAdvanceIterator(iterator));
    };

    // Verify valid min and max offsets
    function checkOffsetsToCopy(minOffset, maxOffset) {
        if (minOffset === undefined || maxOffset === undefined) {
            throw new jGlobals.jpipExceptions.InternalErrorException('minOffset or maxOffset is undefined for CompositeArray.copyToArray');
        }

        if (minOffset < offset) {
            throw new jGlobals.jpipExceptions.InternalErrorException('minOffset (' + minOffset + ') must be smaller than ' + 'CompositeArray offset (' + offset + ')');
        }

        if (maxOffset > offset + length) {
            throw new jGlobals.jpipExceptions.InternalErrorException('maxOffset (' + maxOffset + ') must be larger than ' + 'CompositeArray end offset (' + offset + length + ')');
        }
    }

    // Get internalParts array iterator
    function getInternalPartsIterator(minOffset, maxOffset) {
        var start = Math.max(offset, minOffset);

        var end = offset + length;
        if (maxOffset !== undefined) {
            end = Math.min(end, maxOffset);
        }

        if (start >= end) {
            var emptyIterator = {
                internalIteratorData: { isEndOfRange: true }
            };

            return emptyIterator;
        }

        var iterator = {
            subArray: null,
            offset: -1,

            internalIteratorData: {
                end: end,
                currentSubArray: null,
                currentInternalPartOffset: null,
                nextInternalPartOffset: offset,
                currentInternalPartIndex: -1,
                isEndOfRange: false
            }
        };

        var alreadyReachedToTheEnd = false;
        do {
            if (alreadyReachedToTheEnd) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Iterator reached ' + 'to the end although no data has been iterated');
            }

            alreadyReachedToTheEnd = !tryAdvanceIterator(iterator);
        } while (start >= iterator.internalIteratorData.nextInternalPartOffset);

        var cutFirstSubArray = start - iterator.internalIteratorData.currentInternalPartOffset;
        iterator.internalIteratorData.currentSubArray = iterator.internalIteratorData.currentSubArray.subarray(cutFirstSubArray);
        iterator.internalIteratorData.currentInternalPartOffset = start;

        return iterator;
    }

    function tryAdvanceIterator(iterator) {
        var internalIteratorData = iterator.internalIteratorData;

        if (internalIteratorData.isEndOfRange) {
            return false;
        }

        iterator.subArray = internalIteratorData.currentSubArray;
        iterator.offset = internalIteratorData.currentInternalPartOffset;

        ++internalIteratorData.currentInternalPartIndex;

        if (internalIteratorData.nextInternalPartOffset >= internalIteratorData.end) {
            internalIteratorData.isEndOfRange = true;

            return true;
        }

        ensureNoEndOfArrayReached(internalIteratorData.currentInternalPartIndex);

        internalIteratorData.currentSubArray = internalParts[internalIteratorData.currentInternalPartIndex];
        internalIteratorData.currentInternalPartOffset = internalIteratorData.nextInternalPartOffset;
        var currentInternalPartLength = internalParts[internalIteratorData.currentInternalPartIndex].length;

        internalIteratorData.nextInternalPartOffset = internalIteratorData.currentInternalPartOffset + currentInternalPartLength;

        var cutLastSubArray = internalIteratorData.end - internalIteratorData.currentInternalPartOffset;
        var isLastSubArray = cutLastSubArray < internalIteratorData.currentSubArray.length;

        if (isLastSubArray) {
            internalIteratorData.currentSubArray = internalIteratorData.currentSubArray.subarray(0, cutLastSubArray);
        }

        return true;
    }

    // If end of array is reached throw exception
    function ensureNoEndOfArrayReached(currentInternalPartIndex) {
        if (currentInternalPartIndex >= internalParts.length) {
            throw new jGlobals.jpipExceptions.InternalErrorException('CompositeArray: end of part has reached. Check end calculation');
        }
    }
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// A.2.1.

/**
 * Functions to help with checking and adding data to databins
 * @param {number} classId - type of databin it is (what number?)
 * @param {number} inClassId - type of databin...?
 * @param {object} jpipFactory
 * @returns {object}
 */

module.exports = function JpipDatabinParts(classId, inClassId, jpipFactory) {

    var self = this;

    var parts = []; // ??
    var databinLengthIfKnown = null; // Length of databin
    var loadedBytes = 0; // Loaded bytes

    var cachedData = []; // What data is cached

    this.getDatabinLengthIfKnown = function () {
        return databinLengthIfKnown;
    };

    this.getLoadedBytes = function getLoadedBytes() {
        return loadedBytes;
    };

    // Returns true if all databins are loaded - to what though??
    this.isAllDatabinLoaded = function isAllDatabinLoaded() {
        var result;

        switch (parts.length) {
            case 0:
                result = databinLengthIfKnown === 0;
                break;

            case 1:
                result = parts[0].getOffset() === 0 && parts[0].getLength() === databinLengthIfKnown;
                break;

            default:
                result = false;
                break;
        }

        return result;
    };

    // Return cached data as object
    this.getCachedData = function getCachedData(key) {
        var obj = cachedData[key];
        if (obj === undefined) {
            obj = {};
            cachedData[key] = obj;
        }

        return obj;
    };

    this.getClassId = function getClassId() {
        return classId;
    };

    this.getInClassId = function getInClassId() {
        return inClassId;
    };

    this.copyToCompositeArray = function copyToCompositeArray(result, rangeOptions) {
        var dummyResultStartOffset = 0;
        var params = getParamsForCopyBytes(dummyResultStartOffset, rangeOptions);

        if (params.resultWithoutCopy !== undefined) {
            return params.resultWithoutCopy;
        }

        var maxLengthCopied = iterateRange(params.databinStartOffset, params.maxLengthToCopy, function addPartToResultInCopyToCompositeArray(part, minOffsetInPart, maxOffsetInPart) {
            part.copyToOtherAtTheEnd(result, minOffsetInPart, maxOffsetInPart);
        });

        return maxLengthCopied;
    };

    this.copyBytes = function (resultArray, resultStartOffset, rangeOptions) {
        var params = getParamsForCopyBytes(resultStartOffset, rangeOptions);

        if (params.resultWithoutCopy !== undefined) {
            return params.resultWithoutCopy;
        }

        var resultArrayOffsetInDatabin = params.databinStartOffset - params.resultStartOffset;

        var actualCopyBytes = resultArray.isDummyBufferForLengthCalculation ? function () {} : function addPartToResultInCopyBytes(part, minOffsetInPart, maxOffsetInPart) {
            part.copyToArray(resultArray, resultArrayOffsetInDatabin, minOffsetInPart, maxOffsetInPart);
        };

        var maxLengthCopied = iterateRange(params.databinStartOffset, params.maxLengthToCopy, actualCopyBytes);

        return maxLengthCopied;
    };

    this.getExistingRanges = function () {
        var result = new Array(parts.length);

        for (var i = 0; i < parts.length; ++i) {
            result[i] = {
                start: parts[i].getOffset(),
                length: parts[i].getLength()
            };
        }

        return result;
    };

    // Add data to databin
    this.addData = function (header, message) {
        if (header.isLastByteInDatabin) {
            databinLengthIfKnown = header.messageOffsetFromDatabinStart + header.messageBodyLength;
        }

        if (header.messageBodyLength === 0) {
            return;
        }

        var newPart = jpipFactory.createCompositeArray(header.messageOffsetFromDatabinStart);

        var endOffsetInMessage = header.bodyStart + header.messageBodyLength;
        newPart.pushSubArray(message.subarray(header.bodyStart, endOffsetInMessage));

        // Find where to push the new message

        var indexFirstPartAfter = findFirstPartAfterOffset(header.messageOffsetFromDatabinStart);
        var indexFirstPartNearOrAfter = indexFirstPartAfter;

        if (indexFirstPartAfter > 0) {
            var previousPart = parts[indexFirstPartAfter - 1];
            var previousPartEndOffset = previousPart.getOffset() + previousPart.getLength();

            if (previousPartEndOffset === header.messageOffsetFromDatabinStart) {
                // Can merge also previous part
                --indexFirstPartNearOrAfter;
            }
        }

        if (indexFirstPartNearOrAfter >= parts.length) {
            parts.push(newPart);
            loadedBytes += header.messageBodyLength;

            return;
        }

        var firstPartNearOrAfter = parts[indexFirstPartNearOrAfter];
        var endOffsetInDatabin = header.messageOffsetFromDatabinStart + header.messageBodyLength;
        if (firstPartNearOrAfter.getOffset() > endOffsetInDatabin) {
            // Not found an overlapping part, push a new
            // part in the middle of the parts array

            for (var i = parts.length; i > indexFirstPartNearOrAfter; --i) {
                parts[i] = parts[i - 1];
            }

            parts[indexFirstPartNearOrAfter] = newPart;
            loadedBytes += header.messageBodyLength;

            return;
        }

        // Merge first and last overlapping parts - all the rest (if any) are in the middle of the new part

        var bytesAlreadySaved = firstPartNearOrAfter.getLength();

        var shouldSwap = firstPartNearOrAfter.getOffset() > header.messageOffsetFromDatabinStart;
        if (shouldSwap) {
            parts[indexFirstPartNearOrAfter] = newPart;
            newPart = firstPartNearOrAfter;

            firstPartNearOrAfter = parts[indexFirstPartNearOrAfter];
        }

        newPart.copyToOther(firstPartNearOrAfter);

        var endOffset = firstPartNearOrAfter.getOffset() + firstPartNearOrAfter.getLength();

        var partToMergeIndex;
        for (partToMergeIndex = indexFirstPartNearOrAfter; partToMergeIndex < parts.length - 1; ++partToMergeIndex) {

            if (endOffset < parts[partToMergeIndex + 1].getOffset()) {
                break;
            }

            bytesAlreadySaved += parts[partToMergeIndex + 1].getLength();
        }

        var partsToDelete = partToMergeIndex - indexFirstPartNearOrAfter;
        if (partsToDelete > 0) {
            parts[partToMergeIndex].copyToOther(firstPartNearOrAfter);

            // Delete all middle and merged parts except 1

            for (var j = indexFirstPartNearOrAfter + 1; j < parts.length - partsToDelete; ++j) {
                parts[j] = parts[j + partsToDelete];
            }

            parts.length -= partsToDelete;
        }

        loadedBytes += firstPartNearOrAfter.getLength() - bytesAlreadySaved;
    };

    function getParamsForCopyBytes(resultStartOffset, rangeOptions) {
        var forceCopyAllRange = false;
        var databinStartOffset = 0;
        var maxLengthToCopy;

        if (rangeOptions !== undefined) {
            forceCopyAllRange = !!rangeOptions.forceCopyAllRange;
            databinStartOffset = rangeOptions.databinStartOffset;
            maxLengthToCopy = rangeOptions.maxLengthToCopy;

            if (databinStartOffset === undefined) {
                databinStartOffset = 0;
            }
        }

        if (resultStartOffset === undefined) {
            resultStartOffset = 0;
        }

        if (maxLengthToCopy === 0) {
            return { resultWithoutCopy: 0 };
        }

        if (databinLengthIfKnown !== null && databinStartOffset >= databinLengthIfKnown) {
            return { resultWithoutCopy: !!maxLengthToCopy && forceCopyAllRange ? null : 0 };
        }

        var firstRelevantPartIndex = findFirstPartAfterOffset(databinStartOffset);

        if (firstRelevantPartIndex === parts.length) {
            return { resultWithoutCopy: forceCopyAllRange ? null : 0 };
        }

        if (forceCopyAllRange) {
            var isAllRequestedRangeExist = isAllRangeExist(databinStartOffset, maxLengthToCopy, firstRelevantPartIndex);

            if (!isAllRequestedRangeExist) {
                return { resultWithoutCopy: null };
            }
        }

        var params = {
            databinStartOffset: databinStartOffset,
            maxLengthToCopy: maxLengthToCopy,
            resultStartOffset: resultStartOffset
        };

        return params;
    }

    function isAllRangeExist(databinStartOffset, maxLengthToCopy, firstRelevantPartIndex) {

        if (parts[firstRelevantPartIndex].getOffset() > databinStartOffset) {
            return false;
        }

        if (maxLengthToCopy) {
            var unusedElements = databinStartOffset - parts[firstRelevantPartIndex].getOffset();
            var availableLength = parts[firstRelevantPartIndex].getLength() - unusedElements;

            var isUntilMaxLengthExist = availableLength >= maxLengthToCopy;
            return isUntilMaxLengthExist;
        }

        if (databinLengthIfKnown === null || firstRelevantPartIndex < parts.length - 1) {

            return false;
        }

        var lastPart = parts[parts.length - 1];
        var endOffsetRecieved = lastPart.getOffset() + lastPart.getLength();

        var isUntilEndOfDatabinExist = endOffsetRecieved === databinLengthIfKnown;
        return isUntilEndOfDatabinExist;
    }

    function iterateRange(databinStartOffset, maxLengthToCopy, addSubPartToResult) {

        var minOffsetInDatabinToCopy = databinStartOffset;

        var maxOffsetInDatabinToCopy;
        if (maxLengthToCopy !== undefined) {
            maxOffsetInDatabinToCopy = databinStartOffset + maxLengthToCopy;
        } else {
            var lastPart = parts[parts.length - 1];
            maxOffsetInDatabinToCopy = lastPart.getOffset() + lastPart.getLength();
        }

        var lastCopiedPart = null;

        for (var i = 0; i < parts.length; ++i) {
            if (parts[i].getOffset() >= maxOffsetInDatabinToCopy) {
                break;
            }

            var currentMinOffsetInDatabinToCopy = Math.max(minOffsetInDatabinToCopy, parts[i].getOffset());
            var currentMaxOffsetInDatabinToCopy = Math.min(maxOffsetInDatabinToCopy, parts[i].getOffset() + parts[i].getLength());

            addSubPartToResult(parts[i], currentMinOffsetInDatabinToCopy, currentMaxOffsetInDatabinToCopy);

            lastCopiedPart = parts[i];
        }

        if (lastCopiedPart === null) {
            return 0;
        }

        var lastOffsetCopied = Math.min(lastCopiedPart.getOffset() + lastCopiedPart.getLength(), maxOffsetInDatabinToCopy);

        var maxLengthCopied = lastOffsetCopied - databinStartOffset;
        return maxLengthCopied;
    }

    function findFirstPartAfterOffset(offset) {
        var index;
        for (index = 0; index < parts.length; ++index) {
            if (parts[index].getOffset() + parts[index].getLength() > offset) {
                break;
            }
        }

        return index;
    }

    return this;
};

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipDatabinsSaver(isJpipTilePartStream, jpipFactory) {
    // Databin class constants
    var PRECINCT_NO_AUX_CLASS = 0;
    var PRECINCT_WITH_AUX_CLASS = 1;
    var TILE_HEADER_CLASS = 2;
    var TILE_NO_AUX_CLASS = 4;
    var TILE_WITH_AUX_CLASS = 5;

    var databinsByClass = []; // Databins by class
    var forbiddenInJpp = [];
    var forbiddenInJpt = [];

    var loadedBytes = 0;
    var loadedBytesInRegisteredDatabins = 0;

    // Valid only if isJpipTilePartStream = false

    databinsByClass[TILE_HEADER_CLASS] = createDatabinsArray();
    databinsByClass[PRECINCT_NO_AUX_CLASS] = createDatabinsArray();
    databinsByClass[PRECINCT_WITH_AUX_CLASS] = databinsByClass[PRECINCT_NO_AUX_CLASS];

    forbiddenInJpt[TILE_HEADER_CLASS] = true;
    forbiddenInJpt[PRECINCT_NO_AUX_CLASS] = true;
    forbiddenInJpt[PRECINCT_WITH_AUX_CLASS] = true;

    // Valid only if isJpipTilePartStream = true

    databinsByClass[TILE_NO_AUX_CLASS] = createDatabinsArray();
    databinsByClass[TILE_WITH_AUX_CLASS] = databinsByClass[TILE_NO_AUX_CLASS];

    forbiddenInJpp[TILE_NO_AUX_CLASS] = true;
    forbiddenInJpp[TILE_WITH_AUX_CLASS] = true;

    var mainHeaderDatabin = jpipFactory.createDatabinParts(6, 0); // Main header databin

    this.getIsJpipTilePartStream = function () {
        return isJpipTilePartStream;
    };

    this.getLoadedBytes = function getLoadedBytes() {
        return loadedBytes;
    };

    this.getMainHeaderDatabin = function () {
        return mainHeaderDatabin;
    };

    this.getTileHeaderDatabin = function (inClassIndex) {
        var databin = getDatabinFromArray(databinsByClass[TILE_HEADER_CLASS], TILE_HEADER_CLASS, inClassIndex,
        /*isJpipTilePartStreamExpected=*/false, 'tileHeader');

        return databin;
    };

    this.getPrecinctDatabin = function (inClassIndex) {
        var databin = getDatabinFromArray(databinsByClass[PRECINCT_NO_AUX_CLASS], PRECINCT_NO_AUX_CLASS, inClassIndex,
        /*isJpipTilePartStreamExpected=*/false, 'precinct');

        return databin;
    };

    this.getTileDatabin = function (inClassIndex) {
        var databin = getDatabinFromArray(databinsByClass[TILE_NO_AUX_CLASS], TILE_NO_AUX_CLASS, inClassIndex,
        /*isJpipTilePartStreamExpected=*/true, 'tilePart');

        return databin;
    };

    this.addEventListener = function addEventListener(databin, event, listener, listenerThis) {

        if (event !== 'dataArrived') {
            throw new jGlobals.jpipExceptions.InternalErrorException('Unsupported event: ' + event);
        }

        var classId = databin.getClassId();
        var inClassId = databin.getInClassId();
        var databinsArray = databinsByClass[classId];

        if (databin !== databinsArray.databins[inClassId]) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Unmatched databin ' + 'with class-ID=' + classId + ' and in-class-ID=' + inClassId);
        }

        if (databinsArray.listeners[inClassId] === undefined) {
            databinsArray.listeners[inClassId] = [];
        }

        if (databinsArray.listeners[inClassId].length === 0) {
            loadedBytesInRegisteredDatabins += databin.getLoadedBytes();
        }

        var handle = {
            listener: listener,
            listenerThis: listenerThis,
            databin: databin,
            isRegistered: true,
            index: databinsArray.listeners[inClassId].length
        };
        databinsArray.listeners[inClassId].push(handle);

        databinsArray.databinsWithListeners[inClassId] = databin;
        return handle;
    };

    this.removeEventListener = function removeEventListener(handle) {
        var classId = handle.databin.getClassId();
        var inClassId = handle.databin.getInClassId();
        var databinsArray = databinsByClass[classId];
        var listeners = databinsArray.listeners[inClassId];

        if (handle.databin !== databinsArray.databins[inClassId] || handle.databin !== databinsArray.databinsWithListeners[inClassId]) {

            throw new jGlobals.jpipExceptions.InternalErrorException('Unmatched databin ' + 'with class-ID=' + classId + ' and in-class-ID=' + inClassId);
        }

        if (handle !== listeners[handle.index]) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Incosnsitency in ' + 'databin listeners indices');
        }

        listeners[handle.index].isRegistered = false;
        listeners[handle.index] = listeners[listeners.length - 1];
        listeners[listeners.length - 1].index = handle.index;
        listeners.length -= 1;

        if (listeners.length === 0) {
            delete databinsArray.databinsWithListeners[inClassId];
            loadedBytesInRegisteredDatabins -= handle.databin.getLoadedBytes();
        }
    };

    this.cleanupUnregisteredDatabins = function cleanupUnregisteredDatabins() {
        for (var i = 0; i < databinsByClass.length; ++i) {
            if (databinsByClass[i] === undefined) {
                continue;
            }

            var databins = databinsByClass[i].databinsWithListeners;
            databinsByClass[i].databins = databins.slice();
        }

        loadedBytes = loadedBytesInRegisteredDatabins;
    };

    this.saveData = function (header, message) {
        // A.2.2

        if (header.codestreamIndex !== 0) {
            throw new jGlobals.jpipExceptions.UnsupportedFeatureException('Non zero Csn (Code Stream Index)', 'A.2.2');
        }

        switch (header.classId) {
            case 6:
                saveMainHeader(header, message);
                break;

            case 8:
                saveMetadata(header, message);
                break;

            default:
                // A.3.2, A.3.3, A.3.4

                var databinsArray = databinsByClass[header.classId];
                if (databinsArray === undefined) {
                    break; // A.2.2
                }

                var isJptExpected = !!forbiddenInJpp[header.classId];
                var databin = getDatabinFromArray(databinsArray, header.classId, header.inClassId, isJptExpected, '<class ID ' + header.classId + '>');

                var bytesBefore = databin.getLoadedBytes();
                databin.addData(header, message);
                var bytesDifference = databin.getLoadedBytes() - bytesBefore;
                loadedBytes += bytesDifference;

                var listeners = databinsArray.listeners;
                var databinListeners = listeners[header.inClassId];

                if (databinListeners !== undefined && databinListeners.length > 0) {
                    loadedBytesInRegisteredDatabins += bytesDifference;

                    var localListeners = databinListeners.slice();

                    for (var i = 0; i < localListeners.length; ++i) {
                        var listener = localListeners[i];
                        if (listener.isRegistered) {
                            listener.listener.call(listener.listenerThis, databin);
                        }
                    }
                }

                break;
        }
    };

    function saveMainHeader(header, message) {
        // A.3.5

        if (header.inClassId !== 0) {
            throw new jGlobals.jpipExceptions.IllegalDataException('Main header data-bin with ' + 'in-class index other than zero is not valid', 'A.3.5');
        }

        var bytesBefore = mainHeaderDatabin.getLoadedBytes();
        mainHeaderDatabin.addData(header, message);
        var bytesDifference = mainHeaderDatabin.getLoadedBytes() - bytesBefore;

        loadedBytes += bytesDifference;
        loadedBytesInRegisteredDatabins += bytesDifference;
    }

    function saveMetadata(header, message) {
        // A.3.6

        // throw new jGlobals.jpipExceptions.UnsupportedFeatureException('recieve metadata-bin', 'A.3.6');

        // ignore unused metadata (legal according to A.2.2).
    }

    function getDatabinFromArray(databinsArray, classId, inClassId, isJpipTilePartStreamExpected, databinTypeDescription) {

        if (isJpipTilePartStreamExpected !== isJpipTilePartStream) {
            throw new jGlobals.jpipExceptions.WrongStreamException('databin of type ' + databinTypeDescription, isJpipTilePartStream);
        }

        var databin = databinsArray.databins[inClassId];
        if (!databin) {
            databin = jpipFactory.createDatabinParts(classId, inClassId);
            databinsArray.databins[inClassId] = databin;
        }

        return databin;
    }

    // Returns {databins: [], listeners: [], databinsWithListeners: []}
    function createDatabinsArray() {
        return {
            databins: [],
            listeners: [],
            databinsWithListeners: []
        };
    }

    return this;
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = JpipFetch;

var jGlobals = __webpack_require__(0);

function JpipFetch(fetchContext, requester, progressiveness) {
    var codestreamPartParams = null;
    var dedicatedChannelHandle = null;
    var serverRequest = null;
    var isFailure = false;
    var isTerminated = false;
    var isProgressive = false;
    //var isDone = false;
    var requestedProgressiveStage = 0;
    //var reachedQualityLayer = 0;
    var nextProgressiveStage = 0;

    this.setDedicatedChannelHandle = function setDedicatedChannelHandle(dedicatedChannelHandle_) {

        dedicatedChannelHandle = dedicatedChannelHandle_;
    };

    this.move = function move(codestreamPartParams_) {
        if (dedicatedChannelHandle === null && codestreamPartParams !== null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot move non movable fetch');
        }
        codestreamPartParams = codestreamPartParams_;
        requestData();
    };

    this.resume = function resume() {
        requestData();
    };

    this.stop = function stop() {
        if (serverRequest === null) {
            if (isTerminated /* || isDone*/) {
                    throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot stop already terminated fetch');
                }
            throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot stop already stopped fetch');
        }

        if (!dedicatedChannelHandle) {
            requester.stopRequestAsync(serverRequest);
            serverRequest = null;
        }

        // NOTE: Send a stop request within JpipRequest and resolve the Promise
        // only after server response (This is only performance issue, no
        // functional problem: a new fetch will trigger a JPIP request with
        // wait=no, and the old request will be actually stopped).
        return fetchContext.stopped();
    };

    this.terminate = function terminate() {
        if (dedicatedChannelHandle) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Unexpected terminate event on movable fetch');
        }
        if (isTerminated) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Double terminate event');
        }

        serverRequest = null;
        isTerminated = true;
    };

    this.isProgressiveChanged = function isProgressiveChanged(isProgressive_) {
        isProgressive = isProgressive_;
        if (dedicatedChannelHandle && serverRequest !== null) {
            serverRequest = null;
            requestData();
        }
    };

    function requestData() {
        if (nextProgressiveStage >= progressiveness.length) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Unexpected requestData() after fetch done');
        }
        if (serverRequest !== null && dedicatedChannelHandle === null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot resume already-active-fetch');
        }

        if (isTerminated) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot resume already-terminated-fetch');
        }

        setTimeout(function () {
            if (nextProgressiveStage >= progressiveness.length || serverRequest !== null || isTerminated) {

                return;
            }

            //if (isDone) {
            //    return;
            //}

            requestedProgressiveStage = isProgressive ? nextProgressiveStage : progressiveness.length - 1;

            serverRequest = requester.requestData(codestreamPartParams, requesterCallbackOnAllDataRecieved, requesterCallbackOnFailure, progressiveness[requestedProgressiveStage].minNumQualityLayers, dedicatedChannelHandle);
        });
    }

    function requesterCallbackOnAllDataRecieved(request, isResponseDone) {
        serverRequest = null;
        if (!isResponseDone) {
            return;
        }

        //if (isTerminated && requestedQualityLayer > reachedQualityLayer) {
        //    throw new jGlobals.jpipExceptions.IllegalDataException(
        //        'JPIP server not returned all data', 'D.3');
        //}
        nextProgressiveStage = requestedProgressiveStage;
        if (nextProgressiveStage >= progressiveness.length) {
            fetchContext.done();
        }
    }

    function requesterCallbackOnFailure() {
        //updateStatus(STATUS_ENDED, 'endAsync()');

        //if (failureCallback !== undefined) {
        //    failureCallback(self, userContextVars);
        //} else {
        //    isFailure = true;
        //}
        isFailure = true;

        //if (isMoved) {
        //    throw new jGlobals.jpipExceptions.InternalErrorException(
        //        'Failure callback to an old fetch which has been already moved');
        //}
    }
}

//function JpipFetchHandle(requester, imageDataContext, dedicatedChannelHandle) {
//    this._requester = requester;
//    this._imageDataContext = imageDataContext;
//    this._serverRequest = null;
//    this._dedicatedChannelHandle = dedicatedChannelHandle;
//    this._isFailure = false;
//    this._isMoved = false;
//    this._requestedQualityLayer = 0;
//    this._reachedQualityLayer = 0;
//    this._requesterCallbackOnFailureBound = this._requesterCallbackOnFailure.bind(this);
//    
//    if (imageDataContext.isDisposed()) {
//        throw new jGlobals.jpipExceptions.IllegalOperationException(
//            'Cannot initialize JpipFetchHandle with disposed ImageDataContext');
//    }
//    imageDataContext.on('data', this._onData.bind(this));
//}
//
//JpipFetchHandle.prototype.resume = function resume() {
//    if (this._serverRequest !== null) {
//        throw new jGlobals.jpipExceptions.IllegalOperationException(
//            'Cannot resume already-active-fetch');
//    }
//    
//    if (this._imageDataContext.isDisposed()) {
//        throw new jGlobals.jpipExceptions.IllegalOperationException(
//            'Cannot fetch data with disposed imageDataContext');
//    }
//    
//    if (this._isMoved) {
//        throw new jGlobals.jpipExceptions.IllegalOperationException(
//            'Cannot resume movable fetch which has been already moved; Should' +
//            ' start a new fetch with same dedicatedChannelHandle instead');
//    }
//    
//    this._requestData();
//};
//
//JpipFetchHandle.prototype.stopAsync = function stopAsync() {
//    if (this._serverRequest === null) {
//        if (this._imageDataContext.isDisposed() || this._imageDataContext.isDone()) {
//            return;
//        }
//        throw new jGlobals.jpipExceptions.IllegalOperationException(
//            'Cannot stop already stopped fetch');
//    }
//    
//    if (this._dedicatedChannelHandle) {
//        this._isMoved = true;
//    } else {
//        this._requester.stopRequestAsync(this._serverRequest);
//        this._serverRequest = null;
//    }
//    
//    return new Promise(function(resolve, reject) {
//        // NOTE: Send a stop request within JpipRequest and resolve the Promise
//        // only after server response (This is only performance issue, no
//        // functional problem: a new fetch will trigger a JPIP request with
//        // wait=no, and the old request will be actually stopped).
//        resolve();
//    });
//};
//
//JpipFetchHandle.prototype._requesterCallbackOnAllDataRecieved =
//    function (request, isResponseDone, requestedQualityLayer) {
//    
//    if (isResponseDone &&
//        !this._isMoved &&
//        !this._imageDataContext.isDisposed() &&
//        requestedQualityLayer > this._reachedQualityLayer) {
//            
//        throw new jGlobals.jpipExceptions.IllegalDataException(
//            'JPIP server not returned all data', 'D.3');
//    }
//};
//
//JpipFetchHandle.prototype._requesterCallbackOnFailure =
//    function requesterCallbackOnFailure() {
//        
//    //updateStatus(STATUS_ENDED, 'endAsync()');
//    
//    //if (failureCallback !== undefined) {
//    //    failureCallback(self, userContextVars);
//    //} else {
//    //    isFailure = true;
//    //}
//    this._isFailure = true;
//
//    if (this._isMoved) {
//        throw new jGlobals.jpipExceptions.InternalErrorException(
//            'Failure callback to an old fetch which has been already moved');
//    }
//};
//
//JpipFetchHandle.prototype._onData = function onData(imageDataContext) {
//    this._reachedQualityLayer = this._requestedQualityLayer;
//    
//    if (imageDataContext !== this._imageDataContext) {
//        throw new jGlobals.jpipExceptions.InternalErrorException(
//            'Unexpected ImageDataContext in FetchHandle event');
//    }
//    
//    if (!this._isMoved &&
//        !this._imageDataContext.isDisposed() &&
//        this._serverRequest !== null) {
//        
//        this._requestData();
//    }
//};
//
//JpipFetchHandle.prototype._requestData = function requestData() {
//    if (this._imageDataContext.isDone()) {
//        return;
//    }
//    
//    var self = this;
//    var numQualityLayersToWait = this._imageDataContext.getNextQualityLayer();
//    this._requestedQualityLayer = numQualityLayersToWait;
//        
//    this._serverRequest = this._requester.requestData(
//        this._imageDataContext.getCodestreamPartParams(),
//        function allDataRecieved(request, isResponseDone) {
//            self._requesterCallbackOnAllDataRecieved(
//                request, isResponseDone, numQualityLayersToWait);
//        },
//        this._requesterCallbackOnFailureBound,
//        numQualityLayersToWait,
//        this._dedicatedChannelHandle);
//};

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = JpipFetcher;

/* global console: false */

/**
 * 
 * @param {DatabinsSaver} databinsSaver 
 * @param {FetcherSharedObjects} fetcherSharedObjects 
 * @param {FetcherOptions} options 
 * @param {*} jpipFactory 
 */
function JpipFetcher(databinsSaver, fetcherSharedObjects, options, jpipFactory) {
    options = options || {};

    var isOpenCalled = false;
    var isCloseCalled = false;

    var resolveOpen = null;
    var rejectOpen = null;

    var url = options.url;
    var progressiveness;

    this.setProgressiveness = function setProgressiveness(progressiveness_) {
        progressiveness = progressiveness_;
    };

    this.open = function open() {
        if (isOpenCalled) {
            throw 'webJpip error: Cannot call JpipFetcher.open() twice';
        }
        isOpenCalled = true;

        if (fetcherSharedObjects.openedCount) {
            ++fetcherSharedObjects.openedCount;
            return fetcherSharedObjects.openPromise;
        }

        var progressionOrder = 'RPCL';
        var maxChannelsInSession = options.maxChannelsInSession || 1;
        var maxRequestsWaitingForResponseInChannel = options.maxRequestsWaitingForResponseInChannel || 1;

        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();

        var markersParser = jpipFactory.createMarkersParser(mainHeaderDatabin);
        var offsetsCalculator = jpipFactory.createOffsetsCalculator(mainHeaderDatabin, markersParser);
        var structureParser = jpipFactory.createStructureParser(databinsSaver, markersParser, offsetsCalculator);

        fetcherSharedObjects.codestreamStructure = jpipFactory.createCodestreamStructure(structureParser, progressionOrder);
        fetcherSharedObjects.paramsModifier = jpipFactory.createRequestParamsModifier(fetcherSharedObjects.codestreamStructure);

        fetcherSharedObjects.requester = jpipFactory.createReconnectableRequester(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, fetcherSharedObjects.codestreamStructure, databinsSaver);

        fetcherSharedObjects.requester.setStatusCallback(requesterStatusCallback);

        fetcherSharedObjects.isOpenCalledBeforePromiseInitialized = false;
        fetcherSharedObjects.openedCount = 1;
        fetcherSharedObjects.openPromise = new Promise(function (resolve, reject) {
            resolveOpen = resolve;
            rejectOpen = reject;
            fetcherSharedObjects.requester.open(url);
        });

        return fetcherSharedObjects.openPromise;
    };

    this.close = function close() {
        return new Promise(function (resolve, reject) {
            if (isCloseCalled) {
                reject('Already closed');
                return;
            }
            if (!isOpenCalled) {
                reject('Not opened');
                return;
            }
            isCloseCalled = true;

            var opened = --fetcherSharedObjects.openedCount;
            if (opened < 0) {
                reject('Inconsistency in openedCount');
            }
            if (opened === 0) {
                fetcherSharedObjects.requester.close(resolve);
            }
        });
    };

    this.on = function on() {
        // Required for all imageDecoderFramework fetcher instances
    };

    this.startFetch = function startFetch(fetchContext, codestreamPartParams) {
        var paramsModified = fetcherSharedObjects.paramsModifier.modifyCodestreamPartParams(codestreamPartParams);
        var fetch = createFetch(fetchContext);

        fetch.move(paramsModified);
    };

    this.startMovableFetch = function startMovableFetch(fetchContext, codestreamPartParams) {
        var paramsModified = fetcherSharedObjects.paramsModifier.modifyCodestreamPartParams(codestreamPartParams);
        var fetch = createFetch(fetchContext);

        var dedicatedChannelHandle = fetcherSharedObjects.requester.dedicateChannelForMovableRequest();
        fetch.setDedicatedChannelHandle(dedicatedChannelHandle);
        fetchContext.on('move', fetch.move);

        fetch.move(paramsModified);
    };

    function createFetch(fetchContext) {
        //var imageDataContext = jpipFactory.createImageDataContext(
        //    jpipObjectsForRequestContext,
        //    codestreamPartParamsModified,
        //    progressivenessModified);
        //    //{
        //    //    disableServerRequests: !!options.isOnlyWaitForData,
        //    //    isMovable: false,
        //    //    userContextVars: userContextVars,
        //    //    failureCallback: options.failureCallback
        //    //});

        var fetch = jpipFactory.createFetch(fetchContext, fetcherSharedObjects.requester, progressiveness);

        fetchContext.on('isProgressiveChanged', fetch.isProgressiveChanged);
        fetchContext.on('terminate', fetch.terminate);
        fetchContext.on('stop', fetch.stop);
        fetchContext.on('resume', fetch.resum);

        return fetch;
    }

    //this.startMovableFetch = function startMovableFetch(imageDataContext, movableFetchState) {
    //    movableFetchState.dedicatedChannelHandle =
    //        requester.dedicateChannelForMovableRequest();
    //    movableFetchState.fetchHandle = jpipFactory.createFetchHandle(
    //        requester, imageDataContext, movableFetchState.dedicatedChannelHandle);
    //    movableFetchState.fetchHandle.resume();
    //};
    //
    //this.moveFetch = function moveFetch(imageDataContext, movableFetchState) {
    //    movableFetchState.fetchHandle.stopAsync();
    //    movableFetchState.fetchHandle = jpipFactory.createFetchHandle(
    //        requester, imageDataContext, movableFetchState.dedicatedChannelHandle);
    //    movableFetchState.fetchHandle.resume();
    //};

    this.reconnect = function reconnect() {
        fetcherSharedObjects.requester.reconnect();
    };

    function requesterStatusCallback(requesterStatus) {
        var serializableException = null;
        if (requesterStatus.exception !== null) {
            serializableException = requesterStatus.exception.toString();
        }

        var status = {
            isReady: requesterStatus.isReady,
            exception: serializableException
        };

        if (!resolveOpen || !status.isReady && !status.exception) {
            if (status.exception) {
                try {
                    // TODO: Nicer way to propagate errors from here is required
                    console.error('JpipFetcher.requesterStatusCallback got ' + 'unexpected exception: ' + status.exception);
                } catch (e) {
                    // Old IE not support console.log
                }
            }

            return;
        }

        var localResolve = resolveOpen;
        var localReject = rejectOpen;
        resolveOpen = null;
        rejectOpen = null;

        if (!status.isReady) {
            localReject(status.exception);
            return;
        }

        var params = fetcherSharedObjects.codestreamStructure.getSizesParams();
        var clonedParams = JSON.parse(JSON.stringify(params));

        var tile = fetcherSharedObjects.codestreamStructure.getDefaultTileStructure();
        var component = tile.getDefaultComponentStructure();

        clonedParams.imageLevel = 0;
        clonedParams.lowestQuality = 1;
        clonedParams.highestQuality = tile.getNumQualityLayers();
        clonedParams.numResolutionLevelsForLimittedViewer = component.getNumResolutionLevels();

        localResolve(clonedParams);
    }

    return this;
}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipHeaderModifier(offsetsCalculator, progressionOrder) {

    var encodedProgressionOrder = encodeProgressionOrder(progressionOrder);

    this.modifyMainOrTileHeader = function modifyMainOrTileHeader(result, originalDatabin, databinOffsetInResult, level) {

        if (!result.isDummyBufferForLengthCalculation) {
            modifyProgressionOrder(result, originalDatabin, databinOffsetInResult);
        }

        if (level === undefined) {
            return 0;
        }

        var bestResolutionLevelsRanges = offsetsCalculator.getRangesOfBestResolutionLevelsData(originalDatabin, level);

        if (bestResolutionLevelsRanges.numDecompositionLevelsOffset !== null && !result.isDummyBufferForLengthCalculation) {
            var offset = databinOffsetInResult + bestResolutionLevelsRanges.numDecompositionLevelsOffset;

            result[offset] -= level;
        }

        var bytesRemoved = removeRanges(result, bestResolutionLevelsRanges.ranges, databinOffsetInResult);

        var bytesAdded = -bytesRemoved;
        return bytesAdded;
    };

    this.modifyImageSize = function modifyImageSize(result, newReferenceGridSize) {

        if (result.isDummyBufferForLengthCalculation) {
            return;
        }

        var sizMarkerOffset = offsetsCalculator.getImageAndTileSizeOffset();

        var referenceGridSizeOffset = sizMarkerOffset + jGlobals.j2kOffsets.REFERENCE_GRID_SIZE_OFFSET_AFTER_SIZ_MARKER;

        var imageOffsetBytesOffset = referenceGridSizeOffset + 8;
        var tileSizeBytesOffset = referenceGridSizeOffset + 16;
        var firstTileOffsetBytesOffset = referenceGridSizeOffset + 24;

        modifyInt32(result, referenceGridSizeOffset, newReferenceGridSize.regionWidth);
        modifyInt32(result, referenceGridSizeOffset + 4, newReferenceGridSize.regionHeight);

        modifyInt32(result, tileSizeBytesOffset, newReferenceGridSize.tileWidth);
        modifyInt32(result, tileSizeBytesOffset + 4, newReferenceGridSize.tileHeight);

        modifyInt32(result, imageOffsetBytesOffset, 0);
        modifyInt32(result, imageOffsetBytesOffset + 4, 0);

        modifyInt32(result, firstTileOffsetBytesOffset, 0);
        modifyInt32(result, firstTileOffsetBytesOffset + 4, 0);
    };

    this.modifyInt32 = modifyInt32;

    function modifyProgressionOrder(result, originalDatabin, databinOffsetInResult) {
        var codingStyleOffset = offsetsCalculator.getCodingStyleOffset(originalDatabin);

        if (codingStyleOffset !== null) {
            var progressionOrderOffset = databinOffsetInResult + codingStyleOffset + 5;

            result[progressionOrderOffset] = encodedProgressionOrder;
        }
    }

    function removeRanges(result, rangesToRemove, addOffset) {
        if (rangesToRemove.length === 0) {
            return 0; // zero bytes removed
        }

        if (!result.isDummyBufferForLengthCalculation) {
            for (var i = 0; i < rangesToRemove.length; ++i) {
                var offset = addOffset + rangesToRemove[i].markerSegmentLengthOffset;

                var originalMarkerSegmentLength = (result[offset] << 8) + result[offset + 1];

                var newMarkerSegmentLength = originalMarkerSegmentLength - rangesToRemove[i].length;

                result[offset] = newMarkerSegmentLength >>> 8;
                result[offset + 1] = newMarkerSegmentLength & 0xFF;
            }
        }

        var offsetTarget = addOffset + rangesToRemove[0].start;
        var offsetSource = offsetTarget;
        for (var j = 0; j < rangesToRemove.length; ++j) {
            offsetSource += rangesToRemove[j].length;

            var nextRangeOffset = j + 1 < rangesToRemove.length ? addOffset + rangesToRemove[j + 1].start : result.length;

            for (; offsetSource < nextRangeOffset; ++offsetSource) {
                result[offsetTarget] = result[offsetSource];
                ++offsetTarget;
            }
        }

        var bytesRemoved = offsetSource - offsetTarget;

        return bytesRemoved;
    }

    function modifyInt32(bytes, offset, newValue) {
        if (bytes.isDummyBufferForLengthCalculation) {
            return;
        }

        bytes[offset++] = newValue >>> 24;
        bytes[offset++] = newValue >>> 16 & 0xFF;
        bytes[offset++] = newValue >>> 8 & 0xFF;
        bytes[offset++] = newValue & 0xFF;
    }

    function encodeProgressionOrder(progressionOrder) {
        // A.6.1

        // Table A.16

        switch (progressionOrder) {
            case 'LRCP':
                return 0;

            case 'RLCP':
                return 1;

            case 'RPCL':
                return 2;

            case 'PCRL':
                return 3;

            case 'CPRL':
                return 4;

            default:
                throw new jGlobals.j2kExceptions.IllegalDataException('Progression order of ' + progressionOrder, 'A.6.1, table A.16');
        }
    }
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = JpipImageDataContext;

function JpipImageDataContext(jpipObjects, codestreamPart, maxQuality, progressiveness) {
    this._codestreamPart = codestreamPart;
    this._reconstructor = jpipObjects.reconstructor;
    this._packetsDataCollector = jpipObjects.packetsDataCollector;
    this._qualityLayersCache = jpipObjects.qualityLayersCache;
    this._codestreamStructure = jpipObjects.codestreamStructure;
    this._databinsSaver = jpipObjects.databinsSaver;
    this._jpipFactory = jpipObjects.jpipFactory;

    this._maxQualityPerPrecinct = [];
    this._registeredPrecinctDatabins = [];
    this._dataListeners = [];
    this._isDisposed = false;
    this._isProgressive = true;

    this._listener = this._jpipFactory.createQualityWaiter(this._codestreamPart, progressiveness, maxQuality, this._qualityLayerReachedCallback, this._codestreamStructure, this._databinsSaver, this._startTrackPrecinct, this);

    this._listener.register();
}

JpipImageDataContext.prototype.getProgressiveStagesFinished = function getProgressiveStagesFinished() {
    //ensureNoFailure();
    this._ensureNotDisposed();
    return this._listener.getProgressiveStagesFinished();
};

JpipImageDataContext.prototype.getFetchedData = function getFetchedData(quality) {
    this._ensureNotDisposed();
    if (this.getProgressiveStagesFinished() === 0) {
        throw 'JpipImageDataContext error: cannot call getFetchedData before getProgressiveStagesFinished() > 0';
    }

    //ensureNoFailure();
    var minQuality = this._listener.getQualityReached();
    if (quality) {
        if (quality > minQuality) {
            throw 'JpipImageDataContext error: getFetchedData called ' + 'with quality higher than already reached';
        }
        minQuality = quality;
    }
    var codeblocks = this._packetsDataCollector.getAllCodeblocksData(this._codestreamPart, minQuality, quality);

    var headersCodestream = this._getCodestream( /*isOnlyHeadersWithoutBitstream=*/true);

    if (codeblocks.codeblocksData === null) {
        throw new jGlobals.jpipExceptions.InternalErrorException('Could not collect codeblocks although progressiveness ' + 'stage has been reached');
    }

    if (headersCodestream === null) {
        throw new jGlobals.jpipExceptions.InternalErrorException('Could not reconstruct codestream although ' + 'progressiveness stage has been reached');
    }

    //alreadyReturnedCodeblocks = codeblocks.alreadyReturnedCodeblocks;
    return {
        headersCodestream: headersCodestream,
        codeblocksData: codeblocks.codeblocksData,
        minQuality: minQuality
    };
};

JpipImageDataContext.prototype.getFetchedDataAsCodestream = function getFetchedDataAsCodestream() {
    return this._getCodestream( /*isOnlyHeadersWithoutBitstream=*/false);
};

JpipImageDataContext.prototype.on = function on(event, listener) {
    this._ensureNotDisposed();
    if (event !== 'data') {
        throw 'JpipImageDataContext error: Unexpected event ' + event;
    }

    this._dataListeners.push(listener);
};

JpipImageDataContext.prototype.isDone = function isDone() {
    this._ensureNotDisposed();
    return this._listener.isDone();
};

JpipImageDataContext.prototype.dispose = function dispose() {
    this._ensureNotDisposed();
    this._isDisposed = true;
    this._listener.unregister();
    this._listener = null;
    for (var i = 0; i < this._registeredPrecinctDatabins.length; ++i) {
        var databinListenerHandle = this._registeredPrecinctDatabins[i];
        this._databinsSaver.removeEventListener(databinListenerHandle);
    }
};

JpipImageDataContext.prototype.setIsProgressive = function setIsProgressive(isProgressive) {
    this._ensureNotDisposed();
    var oldIsProgressive = this._isProgressive;
    this._isProgressive = isProgressive;
    if (!oldIsProgressive && isProgressive && this.getProgressiveStagesFinished() > 0) {
        for (var i = 0; i < this._dataListeners.length; ++i) {
            this._dataListeners[i](this);
        }
    }
};

// Private methods

JpipImageDataContext.prototype._getCodestream = function getCodestream(isOnlyHeadersWithoutBitstream) {

    this._ensureNotDisposed();
    //ensureNoFailure();

    var qualityReached = this._listener.getQualityReached();

    var codestream;
    if (isOnlyHeadersWithoutBitstream) {
        codestream = this._reconstructor.createHeadersCodestream(this._codestreamPart);
    } else {
        codestream = this._reconstructor.createCodestream(this._codestreamPart, qualityReached);
    }

    if (codestream === null) {
        throw new jGlobals.jpipExceptions.InternalErrorException('Could not reconstruct codestream although ' + 'progressiveness stage has been reached');
    }

    return codestream;
};

JpipImageDataContext.prototype._startTrackPrecinct = function startTrackPrecinct(precinctDatabin, maxQuality, precinctIterator, precinctHandle) {

    var inClassIndex = precinctDatabin.getInClassId();
    this._maxQualityPerPrecinct[inClassIndex] = maxQuality;
    var handle = this._databinsSaver.addEventListener(precinctDatabin, 'dataArrived', this._precinctDataArrived, this);
    this._registeredPrecinctDatabins.push(handle);

    this._precinctDataArrived(precinctDatabin, precinctIterator);
};

JpipImageDataContext.prototype._precinctDataArrived = function precinctDataArrived(precinctDatabin, precinctIteratorOptional) {
    var inClassIndex = precinctDatabin.getInClassId();
    var maxQuality = this._maxQualityPerPrecinct[inClassIndex];
    var qualityLayers = this._qualityLayersCache.getQualityLayerOffset(precinctDatabin, maxQuality, precinctIteratorOptional);

    this._listener.precinctQualityLayerReached(inClassIndex, qualityLayers.numQualityLayers);
};

JpipImageDataContext.prototype._qualityLayerReachedCallback = function qualityLayerReachedCallback() {
    if (!this._isProgressive && !this._listener.isDone()) {
        return;
    }

    for (var i = 0; i < this._dataListeners.length; ++i) {
        this._dataListeners[i](this);
    }
};

JpipImageDataContext.prototype._ensureNotDisposed = function ensureNotDisposed() {
    if (this._isDisposed) {
        throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot use ImageDataContext after disposed');
    }
};

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);
var LOG2 = Math.log(2);

/* TODO: Need to separate this class into two functionalities:
 * - Internal sizes calculator in jpip structure (refered as sizesCalculator)
 * - Interface for image-decoder-framework.js (implements LevelCalculator)
 * Also, some of the methods here are actually accessed from
 * codestreamStructure, which only delegates the call to here.
 */

module.exports = function JpipLevelCalculator(params) {

    var EDGE_TYPE_NO_EDGE = 0;
    var EDGE_TYPE_FIRST = 1;
    var EDGE_TYPE_LAST = 2;

    this.EDGE_TYPE_NO_EDGE = EDGE_TYPE_NO_EDGE;
    this.EDGE_TYPE_FIRST = EDGE_TYPE_FIRST;
    this.EDGE_TYPE_LAST = EDGE_TYPE_LAST;

    this.getTilesFromPixels = getTilesFromPixels;

    this.getNumTilesX = getNumTilesX;

    this.getNumTilesY = getNumTilesY;

    this.getTileWidth = getTileWidth;

    this.getTileHeight = getTileHeight;

    this.getFirstTileOffsetX = getFirstTileOffsetX;

    this.getFirstTileOffsetY = getFirstTileOffsetY;

    this.getFirstTileWidth = getFirstTileWidth;

    this.getFirstTileHeight = getFirstTileHeight;

    this.isEdgeTileId = isEdgeTileId;

    this.getTileSize = getTileSize;

    // Public methods for imageDecoderFramework.js

    this.getLevelWidth = getLevelWidth;

    this.getLevelHeight = getLevelHeight;

    this.getImageLevel = function getImageLevel() {
        return 0;
    };

    this.getLevel = function getLevel(regionImageLevel) {
        if (params.numResolutionLevelsForLimittedViewer === undefined) {
            throw 'This method is available only when jpipSizesCalculator ' + 'is created from params returned by jpipCodestreamClient. ' + 'It shall be used for JPIP API purposes only';
        }

        var levelX = Math.log((regionImageLevel.maxXExclusive - regionImageLevel.minX) / regionImageLevel.screenWidth) / LOG2;
        var levelY = Math.log((regionImageLevel.maxYExclusive - regionImageLevel.minY) / regionImageLevel.screenHeight) / LOG2;
        var level = Math.ceil(Math.max(levelX, levelY));
        level = Math.max(0, Math.min(params.numResolutionLevelsForLimittedViewer - 1, level));
        return level;
    };

    this.getNumResolutionLevelsForLimittedViewer = function getNumResolutionLevelsForLimittedViewer() {

        if (params.numResolutionLevelsForLimittedViewer === undefined) {
            throw 'This method is available only when jpipSizesCalculator ' + 'is created from params returned by jpipCodestreamClient. ' + 'It shall be used for JPIP API purposes only';
        }

        return params.numResolutionLevelsForLimittedViewer;
    };

    this.getLowestQuality = function getLowestQuality() {
        return 1;
    };

    this.getHighestQuality = function getHighestQuality() {
        if (params.highestQuality === undefined) {
            throw 'This method is available only when jpipSizesCalculator ' + 'is created from params returned by jpipCodestreamClient. ' + 'It shall be used for JPIP API purposes only';
        }

        return params.highestQuality;
    };

    this.getSizeOfTiles = getSizeOfTiles;

    // Private methods

    function getSizeOfTiles(tileBounds) {
        var level = tileBounds.level;
        var tileWidth = getTileWidth(level);
        var tileHeight = getTileHeight(level);

        var firstTileIndex = tileBounds.minTileX + tileBounds.minTileY * getNumTilesX();

        var lastTileIndex = tileBounds.maxTileXExclusive - 1 + (tileBounds.maxTileYExclusive - 1) * getNumTilesX();

        var firstEdgeType = isEdgeTileId(firstTileIndex);
        var lastEdgeType = isEdgeTileId(lastTileIndex);
        var firstSize = getTileSize(firstEdgeType, level);
        var lastSize = getTileSize(lastEdgeType, level);

        var width = firstSize.width;
        var height = firstSize.height;

        var tilesX = tileBounds.maxTileXExclusive - tileBounds.minTileX;
        var tilesY = tileBounds.maxTileYExclusive - tileBounds.minTileY;

        if (tilesX > 1) {
            width += lastSize.width;
            width += tileWidth * (tilesX - 2);
        }

        if (tilesY > 1) {
            height += lastSize.height;
            height += tileHeight * (tilesY - 2);
        }

        return {
            regionWidth: width,
            regionHeight: height,
            tileWidth: tileWidth,
            tileHeight: tileHeight
        };
    }

    function getTilesFromPixels(codestreamPartParams) {
        var level = codestreamPartParams.level;

        var tileWidth = getTileWidth(level);
        var tileHeight = getTileHeight(level);

        var firstTileWidth = getFirstTileWidth(level);
        var firstTileHeight = getFirstTileHeight(level);

        var minX = codestreamPartParams.minX;
        var minY = codestreamPartParams.minY;
        var maxX = codestreamPartParams.maxXExclusive;
        var maxY = codestreamPartParams.maxYExclusive;
        var startXNoFirst = (minX - firstTileWidth) / tileWidth;
        var startYNoFirst = (minY - firstTileHeight) / tileHeight;
        var endXNoFirst = (maxX - firstTileWidth) / tileWidth;
        var endYNoFirst = (maxY - firstTileHeight) / tileHeight;

        var minTileX = Math.max(0, 1 + startXNoFirst);
        var minTileY = Math.max(0, 1 + startYNoFirst);
        var maxTileX = Math.min(getNumTilesX(), 1 + endXNoFirst);
        var maxTileY = Math.min(getNumTilesY(), 1 + endYNoFirst);

        var bounds = {
            level: level,
            minTileX: Math.floor(minTileX),
            minTileY: Math.floor(minTileY),
            maxTileXExclusive: Math.ceil(maxTileX),
            maxTileYExclusive: Math.ceil(maxTileY)
        };

        return bounds;
    }

    function getTileSize(edgeType, level) {
        var tileWidth = getTileDimensionSize(edgeType.horizontalEdgeType, getFirstTileWidth, getLevelWidth, getTileWidth);

        var tileHeight = getTileDimensionSize(edgeType.verticalEdgeType, getFirstTileHeight, getLevelHeight, getTileHeight);

        if (level !== undefined) {
            var scale = 1 << level;
            tileWidth = Math.ceil(tileWidth / scale);
            tileHeight = Math.ceil(tileHeight / scale);
        }

        return {
            width: tileWidth,
            height: tileHeight
        };
    }

    function getTileDimensionSize(edgeType, getFirstTileSize, getLevelSize, getNonEdgeTileSize) {

        var result;

        switch (edgeType) {
            case EDGE_TYPE_FIRST:
                result = getFirstTileSize();
                break;

            case EDGE_TYPE_LAST:
                var nonEdgeTileSize = getNonEdgeTileSize();
                var widthWithoutFirst = getLevelSize() - getFirstTileSize();
                result = widthWithoutFirst % nonEdgeTileSize;

                if (result === 0) {
                    result = nonEdgeTileSize;
                }

                break;

            case EDGE_TYPE_NO_EDGE:
                result = getNonEdgeTileSize();
                break;

            default:
                throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected edge type: ' + edgeType);
        }

        return result;
    }
    function isEdgeTileId(tileId) {
        var numTilesX = getNumTilesX();
        var numTilesY = getNumTilesY();

        var tileX = tileId % numTilesX;
        var tileY = Math.floor(tileId / numTilesX);

        if (tileY > numTilesY || tileX < 0 || tileY < 0) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Tile index ' + tileId + ' is not in range');
        }

        var horizontalEdge = tileX === 0 ? EDGE_TYPE_FIRST : tileX === numTilesX - 1 ? EDGE_TYPE_LAST : EDGE_TYPE_NO_EDGE;

        var verticalEdge = tileY === 0 ? EDGE_TYPE_FIRST : tileY === numTilesY - 1 ? EDGE_TYPE_LAST : EDGE_TYPE_NO_EDGE;

        var result = {
            horizontalEdgeType: horizontalEdge,
            verticalEdgeType: verticalEdge
        };

        return result;
    }

    function getNumTilesX() {
        var numTilesX = Math.ceil(params.imageWidth / params.tileWidth);
        return numTilesX;
    }

    function getNumTilesY() {
        var numTilesY = Math.ceil(params.imageHeight / params.tileHeight);
        return numTilesY;
    }

    function getLevelWidth(level) {
        if (level === undefined) {
            return params.imageWidth;
        }

        var size = getSizeOfTiles({
            minTileX: 0,
            maxTileXExclusive: getNumTilesX(),
            minTileY: 0,
            maxTileYExclusive: 1,
            level: level
        });

        return size.regionWidth;
    }

    function getLevelHeight(level) {
        if (level === undefined) {
            return params.imageHeight;
        }

        var size = getSizeOfTiles({
            minTileX: 0,
            maxTileXExclusive: 1,
            minTileY: 0,
            maxTileYExclusive: getNumTilesY(),
            level: level
        });

        return size.regionHeight;
    }

    function getTileWidth(level) {
        if (level === undefined) {
            return params.tileWidth;
        }

        var scale = 1 << level;
        var width = Math.ceil(params.tileWidth / scale);
        return width;
    }

    function getTileHeight(level) {
        if (level === undefined) {
            return params.tileHeight;
        }

        var scale = 1 << level;
        var height = Math.ceil(params.tileHeight / scale);
        return height;
    }

    function getFirstTileOffsetX() {
        return params.firstTileOffsetX;
    }

    function getFirstTileOffsetY() {
        return params.firstTileOffsetY;
    }

    function getFirstTileWidth(level) {
        var firstTileWidthBestLevel = getTileWidth() - getFirstTileOffsetX();

        var imageWidth = getLevelWidth();
        if (firstTileWidthBestLevel > imageWidth) {
            firstTileWidthBestLevel = imageWidth;
        }

        var scale = 1 << level;
        var firstTileWidth = Math.ceil(firstTileWidthBestLevel / scale);

        return firstTileWidth;
    }

    function getFirstTileHeight(level) {
        var firstTileHeightBestLevel = getTileHeight() - getFirstTileOffsetY();

        var imageHeight = getLevelHeight();
        if (firstTileHeightBestLevel > imageHeight) {
            firstTileHeightBestLevel = imageHeight;
        }

        var scale = 1 << level;
        var firstTileHeight = Math.ceil(firstTileHeightBestLevel / scale);

        return firstTileHeight;
    }

    return this;
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipMarkersParser(mainHeaderDatabin, messageHeaderParser, jpipFactory) {

    var CACHE_KEY = 'markers';

    this.getMandatoryMarkerOffsetInDatabin = function getMandatoryMarkerOffsetInDatabinClosure(databin, marker, markerName, standardSection) {

        var offset = getMarkerOffsetInDatabin(databin, marker);

        if (offset === null) {
            throw new jGlobals.j2kExceptions.IllegalDataException(markerName + ' is not found where expected to be', standardSection);
        }

        return offset;
    };

    this.checkSupportedMarkers = function checkSupportedMarkersClosure(databin, markers, isMarkersSupported) {

        isMarkersSupported = !!isMarkersSupported;

        var databinMarkers = getDatabinMarkers(databin, /*forceAllMarkersParsed=*/true);

        var markersAsProperties = {};
        for (var i = 0; i < markers.length; ++i) {
            var marker = getMarkerAsPropertyName(markers[i], 'jpipMarkersParser.supportedMarkers[' + i + ']');
            markersAsProperties[marker] = true;
        }

        for (var existingMarker in databinMarkers.markerToOffset) {
            var isMarkerInList = !!markersAsProperties[existingMarker];
            if (isMarkerInList !== isMarkersSupported) {
                throw new jGlobals.j2kExceptions.UnsupportedFeatureException('Unsupported marker found: ' + existingMarker, 'unknown');
            }
        }
    };

    this.getMarkerOffsetInDatabin = getMarkerOffsetInDatabin;

    this.isMarker = isMarker;

    function isMarker(data, marker, offset) {
        var result = data[offset] === marker[0] && data[offset + 1] === marker[1];

        return result;
    }

    function getMarkerOffsetInDatabin(databin, marker) {
        var databinMarkers = getDatabinMarkers(databin, /*forceAllMarkersParsed=*/true);

        var strMarker = getMarkerAsPropertyName(marker, 'Predefined marker in jGlobals.j2kMarkers');
        var offset = databinMarkers.markerToOffset[strMarker];

        if (offset === undefined) {
            return null;
        }

        return offset;
    }

    function getDatabinMarkers(databin, forceAllMarkersParsed) {
        var databinMarkers = databin.getCachedData(CACHE_KEY);

        if (databinMarkers.markerToOffset === undefined) {
            databinMarkers.isParsedAllMarkers = false;
            databinMarkers.lastOffsetParsed = 0;
            databinMarkers.markerToOffset = {};
            databinMarkers.databin = databin;
        }

        if (databinMarkers.isParsedAllMarkers) {
            return databinMarkers;
        }

        var startOffset = 0;
        var bytes = [];
        var canParse = true;

        if (databin === mainHeaderDatabin && databinMarkers.lastOffsetParsed === 0) {
            var bytesCopied = databin.copyBytes(bytes, /*startOffset=*/0, {
                forceCopyAllRange: true,
                maxLengthToCopy: jGlobals.j2kOffsets.MARKER_SIZE
            });

            if (bytesCopied === null) {
                canParse = false;
            } else if (!isMarker(bytes, jGlobals.j2kMarkers.StartOfCodestream, /*offset=*/0)) {
                throw new jGlobals.j2kExceptions.IllegalDataException('SOC (Start Of Codestream) ' + 'is not found where expected to be', 'A.4.1');
            }

            databinMarkers.lastOffsetParsed = 2;
        }

        if (canParse) {
            actualParseMarkers(databinMarkers);
        }

        afterParseMarkers(databinMarkers, forceAllMarkersParsed);

        return databinMarkers;
    }

    function actualParseMarkers(databinMarkers) {
        var offset = databinMarkers.lastOffsetParsed;

        var bytes = [];
        var bytesCopied = databinMarkers.databin.copyBytes(bytes, /*startOffset=*/0, {
            forceCopyAllRange: true,
            maxLengthToCopy: jGlobals.j2kOffsets.MARKER_SIZE + jGlobals.j2kOffsets.LENGTH_FIELD_SIZE,
            databinStartOffset: offset
        });

        while (bytesCopied !== null) {
            var marker = getMarkerAsPropertyName(bytes, 'offset ' + offset + ' of databin with class ID = ' + databinMarkers.databin.getClassId() + ' and in class ID = ' + databinMarkers.databin.getInClassId());
            databinMarkers.markerToOffset[marker.toString()] = offset;

            var length = messageHeaderParser.getInt16(bytes, jGlobals.j2kOffsets.MARKER_SIZE);
            offset += length + jGlobals.j2kOffsets.MARKER_SIZE;

            bytesCopied = databinMarkers.databin.copyBytes(bytes, /*startOffset=*/0, {
                forceCopyAllRange: true,
                maxLengthToCopy: jGlobals.j2kOffsets.MARKER_SIZE + jGlobals.j2kOffsets.LENGTH_FIELD_SIZE,
                databinStartOffset: offset
            });
        }

        databinMarkers.lastOffsetParsed = offset;
    }

    function afterParseMarkers(databinMarkers, forceAllMarkersParsed) {
        var databinLength = databinMarkers.databin.getDatabinLengthIfKnown();
        databinMarkers.isParsedAllMarkers = databinMarkers.lastOffsetParsed === databinLength;

        if (!databinMarkers.isParsedAllMarkers && databinMarkers.databin !== mainHeaderDatabin) {
            var bytes = [];
            var bytesCopied = databinMarkers.databin.copyBytes(bytes, /*startOffset=*/0, {
                forceCopyAllRange: true,
                maxLengthToCopy: jGlobals.j2kOffsets.MARKER_SIZE,
                databinStartOffset: databinMarkers.lastOffsetParsed
            });

            if (bytesCopied !== null && isMarker(bytes, 0, jGlobals.j2kMarkers.StartOfData)) {

                databinMarkers.lastOffsetParsed += jGlobals.j2kOffsets.MARKER_SIZE;
                databinMarkers.isParsedAllMarkers = true;
            }
        }

        if (forceAllMarkersParsed && !databinMarkers.isParsedAllMarkers) {
            throw new jGlobals.jpipExceptions.InternalErrorException('data-bin with class ID = ' + databinMarkers.databin.getClassId() + ' and in class ID = ' + databinMarkers.databin.getInClassId() + ' was not recieved yet');
        }
    }

    function getMarkerAsPropertyName(bytes, markerPositionDescription) {
        if (bytes[0] !== 0xFF) {
            throw new jGlobals.j2kExceptions.IllegalDataException('Expected marker in ' + markerPositionDescription, 'A');
        }

        var marker = bytes[1].toString(16);
        return marker;
    }
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipOffsetsCalculator(mainHeaderDatabin, markersParser) {

    var supportedMarkers = [jGlobals.j2kMarkers.ImageAndTileSize, jGlobals.j2kMarkers.CodingStyleDefault, jGlobals.j2kMarkers.QuantizationDefault, jGlobals.j2kMarkers.Comment];

    this.getCodingStyleOffset = getCodingStyleOffset;

    this.getCodingStyleBaseParams = getCodingStyleBaseParams;

    this.getImageAndTileSizeOffset = function getImageAndTileSizeOffset() {
        // A.5.1 (Image and tile size marker segment)

        var sizMarkerOffset = markersParser.getMandatoryMarkerOffsetInDatabin(mainHeaderDatabin, jGlobals.j2kMarkers.ImageAndTileSize, 'Image and Tile Size (SIZ)', 'A.5.1');

        return sizMarkerOffset;
    };

    this.getRangesOfBestResolutionLevelsData = function getRangesWithDataOfResolutionLevelsClosure(databin, numResolutionLevels) {

        markersParser.checkSupportedMarkers(databin, supportedMarkers, /*isMarkersSupported=*/true);

        var numDecompositionLevelsOffset = null;

        var databinCodingStyleDefaultBaseParams = getCodingStyleBaseParams(databin, /*isMandatory=*/false);

        var databinOrMainHeaderCodingStyleBaseParams = databinCodingStyleDefaultBaseParams;
        if (databinCodingStyleDefaultBaseParams === null) {
            databinOrMainHeaderCodingStyleBaseParams = getCodingStyleBaseParams(mainHeaderDatabin, /*isMandatory=*/true);
        } else {
            numDecompositionLevelsOffset = databinCodingStyleDefaultBaseParams.numDecompositionLevelsOffset;
        }

        var codingStyleNumResolutionLevels = databinOrMainHeaderCodingStyleBaseParams.numResolutionLevels;

        if (codingStyleNumResolutionLevels <= numResolutionLevels) {
            throw new jGlobals.jpipExceptions.InternalErrorException('numResolutionLevels (' + numResolutionLevels + ') <= COD.' + 'numResolutionLevels (' + codingStyleNumResolutionLevels + ')');
        }

        var ranges = [];

        addRangeOfBestResolutionLevelsInCodingStyle(ranges, databinCodingStyleDefaultBaseParams, numResolutionLevels);

        addRangeOfBestResolutionLevelsInQuantization(ranges, databin, databinOrMainHeaderCodingStyleBaseParams, numResolutionLevels);

        var result = {
            ranges: ranges,
            numDecompositionLevelsOffset: numDecompositionLevelsOffset
        };

        return result;
    };

    function getCodingStyleBaseParams(databin, isMandatory) {

        var codingStyleDefaultOffset = getCodingStyleOffset(databin, isMandatory);

        if (codingStyleDefaultOffset === null) {
            return null;
        }

        var numBytes = 8;
        var bytesOffset = codingStyleDefaultOffset + jGlobals.j2kOffsets.MARKER_SIZE;
        var bytes = getBytes(databin, numBytes, bytesOffset);

        var codingStyleFlagsForAllComponentsOffset = 2; // Scod
        var codingStyleFlagsForAllComponents = bytes[codingStyleFlagsForAllComponentsOffset];

        var isDefaultPrecinctSize = !(codingStyleFlagsForAllComponents & 0x1);
        var isStartOfPacketMarkerAllowed = !!(codingStyleFlagsForAllComponents & 0x2);
        var isEndPacketHeaderMarkerAllowed = !!(codingStyleFlagsForAllComponents & 0x4);

        var numDecompositionLevelsOffsetInBytes = 7; // SPcod, 1st byte
        var numDecompositionLevels = bytes[numDecompositionLevelsOffsetInBytes];
        var numResolutionLevels = numDecompositionLevels + 1;

        var numDecompositionLevelsOffset = bytesOffset + numDecompositionLevelsOffsetInBytes;

        var precinctSizesOffset = isDefaultPrecinctSize ? null : codingStyleDefaultOffset + 14;

        var result = {
            codingStyleDefaultOffset: codingStyleDefaultOffset,

            isDefaultPrecinctSize: isDefaultPrecinctSize,
            isStartOfPacketMarkerAllowed: isStartOfPacketMarkerAllowed,
            isEndPacketHeaderMarkerAllowed: isEndPacketHeaderMarkerAllowed,

            numResolutionLevels: numResolutionLevels,
            precinctSizesOffset: precinctSizesOffset,
            numDecompositionLevelsOffset: numDecompositionLevelsOffset
        };

        return result;
    }

    function addRangeOfBestResolutionLevelsInCodingStyle(ranges, codingStyleDefaultBaseParams, numResolutionLevels) {

        if (codingStyleDefaultBaseParams === null || codingStyleDefaultBaseParams.isDefaultPrecinctSize) {

            return;
        }

        var levelsNotInRange = codingStyleDefaultBaseParams.numResolutionLevels - numResolutionLevels;

        var firstOffsetInRange = codingStyleDefaultBaseParams.precinctSizesOffset + levelsNotInRange;

        var markerLengthOffset = codingStyleDefaultBaseParams.codingStyleDefaultOffset + jGlobals.j2kOffsets.MARKER_SIZE;

        var precinctSizesRange = {
            markerSegmentLengthOffset: markerLengthOffset,
            start: firstOffsetInRange,
            length: numResolutionLevels
        };

        ranges.push(precinctSizesRange);
    }

    function getQuantizationDataBytesPerSubband(databin, quantizationStyleOffset) {
        var sqcdOffset = quantizationStyleOffset + 4; // Sqcd
        var bytes = getBytes(databin, /*numBytes=*/1, sqcdOffset);
        var quantizationStyle = bytes[0] & 0x1F;

        var bytesPerSubband;
        switch (quantizationStyle) {
            case 0:
                bytesPerSubband = 1;
                break;
            case 1:
                bytesPerSubband = 0;
                break;
            case 2:
                bytesPerSubband = 2;
                break;
            default:
                throw new jGlobals.j2kExceptions.IllegalDataException('Quantization style of ' + quantizationStyle, 'A.6.4');
        }

        return bytesPerSubband;
    }

    function addRangeOfBestResolutionLevelsInQuantization(ranges, databin, codingStyleDefaultBaseParams, numResolutionLevels) {

        var qcdMarkerOffset = markersParser.getMarkerOffsetInDatabin(databin, jGlobals.j2kMarkers.QuantizationDefault);

        if (qcdMarkerOffset === null) {
            return;
        }

        var bytesPerSubband = getQuantizationDataBytesPerSubband(databin, qcdMarkerOffset);

        if (bytesPerSubband === 0) {
            return;
        }

        var levelsNotInRange = codingStyleDefaultBaseParams.numResolutionLevels - numResolutionLevels;

        var subbandsNotInRange = 1 + 3 * (levelsNotInRange - 1);
        var subbandsInRange = 3 * numResolutionLevels;

        var firstOffsetInRange = qcdMarkerOffset + 5 + subbandsNotInRange * bytesPerSubband;

        var rangeLength = subbandsInRange * bytesPerSubband;

        var markerLengthOffset = qcdMarkerOffset + jGlobals.j2kOffsets.MARKER_SIZE;

        var quantizationsRange = {
            markerSegmentLengthOffset: markerLengthOffset,
            start: firstOffsetInRange,
            length: rangeLength
        };

        ranges.push(quantizationsRange);
    }

    function expectNoCodingStyleComponent(databin) {
        var cocOffset = markersParser.getMarkerOffsetInDatabin(databin, jGlobals.j2kMarkers.CodingStyleComponent);

        if (cocOffset !== null) {
            // A.6.2
            throw new jGlobals.j2kExceptions.UnsupportedFeatureException('COC Marker (Coding Style Component)', 'A.6.2');
        }
    }

    function getCodingStyleOffset(databin, isMandatory) {
        expectNoCodingStyleComponent(databin);

        var offset;
        if (isMandatory) {
            offset = markersParser.getMandatoryMarkerOffsetInDatabin(databin, jGlobals.j2kMarkers.CodingStyleDefault, 'COD (Coding style Default)', 'A.6.1');
        } else {
            offset = markersParser.getMarkerOffsetInDatabin(databin, jGlobals.j2kMarkers.CodingStyleDefault);
        }

        return offset;
    }

    function getBytes(databin, numBytes, databinStartOffset, allowEndOfRange) {
        var bytes = [];

        var rangeOptions = {
            forceCopyAllRange: true,
            maxLengthToCopy: numBytes,
            databinStartOffset: databinStartOffset
        };

        var bytesCopied = databin.copyBytes(bytes, /*startOffset=*/0, rangeOptions);
        if (bytesCopied === null) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Header data-bin has not yet recieved ' + numBytes + ' bytes starting from offset ' + databinStartOffset);
        }

        return bytes;
    }
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipPacketsDataCollector(databinsSaver, qualityLayersCache, jpipFactory) {

    this.getAllCodeblocksData = function getAllCodeblocksData(codestreamPart, minQuality, maxQuality) {

        var alreadyReturnedCodeblocks = [];
        var codeblocksData = getNewCodeblocksDataAndUpdateReturnedCodeblocks(codestreamPart, minQuality, maxQuality, alreadyReturnedCodeblocks);

        return {
            codeblocksData: codeblocksData,
            alreadyReturnedCodeblocks: alreadyReturnedCodeblocks
        };
    };

    function getNewCodeblocksDataAndUpdateReturnedCodeblocks(codestreamPart, minQuality, maxQuality, alreadyReturnedCodeblocks) {

        var tileIndexInCodestreamPart = 0;
        var dummyOffset = 0;
        var tileIterator = codestreamPart.getTileIterator();
        var result = {
            packetDataOffsets: [],
            data: jpipFactory.createCompositeArray(dummyOffset),
            allRelevantBytesLoaded: 0
        };

        while (tileIterator.tryAdvance()) {
            var precinctIterator = tileIterator.createPrecinctIterator();

            var quality = tileIterator.tileStructure.getNumQualityLayers();

            if (maxQuality !== undefined && maxQuality !== 'max') {
                quality = Math.min(quality, maxQuality);
            }

            if (minQuality === 'max') {
                codestreamPart.minNumQualityLayers = quality;
            } else if (minQuality > quality) {
                throw new jGlobals.jpipExceptions.InternalErrorException('minQuality is larger than quality');
            }

            while (precinctIterator.tryAdvance()) {
                if (!precinctIterator.isInCodestreamPart) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected precinct not in codestream part');
                }

                var inClassIndex = tileIterator.tileStructure.precinctPositionToInClassIndex(precinctIterator);
                var precinctDatabin = databinsSaver.getPrecinctDatabin(inClassIndex);

                var returnedInPrecinct = alreadyReturnedCodeblocks[inClassIndex];
                if (returnedInPrecinct === undefined) {
                    returnedInPrecinct = { layerPerCodeblock: [] };
                    alreadyReturnedCodeblocks[inClassIndex] = returnedInPrecinct;
                }

                var layerReached = pushPackets(result, tileIndexInCodestreamPart, tileIterator.tileStructure, precinctIterator, precinctDatabin, returnedInPrecinct, quality);

                if (layerReached < minQuality) {
                    // NOTE: alreadyReturnedCodeblocks is wrong in this stage,
                    // because it was updated with a data which will not be
                    // returned. I don't care about it now because returning
                    // null here means something bad happened (an exception is
                    // thrown in RequestContext when this happens).
                    // If some day the consistency of alreadyReturnedCodeblocks
                    // is important then a new object should be returned on each
                    // call to this function, or a transactional style should be
                    // used here to abort all non-returned data.

                    return null;
                }
            }

            ++tileIndexInCodestreamPart;
        }

        var dataAsUint8 = new Uint8Array(result.data.getLength());
        result.data.copyToTypedArray(dataAsUint8, 0, 0, result.data.getLength());
        result.data = dataAsUint8;

        return result;
    }

    function pushPackets(result, tileIndexInCodestreamPart, tileStructure, precinctIterator, precinctDatabin, returnedCodeblocksInPrecinct, quality) {

        var layer;
        var offsetInPrecinctDatabin;

        for (layer = 0; layer < quality; ++layer) {
            var codeblockOffsetsInDatabin = qualityLayersCache.getPacketOffsetsByCodeblockIndex(precinctDatabin, layer, precinctIterator);

            if (codeblockOffsetsInDatabin === null) {
                break;
            }

            offsetInPrecinctDatabin = codeblockOffsetsInDatabin.headerStartOffset + codeblockOffsetsInDatabin.headerLength;

            var numCodeblocks = codeblockOffsetsInDatabin.codeblockBodyLengthByIndex.length;
            var codeblockOffsetsInResult = new Array(numCodeblocks);

            var isIncompletePacket = false;

            for (var i = 0; i < numCodeblocks; ++i) {
                var returned = returnedCodeblocksInPrecinct.layerPerCodeblock[i];
                if (returned === undefined) {
                    returned = { layer: -1 };
                    returnedCodeblocksInPrecinct.layerPerCodeblock[i] = returned;
                } else if (returned.layer >= layer) {
                    continue;
                }

                var codeblock = codeblockOffsetsInDatabin.codeblockBodyLengthByIndex[i];

                var offsetInResultArray = result.data.getLength();

                var bytesCopied = precinctDatabin.copyToCompositeArray(result.data, {
                    databinStartOffset: offsetInPrecinctDatabin,
                    maxLengthToCopy: codeblock.codeblockBodyLengthBytes,
                    forceCopyAllRange: true
                });

                if (bytesCopied !== codeblock.codeblockBodyLengthBytes) {
                    codeblockOffsetsInResult.length = i;
                    isIncompletePacket = true;
                    break;
                }

                returned.layer = layer;
                codeblockOffsetsInResult[i] = {
                    start: offsetInResultArray,
                    end: offsetInResultArray + codeblock.codeblockBodyLengthBytes,
                    codingpasses: codeblock.codingPasses,
                    zeroBitPlanes: codeblock.zeroBitPlanes
                };

                offsetInPrecinctDatabin += codeblock.codeblockBodyLengthBytes;
            }

            var precinctIndex = tileStructure.precinctPositionToIndexInComponentResolution(precinctIterator);
            var packet = {
                tileIndex: tileIndexInCodestreamPart,
                r: precinctIterator.resolutionLevel,
                p: precinctIndex,
                c: precinctIterator.component,
                l: layer,
                codeblockOffsets: codeblockOffsetsInResult
            };

            result.packetDataOffsets.push(packet);

            if (isIncompletePacket) {
                break;
            }
        }

        result.allRelevantBytesLoaded += offsetInPrecinctDatabin;
        return layer;
    }
};

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipParamsCodestreamPart(codestreamPartParams, codestreamStructure, jpipFactory) {

    var tilesBounds = null;
    var fullTilesSize = null;

    Object.defineProperty(this, 'level', { get: function get() {
            return codestreamPartParams ? codestreamPartParams.level : 0;
        } });

    Object.defineProperty(this, 'fullTilesSize', { get: function get() {
            if (fullTilesSize === null) {
                validateTilesBounds();
                fullTilesSize = codestreamStructure.getSizeOfTiles(tilesBounds);
            }
            return fullTilesSize;
        } });

    Object.defineProperty(this, 'tilesBounds', { get: function get() {
            validateTilesBounds();
            return tilesBounds;
        } });

    this.getTileIterator = function () {
        var setableIterator = {
            isStarted: false,
            currentX: -1,
            currentY: -1
        };

        var iterator = {
            get tileIndex() {
                if (!setableIterator.isStarted) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('iterator.tileIndex accessed before tryAdvance()');
                }

                var tilesInRow = codestreamStructure.getNumTilesX();
                var firstInRow = setableIterator.currentY * tilesInRow;
                var index = firstInRow + setableIterator.currentX;

                return index;
            },

            get tileStructure() {
                if (!setableIterator.isStarted) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('iterator.tileIndex accessed before tryAdvance()');
                }
                var idx = iterator.tileIndex;
                var tileStructure = codestreamStructure.getTileStructure(idx);
                return tileStructure;
            },

            createPrecinctIterator: function createPrecinctIterator(isIteratePrecinctsNotInCodestreamPart) {

                if (!setableIterator.isStarted) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('iterator.tileIndex accessed before tryAdvance()');
                }
                var idx = iterator.tileIndex;
                return jpipFactory.createParamsPrecinctIterator(codestreamStructure, idx, codestreamPartParams, isIteratePrecinctsNotInCodestreamPart);
            },

            tryAdvance: function tryAdvance() {
                var result = tryAdvanceTileIterator(setableIterator);
                return result;
            }
        };

        return iterator;
    };

    function tryAdvanceTileIterator(setableIterator) {
        if (!setableIterator.isStarted) {
            validateTilesBounds();
            setableIterator.isStarted = true;
            setableIterator.currentX = tilesBounds.minTileX;
            setableIterator.currentY = tilesBounds.minTileY;

            return true;
        }

        if (setableIterator.currentY >= tilesBounds.maxTileYExclusive) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot advance tile iterator after end');
        }

        ++setableIterator.currentX;
        if (setableIterator.currentX < tilesBounds.maxTileXExclusive) {
            return true;
        }

        setableIterator.currentX = tilesBounds.minTileX;
        ++setableIterator.currentY;

        var isMoreTilesAvailable = setableIterator.currentY < tilesBounds.maxTileYExclusive;

        return isMoreTilesAvailable;
    }

    function validateTilesBounds() {
        if (tilesBounds !== null) {
            return;
        }
        if (!codestreamPartParams) {
            tilesBounds = {
                level: 0,
                minTileX: 0,
                minTileY: 0,
                maxTileXExclusive: codestreamStructure.getNumTilesX(),
                maxTileYExclusive: codestreamStructure.getNumTilesY()
            };
        } else {
            tilesBounds = codestreamStructure.getTilesFromPixels(codestreamPartParams);
        }
    }
};

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipParamsPrecinctIterator(codestreamStructure, tileIndex, codestreamPartParams, isIteratePrecinctsNotInCodestreamPart) {

    var isInitialized = false;
    var component = 0;
    var precinctX = precinctX;
    var precinctY = precinctY;
    var resolutionLevel = 0;
    var isInCodestreamPart = true;
    var precinctIndexInComponentResolution = -1;
    var inClassIndex = -1;
    var progressionOrder;
    var precinctsInCodestreamPartPerLevelPerComponent = null;
    var tileStructure;

    // A.6.1 in part 1: Core Coding System

    Object.defineProperty(this, 'tileIndex', { get: function get() {
            return tileIndex;
        } });
    Object.defineProperty(this, 'component', { get: function get() {
            return component;
        } });
    Object.defineProperty(this, 'precinctX', { get: function get() {
            return precinctX;
        } });
    Object.defineProperty(this, 'precinctY', { get: function get() {
            return precinctY;
        } });
    Object.defineProperty(this, 'resolutionLevel', { get: function get() {
            return resolutionLevel;
        } });
    Object.defineProperty(this, 'isInCodestreamPart', { get: function get() {
            return isInCodestreamPart;
        } });

    this.tryAdvance = function tryAdvance() {
        if (!isInitialized) {
            initialize();
            isInitialized = true;
            return true;
        }

        var needAdvanceNextMember = true;
        var precinctsRangeHash = isIteratePrecinctsNotInCodestreamPart ? null : precinctsInCodestreamPartPerLevelPerComponent;

        var needResetPrecinctToMinimalInCodestreamPart = false;

        precinctIndexInComponentResolution = -1;
        inClassIndex = -1;

        for (var i = 2; i >= 0; --i) {
            var newValue = advanceProgressionOrderMember(i, precinctsRangeHash);

            needAdvanceNextMember = newValue === 0;
            if (!needAdvanceNextMember) {
                break;
            }

            if (progressionOrder[i] === 'P' && !isIteratePrecinctsNotInCodestreamPart) {

                needResetPrecinctToMinimalInCodestreamPart = true;
            }
        }

        if (needAdvanceNextMember) {
            // If we are here, the last precinct has been reached
            return false;
        }

        if (precinctsInCodestreamPartPerLevelPerComponent === null) {
            isInCodestreamPart = true;
            return true;
        }

        var rangePerLevel = precinctsInCodestreamPartPerLevelPerComponent[component];
        var precinctsRange = rangePerLevel[resolutionLevel];

        if (needResetPrecinctToMinimalInCodestreamPart) {
            precinctX = precinctsRange.minPrecinctX;
            precinctY = precinctsRange.minPrecinctY;
        }

        isInCodestreamPart = precinctX >= precinctsRange.minPrecinctX && precinctY >= precinctsRange.minPrecinctY && precinctX < precinctsRange.maxPrecinctXExclusive && precinctY < precinctsRange.maxPrecinctYExclusive;

        return true;
    };

    function initialize() {
        tileStructure = codestreamStructure.getTileStructure(tileIndex);

        if (!!codestreamPartParams && codestreamPartParams.level !== undefined) {

            var minNumResolutionLevels = tileStructure.getMinNumResolutionLevelsOverComponents();

            if (minNumResolutionLevels <= codestreamPartParams.level) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Cannot advance resolution: level=' + codestreamPartParams.level + ' but should be smaller than ' + minNumResolutionLevels);
            }
        }

        precinctsInCodestreamPartPerLevelPerComponent = getPrecinctsInCodestreamPartPerLevelPerComponent();

        if (!isIteratePrecinctsNotInCodestreamPart && precinctsInCodestreamPartPerLevelPerComponent !== null) {

            var firstPrecinctsRange = precinctsInCodestreamPartPerLevelPerComponent[0][0];
            precinctX = firstPrecinctsRange.minPrecinctX;
            precinctY = firstPrecinctsRange.minPrecinctY;
        }

        progressionOrder = tileStructure.getProgressionOrder();
    }

    function getPrecinctsInCodestreamPartPerLevelPerComponent() {
        if (!codestreamPartParams) {
            return null;
        }

        var components = codestreamStructure.getNumComponents();
        var perComponentResult = new Array(components);
        var minLevel = codestreamPartParams.level || 0;

        var tileLeftInLevel = codestreamStructure.getTileLeft(tileIndex, minLevel);
        var tileTopInLevel = codestreamStructure.getTileTop(tileIndex, minLevel);

        var minXInTile = codestreamPartParams.minX - tileLeftInLevel;
        var minYInTile = codestreamPartParams.minY - tileTopInLevel;
        var maxXInTile = codestreamPartParams.maxXExclusive - tileLeftInLevel;
        var maxYInTile = codestreamPartParams.maxYExclusive - tileTopInLevel;

        for (var component = 0; component < components; ++component) {
            var componentStructure = tileStructure.getComponentStructure(component);
            var levels = componentStructure.getNumResolutionLevels();
            var levelsInCodestreamPart = levels - minLevel;
            var numResolutionLevels = componentStructure.getNumResolutionLevels();
            var perLevelResult = new Array(levels);

            for (var level = 0; level < levelsInCodestreamPart; ++level) {
                var componentScaleX = componentStructure.getComponentScaleX();
                var componentScaleY = componentStructure.getComponentScaleY();
                var levelInCodestreamPart = levelsInCodestreamPart - level - 1;
                var levelScaleX = componentScaleX << levelInCodestreamPart;
                var levelScaleY = componentScaleY << levelInCodestreamPart;

                var redundant = 4; // Redundant pixels for wavelet 9-7 convolution
                var minXInLevel = Math.floor(minXInTile / levelScaleX) - redundant;
                var minYInLevel = Math.floor(minYInTile / levelScaleY) - redundant;
                var maxXInLevel = Math.ceil(maxXInTile / levelScaleX) + redundant;
                var maxYInLevel = Math.ceil(maxYInTile / levelScaleY) + redundant;

                var precinctWidth = componentStructure.getPrecinctWidth(level) * componentScaleX;
                var precinctHeight = componentStructure.getPrecinctHeight(level) * componentScaleY;

                var minPrecinctX = Math.floor(minXInLevel / precinctWidth);
                var minPrecinctY = Math.floor(minYInLevel / precinctHeight);
                var maxPrecinctX = Math.ceil(maxXInLevel / precinctWidth);
                var maxPrecinctY = Math.ceil(maxYInLevel / precinctHeight);

                var precinctsX = componentStructure.getNumPrecinctsX(level);
                var precinctsY = componentStructure.getNumPrecinctsY(level);

                perLevelResult[level] = {
                    minPrecinctX: Math.max(0, minPrecinctX),
                    minPrecinctY: Math.max(0, minPrecinctY),
                    maxPrecinctXExclusive: Math.min(maxPrecinctX, precinctsX),
                    maxPrecinctYExclusive: Math.min(maxPrecinctY, precinctsY)
                };
            }

            perComponentResult[component] = perLevelResult;
        }

        return perComponentResult;
    }

    function advanceProgressionOrderMember(memberIndex, precinctsRange) {
        var componentStructure = tileStructure.getComponentStructure(component);

        switch (progressionOrder[memberIndex]) {
            case 'R':
                var numResolutionLevels = componentStructure.getNumResolutionLevels();
                if (!!codestreamPartParams && codestreamPartParams.level) {
                    numResolutionLevels -= codestreamPartParams.level;
                }

                ++resolutionLevel;
                resolutionLevel %= numResolutionLevels;
                return resolutionLevel;

            case 'C':
                ++component;
                component %= codestreamStructure.getNumComponents();
                return component;

            case 'P':
                var minX, minY, maxX, maxY;
                if (precinctsRange !== null) {
                    var precinctsRangePerLevel = precinctsRange[component];
                    var precinctsRangeInLevelComponent = precinctsRangePerLevel[resolutionLevel];

                    minX = precinctsRangeInLevelComponent.minPrecinctX;
                    minY = precinctsRangeInLevelComponent.minPrecinctY;
                    maxX = precinctsRangeInLevelComponent.maxPrecinctXExclusive;
                    maxY = precinctsRangeInLevelComponent.maxPrecinctYExclusive;
                } else {
                    minX = 0;
                    minY = 0;
                    maxX = componentStructure.getNumPrecinctsX(resolutionLevel);
                    maxY = componentStructure.getNumPrecinctsY(resolutionLevel);
                }

                precinctX -= minX - 1;
                precinctX %= maxX - minX;
                precinctX += minX;

                if (precinctX != minX) {
                    return precinctX - minX;
                }

                precinctY -= minY - 1;
                precinctY %= maxY - minY;
                precinctY += minY;

                return precinctY - minY;

            case 'L':
                throw new jGlobals.jpipExceptions.InternalErrorException('Advancing L is not supported in JPIP');

            default:
                throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected letter in progression order: ' + progressionOrder[memberIndex]);
        }
    }

    return this;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipPrecinctCodestreamPart(sizesCalculator, tileStructure, tileIndex, component, levelIndex, precinctX, precinctY) {

    var fullTilesSize = null;
    var tilesBounds = null;
    var level = calculateLevel();

    Object.defineProperty(this, 'level', { get: function get() {
            return level;
        } });

    Object.defineProperty(this, 'fullTilesSize', { get: function get() {
            if (fullTilesSize === null) {
                var tileBounds = this.tilesBounds;
                fullTilesSize = sizesCalculator.getSizeOfTiles(tileBounds);
            }
            return fullTilesSize;
        } });

    Object.defineProperty(this, 'tilesBounds', { get: function get() {
            if (tilesBounds === null) {
                var numTilesX = sizesCalculator.getNumTilesX();
                var x = tileIndex % numTilesX;
                var y = Math.floor(tileIndex / numTilesX);
                tilesBounds = {
                    level: level,
                    minTileX: x,
                    minTileY: y,
                    maxTileXExclusive: x + 1,
                    maxTileYExclusive: y + 1
                };
            }
            return tilesBounds;
        } });

    this.getTileIterator = function () {
        var tryAdvanceTileCalls = 0;

        return {
            get tileIndex() {
                checkValidTileIterator('tile', tryAdvanceTileCalls);
                return tileIndex;
            },

            get tileStructure() {
                checkValidTileIterator('tile', tryAdvanceTileCalls);
                return tileStructure;
            },

            tryAdvance: function tryAdvance() {
                if (tryAdvanceTileCalls > 2) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('Cannot advance tile iterator after ended');
                }
                ++tryAdvanceTileCalls;
                return tryAdvanceTileCalls < 2;
            },

            createPrecinctIterator: function createPrecinctIterator(isIteratePrecinctsNotInCodestreamPart) {

                checkValidTileIterator('tile', tryAdvanceTileCalls);

                if (isIteratePrecinctsNotInCodestreamPart) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('Precinct iterator of single precinct part cannot ' + 'iterate precincts out of part');
                }

                var tryAdvanceCalls = 0;

                return {
                    get tileIndex() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return tileIndex;
                    },
                    get component() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return component;
                    },
                    get precinctX() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return precinctX;
                    },
                    get precinctY() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return precinctY;
                    },
                    get resolutionLevel() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return levelIndex;
                    },
                    get isInCodestreamPart() {
                        checkValidTileIterator('precinct', tryAdvanceCalls);
                        return true;
                    },
                    tryAdvance: function tryAdvance() {
                        if (tryAdvanceCalls > 1) {
                            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot advance precinct iterator after ended');
                        }
                        ++tryAdvanceCalls;
                        return tryAdvanceCalls < 2;
                    }
                };
            }
        };
    };

    function checkValidTileIterator(iteratorType, tryAdvanceCalls) {
        if (tryAdvanceCalls === 0) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot use ' + iteratorType + ' iterator before started');
        } else if (tryAdvanceCalls > 1) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot use ' + iteratorType + ' iterator after ended');
        }
    }

    function calculateLevel() {
        var componentStructure = tileStructure.getComponentStructure(component);
        var numResolutionLevelsInComponent = componentStructure.getNumResolutionLevels();
        return numResolutionLevelsInComponent - levelIndex - 1;
    }
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipPrecinctsIteratorWaiter(codestreamPart, codestreamStructure, databinsSaver, iteratePrecinctCallback, jpipFactory) {

    var tileHeadersNotLoaded = 0;
    var isRegistered = false;
    var isUnregistered = false;

    var registeredTileHeaderDatabins = [];
    var accumulatedDataPerDatabin = [];

    this.isAllTileHeadersLoaded = function isAllTileHeadersLoaded() {
        return tileHeadersNotLoaded === 0;
    };

    this.register = function register() {
        if (isRegistered) {
            throw new jGlobals.jpipExceptions.InternalErrorException('JpipQualityWaiter already registered');
        }

        isRegistered = true;

        ++tileHeadersNotLoaded;

        var tileIterator = codestreamPart.getTileIterator();
        while (tileIterator.tryAdvance()) {
            var tileIndex = tileIterator.tileIndex;
            var databin = databinsSaver.getTileHeaderDatabin(tileIndex);

            var inClassId = databin.getInClassId();
            accumulatedDataPerDatabin[inClassId] = {
                precinctIterator: tileIterator.createPrecinctIterator(),
                isAlreadyLoaded: false
            };

            var handle = databinsSaver.addEventListener(databin, 'dataArrived', tileHeaderDataArrived);
            registeredTileHeaderDatabins.push(handle);

            ++tileHeadersNotLoaded;
            tileHeaderDataArrived(databin);
        }

        --tileHeadersNotLoaded;
    };

    this.unregister = function unregister() {
        if (!isRegistered) {
            throw new jGlobals.jpipExceptions.InternalErrorException('JpipQualityWaiter not registered');
        }
        if (isUnregistered) {
            return;
        }

        isUnregistered = true;

        for (var j = 0; j < registeredTileHeaderDatabins.length; ++j) {
            databinsSaver.removeEventListener(registeredTileHeaderDatabins[j]);
        }
    };

    function tileHeaderDataArrived(tileHeaderDatabin) {
        if (!tileHeaderDatabin.isAllDatabinLoaded()) {
            return;
        }

        var inClassId = tileHeaderDatabin.getInClassId();
        var tileAccumulatedData = accumulatedDataPerDatabin[inClassId];

        if (tileAccumulatedData.isAlreadyLoaded) {
            return;
        }

        tileAccumulatedData.isAlreadyLoaded = true;
        --tileHeadersNotLoaded;

        var tileIndex = inClassId; // Seems correct, but can be prettier
        var tileStructure = codestreamStructure.getTileStructure(tileIndex);

        var precinctIterator = tileAccumulatedData.precinctIterator;

        while (precinctIterator.tryAdvance()) {
            if (!precinctIterator.isInCodestreamPart) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected precinct not in codestream part');
            }

            iteratePrecinctCallback(precinctIterator, tileStructure);
        }
    }
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipQualityWaiter(codestreamPart, progressiveness, maxQuality, qualityLayerReachedCallback, codestreamStructure, databinsSaver, startTrackPrecinctCallback, callbacksThis, jpipFactory) {

    // NOTE: (performance) Toggled between int and string ('max')
    var minNumQualityLayersReached = 0;
    var progressiveStagesFinished = 0;
    var isRegistered = false;
    var isRequestDone = false;

    var accumulatedDataPerPrecinct = [];
    var precinctCountByReachedQualityLayer = [0];
    var precinctCountInMaxQualityLayer = 0;
    var precinctCount = 0;
    var pendingPrecinctUpdate = [];

    var defaultTileStructure = codestreamStructure.getDefaultTileStructure();
    var defaultNumQualityLayers = defaultTileStructure.getNumQualityLayers();

    var precinctsWaiter = jpipFactory.createPrecinctsIteratorWaiter(codestreamPart, codestreamStructure, databinsSaver, iteratePrecinctCallback);

    this.register = function register() {
        precinctsWaiter.register();
        isRegistered = true;
        tryAdvanceQualityLayersReached();
    };

    this.unregister = function unregister() {
        precinctsWaiter.unregister();
    };

    this.precinctQualityLayerReached = function precinctQualityLayerReached(precinctInClassId, qualityReached) {

        var accumulatedData = updatePrecinctData(precinctInClassId, qualityReached);

        if (accumulatedData.isUpdated && accumulatedData.qualityInTile) {
            accumulatedData.isUpdated = false;
            tryAdvanceQualityLayersReached();
        }
    };

    this.getProgressiveStagesFinished = function getProgressiveStagesFinished() {
        return progressiveStagesFinished;
    };

    this.isDone = function isDone() {
        return isRequestDone;
    };

    this.getQualityReached = function getQualityReached() {
        if (progressiveStagesFinished === 0) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Cannot create codestream before first progressiveness ' + 'stage has been reached');
        }

        var qualityReached = progressiveness[progressiveStagesFinished - 1].minNumQualityLayers;

        return qualityReached;
    };

    function iteratePrecinctCallback(precinctIterator, tileStructure) {
        var inClassIndex = tileStructure.precinctPositionToInClassIndex(precinctIterator);
        var precinctDatabin = databinsSaver.getPrecinctDatabin(inClassIndex);

        if (accumulatedDataPerPrecinct[inClassIndex]) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Precinct was iterated twice in codestream part');
        }

        ++precinctCountByReachedQualityLayer[0];
        ++precinctCount;
        var qualityInTile = tileStructure.getNumQualityLayers();
        accumulatedDataPerPrecinct[inClassIndex] = {
            qualityReached: 0,
            isUpdated: false,
            isMaxQuality: false,
            qualityInTile: qualityInTile
        };

        var pendingQualityReached = pendingPrecinctUpdate[inClassIndex];
        if (pendingQualityReached) {
            delete pendingPrecinctUpdate[inClassIndex];
            updatePrecinctData(inClassIndex, pendingQualityReached);
        }

        startTrackPrecinctCallback.call(callbacksThis, precinctDatabin, qualityInTile, precinctIterator, inClassIndex, tileStructure);

        if (isRegistered) {
            tryAdvanceQualityLayersReached();
        }
    }

    function updatePrecinctData(precinctInClassId, qualityReached) {
        var accumulatedData = accumulatedDataPerPrecinct[precinctInClassId];
        if (!accumulatedData) {
            pendingPrecinctUpdate[precinctInClassId] = qualityReached;
            return;
        }

        --precinctCountByReachedQualityLayer[accumulatedData.qualityReached];
        if (accumulatedData.isMaxQuality) {
            --precinctCountInMaxQualityLayer;
            accumulatedData.isMaxQuality = false;
        }

        // qualityReached in last quality might arrive either as 'max' or number. Normalize both cases to number
        var qualityReachedNumeric = qualityReached === 'max' ? accumulatedData.qualityInTile : qualityReached;
        accumulatedData.isUpdated = accumulatedData.qualityReached !== qualityReachedNumeric;
        accumulatedData.qualityReached = qualityReachedNumeric;

        if (qualityReachedNumeric === accumulatedData.qualityInTile) {
            ++precinctCountInMaxQualityLayer;
            accumulatedData.isMaxQuality = true;
        }

        var count = precinctCountByReachedQualityLayer[qualityReachedNumeric] || 0;
        precinctCountByReachedQualityLayer[qualityReachedNumeric] = count + 1;

        return accumulatedData;
    }

    function tryAdvanceQualityLayersReached() {
        if (precinctCountByReachedQualityLayer.length === 0 || precinctCountByReachedQualityLayer[minNumQualityLayersReached] > 0 || minNumQualityLayersReached === 'max' || progressiveStagesFinished >= progressiveness.length || !precinctsWaiter.isAllTileHeadersLoaded()) {

            return;
        }

        if (isRequestDone) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Request already done but callback is called');
        }

        var hasPrecinctsInQualityLayer;

        do {
            ++minNumQualityLayersReached;

            if (minNumQualityLayersReached >= precinctCountByReachedQualityLayer.length) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Advancing progressiveness rolled out of array of precincts counts by quality');
            }

            hasPrecinctsInQualityLayer = precinctCountByReachedQualityLayer[minNumQualityLayersReached] > 0;
        } while (!hasPrecinctsInQualityLayer);

        var numQualityLayersToWait = progressiveness[progressiveStagesFinished].minNumQualityLayers;

        if (minNumQualityLayersReached < numQualityLayersToWait) {
            return;
        }

        var isFirst = true;
        while (progressiveStagesFinished < progressiveness.length) {
            var qualityLayersRequired = progressiveness[progressiveStagesFinished].minNumQualityLayers;

            if (qualityLayersRequired === 'max' && precinctCountInMaxQualityLayer !== precinctCount || qualityLayersRequired > minNumQualityLayersReached) {

                break;
            }

            var forceCurrentStage = progressiveness[progressiveStagesFinished].forceMaxQuality === 'force' || progressiveness[progressiveStagesFinished].forceMaxQuality === 'forceAll';

            var skipForceCheck = true;
            if (progressiveStagesFinished < progressiveness.length - 1) {
                /*
                    This check captures the following common case of progressiveness:
                    [{ minNumQualityLayers: 1, forceMaxQuality: 'force' },
                     { minNumQualityLayers: 'max', forceMaxQuality: 'no' }]
                    This is the automatic progressiveness for an image with single quality layer.
                    The check here tries to avoid calling the callback twice in case that all precincts
                    have only single quality layer, which makes both stages identical.
                    Handling this situation by eliminating the first stage when calculating the automatic
                    progressiveness is wrong in case that there are tiles with non-default count of quality
                    layers that is bigger than 1, thus it should be handled here.
                 */
                skipForceCheck = precinctCountInMaxQualityLayer === precinctCount && progressiveness[progressiveStagesFinished + 1].minNumQualityLayers === 'max';
            }

            ++progressiveStagesFinished;

            if (!isFirst && !skipForceCheck && forceCurrentStage) {
                qualityLayerReachedCallback.call(callbacksThis);
            }

            isFirst = false;
        }

        isRequestDone = progressiveStagesFinished === progressiveness.length;

        qualityLayerReachedCallback.call(callbacksThis);
    }
};

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = JpipRequestParamsModifier;

function JpipRequestParamsModifier(codestreamStructure) {
    this.modifyCodestreamPartParams = function modifyCodestreamPartParams(codestreamPartParams) {
        var codestreamPartParamsModified = castCodestreamPartParams(codestreamPartParams);
        return codestreamPartParamsModified;
    };

    /**
     * Validate and fill out progressiveness.
     * @param {Progressiveness} progressiveness - Defaults progressiveness[].forceMaxQuality to 'no', it cannot be 'forceAll'. 
     * @returns {Progressiveness}
     */
    this.modifyCustomProgressiveness = function modifyCustomProgressiveness(progressiveness) {
        // Check valid argument
        if (!progressiveness || !progressiveness.length) {
            throw new jGlobals.jpipExceptions.ArgumentException('progressiveness', progressiveness, 'custom progressiveness argument should be non empty array');
        }

        // Ensure than minNumQualityLayers is given for all items

        var result = new Array(progressiveness.length);

        // Ensure minNumQualityLayers is given for all items in progressiveness array
        for (var i = 0; i < progressiveness.length; ++i) {
            var minNumQualityLayers = progressiveness[i].minNumQualityLayers;

            if (minNumQualityLayers !== 'max') {
                minNumQualityLayers = validateNumericParam(minNumQualityLayers, 'progressiveness[' + i + '].minNumQualityLayers');
            }

            // forceMaxQuality for a given progressiveness level must be
            // either 'no' or 'force', it cannot be 'forceAll'
            // it defaults to 'no'
            var forceMaxQuality = 'no';
            if (progressiveness[i].forceMaxQuality) {
                forceMaxQuality = progressiveness[i].forceMaxQuality;
                if (forceMaxQuality !== 'no' && forceMaxQuality !== 'force' && forceMaxQuality !== 'forceAll') {

                    throw new jGlobals.jpipExceptions.ArgumentException('progressiveness[' + i + '].forceMaxQuality', forceMaxQuality, 'forceMaxQuality should be "no", "force" or "forceAll"');
                }

                if (forceMaxQuality === 'forceAll') {
                    throw new jGlobals.jpipExceptions.UnsupportedFeatureException('"forceAll" value for forceMaxQuality in progressiveness');
                }
            }

            result[i] = {
                minNumQualityLayers: minNumQualityLayers,
                forceMaxQuality: forceMaxQuality
            };
        }

        return result;
    };

    /**
     * @param {number} [maxQuality] Max quality to progressive up to.
     * @returns {Progressiveness} Progressiveness of [1, 2, 3, maxQuality/2, maxQuality].
     */
    this.getAutomaticProgressiveness = function getAutomaticProgressiveness(maxQuality) {
        // Create progressiveness of (1, 2, 3, (#max-quality/2), (#max-quality))

        var progressiveness = [];

        // No progressiveness, wait for all quality layers to be fetched
        // Max quality must be the smaller of the users input maxQuality
        // or the number of quality layers of the image itself
        var tileStructure = codestreamStructure.getDefaultTileStructure();
        var numQualityLayersNumeric = tileStructure.getNumQualityLayers(); // Images number of quality layers
        var qualityNumericOrMax = 'max';

        if (maxQuality !== undefined && maxQuality !== 'max') {
            numQualityLayersNumeric = Math.min(numQualityLayersNumeric, maxQuality);
            qualityNumericOrMax = numQualityLayersNumeric;
        }

        // Logic to get [1, 2, 3, maxQuality/2, maxQuality] progressiveness
        var firstQualityLayersCount = numQualityLayersNumeric < 4 ? numQualityLayersNumeric - 1 : 3;

        for (var i = 1; i < firstQualityLayersCount; ++i) {
            progressiveness.push({
                minNumQualityLayers: i,
                forceMaxQuality: 'no'
            });
        }

        var middleQuality = Math.round(numQualityLayersNumeric / 2);
        if (middleQuality > firstQualityLayersCount && (qualityNumericOrMax === 'max' || middleQuality < qualityNumericOrMax)) {
            progressiveness.push({
                minNumQualityLayers: middleQuality,
                forceMaxQuality: 'no'
            });
        }

        progressiveness.push({
            minNumQualityLayers: qualityNumericOrMax,
            forceMaxQuality: 'no'
        });

        // Force decoding only first quality layers for quicker show-up
        progressiveness[0].forceMaxQuality = 'force';

        return progressiveness;
    };

    function castCodestreamPartParams(codestreamPartParams) {
        var level = validateNumericParam(codestreamPartParams.level, 'level',
        /*defaultValue=*/undefined,
        /*allowUndefiend=*/true);

        var minX = validateNumericParam(codestreamPartParams.minX, 'minX');
        var minY = validateNumericParam(codestreamPartParams.minY, 'minY');

        var maxX = validateNumericParam(codestreamPartParams.maxXExclusive, 'maxXExclusive');

        var maxY = validateNumericParam(codestreamPartParams.maxYExclusive, 'maxYExclusive');

        var levelWidth = codestreamStructure.getLevelWidth(level);
        var levelHeight = codestreamStructure.getLevelHeight(level);

        if (minX < 0 || maxX > levelWidth || minY < 0 || maxY > levelHeight || minX >= maxX || minY >= maxY) {

            throw new jGlobals.jpipExceptions.ArgumentException('codestreamPartParams', codestreamPartParams);
        }

        var result = {
            minX: minX,
            minY: minY,
            maxXExclusive: maxX,
            maxYExclusive: maxY,
            level: level
        };

        return result;
    }

    /**
     * Validate a given numeric parameter.
     * @param {number} inputValue - input given
     * @param {number} propertyName - name of property
     * @param {number} defaultValue - default value
     * @param {number} allowUndefined - is to be allowed undefined
     */
    function validateNumericParam(inputValue, propertyName, defaultValue, allowUndefined) {

        // If allowed undefined, return default (defined) value
        if (inputValue === undefined && (defaultValue !== undefined || allowUndefined)) {

            return defaultValue;
        }

        var result = +inputValue;
        if (isNaN(result) || result !== Math.floor(result)) {
            throw new jGlobals.jpipExceptions.ArgumentException(propertyName, inputValue);
        }

        return result;
    }
}

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

/**
 * Jpip request object
 * @param {sessionHelperObject} sessionHelper 
 * @param {messageHeaderParserObject} messageHeaderParser 
 * @param {channelObject} channel 
 * @param {string} requestUrl 
 * @param {function} callback 
 * @param {function} failureCallback 
 */
module.exports = function JpipRequest(sessionHelper, messageHeaderParser, channel, requestUrl, callback, failureCallback) {

    var KB = 1024;
    var PROGRESSIVENESS_MIN_LENGTH_BYTES = 10 * KB;

    var RESPONSE_ENDED_SUCCESS = 1;
    var RESPONSE_ENDED_ABORTED = 2;
    var RESPONSE_ENDED_SENT_ANOTHER_MESSAGE = 3;

    var self = this;
    var isActive = false; // Is this request active?
    var endedByUser = false; // ??
    var lastRequestId; // Last sent request ID
    var responseLength = PROGRESSIVENESS_MIN_LENGTH_BYTES; // Min response length

    // Start request
    this.startRequest = function startRequest() {
        // Check if request is already active or has already stopped
        if (isActive) {
            throw new jGlobals.jpipExceptions.InternalErrorException('startRequest called twice');
        } else if (endedByUser) {
            throw new jGlobals.jpipExceptions.InternalErrorException('request was already stopped');
        }

        isActive = true; // Request is now active
        sessionHelper.requestStarted(); // Increment sessionHelper.activeRequests

        sendMessageOfDataRequest(); // Send message
    };

    // Stop request
    this.stopRequestAsync = function stopRequestAsync(request) {
        endedByUser = true;
    };

    // Get last request ID
    this.getLastRequestId = function getLastRequestId() {
        if (!isActive) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected call to getLastRequestId on inactive request');
        }

        return lastRequestId;
    };

    // ??
    this.callCallbackAfterConcurrentRequestsFinished = function callCallbackAfterConcurrentRequestsFinished() {

        callback(self, /*isResponseDone=*/true);
    };

    // Success callback
    function internalSuccessCallback(ajaxResponse, isResponseDone) {
        var failed = false;

        try {
            var endedReason = processAjaxResponse(ajaxResponse, isResponseDone);

            if (endedReason === RESPONSE_ENDED_SENT_ANOTHER_MESSAGE) {
                return;
            }

            failed = endedReason === RESPONSE_ENDED_ABORTED;
        } catch (e) {
            failed = true;
            sessionHelper.onException(e);
        }

        try {
            if (!failed) {
                sessionHelper.waitForConcurrentRequestsToEnd(self);
            }

            channel.requestEnded(ajaxResponse, self);

            if (failed && !endedByUser && failureCallback !== undefined) {
                failureCallback();
            }

            sessionHelper.checkConcurrentRequestsFinished();
        } catch (e) {
            sessionHelper.onException(e);
        }
    }

    // Failure callback
    function internalFailureCallback(ajaxResponse) {
        channel.requestEnded(ajaxResponse, self);
        sessionHelper.checkConcurrentRequestsFinished();

        if (failureCallback !== undefined) {
            failureCallback();
        }
    }

    // Process the Ajax response
    function processAjaxResponse(ajaxResponse, isResponseDone) {
        if (!isResponseDone) {
            throw new jGlobals.jpipExceptions.InternalErrorException('AJAX ' + 'callback called although response is not done yet ' + 'and chunked encoding is not enabled');
        }

        var createdChannel = sessionHelper.getCreatedChannelId(ajaxResponse);

        if (createdChannel !== null) {
            if (channel.getChannelId() !== null) {
                sessionHelper.onException(new jGlobals.jpipExceptions.IllegalDataException('Channel created although was not requested', 'D.2.3'));
            } else {
                channel.setChannelId(createdChannel);
            }
        } else if (channel.getChannelId() === null) {
            sessionHelper.onException(new jGlobals.jpipExceptions.IllegalDataException('Cannot extract cid from cnew response', 'D.2.3'));
        }

        var endOffset = saveToDatabinsFromOffset(ajaxResponse);

        if (endOffset === null) {
            return RESPONSE_ENDED_ABORTED;
        }

        var endedReason = parseEndOfResponse(ajaxResponse, endOffset);
        return endedReason;
    }

    // Send Ajax response with URL
    function sendMessageOfDataRequest() {
        lastRequestId = channel.nextRequestId(); // ??

        // Create request URL
        var url = requestUrl + '&len=' + responseLength + '&qid=' + lastRequestId;

        responseLength *= 2; // Extend response length??

        // Create channel if no current channel ID
        // If firstChannel exists, use that
        var shouldCreateChannel = channel.getChannelId() === null;
        if (shouldCreateChannel) {
            url += '&cnew=http';

            var existChannelInSession = sessionHelper.getFirstChannel();

            if (existChannelInSession !== null) {
                url += '&cid=' + existChannelInSession.getChannelId();
            }

            // NOTE: If existChannelInSession, maybe should remove "&stream=0"
        } else {
            url += '&cid=' + channel.getChannelId();
        }

        // Send Ajax request
        sessionHelper.sendAjax(url, internalSuccessCallback, internalFailureCallback);
    }

    /**
     * Parse end of response
     * @param {ajaxResponse} ajaxResponse 
     * @param {number} offset - offset of characters in URL
     * @returns {number} - EoR result (defualt either RESPONSE_ENDED_ABORTED or RESPONSE_ENDED_SUCCESS)
     */
    function parseEndOfResponse(ajaxResponse, offset) {
        var endResponseResult = RESPONSE_ENDED_ABORTED;
        var bytes = new Uint8Array(ajaxResponse.response);

        // Throw exception if EoR is not found
        if (offset > bytes.length - 2 || bytes[offset] !== 0) {

            throw new jGlobals.jpipExceptions.IllegalDataException('Could not find ' + 'End Of Response (EOR) code at the end of response', 'D.3');
        }

        // Throw exceptions for ending reasons
        switch (bytes[offset + 1]) {
            case jGlobals.jpipEndOfResponseReasons.IMAGE_DONE:
            case jGlobals.jpipEndOfResponseReasons.WINDOW_DONE:
            case jGlobals.jpipEndOfResponseReasons.QUALITY_LIMIT:
                endResponseResult = RESPONSE_ENDED_SUCCESS;
                break;

            case jGlobals.jpipEndOfResponseReasons.WINDOW_CHANGE:
                if (!endedByUser) {
                    throw new jGlobals.jpipExceptions.IllegalOperationException('Server response was terminated due to newer ' + 'request issued on same channel. That may be an ' + 'internal webjpip.js error - Check that movable ' + 'requests are well maintained');
                }
                break;

            case jGlobals.jpipEndOfResponseReasons.BYTE_LIMIT:
            case jGlobals.jpipEndOfResponseReasons.RESPONSE_LIMIT:
                if (!endedByUser) {
                    sendMessageOfDataRequest();
                    endResponseResult = RESPONSE_ENDED_SENT_ANOTHER_MESSAGE;
                }

                break;

            case jGlobals.jpipEndOfResponseReasons.SESSION_LIMIT:
                sessionHelper.onException(new jGlobals.jpipExceptions.IllegalOperationException('Server resources associated with the session is ' + 'limitted, no further requests should be issued to ' + 'this session'));
                break;

            case jGlobals.jpipEndOfResponseReasons.NON_SPECIFIED:
                sessionHelper.onException(new jGlobals.jpipExceptions.IllegalOperationException('Server error terminated response with no reason specified'));
                break;

            default:
                sessionHelper.onException(new jGlobals.jpipExceptions.IllegalDataException('Server responded with illegal End Of Response ' + '(EOR) code: ' + bytes[offset + 1]));
                break;
        }

        return endResponseResult;
    }

    // ??
    function saveToDatabinsFromOffset(ajaxResponse) {
        try {
            var bytes = new Uint8Array(ajaxResponse.response);

            var offset = 0;
            var previousHeader;

            while (offset < bytes.length) {
                if (bytes[offset] === 0) {
                    // End Of Response (EOR)
                    break;
                }

                var header = messageHeaderParser.parseMessageHeader(bytes, offset, previousHeader);

                if (header.bodyStart + header.messageBodyLength > bytes.length) {
                    return offset;
                }

                sessionHelper.getDatabinsSaver().saveData(header, bytes);

                offset = header.bodyStart + header.messageBodyLength;
                previousHeader = header;
            }

            return offset;
        } catch (e) {
            sessionHelper.onException(e);

            return null;
        }
    }
};

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

/**
 * Help JPIP sessions
 * @param {string} dataRequestUrl 
 * @param {number} knownTargetId 
 * @param {object} codestreamStructure 
 * @param {object} databinsSaver 
 * @param {object} ajaxHelper - simple-ajax-helper.js object
 * @returns {object} - jpipSessionHelper
 */
module.exports = function JpipSessionHelper(dataRequestUrl, knownTargetId, codestreamStructure, databinsSaver, ajaxHelper) {

    var statusCallback = null; // Status callback function?
    var requestEndedCallback = null; // Request ended function?

    var channels = []; // Channels
    var firstChannel = null; // First channel pointer

    var activeRequests = 0; // Amount of active requests
    var waitingForConcurrentRequests = []; // List of requests waiting at the same time

    var isReady = false; // ? is ready
    var targetId = knownTargetId || '0'; // Set target ID

    // On exception, 
    this.onException = function onException(exception) {
        onStatusChange(exception);
    };

    this.getIsReady = function getIsReady() {
        return isReady;
    };

    this.setIsReady = function setIsReady(isReady_) {
        isReady = isReady_;
        onStatusChange();
    };

    this.getCodestreamStructure = function getCodestreamStructure() {
        return codestreamStructure;
    };

    this.getDatabinsSaver = function getDatabinsSaver() {
        return databinsSaver;
    };

    this.getDataRequestUrl = function getDataRequestUrl() {
        return dataRequestUrl;
    };

    this.getTargetId = function getTargetId() {
        return targetId;
    };

    this.getFirstChannel = function getFirstChannel() {
        return firstChannel;
    };

    // Set status callback
    this.setStatusCallback = function setStatusCallback(statusCallback_) {
        statusCallback = statusCallback_;
    };

    this.setRequestEndedCallback = function setRequestEndedCallback(requestEndedCallback_) {

        requestEndedCallback = requestEndedCallback_;
    };

    this.requestStarted = function requestStarted() {
        ++activeRequests;
    };

    this.requestEnded = function requestEnded(ajaxResponse, channel) {
        --activeRequests;

        var targetIdFromServer = ajaxResponse.getResponseHeader('JPIP-tid');
        if (targetIdFromServer !== '' && targetIdFromServer !== null) {
            if (targetId === '0') {
                targetId = targetIdFromServer;
            } else if (targetId !== targetIdFromServer) {
                throw new jGlobals.jpipExceptions.IllegalDataException('Server returned unmatched target ID');
            }
        }

        if (firstChannel === null) {
            firstChannel = channel;
        }

        var channelFreed = channel.getIsDedicatedForMovableRequest() ? null : channel;

        if (requestEndedCallback !== null) {
            requestEndedCallback(channelFreed);
        }
    };

    this.getActiveRequestsCount = function getActiveRequestsCount() {
        return activeRequests;
    };

    this.channelCreated = function channelCreated(channel) {
        channels.push(channel);
    };

    this.getCreatedChannelId = function getCreatedChannelId(ajaxResponse) {
        var cnewResponse = ajaxResponse.getResponseHeader('JPIP-cnew');
        if (!cnewResponse) {
            return null;
        }

        var keyValuePairsInResponse = cnewResponse.split(',');

        for (var i = 0; i < keyValuePairsInResponse.length; ++i) {
            var keyAndValue = keyValuePairsInResponse[i].split('=');

            if (keyAndValue[0] === 'cid') {
                return keyAndValue[1];
            }
        }

        return null;
    };

    this.waitForConcurrentRequestsToEnd = function waitForConcurrentRequestsToEnd(request) {

        var concurrentRequests = [];

        for (var i = 0; i < channels.length; ++i) {
            var requests = channels[i].getRequestsWaitingForResponse();
            var numRequests = requests.length;
            if (numRequests === 0) {
                continue;
            }

            var lastRequestId = requests[0].getLastRequestId();
            for (var j = 1; j < requests.length; ++j) {
                lastRequestId = Math.max(lastRequestId, requests[j].getLastRequestId());
            }

            concurrentRequests.push({
                channel: channels[i],
                requestId: lastRequestId
            });
        }

        waitingForConcurrentRequests.push({
            request: request,
            concurrentRequests: concurrentRequests
        });
    };

    this.checkConcurrentRequestsFinished = function checkConcurrentRequestsFinished() {

        for (var i = waitingForConcurrentRequests.length - 1; i >= 0; --i) {
            var isAllConcurrentRequestsFinished = false;
            var concurrentRequests = waitingForConcurrentRequests[i].concurrentRequests;

            for (var j = concurrentRequests.length - 1; j >= 0; --j) {
                var waiting = concurrentRequests[j];

                if (waiting.channel.isAllOldRequestsEnded(waiting.requestId)) {
                    concurrentRequests[j] = concurrentRequests[concurrentRequests.length - 1];
                    concurrentRequests.length -= 1;
                }
            }

            if (concurrentRequests.length > 0) {
                continue;
            }

            var request = waitingForConcurrentRequests[i].request;
            var callback = request.callback;

            waitingForConcurrentRequests[i] = waitingForConcurrentRequests[waitingForConcurrentRequests.length - 1];
            waitingForConcurrentRequests.length -= 1;

            request.callCallbackAfterConcurrentRequestsFinished();
        }
    };

    // Send Ajax request
    this.sendAjax = function sendAjax(url, callback, failureCallback) {

        var forkedFailureCallback;

        // Define failure callback function
        if (failureCallback) {
            forkedFailureCallback = function forkFailureCallback(ajaxResponse) {
                generalFailureCallback(ajaxResponse);
                failureCallback(ajaxResponse);
            };
        } else {
            forkedFailureCallback = generalFailureCallback;
        }

        ajaxHelper.request(url, callback, forkedFailureCallback);
    };

    function generalFailureCallback(ajaxResponse) {
        var exception = new jGlobals.jpipExceptions.InternalErrorException('Bad jpip server response (status = ' + ajaxResponse.status + ')');

        onStatusChange(exception);
    }

    // On status change
    function onStatusChange(exception) {
        // If exception is undefined, set to null
        if (exception === undefined) {
            exception = null;
        }

        // If status callback function? is no longer null,
        // run statusCallback() with isReady and exception
        if (statusCallback !== null) {
            statusCallback({
                isReady: isReady,
                exception: exception
            });
        }
    }
};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

/**
 * Creates JpipSession object
 * @param {number} maxChannelsInSession - max permissible channels in session
 * @param {number} maxRequestsWaitingForResponseInChannel - max requests waiting for response in channel
 * @param {number} knownTargetId 
 * @param {object} codestreamStructure 
 * @param {object} databinsSaver 
 * @param {function?} setIntervalFunction 
 * @param {function?} clearIntervalFunction 
 * @param {object} jpipFactory - jpipRuntimeFactory object
 */
module.exports = function JpipSession(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, knownTargetId, codestreamStructure, databinsSaver, setIntervalFunction, clearIntervalFunction, jpipFactory) {

    // Time constants
    var SECOND = 1000;
    var KEEP_ALIVE_INTERVAL = 30 * SECOND;

    // URLs - recall URL = base URL + channel management URL + data request URL
    var channelManagementUrl; // Base channel management URL
    var dataRequestUrl; // Specific data request URL
    var closeSessionUrl; // URL to close session

    // Close
    var isCloseCalled = false; // Is close() called
    var closeCallbackPending = null; // Is close() callback pending??

    var sessionHelper = null; // jpip-session-helper.js
    var statusCallback = null;
    var requestEndedCallback = null;

    // Channel variables
    var nonDedicatedChannels = [];
    var channelsCreated = 0;
    var keepAliveIntervalHandle = null;

    /**
     * Open session
     * @param {string} baseUrl
     */
    this.open = function open(baseUrl) {

        // Throw exception if called twice
        if (sessionHelper !== null) {
            throw new jGlobals.jpipExceptions.InternalErrorException('session.open() should be called only once');
        }

        // Set query joiners
        var queryParamsDelimiter = baseUrl.indexOf('?') < 0 ? '?' : '&';

        // Make channel management URL, whether by tile or precint
        channelManagementUrl = baseUrl + queryParamsDelimiter + 'type=' + (databinsSaver.getIsJpipTilePartStream() ? 'jpt-stream' : 'jpp-stream');

        // Make final data request URL
        dataRequestUrl = channelManagementUrl + '&stream=0';

        // Create session helper
        sessionHelper = jpipFactory.createSessionHelper(dataRequestUrl, knownTargetId, codestreamStructure, databinsSaver);

        // Set callback
        if (statusCallback !== null) {
            sessionHelper.setStatusCallback(statusCallback);
        }

        if (requestEndedCallback !== null) {
            sessionHelper.setRequestEndedCallback(requestEndedCallback);
        }

        var channel = createChannel();

        channel.sendMinimalRequest(sessionReadyCallback); // Send minimal request
    };

    this.getTargetId = function getTargetId() {
        ensureReady();
        return sessionHelper.getTargetId();
    };

    this.getIsReady = function getIsReady() {
        var isReady = sessionHelper !== null && sessionHelper.getIsReady();
        return isReady;
    };

    this.setStatusCallback = function setStatusCallback(statusCallback_) {
        statusCallback = statusCallback_;

        if (sessionHelper !== null) {
            sessionHelper.setStatusCallback(statusCallback_);
        }
    };

    this.setRequestEndedCallback = function setRequestEndedCallback(requestEndedCallback_) {

        requestEndedCallback = requestEndedCallback_;

        if (sessionHelper !== null) {
            sessionHelper.setRequestEndedCallback(requestEndedCallback_);
        }
    };

    this.hasActiveRequests = function hasActiveRequests() {
        ensureReady();

        var isActiveRequests = sessionHelper.getActiveRequestsCount() > 0;
        return isActiveRequests;
    };

    this.tryGetChannel = function tryGetChannel(dedicateForMovableRequest) {
        ensureReady();

        var canCreateNewChannel = channelsCreated < maxChannelsInSession;
        var searchOnlyChannelWithEmptyQueue = canCreateNewChannel || dedicateForMovableRequest;

        var maxRequestsInChannel = searchOnlyChannelWithEmptyQueue ? 0 : maxRequestsWaitingForResponseInChannel - 1;

        var channel = getChannelWithMinimalWaitingRequests(maxRequestsInChannel,
        /*isExtractFromNonDedicatedList=*/dedicateForMovableRequest);

        if (channel === null && canCreateNewChannel) {
            channel = createChannel(dedicateForMovableRequest);
        }

        if (dedicateForMovableRequest && channel !== null) {
            channel.dedicateForMovableRequest();
        }

        return channel;
    };

    this.close = function close(closedCallback) {
        if (channelsCreated === 0) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot close session before open');
        }

        if (isCloseCalled) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot close session twice');
        }

        isCloseCalled = true;
        closeCallbackPending = closedCallback;

        if (closeSessionUrl !== undefined) {
            closeInternal();
        }
    };

    // Close session (internals)
    function closeInternal() {
        // If channel is to be kept alive, clear interval function
        if (keepAliveIntervalHandle !== null) {
            clearIntervalFunction(keepAliveIntervalHandle);
        }

        sessionHelper.setIsReady(false); // Set session to not ready
        sessionHelper.sendAjax(closeSessionUrl, closeCallbackPending); // Send close session request
    }

    // Create and return new channel
    function createChannel(isDedicatedForMovableRequest) {
        ++channelsCreated;
        var channel = jpipFactory.createChannel(maxRequestsWaitingForResponseInChannel, sessionHelper);

        sessionHelper.channelCreated(channel);

        if (!isDedicatedForMovableRequest) {
            nonDedicatedChannels.push(channel);
        }

        return channel;
    }

    function getChannelWithMinimalWaitingRequests(maxRequestsInChannel, isExtractFromNonDedicatedList) {

        var channel = null;
        var index;
        var minimalWaitingRequests = maxRequestsInChannel + 1;

        for (var i = 0; i < nonDedicatedChannels.length; ++i) {
            var waitingRequests = nonDedicatedChannels[i].getAllQueuedRequestCount();

            if (waitingRequests < minimalWaitingRequests) {
                channel = nonDedicatedChannels[i];
                index = i;
                minimalWaitingRequests = waitingRequests;
            }

            if (waitingRequests === 0) {
                break;
            }
        }

        if (!isExtractFromNonDedicatedList || channel === null) {
            return channel;
        }

        nonDedicatedChannels[index] = nonDedicatedChannels[nonDedicatedChannels.length - 1];
        nonDedicatedChannels.length -= 1;

        return channel;
    }

    // Session ready callback function, runs after session is ready
    function sessionReadyCallback() {

        // Set main header databin and check main header is loading
        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();
        if (!mainHeaderDatabin.isAllDatabinLoaded()) {
            throw new jGlobals.jpipExceptions.IllegalDataException('Main header was not loaded on session creation');
        }

        // Set arbitrary channel and channel ID
        var arbitraryChannel = sessionHelper.getFirstChannel();
        var arbitraryChannelId = arbitraryChannel.getChannelId();

        // Set close session URL
        closeSessionUrl = channelManagementUrl + '&cclose=*' + '&cid=' + arbitraryChannelId;

        // If close() was called, close internal and send session close request
        if (isCloseCalled) {
            closeInternal();
            return;
        }

        if (arbitraryChannelId === null) {
            return; // Failure indication already returned in JpipRequest
        }

        // Keep alive handle
        keepAliveIntervalHandle = setIntervalFunction(keepAliveHandler, KEEP_ALIVE_INTERVAL);

        sessionHelper.setIsReady(true); // Set session ready to true
    }

    // If no active requests, send minimal request to keep alive
    function keepAliveHandler() {
        if (sessionHelper.getActiveRequestsCount() > 0) {
            return;
        }

        var arbitraryChannel = sessionHelper.getFirstChannel();
        arbitraryChannel.sendMinimalRequest(function dummyCallback() {});
    }

    // Throw exception if session is not ready
    function ensureReady() {
        if (sessionHelper === null || !sessionHelper.getIsReady()) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Cannot perform ' + 'this operation when the session is not ready');
        }
    }
};

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipReconnectableRequester(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, codestreamStructure, databinsSaver, jpipFactory,
// NOTE: Move parameter to beginning and expose in CodestreamClient
maxJpipCacheSizeConfig) {

    var MB = 1048576;
    var maxJpipCacheSize = maxJpipCacheSizeConfig || 10 * MB;

    var sessionWaitingForReady;
    var activeSession = null;
    var sessionWaitingForDisconnect = null;

    var url = null;
    var waitingForCloseSessions = 0;

    var nonDedicatedRequestsWaitingForSend = [];
    var dedicatedChannels = [];

    var statusCallback = null;
    var lastClosedCallback = null;

    this.getIsReady = function getIsReady() {
        return activeSession !== null && activeSession.getIsReady();
    };

    this.open = function open(baseUrl) {
        if (baseUrl === undefined || baseUrl === null) {
            throw new jGlobals.jpipExceptions.ArgumentException('baseUrl', baseUrl);
        }

        if (url !== null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Image was already opened');
        }

        url = baseUrl;
        createInternalSession();
    };

    this.close = function close(closedCallback) {
        if (lastClosedCallback !== null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('closed twice');
        }

        lastClosedCallback = closedCallback;
        waitingForCloseSessions = 1;

        closeInternalSession(activeSession);
        closeInternalSession(sessionWaitingForReady);
        closeInternalSession(sessionWaitingForDisconnect);

        checkIfAllSessionsClosedAfterSessionClosed();
    };

    this.setStatusCallback = function setStatusCallback(newStatusCallback) {
        statusCallback = newStatusCallback;

        if (activeSession !== null) {
            activeSession.setStatusCallback(newStatusCallback);
        }
    };

    this.dedicateChannelForMovableRequest = function dedicateChannelForMovableRequest() {

        checkReady();

        var dedicatedChannelHandle = { internalDedicatedChannel: null };
        dedicatedChannels.push(dedicatedChannelHandle);
        createInternalDedicatedChannel(dedicatedChannelHandle);

        return dedicatedChannelHandle;
    };

    this.requestData = function requestData(codestreamPartParams, callback, failureCallback, numQualityLayers, dedicatedChannelHandleToMove) {

        checkReady();

        var request = {
            isEnded: false,
            internalRequest: null,

            codestreamPartParams: codestreamPartParams,
            callback: callback,
            failureCallback: failureCallback,
            numQualityLayers: numQualityLayers
        };

        var channel;
        var moveDedicatedChannel = !!dedicatedChannelHandleToMove;

        if (moveDedicatedChannel) {
            channel = dedicatedChannelHandleToMove.internalDedicatedChannel;
        } else {
            channel = activeSession.tryGetChannel();

            if (channel === null) {
                nonDedicatedRequestsWaitingForSend.push(request);
                return request;
            } else if (channel.getIsDedicatedForMovableRequest()) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Expected non-movable channel');
            }
        }

        if (channel.getIsDedicatedForMovableRequest() !== moveDedicatedChannel) {
            throw new jGlobals.jpipExceptions.InternalErrorException('getIsDedicatedForMovableRequest inconsistency');
        }

        request.internalRequest = channel.requestData(codestreamPartParams, callback, failureCallback, numQualityLayers);

        return request;
    };

    this.stopRequestAsync = function stopRequestAsync(request) {
        request.isEnded = true;

        if (request.internalRequest !== null) {
            request.internalRequest.stopRequestAsync();
        }
    };

    this.reconnect = reconnect;

    function reconnect() {
        if (sessionWaitingForReady !== null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Previous session still not established');
        }

        if (sessionWaitingForDisconnect !== null) {
            if (statusCallback !== null) {
                statusCallback({
                    isReady: true,
                    exception: //jpipExceptions.IllegalOperationException(
                    'Previous session that should be closed still alive.' + 'Maybe old requestContexts have not beed closed. ' + 'Reconnect will not be done' //);
                });
            }

            return;
        }

        databinsSaver.cleanupUnregisteredDatabins();
        createInternalSession();
    }

    function createInternalSession() {
        var targetId;
        if (activeSession !== null) {
            targetId = activeSession.getTargetId();
        }

        sessionWaitingForReady = jpipFactory.createSession(maxChannelsInSession, maxRequestsWaitingForResponseInChannel, targetId, codestreamStructure, databinsSaver);

        sessionWaitingForReady.setStatusCallback(waitingForReadyCallback);

        sessionWaitingForReady.open(url);
    }

    function createInternalDedicatedChannel(dedicatedChannelHandle) {
        var channel = activeSession.tryGetChannel(
        /*dedicateForMovableRequest=*/true);

        if (channel === null) {
            throw new jGlobals.jpipExceptions.IllegalOperationException('Too many concurrent requests. Limit the use of dedicated ' + '(movable) requests, enlarge maxChannelsInSession or wait ' + 'for requests to finish and avoid create new ones');
        }

        if (!channel.getIsDedicatedForMovableRequest()) {
            throw new jGlobals.jpipExceptions.InternalErrorException('getIsDedicatedForMovableRequest inconsistency');
        }

        dedicatedChannelHandle.internalDedicatedChannel = channel;
    }

    function waitingForReadyCallback(status) {
        if (sessionWaitingForReady === null || status.isReady !== sessionWaitingForReady.getIsReady()) {

            throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected ' + 'statusCallback when not registered to session or ' + 'inconsistent isReady');
        }

        if (status.isReady) {
            if (sessionWaitingForDisconnect !== null) {
                throw new jGlobals.jpipExceptions.InternalErrorException('sessionWaitingForDisconnect should be null');
            }

            sessionWaitingForDisconnect = activeSession;
            activeSession = sessionWaitingForReady;
            sessionWaitingForReady = null;

            if (sessionWaitingForDisconnect !== null) {
                sessionWaitingForDisconnect.setStatusCallback(null);
                if (!tryDisconnectWaitingSession()) {
                    sessionWaitingForDisconnect.setRequestEndedCallback(tryDisconnectWaitingSession);
                }
            }

            activeSession.setStatusCallback(statusCallback);
            activeSession.setRequestEndedCallback(activeSessionRequestEndedCallback);

            for (var i = 0; i < dedicatedChannels.length; ++i) {
                createInternalDedicatedChannel(dedicatedChannels[i]);
            }
        }

        if (statusCallback !== null) {
            statusCallback(status);
        }
    }

    function closeInternalSession(session) {
        if (session !== null) {
            ++waitingForCloseSessions;
            session.close(checkIfAllSessionsClosedAfterSessionClosed);
        }
    }

    function checkIfAllSessionsClosedAfterSessionClosed() {
        --waitingForCloseSessions;

        if (waitingForCloseSessions === 0 && lastClosedCallback !== undefined) {
            lastClosedCallback();
        }
    }

    function checkReady() {
        if (activeSession === null) {
            throw new jGlobals.jpipExceptions.InternalErrorException('This operation ' + 'is forbidden when session is not ready');
        }
    }

    function activeSessionRequestEndedCallback(channelFreed) {
        var request = null;

        if (databinsSaver.getLoadedBytes() > maxJpipCacheSize) {
            reconnect();
        }

        if (channelFreed === null) {
            return;
        }

        if (channelFreed.getIsDedicatedForMovableRequest()) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Expected non-movable channel as channelFreed');
        }

        do {
            if (nonDedicatedRequestsWaitingForSend.length === 0) {
                request = null;
                break;
            }

            request = nonDedicatedRequestsWaitingForSend.shift();
            if (request.internalRequest !== null) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Request was ' + 'already sent but still in queue');
            }
        } while (request.isEnded);

        if (request !== null) {
            request.internalRequest = channelFreed.requestData(request.codestreamPartParams, request.callback, request.failureCallback, request.numQualityLayers);
        }
    }

    function tryDisconnectWaitingSession() {
        var canCloseSession = !sessionWaitingForDisconnect.hasActiveRequests();

        if (canCloseSession) {
            sessionWaitingForDisconnect.close();
            sessionWaitingForDisconnect = null;
        }

        return canCloseSession;
    }
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipStructureParser(databinsSaver, markersParser, messageHeaderParser, offsetsCalculator) {

    this.parseCodestreamStructure = function parseCodestreamStructure() {
        // A.5.1 (Image and Tile Size)

        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();

        var sizMarkerOffset = offsetsCalculator.getImageAndTileSizeOffset();

        var bytes = getBytes(mainHeaderDatabin,
        /*numBytes=*/38, sizMarkerOffset + jGlobals.j2kOffsets.MARKER_SIZE + jGlobals.j2kOffsets.LENGTH_FIELD_SIZE);

        var referenceGridSizeOffset = jGlobals.j2kOffsets.REFERENCE_GRID_SIZE_OFFSET_AFTER_SIZ_MARKER - (jGlobals.j2kOffsets.MARKER_SIZE + jGlobals.j2kOffsets.LENGTH_FIELD_SIZE);
        var numComponentsOffset = jGlobals.j2kOffsets.NUM_COMPONENTS_OFFSET_AFTER_SIZ_MARKER - (jGlobals.j2kOffsets.MARKER_SIZE + jGlobals.j2kOffsets.LENGTH_FIELD_SIZE);

        var referenceGridSizeX = messageHeaderParser.getInt32(bytes, referenceGridSizeOffset); // XSiz
        var referenceGridSizeY = messageHeaderParser.getInt32(bytes, referenceGridSizeOffset + 4); // YSiz

        var imageOffsetX = messageHeaderParser.getInt32(bytes, 10); // XOSiz
        var imageOffsetY = messageHeaderParser.getInt32(bytes, 14); // YOSiz
        var tileSizeX = messageHeaderParser.getInt32(bytes, 18); // XTSiz
        var tileSizeY = messageHeaderParser.getInt32(bytes, 22); // YTSiz
        var firstTileOffsetX = messageHeaderParser.getInt32(bytes, 26); // XTOSiz
        var firstTileOffsetY = messageHeaderParser.getInt32(bytes, 30); // YTOSiz

        var numComponents = messageHeaderParser.getInt16(bytes, numComponentsOffset); // CSiz

        var componentsDataOffset = sizMarkerOffset + jGlobals.j2kOffsets.NUM_COMPONENTS_OFFSET_AFTER_SIZ_MARKER + 2;
        var componentsDataLength = numComponents * 3;

        var componentsDataBytes = getBytes(mainHeaderDatabin, componentsDataLength, componentsDataOffset);

        var componentsScaleX = new Array(numComponents);
        var componentsScaleY = new Array(numComponents);
        for (var i = 0; i < numComponents; ++i) {
            componentsScaleX[i] = componentsDataBytes[i * 3 + 1];
            componentsScaleY[i] = componentsDataBytes[i * 3 + 2];
        }

        var result = {
            numComponents: numComponents,
            componentsScaleX: componentsScaleX,
            componentsScaleY: componentsScaleY,
            imageWidth: referenceGridSizeX - firstTileOffsetX,
            imageHeight: referenceGridSizeY - firstTileOffsetY,
            tileWidth: tileSizeX,
            tileHeight: tileSizeY,
            firstTileOffsetX: firstTileOffsetX,
            firstTileOffsetY: firstTileOffsetY
        };
        return result;
    };

    this.parseDefaultTileParams = function () {
        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();

        var tileParams = parseCodingStyle(mainHeaderDatabin, /*isMandatory=*/true);
        return tileParams;
    };

    this.parseOverridenTileParams = function (tileIndex) {
        var tileHeaderDatabin = databinsSaver.getTileHeaderDatabin(tileIndex);

        // A.4.2 (Start Of Tile-part)

        var tileParams = parseCodingStyle(tileHeaderDatabin, /*isMandatory=*/false);
        return tileParams;
    };

    function parseCodingStyle(databin, isMandatory) {
        // A.5.1 (Image and Tile Size)

        var baseParams = offsetsCalculator.getCodingStyleBaseParams(databin, isMandatory);

        if (baseParams === null) {
            return null;
        }

        var mainHeaderDatabin = databinsSaver.getMainHeaderDatabin();

        var sizMarkerOffset = offsetsCalculator.getImageAndTileSizeOffset();

        var numComponentsOffset = sizMarkerOffset + jGlobals.j2kOffsets.NUM_COMPONENTS_OFFSET_AFTER_SIZ_MARKER;

        var numComponentsBytes = getBytes(mainHeaderDatabin,
        /*numBytes=*/2,
        /*startOffset=*/numComponentsOffset);
        var numComponents = messageHeaderParser.getInt16(numComponentsBytes, 0);

        var packedPacketHeadersMarkerInTileHeader = markersParser.getMarkerOffsetInDatabin(databin, jGlobals.j2kMarkers.PackedPacketHeadersInTileHeader);

        var packedPacketHeadersMarkerInMainHeader = markersParser.getMarkerOffsetInDatabin(mainHeaderDatabin, jGlobals.j2kMarkers.PackedPacketHeadersInMainHeader);

        var isPacketHeadersNearData = packedPacketHeadersMarkerInTileHeader === null && packedPacketHeadersMarkerInMainHeader === null;

        var codingStyleMoreDataOffset = baseParams.codingStyleDefaultOffset + 6;
        var codingStyleMoreDataBytes = getBytes(databin,
        /*numBytes=*/6,
        /*startOffset=*/codingStyleMoreDataOffset);
        var numQualityLayers = messageHeaderParser.getInt16(codingStyleMoreDataBytes, 0);

        var codeblockWidth = parseCodeblockSize(codingStyleMoreDataBytes, 4);
        var codeblockHeight = parseCodeblockSize(codingStyleMoreDataBytes, 5);

        var precinctWidths = new Array(baseParams.numResolutionLevels);
        var precinctHeights = new Array(baseParams.numResolutionLevels);

        var precinctSizesBytes = null;
        if (!baseParams.isDefaultPrecinctSize) {
            var precinctSizesBytesNeeded = baseParams.numResolutionLevels;

            precinctSizesBytes = getBytes(databin, precinctSizesBytesNeeded, baseParams.precinctSizesOffset);
        }

        var defaultSize = 1 << 15;
        for (var i = 0; i < baseParams.numResolutionLevels; ++i) {
            if (baseParams.isDefaultPrecinctSize) {
                precinctWidths[i] = defaultSize;
                precinctHeights[i] = defaultSize;
                continue;
            }

            var precinctSizeOffset = i;
            var sizeExponents = precinctSizesBytes[precinctSizeOffset];
            var ppx = sizeExponents & 0x0F;
            var ppy = sizeExponents >>> 4;

            precinctWidths[i] = 1 * Math.pow(2, ppx); // Avoid negative result due to signed calculation
            precinctHeights[i] = 1 * Math.pow(2, ppy); // Avoid negative result due to signed calculation
        }

        var paramsPerComponent = new Array(numComponents);
        for (var j = 0; j < numComponents; ++j) {
            paramsPerComponent[j] = {
                maxCodeblockWidth: codeblockWidth,
                maxCodeblockHeight: codeblockHeight,

                numResolutionLevels: baseParams.numResolutionLevels,

                precinctWidthPerLevel: precinctWidths,
                precinctHeightPerLevel: precinctHeights
            };
        }

        var defaultComponentParams = {
            maxCodeblockWidth: codeblockWidth,
            maxCodeblockHeight: codeblockHeight,

            numResolutionLevels: baseParams.numResolutionLevels,

            precinctWidthPerLevel: precinctWidths,
            precinctHeightPerLevel: precinctHeights
        };

        var tileParams = {
            numQualityLayers: numQualityLayers,

            isPacketHeadersNearData: isPacketHeadersNearData,
            isStartOfPacketMarkerAllowed: baseParams.isStartOfPacketMarkerAllowed,
            isEndPacketHeaderMarkerAllowed: baseParams.isEndPacketHeaderMarkerAllowed,

            paramsPerComponent: paramsPerComponent,
            defaultComponentParams: defaultComponentParams
        };

        return tileParams;
    }

    function parseCodeblockSize(bytes, offset) {
        var codeblockSizeExponentMinus2 = bytes[offset];
        var codeblockSizeExponent = 2 + (codeblockSizeExponentMinus2 & 0x0F);

        if (codeblockSizeExponent > 10) {
            throw new jGlobals.j2kExceptions.IllegalDataException('Illegal codeblock width exponent ' + codeblockSizeExponent, 'A.6.1, Table A.18');
        }

        var size = 1 << codeblockSizeExponent;
        return size;
    }

    function getBytes(databin, numBytes, databinStartOffset, allowEndOfRange) {
        var bytes = [];

        var rangeOptions = {
            forceCopyAllRange: true,
            maxLengthToCopy: numBytes,
            databinStartOffset: databinStartOffset
        };

        var bytesCopied = databin.copyBytes(bytes, /*startOffset=*/0, rangeOptions);
        if (bytesCopied === null) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Header data-bin has not yet recieved ' + numBytes + ' bytes starting from offset ' + databinStartOffset);
        }

        return bytes;
    }
};

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipTileStructure(sizeParams, codestreamStructure, jpipFactory, progressionOrder) {

    var defaultComponentStructure;
    var componentStructures;
    var componentToInClassLevelStartIndex;
    var minNumResolutionLevels;

    this.getProgressionOrder = function () {
        return progressionOrder;
    };

    this.getDefaultComponentStructure = function getDefaultComponentStructure(component) {
        return defaultComponentStructure;
    };

    this.getComponentStructure = function getComponentStructure(component) {
        return componentStructures[component];
    };

    this.getTileWidth = function getTileWidthClosure() {
        return sizeParams.tileSize.width;
    };

    this.getTileHeight = function getTileHeightClosure() {
        return sizeParams.tileSize.height;
    };

    this.getNumQualityLayers = function getNumQualityLayers() {
        return sizeParams.numQualityLayers;
    };

    this.getIsPacketHeaderNearData = function getIsPacketHeaderNearData() {
        return sizeParams.isPacketHeadersNearData;
    };

    this.getIsStartOfPacketMarkerAllowed = function getIsStartOfPacketMarkerAllowed() {
        return sizeParams.isStartOfPacketMarkerAllowed;
    };

    this.getIsEndPacketHeaderMarkerAllowed = function getIsEndPacketHeaderMarkerAllowed() {

        return sizeParams.isEndPacketHeaderMarkerAllowed;
    };

    this.getMinNumResolutionLevelsOverComponents = function () {
        return minNumResolutionLevels;
    };

    this.precinctInClassIndexToPosition = function (inClassIndex) {
        // A.3.2

        if (inClassIndex < 0) {
            throw new jGlobals.jpipExceptions.ArgumentException('inClassIndex', inClassIndex, 'Invalid negative in-class index of precinct');
        }

        var numTiles = codestreamStructure.getNumTilesX() * codestreamStructure.getNumTilesY();
        var numComponents = codestreamStructure.getNumComponents();

        var tileIndex = inClassIndex % numTiles;
        var inClassIndexWithoutTile = (inClassIndex - tileIndex) / numTiles;

        var component = inClassIndexWithoutTile % numComponents;
        var componentStructure = componentStructures[component];

        var numResolutionLevels = componentStructure.getNumResolutionLevels();
        var precinctIndex = (inClassIndexWithoutTile - component) / numComponents;

        var resolutionLevel;
        var levelStartIndex = 0;
        for (resolutionLevel = 1; resolutionLevel < numResolutionLevels; ++resolutionLevel) {
            var nextLevelStartIndex = componentToInClassLevelStartIndex[component][resolutionLevel];

            if (nextLevelStartIndex > precinctIndex) {
                break;
            }

            levelStartIndex = nextLevelStartIndex;
        }

        --resolutionLevel;
        var precinctIndexInLevel = precinctIndex - levelStartIndex;

        var precinctsX = componentStructure.getNumPrecinctsX(resolutionLevel);
        var precinctsY = componentStructure.getNumPrecinctsY(resolutionLevel);

        var precinctX = precinctIndexInLevel % precinctsX;
        var precinctY = (precinctIndexInLevel - precinctX) / precinctsX;

        if (precinctY >= precinctsY) {
            throw new jGlobals.jpipExceptions.ArgumentException('inClassIndex', inClassIndex, 'Invalid in-class index of precinct');
        }

        var result = {
            tileIndex: tileIndex,
            component: component,

            precinctX: precinctX,
            precinctY: precinctY,
            resolutionLevel: resolutionLevel
        };

        return result;
    };

    this.precinctPositionToInClassIndex = function (precinctPosition) {
        // A.3.2

        var numComponents = codestreamStructure.getNumComponents();
        validateArgumentInRange('precinctPosition.component', precinctPosition.component, numComponents);

        var componentStructure = componentStructures[precinctPosition.component];

        var numResolutionLevels = componentStructure.getNumResolutionLevels();
        validateArgumentInRange('precinctPosition.resolutionLevel', precinctPosition.resolutionLevel, numResolutionLevels);

        var numTiles = codestreamStructure.getNumTilesX() * codestreamStructure.getNumTilesY();
        var precinctsX = componentStructure.getNumPrecinctsX(precinctPosition.resolutionLevel);
        var precinctsY = componentStructure.getNumPrecinctsY(precinctPosition.resolutionLevel);

        validateArgumentInRange('precinctPosition.precinctX', precinctPosition.precinctX, precinctsX);
        validateArgumentInRange('precinctPosition.precinctY', precinctPosition.precinctY, precinctsY);
        validateArgumentInRange('precinctPosition.tileIndex', precinctPosition.tileIndex, numTiles);

        var precinctIndexInLevel = precinctPosition.precinctX + precinctPosition.precinctY * precinctsX;

        var levelStartIndex = componentToInClassLevelStartIndex[precinctPosition.component][precinctPosition.resolutionLevel];

        var precinctIndex = precinctIndexInLevel + levelStartIndex;

        var inClassIndexWithoutTile = precinctPosition.component + precinctIndex * codestreamStructure.getNumComponents();

        var inClassIndex = precinctPosition.tileIndex + inClassIndexWithoutTile * codestreamStructure.getNumTilesX() * codestreamStructure.getNumTilesY();

        return inClassIndex;
    };

    this.precinctPositionToIndexInComponentResolution = function (precinctPosition) {
        var componentStructure = componentStructures[precinctPosition.component];

        var precinctsX = componentStructure.getNumPrecinctsX(precinctPosition.resolutionLevel);
        var precinctIndexInComponentResolution = precinctPosition.precinctX + precinctPosition.precinctY * precinctsX;

        return precinctIndexInComponentResolution;
    };

    function validateArgumentInRange(paramName, paramValue, suprimumParamValue) {
        if (paramValue < 0 || paramValue >= suprimumParamValue) {
            throw new jGlobals.jpipExceptions.ArgumentException(paramName, paramValue, paramName + ' is expected to be between 0 and ' + suprimumParamValue - 1);
        }
    }

    function validateTargetProgressionOrder(progressionOrder) {
        if (progressionOrder.length !== 4) {
            throw new jGlobals.j2kExceptions.IllegalDataException('Illegal progression order ' + progressionOrder + ': unexpected length');
        }

        if (progressionOrder[3] !== 'L') {
            throw new jGlobals.jpipExceptions.IllegalDataException('Illegal target progression order of ' + progressionOrder, 'A.3.2.1');
        }

        var hasP = progressionOrder.indexOf('P') >= 0;
        var hasC = progressionOrder.indexOf('C') >= 0;
        var hasR = progressionOrder.indexOf('R') >= 0;
        if (!hasP || !hasC || !hasR) {
            throw new jGlobals.j2kExceptions.IllegalDataException('Illegal progression order ' + progressionOrder + ': missing letter');
        }

        if (progressionOrder !== 'RPCL') {
            throw new jGlobals.j2kExceptions.UnsupportedFeatureException('Progression order of ' + progressionOrder, 'A.6.1');
        }
    }

    function preprocessParams() {
        componentToInClassLevelStartIndex = new Array(components);

        var components = codestreamStructure.getNumComponents();

        var defaultComponent = sizeParams.defaultComponentParams;
        minNumResolutionLevels = defaultComponent.numResolutionLevels;
        var isComponentsIdenticalSize = true;
        var isPrecinctPartitionFitsToTilePartition = true;

        for (var c = 0; c < components; ++c) {
            var size = sizeParams.paramsPerComponent[c];
            minNumResolutionLevels = Math.min(minNumResolutionLevels, size.numResolutionLevels);

            componentToInClassLevelStartIndex[c] = new Array(size.numResolutionLevels);
            var componentStructure = componentStructures[c];

            var accumulatedOffset = 0;
            var firstLevelPrecinctsX = componentStructure.getNumPrecinctsX(c);
            var firstLevelPrecinctsY = componentStructure.getNumPrecinctsY(c);

            for (var r = 0; r < size.numResolutionLevels; ++r) {
                componentToInClassLevelStartIndex[c][r] = accumulatedOffset;
                var precinctsXInLevel = componentStructure.getNumPrecinctsX(r);
                var precinctsYInLevel = componentStructure.getNumPrecinctsY(r);
                accumulatedOffset += precinctsXInLevel * precinctsYInLevel;

                if (defaultComponent.precinctWidthPerLevel[r] !== size.precinctWidthPerLevel[r] || defaultComponent.precinctHeightPerLevel[r] !== size.precinctHeightPerLevel[r]) {

                    isComponentsIdenticalSize = false;
                }

                var isHorizontalPartitionSupported = checkIfPrecinctPartitionStartsInTileTopLeft(r, size.numResolutionLevels, componentStructure.getPrecinctWidth, codestreamStructure.getLevelWidth, codestreamStructure.getTileWidth);

                var isVerticalPartitionSupported = checkIfPrecinctPartitionStartsInTileTopLeft(r, size.numResolutionLevels, componentStructure.getPrecinctWidth, codestreamStructure.getLevelWidth, codestreamStructure.getTileWidth);

                isPrecinctPartitionFitsToTilePartition &= isHorizontalPartitionSupported && isVerticalPartitionSupported;
            }
        }

        if (!isComponentsIdenticalSize) {
            throw new jGlobals.j2kExceptions.UnsupportedFeatureException('Special Coding Style for Component (COC)', 'A.6.2');
        }

        if (!isPrecinctPartitionFitsToTilePartition) {
            throw new jGlobals.j2kExceptions.UnsupportedFeatureException('Precinct TopLeft which is not matched to tile TopLeft', 'B.6');
        }
    }

    function checkIfPrecinctPartitionStartsInTileTopLeft(resolutionLevel, numResolutionLevels, getPrecinctSizeFunction, getLevelSizeFunction, getTileSize1DFunction) {

        // Jpeg2000 standard allows partition of tiles which does not fit
        // exactly the precincts partition (i.e. the first precincts "virtually"
        // starts before the tile, thus is smaller than other).
        // This is not supported now in the code, this function should check
        // that this is not the situation.

        // The function assumes that firstTileOffset is zero and componentScale
        // is one (UnsupportedExceptions are thrown in ComponentStructure and
        // CodestreamStructure classes).

        var precinctSize = getPrecinctSizeFunction(resolutionLevel);
        var levelSize = getLevelSizeFunction(resolutionLevel);
        var tileSize1D = getTileSize1DFunction(resolutionLevel);

        if (precinctSize >= levelSize || tileSize1D >= levelSize) {
            // precinctSize >= levelSize ==> Precinct is larger than image thus
            // anyway tile has a single precinct
            // tileSize1D >= levelSize ==> Level has only single tile thus no
            // chances for tile top-left to not match first precinct top-left

            return true;
        }

        var isPrecinctPartitionFitsToTilePartition = precinctSize % tileSize1D === 0 || tileSize1D % precinctSize === 0;

        return isPrecinctPartitionFitsToTilePartition;
    }

    defaultComponentStructure = jpipFactory.createComponentStructure(sizeParams.defaultComponentParams, this);

    componentStructures = new Array(codestreamStructure.getNumComponents());
    for (var i = 0; i < codestreamStructure.getNumComponents(); ++i) {
        componentStructures[i] = jpipFactory.createComponentStructure(sizeParams.paramsPerComponent[i], this);
    }

    preprocessParams();

    validateTargetProgressionOrder(progressionOrder);

    return this;
};

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipBitstreamReaderClosure() {
    var NULL_BYTE = -1; // Using js' null and number in same property degrades performance
    var zeroBitsUntilFirstOneBitMap = createZeroBitsUntilFirstOneBitMap();

    function JpipBitstreamReader(databin, transactionHelper) {
        var initialState = {
            nextOffsetToParse: 0,
            validBitsInCurrentByte: 0,
            originalByteWithoutShift: NULL_BYTE,
            currentByte: NULL_BYTE,
            isSkipNextByte: false
        };

        var streamState = transactionHelper.createTransactionalObject(initialState, function cloneState(state) {
            return {
                nextOffsetToParse: state.nextOffsetToParse,
                validBitsInCurrentByte: state.validBitsInCurrentByte,
                originalByteWithoutShift: state.originalByteWithoutShift,
                currentByte: state.currentByte,
                isSkipNextByte: state.isSkipNextByte
            };
        });
        var activeTransaction = null;

        Object.defineProperty(this, 'activeTransaction', {
            get: function getActiveTransaction() {
                if (activeTransaction === null || !activeTransaction.isActive) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('No active transaction in bitstreamReader');
                }

                return activeTransaction;
            }
        });

        Object.defineProperty(this, 'bitsCounter', {
            get: function getBitsCounter() {
                var state = streamState.getValue(activeTransaction);

                tryValidateCurrentByte(databin, state);
                if (state.isSkipNextByte) {
                    throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected state of bitstreamReader: ' + 'When 0xFF encountered, tryValidateCurrentByte ' + 'should skip the whole byte  after ' + 'shiftRemainingBitsInByte and clear isSkipNextByte. ' + 'However the flag is still set');
                }

                var result = state.nextOffsetToParse * 8 - state.validBitsInCurrentByte;

                return result;
            }
        });

        Object.defineProperty(this, 'databinOffset', {
            get: function getDatabinOffset() {
                var state = streamState.getValue(activeTransaction);

                if (state.isSkipNextByte) {
                    return state.nextOffsetToParse + 1;
                }

                if (state.validBitsInCurrentByte % 8 !== 0 || state.originalByteWithoutShift === 0xFF) {

                    throw new jGlobals.jpipExceptions.InternalErrorException('Cannot calculate databin offset when bitstreamReader ' + ' is in the middle of the byte');
                }

                return state.nextOffsetToParse - state.validBitsInCurrentByte / 8;
            },

            set: function setDatabinOffset(offsetInBytes) {
                var state = streamState.getValue(activeTransaction);
                state.validBitsInCurrentByte = 0;
                state.isSkipNextByte = false;
                state.originalByteWithoutShift = NULL_BYTE;
                state.nextOffsetToParse = offsetInBytes;
            }
        });

        this.startNewTransaction = function startNewTransaction() {
            if (activeTransaction !== null && activeTransaction.isActive) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Cannot start new transaction in bitstreamReader ' + 'while another transaction is active');
            }

            activeTransaction = transactionHelper.createTransaction();
        };

        this.shiftRemainingBitsInByte = function shiftRemainingBitsInByte() {
            var state = streamState.getValue(activeTransaction);

            state.isSkipNextByte = state.originalByteWithoutShift === 0xFF;
            state.validBitsInCurrentByte = Math.floor(state.validBitsInCurrentByte / 8);
        };

        this.shiftBit = function shiftBit() {
            var state = streamState.getValue(activeTransaction);
            if (!tryValidateCurrentByte(databin, state)) {
                return null;
            }

            var onesCount = countAndShiftBits(databin, state,
            /*isUntilZeroBit=*/true,
            /*maxBitsToShift=*/1);

            return onesCount;
        };

        this.countZerosAndShiftUntilFirstOneBit = function countZerosAndShiftUntilFirstOneBit(maxBitsToShift) {
            var state = streamState.getValue(activeTransaction);
            var result = countAndShiftBits(databin, state, /*isUntilZeroBit=*/false, maxBitsToShift);
            return result;
        };

        this.countOnesAndShiftUntilFirstZeroBit = function countOnesAndShiftUntilFirstZeroBit(maxBitsToShift) {
            var state = streamState.getValue(activeTransaction);
            var result = countAndShiftBits(databin, state, /*isUntilZeroBit=*/true, maxBitsToShift);
            return result;
        };

        this.shiftBits = function shiftBits(bitsCount) {
            var result = 0;
            var state = streamState.getValue(activeTransaction);
            var remainingBits = bitsCount;

            while (remainingBits > 0) {
                if (!tryValidateCurrentByte(databin, state)) {
                    return null;
                }

                var bitsToTake = Math.min(state.validBitsInCurrentByte, remainingBits);

                var addToResult = state.currentByte >> 8 - bitsToTake;
                result = (result << bitsToTake) + addToResult;

                removeBitsFromByte(state, bitsToTake);
                remainingBits -= bitsToTake;
            }

            return result;
        };
    }

    function countAndShiftBits(databin, state, isUntilZeroBit, maxBitsToShift) {
        var countedBits = 0;
        var foundTerminatingBit;
        var remainingBits = maxBitsToShift;

        do {
            if (!tryValidateCurrentByte(databin, state)) {
                return null;
            }

            var byteValue = isUntilZeroBit ? ~state.currentByte : state.currentByte;
            var bitsCountIncludingTerminatingBit = Math.min(zeroBitsUntilFirstOneBitMap[byteValue], state.validBitsInCurrentByte + 1);

            var bitsCountNotIncludingTerminatingBit = bitsCountIncludingTerminatingBit - 1;

            if (remainingBits !== undefined) {
                if (bitsCountIncludingTerminatingBit > remainingBits) {
                    removeBitsFromByte(state, remainingBits);
                    countedBits += remainingBits;
                    break;
                }

                remainingBits -= bitsCountNotIncludingTerminatingBit;
            }

            countedBits += bitsCountNotIncludingTerminatingBit;

            foundTerminatingBit = bitsCountIncludingTerminatingBit <= state.validBitsInCurrentByte;

            if (foundTerminatingBit) {
                removeBitsFromByte(state, bitsCountIncludingTerminatingBit);
            } else {
                state.validBitsInCurrentByte = 0;
            }
        } while (!foundTerminatingBit);

        return countedBits;
    }

    function removeBitsFromByte(state, bitsCount) {
        state.validBitsInCurrentByte -= bitsCount;
        if (state.validBitsInCurrentByte > 0) {
            state.currentByte = state.currentByte << bitsCount & 0xFF;
        }
    }

    function tryValidateCurrentByte(databin, state) {
        if (state.validBitsInCurrentByte > 0) {
            return true;
        }

        var bytesNeeded = state.isSkipNextByte ? 2 : 1;

        var resultArray = [];
        var bytesCopied = databin.copyBytes(resultArray, /*resultStartOffset=*/0, {
            forceCopyAllRange: true,
            databinStartOffset: state.nextOffsetToParse,
            maxLengthToCopy: bytesNeeded
        });

        if (bytesCopied !== bytesNeeded) {
            return false;
        }

        var prevByte = state.originalByteWithoutShift;

        state.currentByte = resultArray[bytesNeeded - 1];
        state.validBitsInCurrentByte = 8;
        state.originalByteWithoutShift = state.currentByte;

        if (prevByte === 0xFF) {
            if ((resultArray[0] & 0x80) !== 0) {
                throw new jGlobals.j2kExceptions.IllegalDataException('Expected 0 bit after 0xFF byte', 'B.10.1');
            }

            // No need to skip another bit if already skip the whole byte
            if (!state.isSkipNextByte) {
                state.currentByte <<= 1;
                state.validBitsInCurrentByte = 7;
            }
        }

        state.isSkipNextByte = false;
        state.nextOffsetToParse += bytesNeeded;

        return true;
    }

    function createZeroBitsUntilFirstOneBitMap() {
        var arrayMap = new Array(255);

        arrayMap[0x00] = 9;
        arrayMap[0x01] = 8;
        arrayMap[0x02] = 7;
        arrayMap[0x03] = 7;

        var i;

        for (i = 0x04; i <= 0x07; ++i) {
            arrayMap[i] = 6;
        }

        for (i = 0x08; i <= 0x0F; ++i) {
            arrayMap[i] = 5;
        }

        for (i = 0x10; i <= 0x1F; ++i) {
            arrayMap[i] = 4;
        }

        for (i = 0x20; i <= 0x3F; ++i) {
            arrayMap[i] = 3;
        }

        for (i = 0x40; i <= 0x7F; ++i) {
            arrayMap[i] = 2;
        }

        for (i = 0x80; i <= 0xFF; ++i) {
            arrayMap[i] = 1;
        }

        // Avoid two's complement problems
        for (i = 0; i <= 0xFF; ++i) {
            arrayMap[i - 0x100] = arrayMap[i];
        }

        return arrayMap;
    }

    return JpipBitstreamReader;
}();

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipTagTree(bitstreamReader, width, height, transactionHelper) {

    var isAlreadyReadBitsTransactionalObject = transactionHelper.createTransactionalObject(false, function cloneBoolean(old) {
        return old;
    });
    var levels;

    createLevelsArray();

    this.setMinimalValueIfNotReadBits = function setMinimalValueIfNotReadBits(minimalValue) {

        if (isAlreadyReadBits()) {
            return;
        }

        var transactionalObject = levels[0].content[0];
        var node = transactionalObject.getValue(bitstreamReader.activeTransaction);

        node.minimalPossibleValue = minimalValue;
    };

    this.isSmallerThanOrEqualsTo = function isSmallerThanOrEqualsTo(x, y, value) {

        setAlreadyReadBits();

        var getNextNode = getRootToLeafIterator(x, y);
        var currentNode = getNextNode();
        var lastNode;

        while (currentNode !== null) {
            if (currentNode.minimalPossibleValue > value) {
                return false;
            }

            if (!currentNode.isFinalValue) {
                var maxBitsToShift = value - currentNode.minimalPossibleValue + 1;
                var addToValue = bitstreamReader.countZerosAndShiftUntilFirstOneBit(maxBitsToShift);

                if (addToValue === null) {
                    return null;
                }

                currentNode.minimalPossibleValue += addToValue;

                if (addToValue < maxBitsToShift) {
                    currentNode.isFinalValue = true;
                }
            }

            lastNode = currentNode;
            currentNode = getNextNode();
        }

        var result = lastNode.minimalPossibleValue <= value;
        if (result && !lastNode.isFinalValue) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Wrong parsing in TagTree.isSmallerThanOrEqualsTo: ' + 'not sure if value is smaller than asked');
        }

        return result;
    };

    this.getValue = function getValue(x, y) {
        var getNextNode = getRootToLeafIterator(x, y);
        var currentNode = getNextNode();
        var leaf;

        setAlreadyReadBits();

        while (currentNode !== null) {
            if (!currentNode.isFinalValue) {
                var addToValue = bitstreamReader.countZerosAndShiftUntilFirstOneBit();

                if (addToValue === null) {
                    return null;
                }

                currentNode.minimalPossibleValue += addToValue;
                currentNode.isFinalValue = true;
            }

            leaf = currentNode;
            currentNode = getNextNode();
        }

        return leaf.minimalPossibleValue;
    };

    function createLevelsArray() {
        levels = [];
        var levelWidth = width;
        var levelHeight = height;

        while (levelWidth >= 1 || levelHeight >= 1) {
            levelWidth = Math.ceil(levelWidth);
            levelHeight = Math.ceil(levelHeight);

            var elementCount = levelWidth * levelHeight;
            levels.unshift({
                width: levelWidth,
                height: levelHeight,
                content: new Array(elementCount)
            });

            levelWidth /= 2;
            levelHeight /= 2;
        }

        initNode(0, 0);
    }

    function getRootToLeafIterator(x, y) {
        var level = 0;
        var prevIteratedNode = null;

        function getNext() {
            if (level === null) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Iterated too deep in tag tree');
            }

            if (level === levels.length) {
                level = null;
                return null;
            }

            var shiftFactor = levels.length - level - 1;
            var currentX = Math.floor(x >> shiftFactor);
            var currentY = Math.floor(y >> shiftFactor);

            var indexInLevel = levels[level].width * currentY + currentX;

            var transactionalObject = levels[level].content[indexInLevel];

            if (transactionalObject === undefined) {
                transactionalObject = initNode(level, indexInLevel);
            }

            var result = transactionalObject.getValue(bitstreamReader.activeTransaction);

            if (prevIteratedNode !== null && prevIteratedNode.minimalPossibleValue > result.minimalPossibleValue) {

                result.minimalPossibleValue = prevIteratedNode.minimalPossibleValue;
            }

            prevIteratedNode = result;
            ++level;
            return result;
        }

        return getNext;
    }

    function initNode(level, indexInLevel) {
        var objectValue = {
            minimalPossibleValue: 0,
            isFinalValue: false
        };

        var transactionalObject = transactionHelper.createTransactionalObject(objectValue, function cloneNodeValue(nodeValue) {
            return {
                minimalPossibleValue: nodeValue.minimalPossibleValue,
                isFinalValue: nodeValue.isFinalValue
            };
        });

        levels[level].content[indexInLevel] = transactionalObject;
        return transactionalObject;
    }

    function isAlreadyReadBits() {
        var isAlreadyReadBitsTransactionalValue = isAlreadyReadBitsTransactionalObject.getValue(bitstreamReader.activeTransaction);

        return isAlreadyReadBitsTransactionalValue;
    }

    function setAlreadyReadBits() {
        isAlreadyReadBitsTransactionalObject.setValue(bitstreamReader.activeTransaction, true);
    }
};

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipCodeblockLengthParserClosure() {
    // B.10.7.

    var exactLog2Table = createExactLog2Table();

    function JpipCodeblockLengthParser(bitstreamReader, transactionHelper) {
        var lBlock = transactionHelper.createTransactionalObject({ lBlockValue: 3 }, function cloneLBlock(oldLBlock) {
            return { lBlockValue: oldLBlock.lBlockValue };
        });

        this.parse = function parse(codingPasses) {
            var addToLBlock = bitstreamReader.countOnesAndShiftUntilFirstZeroBit();
            if (addToLBlock === null) {
                return null;
            }

            var lBlockState = lBlock.getValue(bitstreamReader.activeTransaction);
            lBlockState.lBlockValue += addToLBlock;

            var codingPassesLog2 = exactLog2Table[codingPasses];
            if (codingPassesLog2 === undefined) {
                throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected value of coding passes ' + codingPasses + '. Expected positive integer <= 164');
            }

            var bitsCount = lBlockState.lBlockValue + codingPassesLog2;
            var length = bitstreamReader.shiftBits(bitsCount);

            return length;
        };
    }

    function createExactLog2Table() {
        var maxCodingPassesPossible = 164;
        var result = new Array(maxCodingPassesPossible);

        var inputValueLowerBound = 1;
        var inputValueUpperBound = 2;
        var log2Result = 0;

        while (inputValueLowerBound <= maxCodingPassesPossible) {
            for (var i = inputValueLowerBound; i < inputValueUpperBound; ++i) {
                result[i] = log2Result;
            }

            inputValueLowerBound *= 2;
            inputValueUpperBound *= 2;
            ++log2Result;
        }

        return result;
    }

    return JpipCodeblockLengthParser;
}();

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipSubbandLengthInPacketHeaderCalculator(bitstreamReader, numCodeblocksX, numCodeblocksY, codingPassesNumberParser, transactionHelper, jpipFactory) {

    var codeblockLengthParsers = null;
    var isCodeblocksIncluded = null;
    var parsedQualityLayers = transactionHelper.createTransactionalObject(0, function cloneLayers(layers) {
        return layers;
    });

    var inclusionTree = jpipFactory.createTagTree(bitstreamReader, numCodeblocksX, numCodeblocksY);

    var zeroBitPlanesTree = jpipFactory.createTagTree(bitstreamReader, numCodeblocksX, numCodeblocksY);

    this.calculateSubbandLength = function calcualteSubbandLength(qualityLayer) {
        ensureQualityLayerNotParsedYet(qualityLayer);

        lazyInitArrays();

        inclusionTree.setMinimalValueIfNotReadBits(qualityLayer);

        var accumulatedBodyLengthBytes = 0;
        var codeblockIndex = 0;
        var codeblockLengthByIndex = new Array(numCodeblocksX * numCodeblocksY);

        for (var y = 0; y < numCodeblocksY; ++y) {
            for (var x = 0; x < numCodeblocksX; ++x) {
                var codeblockBodyLength = getNextCodeblockLength(x, y, qualityLayer);
                if (codeblockBodyLength === null) {
                    return null;
                }

                codeblockLengthByIndex[codeblockIndex++] = codeblockBodyLength;

                accumulatedBodyLengthBytes += codeblockBodyLength.codeblockBodyLengthBytes;
            }
        }

        parsedQualityLayers.setValue(bitstreamReader.activeTransaction, qualityLayer + 1);

        return {
            codeblockBodyLengthByIndex: codeblockLengthByIndex,
            overallBodyLengthBytes: accumulatedBodyLengthBytes
        };
    };

    function ensureQualityLayerNotParsedYet(qualityLayer) {
        var parsedQualityLayersValue = parsedQualityLayers.getValue(bitstreamReader.activeTransaction);

        if (parsedQualityLayersValue >= qualityLayer + 1) {
            throw new jGlobals.jpipExceptions.InternalErrorException('Unexpected quality layer to parse');
        }
    }

    function lazyInitArrays() {
        if (codeblockLengthParsers !== null) {
            return;
        }

        codeblockLengthParsers = new Array(numCodeblocksX);
        isCodeblocksIncluded = new Array(numCodeblocksX);

        for (var x = 0; x < numCodeblocksX; ++x) {
            codeblockLengthParsers[x] = new Array(numCodeblocksY);
            isCodeblocksIncluded[x] = new Array(numCodeblocksY);

            for (var y = 0; y < numCodeblocksY; ++y) {
                codeblockLengthParsers[x][y] = jpipFactory.createCodeblockLengthParser(bitstreamReader, transactionHelper);

                isCodeblocksIncluded[x][y] = transactionHelper.createTransactionalObject({ isIncluded: false }, function cloneIsIncluded(old) {
                    return { isIncluded: old.isIncluded };
                });
            }
        }
    }

    function getNextCodeblockLength(x, y, qualityLayer) {
        var isCodeblockAlreadyIncluded = isCodeblocksIncluded[x][y].getValue(bitstreamReader.activeTransaction);

        var isCodeblockIncludedNow;
        if (isCodeblockAlreadyIncluded.isIncluded) {
            isCodeblockIncludedNow = bitstreamReader.shiftBit();
        } else {
            isCodeblockIncludedNow = inclusionTree.isSmallerThanOrEqualsTo(x, y, qualityLayer);
        }

        if (isCodeblockIncludedNow === null) {
            return null;
        } else if (!isCodeblockIncludedNow) {
            return {
                codeblockBodyLengthBytes: 0,
                codingPasses: 0
            };
        }

        var zeroBitPlanes = null;
        if (!isCodeblockAlreadyIncluded.isIncluded) {
            zeroBitPlanes = zeroBitPlanesTree.getValue(x, y);
            if (zeroBitPlanes === null) {
                return null;
            }
        }

        var codingPasses = codingPassesNumberParser.parse(bitstreamReader);
        if (codingPasses === null) {
            return null;
        }

        var lengthParser = codeblockLengthParsers[x][y];
        var bodyLengthBytes = lengthParser.parse(codingPasses);

        if (bodyLengthBytes === null) {
            return null;
        }

        isCodeblockAlreadyIncluded.isIncluded = true;

        var result = {
            codeblockBodyLengthBytes: bodyLengthBytes,
            codingPasses: codingPasses
        };

        if (zeroBitPlanes !== null) {
            result.zeroBitPlanes = zeroBitPlanes;
        }

        return result;
    }
};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipPacketLengthCalculator(tileStructure, componentStructure, databin, startOffsetInDatabin, precinct, jpipFactory) {

    var calculatedLengths = [];

    var bitstreamReader = jpipFactory.createBitstreamReader(databin);

    var numCodeblocksX = componentStructure.getNumCodeblocksXInPrecinct(precinct);
    var numCodeblocksY = componentStructure.getNumCodeblocksYInPrecinct(precinct);

    var numQualityLayersInTile = tileStructure.getNumQualityLayers();
    var isPacketHeaderNearData = tileStructure.getIsPacketHeaderNearData();
    var isStartOfPacketMarkerAllowed = tileStructure.getIsStartOfPacketMarkerAllowed();
    var isEndPacketHeaderMarkerAllowed = tileStructure.getIsEndPacketHeaderMarkerAllowed();

    var subbandParsers = initSubbandParsers();

    this.calculateEndOffsetOfLastFullPacket = function calculateFullPacketsAvailableOffsets(quality) {

        var isAllowedFullQuality = quality === undefined || quality >= numQualityLayersInTile;

        var numQualityLayersToParse;
        if (!isAllowedFullQuality) {
            numQualityLayersToParse = quality;
        } else if (!databin.isAllDatabinLoaded()) {
            numQualityLayersToParse = numQualityLayersInTile;
        } else {
            var endOffset = databin.getDatabinLengthIfKnown();

            return {
                endOffset: endOffset,
                numQualityLayers: numQualityLayersInTile
            };
        }

        checkSupportedStructure();

        tryValidatePackets(numQualityLayersToParse);
        var result = getFullQualityLayersEndOffset(numQualityLayersToParse);

        return result;
    };

    this.getPacketOffsetsByCodeblockIndex = function getPacketOffsetsByCodeblockIndex(qualityLayer) {

        checkSupportedStructure();
        tryValidatePackets(qualityLayer + 1);

        if (calculatedLengths.length <= qualityLayer) {
            return null;
        }

        return calculatedLengths[qualityLayer];
    };

    function tryValidatePackets(qualityLayers) {
        while (calculatedLengths.length < qualityLayers) {
            bitstreamReader.startNewTransaction();

            var nextPacket = tryCalculateNextPacketLength(calculatedLengths.length);

            if (nextPacket === null) {
                bitstreamReader.activeTransaction.abort();
                return;
            }

            calculatedLengths.push(nextPacket);
            bitstreamReader.activeTransaction.commit();
        }
    }

    function tryCalculateNextPacketLength(qualityLayer) {
        var headerStartOffset;
        if (qualityLayer > 0) {
            var last = calculatedLengths[qualityLayer - 1];
            headerStartOffset = last.headerStartOffset + last.headerLength + last.overallBodyLengthBytes;
        } else {
            headerStartOffset = startOffsetInDatabin;
        }

        bitstreamReader.databinOffset = headerStartOffset;

        if (isPacketHeaderNearData && isStartOfPacketMarkerAllowed) {
            var isMarker = isMarkerHere(0x91);

            if (isMarker === null) {
                return null;
            } else if (isMarker) {
                var startOfPacketSegmentLength = 6;
                bitstreamReader.databinOffset += startOfPacketSegmentLength;
            }
        }

        var isPacketExistInQualityLayer = bitstreamReader.shiftBit();
        if (isPacketExistInQualityLayer === null) {
            return null;
        }

        if (!isPacketExistInQualityLayer) {
            bitstreamReader.shiftRemainingBitsInByte();

            return {
                headerStartOffset: headerStartOffset,
                headerLength: 1,
                codeblockBodyLengthByIndex: [],
                overallBodyLengthBytes: 0
            };
        }

        var bodyLength = actualCalculatePacketLengthAfterZeroLengthBit(qualityLayer);
        if (bodyLength === null) {
            return null;
        }

        var headerEndOffset = bitstreamReader.databinOffset;
        bodyLength.headerLength = headerEndOffset - headerStartOffset;

        bodyLength.headerStartOffset = headerStartOffset;

        return bodyLength;
    }

    function actualCalculatePacketLengthAfterZeroLengthBit(qualityLayer) {
        var bodyBytes = 0;
        var codeblockBodyLengthByIndex = null;

        for (var subband = 0; subband < subbandParsers.length; ++subband) {
            var parser = subbandParsers[subband];
            var subbandBodyLength = parser.calculateSubbandLength(qualityLayer);

            if (subbandBodyLength === null) {
                return null;
            }

            if (codeblockBodyLengthByIndex === null) {
                codeblockBodyLengthByIndex = subbandBodyLength.codeblockBodyLengthByIndex;
            } else {
                codeblockBodyLengthByIndex = codeblockBodyLengthByIndex.concat(subbandBodyLength.codeblockBodyLengthByIndex);
            }

            bodyBytes += subbandBodyLength.overallBodyLengthBytes;
        }

        bitstreamReader.shiftRemainingBitsInByte();

        if (isEndPacketHeaderMarkerAllowed) {
            var isMarker = isMarkerHere(0x92);

            if (isMarker === null) {
                return null;
            } else if (isMarker) {
                var endPacketHeaderMarkerLength = 2;
                bitstreamReader.databinOffset += endPacketHeaderMarkerLength;
            }
        }

        return {
            codeblockBodyLengthByIndex: codeblockBodyLengthByIndex,
            overallBodyLengthBytes: bodyBytes
        };
    }

    function getFullQualityLayersEndOffset(quality) {
        var numParsedQualityLayer = Math.min(quality, calculatedLengths.length);

        if (numParsedQualityLayer === 0) {
            return {
                endOffset: startOffsetInDatabin,
                numQualityLayers: 0
            };
        }

        var lastPacket = calculatedLengths[numParsedQualityLayer - 1];
        var endOffset = lastPacket.headerStartOffset + lastPacket.headerLength + lastPacket.overallBodyLengthBytes;

        var result = {
            endOffset: endOffset,
            numQualityLayers: numParsedQualityLayer
        };

        return result;
    }

    function initSubbandParsers() {
        var numSubbands = precinct.resolutionLevel === 0 ? 1 : 3;
        var result = [];

        for (var i = 0; i < numSubbands; ++i) {
            var numCodeblocksXInSubband;
            var numCodeblocksYInSubband;
            if (precinct.resolutionLevel === 0) {
                numCodeblocksXInSubband = numCodeblocksX;
                numCodeblocksYInSubband = numCodeblocksY;
            } else {
                // Treat the edge case of single redundant pixels column
                // (In other cases, numCodeblocksX is full duplication of 2.
                // See JpipComponentStructure implementation).
                if (i === 1) {
                    // LH
                    numCodeblocksXInSubband = Math.ceil(numCodeblocksX / 2);
                } else {
                    // HL or HH
                    numCodeblocksXInSubband = Math.floor(numCodeblocksX / 2);
                }

                // Treat the edge case of single redundant pixels row
                // (In other cases, numCodeblocksY is full duplication of 2.
                // See JpipComponentStructure implementation).
                if (i === 0) {
                    // HL
                    numCodeblocksYInSubband = Math.ceil(numCodeblocksY / 2);
                } else {
                    // LH or HH
                    numCodeblocksYInSubband = Math.floor(numCodeblocksY / 2);
                }
            }

            if (numCodeblocksXInSubband === 0 || numCodeblocksYInSubband === 0) {
                continue;
            }

            result.push(jpipFactory.createSubbandLengthInPacketHeaderCalculator(bitstreamReader, numCodeblocksXInSubband, numCodeblocksYInSubband));
        }

        return result;
    }

    function isMarkerHere(markerSecondByte) {
        var possibleMarker = new Array(2);
        var bytesCopied = databin.copyBytes(possibleMarker,
        /*resultStartOffset=*/0, {
            databinStartOffset: bitstreamReader.databinOffset,
            maxLengthToCopy: 2,
            forceCopyAllRange: false
        });

        switch (bytesCopied) {
            case 2:
                var isMarker = possibleMarker[0] === 0xFF && possibleMarker[1] === markerSecondByte;

                return isMarker;

            case 1:
                if (possibleMarker[0] === 0xFF) {
                    return null;
                }

                return false;

            default:
                return null;
        }
    }

    function checkSupportedStructure() {
        if (!isPacketHeaderNearData) {
            throw new jGlobals.jpipExceptions.UnsupportedFeatureException('PPM or PPT', 'A.7.4 and A.7.5');
        }
    }
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var jGlobals = __webpack_require__(0);

module.exports = function JpipQualityLayersCache(codestreamStructure, jpipFactory) {

    var CACHE_KEY = 'packetLengthCalculator';

    this.getPacketOffsetsByCodeblockIndex = function getPacketOffsetsByCodeblockIndex(precinctDatabin, qualityLayer, precinctPosition) {

        var packetLengthCalculator = getPacketParser(precinctDatabin, precinctPosition);

        var result = packetLengthCalculator.getPacketOffsetsByCodeblockIndex(qualityLayer);

        return result;
    };

    this.getQualityLayerOffset = function getQualityLayerOffset(precinctDatabin, quality, precinctPosition) {

        var loadedRanges = precinctDatabin.getExistingRanges();
        var endOffsetLoaded;

        var packetLengthCalculator = getPacketParser(precinctDatabin, precinctPosition);

        if (loadedRanges.length < 1 || loadedRanges[0].start > 0) {
            endOffsetLoaded = 0;
            quality = 0;
        } else {
            endOffsetLoaded = loadedRanges[0].start + loadedRanges[0].length;
        }

        var layersInPrecinct = packetLengthCalculator.calculateEndOffsetOfLastFullPacket(quality);

        while (endOffsetLoaded < layersInPrecinct.endOffset) {
            var reducedLayersToSearch = layersInPrecinct.numQualityLayers - 1;
            layersInPrecinct = packetLengthCalculator.calculateEndOffsetOfLastFullPacket(reducedLayersToSearch);
        }

        return layersInPrecinct;
    };

    function getPacketParser(precinctDatabin, precinctPosition) {
        var packetLengthCalculatorContainer = precinctDatabin.getCachedData(CACHE_KEY);

        if (packetLengthCalculatorContainer.calculator !== undefined) {
            return packetLengthCalculatorContainer.calculator;
        }

        if (precinctPosition === undefined) {
            throw new jGlobals.jpipExceptions.InternalErrorException('precinctPosition ' + 'should be given on the first time of using QualityLayersCache ' + 'on this precinct');
        }

        var tileStructure = codestreamStructure.getTileStructure(precinctPosition.tileIndex);

        var componentStructure = tileStructure.getComponentStructure(precinctPosition.component);

        packetLengthCalculatorContainer.calculator = jpipFactory.createPacketLengthCalculator(tileStructure, componentStructure, precinctDatabin,
        /*startOffsetInDatabin=*/0, precinctPosition);

        return packetLengthCalculatorContainer.calculator;
    }
};

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _jpx = __webpack_require__(2);

module.exports = PdfjsJpxDecoderLegacy;

var jGlobals = __webpack_require__(0);

function PdfjsJpxDecoderLegacy() {
    this._image = new _jpx.JpxImage();
}

PdfjsJpxDecoderLegacy.prototype.start = function start(data) {
    var self = this;
    return new Promise(function (resolve, reject) {
        var regionToParse = {
            left: data.offsetInRegion.offsetX,
            top: data.offsetInRegion.offsetY,
            right: data.offsetInRegion.offsetX + data.offsetInRegion.width,
            bottom: data.offsetInRegion.offsetY + data.offsetInRegion.height
        };

        var currentContext = self._image.parseCodestream(data.headersCodestream, 0, data.headersCodestream.length, { isOnlyParseHeaders: true });

        if (data.codeblocksData) {
            self._image.addPacketsData(currentContext, data.codeblocksData);
        }
        if (data.precinctCoefficients) {
            for (var i = 0; i < data.precinctCoefficients.length; ++i) {
                var precinct = data.precinctCoefficients[i];
                self._image.setPrecinctCoefficients(currentContext, precinct.coefficients, precinct.tileIndex, precinct.c, precinct.r, precinct.p);
            }
        }

        self._image.decode(currentContext, { regionToParse: regionToParse });

        var pixels = self._copyTilesPixelsToOnePixelsArray(self._image.tiles, regionToParse, self._image.componentsCount);
        resolve(pixels);
    });
};

PdfjsJpxDecoderLegacy.prototype._copyTilesPixelsToOnePixelsArray = function copyTilesPixelsToOnePixelsArray(tiles, resultRegion, componentsCount) {

    var firstTile = tiles[0];
    var width = resultRegion.right - resultRegion.left;
    var height = resultRegion.bottom - resultRegion.top;

    //if (firstTile.left === resultRegion.left &&
    //    firstTile.top === resultRegion.top &&
    //    firstTile.width === width &&
    //    firstTile.height === height &&
    //    componentsCount === 4) {
    //    
    //    return firstTile;
    //}

    var result = new ImageData(width, height);

    var bytesPerPixel = 4;
    var rgbaImageStride = width * bytesPerPixel;

    var tileIndex = 0;

    //for (var x = 0; x < numTilesX; ++x) {

    for (var i = 0; i < tiles.length; ++i) {
        var tileRight = tiles[i].left + tiles[i].width;
        var tileBottom = tiles[i].top + tiles[i].height;

        var intersectionLeft = Math.max(resultRegion.left, tiles[i].left);
        var intersectionTop = Math.max(resultRegion.top, tiles[i].top);
        var intersectionRight = Math.min(resultRegion.right, tileRight);
        var intersectionBottom = Math.min(resultRegion.bottom, tileBottom);

        var intersectionWidth = intersectionRight - intersectionLeft;
        var intersectionHeight = intersectionBottom - intersectionTop;

        if (intersectionLeft !== tiles[i].left || intersectionTop !== tiles[i].top || intersectionWidth !== tiles[i].width || intersectionHeight !== tiles[i].height) {

            throw 'Unsupported tiles to copy';
        }

        var tileOffsetXPixels = intersectionLeft - resultRegion.left;
        var tileOffsetYPixels = intersectionTop - resultRegion.top;

        var tileOffsetBytes = tileOffsetXPixels * bytesPerPixel + tileOffsetYPixels * rgbaImageStride;

        this._copyTile(result.data, tiles[i], tileOffsetBytes, rgbaImageStride, componentsCount);
    }

    return result;
};

PdfjsJpxDecoderLegacy.prototype._copyTile = function copyTile(targetImage, tile, targetImageStartOffset, targetImageStride, componentsCount) {

    var rOffset = 0;
    var gOffset = 1;
    var bOffset = 2;
    var pixelsOffset = 1;

    var pixels = tile.pixels || tile.items;

    if (componentsCount === undefined) {
        componentsCount = pixels.length / (tile.width * tile.height);
    }

    switch (componentsCount) {
        case 1:
            gOffset = 0;
            bOffset = 0;
            break;

        case 3:
            pixelsOffset = 3;
            break;

        case 4:
            pixelsOffset = 4;
            break;

        default:
            throw 'Unsupported components count ' + componentsCount;
    }

    var targetImageIndex = targetImageStartOffset;
    var pixel = 0;
    for (var y = 0; y < tile.height; ++y) {
        var targetImageStartLine = targetImageIndex;

        for (var x = 0; x < tile.width; ++x) {
            targetImage[targetImageIndex + 0] = pixels[pixel + rOffset];
            targetImage[targetImageIndex + 1] = pixels[pixel + gOffset];
            targetImage[targetImageIndex + 2] = pixels[pixel + bOffset];
            targetImage[targetImageIndex + 3] = 255;

            pixel += pixelsOffset;
            targetImageIndex += 4;
        }

        targetImageIndex = targetImageStartLine + targetImageStride;
    }
};

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint no-var: error */

// import './compatibility';
// import { ReadableStream } from './streams_polyfill';
// import { URL } from './url_polyfill';

var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];

var NativeImageDecoding = {
  NONE: 'none',
  DECODE: 'decode',
  DISPLAY: 'display'
};

// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.
var PermissionFlag = {
  PRINT: 0x04,
  MODIFY_CONTENTS: 0x08,
  COPY: 0x10,
  MODIFY_ANNOTATIONS: 0x20,
  FILL_INTERACTIVE_FORMS: 0x100,
  COPY_FOR_ACCESSIBILITY: 0x200,
  ASSEMBLE: 0x400,
  PRINT_HIGH_QUALITY: 0x800
};

var TextRenderingMode = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_ADD_TO_PATH: 4,
  STROKE_ADD_TO_PATH: 5,
  FILL_STROKE_ADD_TO_PATH: 6,
  ADD_TO_PATH: 7,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
};

var ImageKind = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
};

var AnnotationType = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  SOUND: 18,
  MOVIE: 19,
  WIDGET: 20,
  SCREEN: 21,
  PRINTERMARK: 22,
  TRAPNET: 23,
  WATERMARK: 24,
  THREED: 25,
  REDACT: 26
};

var AnnotationStateModelType = {
  MARKED: 'Marked',
  REVIEW: 'Review'
};

var AnnotationMarkedState = {
  MARKED: 'Marked',
  UNMARKED: 'Unmarked'
};

var AnnotationReviewState = {
  ACCEPTED: 'Accepted',
  REJECTED: 'Rejected',
  CANCELLED: 'Cancelled',
  COMPLETED: 'Completed',
  NONE: 'None'
};

var AnnotationReplyType = {
  GROUP: 'Group',
  REPLY: 'R'
};

var AnnotationFlag = {
  INVISIBLE: 0x01,
  HIDDEN: 0x02,
  PRINT: 0x04,
  NOZOOM: 0x08,
  NOROTATE: 0x10,
  NOVIEW: 0x20,
  READONLY: 0x40,
  LOCKED: 0x80,
  TOGGLENOVIEW: 0x100,
  LOCKEDCONTENTS: 0x200
};

var AnnotationFieldFlag = {
  READONLY: 0x0000001,
  REQUIRED: 0x0000002,
  NOEXPORT: 0x0000004,
  MULTILINE: 0x0001000,
  PASSWORD: 0x0002000,
  NOTOGGLETOOFF: 0x0004000,
  RADIO: 0x0008000,
  PUSHBUTTON: 0x0010000,
  COMBO: 0x0020000,
  EDIT: 0x0040000,
  SORT: 0x0080000,
  FILESELECT: 0x0100000,
  MULTISELECT: 0x0200000,
  DONOTSPELLCHECK: 0x0400000,
  DONOTSCROLL: 0x0800000,
  COMB: 0x1000000,
  RICHTEXT: 0x2000000,
  RADIOSINUNISON: 0x2000000,
  COMMITONSELCHANGE: 0x4000000
};

var AnnotationBorderStyleType = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
};

var StreamType = {
  UNKNOWN: 'UNKNOWN',
  FLATE: 'FLATE',
  LZW: 'LZW',
  DCT: 'DCT',
  JPX: 'JPX',
  JBIG: 'JBIG',
  A85: 'A85',
  AHX: 'AHX',
  CCF: 'CCF',
  RLX: 'RLX' // PDF short name is 'RL', but telemetry requires three chars.
};

var FontType = {
  UNKNOWN: 'UNKNOWN',
  TYPE1: 'TYPE1',
  TYPE1C: 'TYPE1C',
  CIDFONTTYPE0: 'CIDFONTTYPE0',
  CIDFONTTYPE0C: 'CIDFONTTYPE0C',
  TRUETYPE: 'TRUETYPE',
  CIDFONTTYPE2: 'CIDFONTTYPE2',
  TYPE3: 'TYPE3',
  OPENTYPE: 'OPENTYPE',
  TYPE0: 'TYPE0',
  MMTYPE1: 'MMTYPE1'
};

var VerbosityLevel = {
  ERRORS: 0,
  WARNINGS: 1,
  INFOS: 5
};

var CMapCompressionType = {
  NONE: 0,
  BINARY: 1,
  STREAM: 2
};

// All the possible operations for an operator list.
var OPS = {
  // Intentionally start from 1 so it is easy to spot bad operators that will be
  // 0's.
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotations: 78,
  endAnnotations: 79,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintJpegXObject: 82,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91
};

var UNSUPPORTED_FEATURES = {
  unknown: 'unknown',
  forms: 'forms',
  javaScript: 'javaScript',
  smask: 'smask',
  shadingPattern: 'shadingPattern',
  font: 'font'
};

var PasswordResponses = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};

var verbosity = VerbosityLevel.WARNINGS;

function setVerbosityLevel(level) {
  if (Number.isInteger(level)) {
    verbosity = level;
  }
}

function getVerbosityLevel() {
  return verbosity;
}

// A notice for devs. These are good for things that are helpful to devs, such
// as warning that Workers were disabled, which is important to devs but not
// end users.
function info(msg) {
  if (verbosity >= VerbosityLevel.INFOS) {
    console.log('Info: ' + msg);
  }
}

// Non-fatal warnings.
function warn(msg) {
  if (verbosity >= VerbosityLevel.WARNINGS) {
    console.log('Warning: ' + msg);
  }
}

function unreachable(msg) {
  throw new Error(msg);
}

function assert(cond, msg) {
  if (!cond) {
    unreachable(msg);
  }
}

// Checks if URLs have the same origin. For non-HTTP based URLs, returns false.
function isSameOrigin(baseUrl, otherUrl) {
  var base = void 0;
  try {
    base = new URL(baseUrl);
    if (!base.origin || base.origin === 'null') {
      return false; // non-HTTP url
    }
  } catch (e) {
    return false;
  }

  var other = new URL(otherUrl, base);
  return base.origin === other.origin;
}

// Checks if URLs use one of the whitelisted protocols, e.g. to avoid XSS.
function _isValidProtocol(url) {
  if (!url) {
    return false;
  }
  switch (url.protocol) {
    case 'http:':
    case 'https:':
    case 'ftp:':
    case 'mailto:':
    case 'tel:':
      return true;
    default:
      return false;
  }
}

/**
 * Attempts to create a valid absolute URL.
 *
 * @param {URL|string} url - An absolute, or relative, URL.
 * @param {URL|string} baseUrl - An absolute URL.
 * @returns Either a valid {URL}, or `null` otherwise.
 */
function createValidAbsoluteUrl(url, baseUrl) {
  if (!url) {
    return null;
  }
  try {
    var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
    if (_isValidProtocol(absoluteUrl)) {
      return absoluteUrl;
    }
  } catch (ex) {/* `new URL()` will throw on incorrect data. */}
  return null;
}

function shadow(obj, prop, value) {
  Object.defineProperty(obj, prop, { value: value,
    enumerable: true,
    configurable: true,
    writable: false });
  return value;
}

var PasswordException = function PasswordExceptionClosure() {
  function PasswordException(msg, code) {
    this.name = 'PasswordException';
    this.message = msg;
    this.code = code;
  }

  PasswordException.prototype = new Error();
  PasswordException.constructor = PasswordException;

  return PasswordException;
}();

var UnknownErrorException = function UnknownErrorExceptionClosure() {
  function UnknownErrorException(msg, details) {
    this.name = 'UnknownErrorException';
    this.message = msg;
    this.details = details;
  }

  UnknownErrorException.prototype = new Error();
  UnknownErrorException.constructor = UnknownErrorException;

  return UnknownErrorException;
}();

var InvalidPDFException = function InvalidPDFExceptionClosure() {
  function InvalidPDFException(msg) {
    this.name = 'InvalidPDFException';
    this.message = msg;
  }

  InvalidPDFException.prototype = new Error();
  InvalidPDFException.constructor = InvalidPDFException;

  return InvalidPDFException;
}();

var MissingPDFException = function MissingPDFExceptionClosure() {
  function MissingPDFException(msg) {
    this.name = 'MissingPDFException';
    this.message = msg;
  }

  MissingPDFException.prototype = new Error();
  MissingPDFException.constructor = MissingPDFException;

  return MissingPDFException;
}();

var UnexpectedResponseException = function UnexpectedResponseExceptionClosure() {
  function UnexpectedResponseException(msg, status) {
    this.name = 'UnexpectedResponseException';
    this.message = msg;
    this.status = status;
  }

  UnexpectedResponseException.prototype = new Error();
  UnexpectedResponseException.constructor = UnexpectedResponseException;

  return UnexpectedResponseException;
}();

/**
 * Error caused during parsing PDF data.
 */
var FormatError = function FormatErrorClosure() {
  function FormatError(msg) {
    this.message = msg;
  }

  FormatError.prototype = new Error();
  FormatError.prototype.name = 'FormatError';
  FormatError.constructor = FormatError;

  return FormatError;
}();

/**
 * Error used to indicate task cancellation.
 */
var AbortException = function AbortExceptionClosure() {
  function AbortException(msg) {
    this.name = 'AbortException';
    this.message = msg;
  }

  AbortException.prototype = new Error();
  AbortException.constructor = AbortException;

  return AbortException;
}();

var NullCharactersRegExp = /\x00/g;

function removeNullCharacters(str) {
  if (typeof str !== 'string') {
    warn('The argument for removeNullCharacters must be a string.');
    return str;
  }
  return str.replace(NullCharactersRegExp, '');
}

function bytesToString(bytes) {
  assert(bytes !== null && (typeof bytes === 'undefined' ? 'undefined' : _typeof(bytes)) === 'object' && bytes.length !== undefined, 'Invalid argument for bytesToString');
  var length = bytes.length;
  var MAX_ARGUMENT_COUNT = 8192;
  if (length < MAX_ARGUMENT_COUNT) {
    return String.fromCharCode.apply(null, bytes);
  }
  var strBuf = [];
  for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
    var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
    var chunk = bytes.subarray(i, chunkEnd);
    strBuf.push(String.fromCharCode.apply(null, chunk));
  }
  return strBuf.join('');
}

function stringToBytes(str) {
  assert(typeof str === 'string', 'Invalid argument for stringToBytes');
  var length = str.length;
  var bytes = new Uint8Array(length);
  for (var i = 0; i < length; ++i) {
    bytes[i] = str.charCodeAt(i) & 0xFF;
  }
  return bytes;
}

/**
 * Gets length of the array (Array, Uint8Array, or string) in bytes.
 * @param {Array|Uint8Array|string} arr
 * @returns {number}
 */
function arrayByteLength(arr) {
  if (arr.length !== undefined) {
    return arr.length;
  }
  assert(arr.byteLength !== undefined);
  return arr.byteLength;
}

/**
 * Combines array items (arrays) into single Uint8Array object.
 * @param {Array} arr - the array of the arrays (Array, Uint8Array, or string).
 * @returns {Uint8Array}
 */
function arraysToBytes(arr) {
  var length = arr.length;
  // Shortcut: if first and only item is Uint8Array, return it.
  if (length === 1 && arr[0] instanceof Uint8Array) {
    return arr[0];
  }
  var resultLength = 0;
  for (var i = 0; i < length; i++) {
    resultLength += arrayByteLength(arr[i]);
  }
  var pos = 0;
  var data = new Uint8Array(resultLength);
  for (var _i = 0; _i < length; _i++) {
    var item = arr[_i];
    if (!(item instanceof Uint8Array)) {
      if (typeof item === 'string') {
        item = stringToBytes(item);
      } else {
        item = new Uint8Array(item);
      }
    }
    var itemLength = item.byteLength;
    data.set(item, pos);
    pos += itemLength;
  }
  return data;
}

function string32(value) {
  return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
}

// Calculate the base 2 logarithm of the number `x`. This differs from the
// native function in the sense that it returns the ceiling value and that it
// returns 0 instead of `Infinity`/`NaN` for `x` values smaller than/equal to 0.
function log2(x) {
  if (x <= 0) {
    return 0;
  }
  return Math.ceil(Math.log2(x));
}

function readInt8(data, start) {
  return data[start] << 24 >> 24;
}

function readUint16(data, offset) {
  return data[offset] << 8 | data[offset + 1];
}

function readUint32(data, offset) {
  return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;
}

// Lazy test the endianness of the platform
// NOTE: This will be 'true' for simulated TypedArrays
function isLittleEndian() {
  var buffer8 = new Uint8Array(4);
  buffer8[0] = 1;
  var view32 = new Uint32Array(buffer8.buffer, 0, 1);
  return view32[0] === 1;
}

// Checks if it's possible to eval JS expressions.
function isEvalSupported() {
  try {
    new Function(''); // eslint-disable-line no-new, no-new-func
    return true;
  } catch (e) {
    return false;
  }
}

var rgbBuf = ['rgb(', 0, ',', 0, ',', 0, ')'];

var Util = function () {
  function Util() {
    _classCallCheck(this, Util);
  }

  _createClass(Util, null, [{
    key: 'makeCssRgb',

    // makeCssRgb() can be called thousands of times. Using ´rgbBuf` avoids
    // creating many intermediate strings.
    value: function makeCssRgb(r, g, b) {
      rgbBuf[1] = r;
      rgbBuf[3] = g;
      rgbBuf[5] = b;
      return rgbBuf.join('');
    }

    // Concatenates two transformation matrices together and returns the result.

  }, {
    key: 'transform',
    value: function transform(m1, m2) {
      return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
    }

    // For 2d affine transforms

  }, {
    key: 'applyTransform',
    value: function applyTransform(p, m) {
      var xt = p[0] * m[0] + p[1] * m[2] + m[4];
      var yt = p[0] * m[1] + p[1] * m[3] + m[5];
      return [xt, yt];
    }
  }, {
    key: 'applyInverseTransform',
    value: function applyInverseTransform(p, m) {
      var d = m[0] * m[3] - m[1] * m[2];
      var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
      var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
      return [xt, yt];
    }

    // Applies the transform to the rectangle and finds the minimum axially
    // aligned bounding box.

  }, {
    key: 'getAxialAlignedBoundingBox',
    value: function getAxialAlignedBoundingBox(r, m) {
      var p1 = Util.applyTransform(r, m);
      var p2 = Util.applyTransform(r.slice(2, 4), m);
      var p3 = Util.applyTransform([r[0], r[3]], m);
      var p4 = Util.applyTransform([r[2], r[1]], m);
      return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
    }
  }, {
    key: 'inverseTransform',
    value: function inverseTransform(m) {
      var d = m[0] * m[3] - m[1] * m[2];
      return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
    }

    // Apply a generic 3d matrix M on a 3-vector v:
    //   | a b c |   | X |
    //   | d e f | x | Y |
    //   | g h i |   | Z |
    // M is assumed to be serialized as [a,b,c,d,e,f,g,h,i],
    // with v as [X,Y,Z]

  }, {
    key: 'apply3dTransform',
    value: function apply3dTransform(m, v) {
      return [m[0] * v[0] + m[1] * v[1] + m[2] * v[2], m[3] * v[0] + m[4] * v[1] + m[5] * v[2], m[6] * v[0] + m[7] * v[1] + m[8] * v[2]];
    }

    // This calculation uses Singular Value Decomposition.
    // The SVD can be represented with formula A = USV. We are interested in the
    // matrix S here because it represents the scale values.

  }, {
    key: 'singularValueDecompose2dScale',
    value: function singularValueDecompose2dScale(m) {
      var transpose = [m[0], m[2], m[1], m[3]];

      // Multiply matrix m with its transpose.
      var a = m[0] * transpose[0] + m[1] * transpose[2];
      var b = m[0] * transpose[1] + m[1] * transpose[3];
      var c = m[2] * transpose[0] + m[3] * transpose[2];
      var d = m[2] * transpose[1] + m[3] * transpose[3];

      // Solve the second degree polynomial to get roots.
      var first = (a + d) / 2;
      var second = Math.sqrt((a + d) * (a + d) - 4 * (a * d - c * b)) / 2;
      var sx = first + second || 1;
      var sy = first - second || 1;

      // Scale values are the square roots of the eigenvalues.
      return [Math.sqrt(sx), Math.sqrt(sy)];
    }

    // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)
    // For coordinate systems whose origin lies in the bottom-left, this
    // means normalization to (BL,TR) ordering. For systems with origin in the
    // top-left, this means (TL,BR) ordering.

  }, {
    key: 'normalizeRect',
    value: function normalizeRect(rect) {
      var r = rect.slice(0); // clone rect
      if (rect[0] > rect[2]) {
        r[0] = rect[2];
        r[2] = rect[0];
      }
      if (rect[1] > rect[3]) {
        r[1] = rect[3];
        r[3] = rect[1];
      }
      return r;
    }

    // Returns a rectangle [x1, y1, x2, y2] corresponding to the
    // intersection of rect1 and rect2. If no intersection, returns 'false'
    // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]

  }, {
    key: 'intersect',
    value: function intersect(rect1, rect2) {
      function compare(a, b) {
        return a - b;
      }

      // Order points along the axes
      var orderedX = [rect1[0], rect1[2], rect2[0], rect2[2]].sort(compare);
      var orderedY = [rect1[1], rect1[3], rect2[1], rect2[3]].sort(compare);
      var result = [];

      rect1 = Util.normalizeRect(rect1);
      rect2 = Util.normalizeRect(rect2);

      // X: first and second points belong to different rectangles?
      if (orderedX[0] === rect1[0] && orderedX[1] === rect2[0] || orderedX[0] === rect2[0] && orderedX[1] === rect1[0]) {
        // Intersection must be between second and third points
        result[0] = orderedX[1];
        result[2] = orderedX[2];
      } else {
        return null;
      }

      // Y: first and second points belong to different rectangles?
      if (orderedY[0] === rect1[1] && orderedY[1] === rect2[1] || orderedY[0] === rect2[1] && orderedY[1] === rect1[1]) {
        // Intersection must be between second and third points
        result[1] = orderedY[1];
        result[3] = orderedY[2];
      } else {
        return null;
      }

      return result;
    }
  }]);

  return Util;
}();

var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2D8, 0x2C7, 0x2C6, 0x2D9, 0x2DD, 0x2DB, 0x2DA, 0x2DC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203A, 0x2212, 0x2030, 0x201E, 0x201C, 0x201D, 0x2018, 0x2019, 0x201A, 0x2122, 0xFB01, 0xFB02, 0x141, 0x152, 0x160, 0x178, 0x17D, 0x131, 0x142, 0x153, 0x161, 0x17E, 0, 0x20AC];

function stringToPDFString(str) {
  var length = str.length,
      strBuf = [];
  if (str[0] === '\xFE' && str[1] === '\xFF') {
    // UTF16BE BOM
    for (var i = 2; i < length; i += 2) {
      strBuf.push(String.fromCharCode(str.charCodeAt(i) << 8 | str.charCodeAt(i + 1)));
    }
  } else {
    for (var _i2 = 0; _i2 < length; ++_i2) {
      var code = PDFStringTranslateTable[str.charCodeAt(_i2)];
      strBuf.push(code ? String.fromCharCode(code) : str.charAt(_i2));
    }
  }
  return strBuf.join('');
}

function stringToUTF8String(str) {
  return decodeURIComponent(escape(str));
}

function utf8StringToString(str) {
  return unescape(encodeURIComponent(str));
}

function isEmptyObj(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
}

function isBool(v) {
  return typeof v === 'boolean';
}

function isNum(v) {
  return typeof v === 'number';
}

function isString(v) {
  return typeof v === 'string';
}

function isArrayBuffer(v) {
  return (typeof v === 'undefined' ? 'undefined' : _typeof(v)) === 'object' && v !== null && v.byteLength !== undefined;
}

function isArrayEqual(arr1, arr2) {
  if (arr1.length !== arr2.length) {
    return false;
  }
  return arr1.every(function (element, index) {
    return element === arr2[index];
  });
}

// Checks if ch is one of the following characters: SPACE, TAB, CR or LF.
function isSpace(ch) {
  return ch === 0x20 || ch === 0x09 || ch === 0x0D || ch === 0x0A;
}

/**
 * Promise Capability object.
 *
 * @typedef {Object} PromiseCapability
 * @property {Promise} promise - A Promise object.
 * @property {boolean} settled - If the Promise has been fulfilled/rejected.
 * @property {function} resolve - Fulfills the Promise.
 * @property {function} reject - Rejects the Promise.
 */

/**
 * Creates a promise capability object.
 * @alias createPromiseCapability
 *
 * @return {PromiseCapability}
 */
function createPromiseCapability() {
  var capability = Object.create(null);
  var isSettled = false;

  Object.defineProperty(capability, 'settled', {
    get: function get() {
      return isSettled;
    }
  });
  capability.promise = new Promise(function (resolve, reject) {
    capability.resolve = function (data) {
      isSettled = true;
      resolve(data);
    };
    capability.reject = function (reason) {
      isSettled = true;
      reject(reason);
    };
  });
  return capability;
}

var createObjectURL = function createObjectURLClosure() {
  // Blob/createObjectURL is not available, falling back to data schema.
  var digits = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  return function createObjectURL(data, contentType) {
    var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (!forceDataSchema && URL.createObjectURL) {
      var blob = new Blob([data], { type: contentType });
      return URL.createObjectURL(blob);
    }

    var buffer = 'data:' + contentType + ';base64,';
    for (var i = 0, ii = data.length; i < ii; i += 3) {
      var b1 = data[i] & 0xFF;
      var b2 = data[i + 1] & 0xFF;
      var b3 = data[i + 2] & 0xFF;
      var d1 = b1 >> 2,
          d2 = (b1 & 3) << 4 | b2 >> 4;
      var d3 = i + 1 < ii ? (b2 & 0xF) << 2 | b3 >> 6 : 64;
      var d4 = i + 2 < ii ? b3 & 0x3F : 64;
      buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
    }
    return buffer;
  };
}();

exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
exports.OPS = OPS;
exports.VerbosityLevel = VerbosityLevel;
exports.UNSUPPORTED_FEATURES = UNSUPPORTED_FEATURES;
exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
exports.AnnotationFieldFlag = AnnotationFieldFlag;
exports.AnnotationFlag = AnnotationFlag;
exports.AnnotationMarkedState = AnnotationMarkedState;
exports.AnnotationReplyType = AnnotationReplyType;
exports.AnnotationReviewState = AnnotationReviewState;
exports.AnnotationStateModelType = AnnotationStateModelType;
exports.AnnotationType = AnnotationType;
exports.FontType = FontType;
exports.ImageKind = ImageKind;
exports.CMapCompressionType = CMapCompressionType;
exports.AbortException = AbortException;
exports.InvalidPDFException = InvalidPDFException;
exports.MissingPDFException = MissingPDFException;
exports.NativeImageDecoding = NativeImageDecoding;
exports.PasswordException = PasswordException;
exports.PasswordResponses = PasswordResponses;
exports.PermissionFlag = PermissionFlag;
exports.StreamType = StreamType;
exports.TextRenderingMode = TextRenderingMode;
exports.UnexpectedResponseException = UnexpectedResponseException;
exports.UnknownErrorException = UnknownErrorException;
exports.Util = Util;
exports.FormatError = FormatError;
exports.arrayByteLength = arrayByteLength;
exports.arraysToBytes = arraysToBytes;
exports.assert = assert;
exports.bytesToString = bytesToString;
exports.createPromiseCapability = createPromiseCapability;
exports.createObjectURL = createObjectURL;
exports.getVerbosityLevel = getVerbosityLevel;
exports.info = info;
exports.isArrayBuffer = isArrayBuffer;
exports.isArrayEqual = isArrayEqual;
exports.isBool = isBool;
exports.isEmptyObj = isEmptyObj;
exports.isNum = isNum;
exports.isString = isString;
exports.isSpace = isSpace;
exports.isSameOrigin = isSameOrigin;
exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
exports.isLittleEndian = isLittleEndian;
exports.isEvalSupported = isEvalSupported;
exports.log2 = log2;
exports.readInt8 = readInt8;
exports.readUint16 = readUint16;
exports.readUint32 = readUint32;
exports.removeNullCharacters = removeNullCharacters;
exports.ReadableStream = ReadableStream;
exports.URL = URL;
exports.setVerbosityLevel = setVerbosityLevel;
exports.shadow = shadow;
exports.string32 = string32;
exports.stringToBytes = stringToBytes;
exports.stringToPDFString = stringToPDFString;
exports.stringToUTF8String = stringToUTF8String;
exports.utf8StringToString = utf8StringToString;
exports.warn = warn;
exports.unreachable = unreachable;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* Copyright 2012 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* eslint no-var: error */

// Table C-2
var QeTable = [{ qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1 }, { qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0 }, { qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0 }, { qe: 0x0AC1, nmps: 4, nlps: 12, switchFlag: 0 }, { qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0 }, { qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0 }, { qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1 }, { qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0 }, { qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0 }, { qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0 }, { qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0 }, { qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0 }, { qe: 0x1C01, nmps: 13, nlps: 20, switchFlag: 0 }, { qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0 }, { qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1 }, { qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0 }, { qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0 }, { qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0 }, { qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0 }, { qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0 }, { qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0 }, { qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0 }, { qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0 }, { qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0 }, { qe: 0x1C01, nmps: 25, nlps: 22, switchFlag: 0 }, { qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0 }, { qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0 }, { qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0 }, { qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0 }, { qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0 }, { qe: 0x0AC1, nmps: 31, nlps: 28, switchFlag: 0 }, { qe: 0x09C1, nmps: 32, nlps: 29, switchFlag: 0 }, { qe: 0x08A1, nmps: 33, nlps: 30, switchFlag: 0 }, { qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0 }, { qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0 }, { qe: 0x02A1, nmps: 36, nlps: 33, switchFlag: 0 }, { qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0 }, { qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0 }, { qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0 }, { qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0 }, { qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0 }, { qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0 }, { qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0 }, { qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0 }, { qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0 }, { qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0 }, { qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0 }];

/**
 * This class implements the QM Coder decoding as defined in
 *   JPEG 2000 Part I Final Committee Draft Version 1.0
 *   Annex C.3 Arithmetic decoding procedure
 * available at http://www.jpeg.org/public/fcd15444-1.pdf
 *
 * The arithmetic decoder is used in conjunction with context models to decode
 * JPEG2000 and JBIG2 streams.
 */

var ArithmeticDecoder = function () {
  // C.3.5 Initialisation of the decoder (INITDEC)
  function ArithmeticDecoder(data, start, end) {
    _classCallCheck(this, ArithmeticDecoder);

    this.data = data;
    this.bp = start;
    this.dataEnd = end;

    this.chigh = data[start];
    this.clow = 0;

    this.byteIn();

    this.chigh = this.chigh << 7 & 0xFFFF | this.clow >> 9 & 0x7F;
    this.clow = this.clow << 7 & 0xFFFF;
    this.ct -= 7;
    this.a = 0x8000;
  }

  // C.3.4 Compressed data input (BYTEIN)


  _createClass(ArithmeticDecoder, [{
    key: "byteIn",
    value: function byteIn() {
      var data = this.data;
      var bp = this.bp;

      if (data[bp] === 0xFF) {
        if (data[bp + 1] > 0x8F) {
          this.clow += 0xFF00;
          this.ct = 8;
        } else {
          bp++;
          this.clow += data[bp] << 9;
          this.ct = 7;
          this.bp = bp;
        }
      } else {
        bp++;
        this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xFF00;
        this.ct = 8;
        this.bp = bp;
      }
      if (this.clow > 0xFFFF) {
        this.chigh += this.clow >> 16;
        this.clow &= 0xFFFF;
      }
    }

    // C.3.2 Decoding a decision (DECODE)

  }, {
    key: "readBit",
    value: function readBit(contexts, pos) {
      // Contexts are packed into 1 byte:
      // highest 7 bits carry cx.index, lowest bit carries cx.mps
      var cx_index = contexts[pos] >> 1,
          cx_mps = contexts[pos] & 1;
      var qeTableIcx = QeTable[cx_index];
      var qeIcx = qeTableIcx.qe;
      var d = void 0;
      var a = this.a - qeIcx;

      if (this.chigh < qeIcx) {
        // exchangeLps
        if (a < qeIcx) {
          a = qeIcx;
          d = cx_mps;
          cx_index = qeTableIcx.nmps;
        } else {
          a = qeIcx;
          d = 1 ^ cx_mps;
          if (qeTableIcx.switchFlag === 1) {
            cx_mps = d;
          }
          cx_index = qeTableIcx.nlps;
        }
      } else {
        this.chigh -= qeIcx;
        if ((a & 0x8000) !== 0) {
          this.a = a;
          return cx_mps;
        }
        // exchangeMps
        if (a < qeIcx) {
          d = 1 ^ cx_mps;
          if (qeTableIcx.switchFlag === 1) {
            cx_mps = d;
          }
          cx_index = qeTableIcx.nlps;
        } else {
          d = cx_mps;
          cx_index = qeTableIcx.nmps;
        }
      }
      // C.3.3 renormD;
      do {
        if (this.ct === 0) {
          this.byteIn();
        }

        a <<= 1;
        this.chigh = this.chigh << 1 & 0xFFFF | this.clow >> 15 & 1;
        this.clow = this.clow << 1 & 0xFFFF;
        this.ct--;
      } while ((a & 0x8000) === 0);
      this.a = a;

      contexts[pos] = cx_index << 1 | cx_mps;
      return d;
    }
  }]);

  return ArithmeticDecoder;
}();

exports.ArithmeticDecoder = ArithmeticDecoder;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = PdfjsJpxPixelsDecoder;

var PdfjsJpxContextPool = __webpack_require__(3);

function PdfjsJpxPixelsDecoder() {
    this._contextPool = new PdfjsJpxContextPool();
}

/**
 * 
 * @param {object} data 
 */
PdfjsJpxPixelsDecoder.prototype.start = function start(data) {
    var self = this;
    return new Promise(function (resolve, reject) {
        var image = self._contextPool.image;
        var currentContext = self._contextPool.getContext(data.headersCodestream);

        var regionToParse = {
            left: data.offsetInRegion.offsetX,
            top: data.offsetInRegion.offsetY,
            right: data.offsetInRegion.offsetX + data.offsetInRegion.width,
            bottom: data.offsetInRegion.offsetY + data.offsetInRegion.height
        };

        var imageTilesX = data.imageTilesX;
        var boundsTilesX = data.tilesBounds.maxTileXExclusive - data.tilesBounds.minTileX;
        var minTileX = data.tilesBounds.minTileX;
        var minTileY = data.tilesBounds.minTileY;

        for (var i = 0; i < data.precinctCoefficients.length; ++i) {
            var coeffs = data.precinctCoefficients[i];

            var imageTileIndex = coeffs.key.tileIndex;
            var imageTileX = imageTileIndex % imageTilesX;
            var imageTileY = Math.floor(imageTileIndex / imageTilesX);
            var inBoundsTileX = imageTileX - minTileX;
            var inBoundsTileY = imageTileY - minTileY;
            var inBoundsTileIndex = inBoundsTileX + inBoundsTileY * boundsTilesX;

            image.setPrecinctCoefficients(currentContext, coeffs.coefficients, inBoundsTileIndex, coeffs.key.component, coeffs.key.resolutionLevel, coeffs.key.precinctIndexInComponentResolution);
        }

        image.decode(currentContext, { regionToParse: regionToParse });

        var result = self._copyTilesPixelsToOnePixelsArray(image.tiles, regionToParse, image.componentsCount);
        resolve(result);
    });
};

/**
 * Copy tiles pixels to one pixels array.
 * @param {Array} tiles 
 * @param {object} resultRegion Left, top, right and bottom indices.
 * @param {number} componentsCount Number of components.
 */
PdfjsJpxPixelsDecoder.prototype._copyTilesPixelsToOnePixelsArray = function copyTilesPixelsToOnePixelsArray(tiles, resultRegion, componentsCount) {

    var firstTile = tiles[0];
    var width = resultRegion.right - resultRegion.left;
    var height = resultRegion.bottom - resultRegion.top;

    //if (firstTile.left === resultRegion.left &&
    //    firstTile.top === resultRegion.top &&
    //    firstTile.width === width &&
    //    firstTile.height === height &&
    //    componentsCount === 4) {
    //    
    //    return firstTile;
    //}

    var result = new ImageData(width, height);

    var bytesPerPixel = 4; // 4 components per pixel - RGBA
    var rgbaImageStride = width * bytesPerPixel; // Image 'stride'

    var tileIndex = 0;

    //for (var x = 0; x < numTilesX; ++x) {

    for (var i = 0; i < tiles.length; ++i) {
        var tileRight = tiles[i].left + tiles[i].width;
        var tileBottom = tiles[i].top + tiles[i].height;

        var intersectionLeft = Math.max(resultRegion.left, tiles[i].left);
        var intersectionTop = Math.max(resultRegion.top, tiles[i].top);
        var intersectionRight = Math.min(resultRegion.right, tileRight);
        var intersectionBottom = Math.min(resultRegion.bottom, tileBottom);

        var intersectionWidth = intersectionRight - intersectionLeft;
        var intersectionHeight = intersectionBottom - intersectionTop;

        if (intersectionLeft !== tiles[i].left || intersectionTop !== tiles[i].top || intersectionWidth !== tiles[i].width || intersectionHeight !== tiles[i].height) {

            throw 'Unsupported tiles to copy';
        }

        var tileOffsetXPixels = intersectionLeft - resultRegion.left;
        var tileOffsetYPixels = intersectionTop - resultRegion.top;

        var tileOffsetBytes = tileOffsetXPixels * bytesPerPixel + tileOffsetYPixels * rgbaImageStride;

        this._copyTile(result.data, tiles[i], tileOffsetBytes, rgbaImageStride, componentsCount);
    }

    return result;
};

/**
 * Horizontally stride through pixels to form targetImage over region.
 * @param {number[]} targetImage 
 * @param {object} tile 
 * @param {number} targetImageStartOffset Where to start copying tiles in the target image.
 * @param {number} targetImageStride 
 * @param {*} componentsCount Number of components in tile.
 */
PdfjsJpxPixelsDecoder.prototype._copyTile = function copyTile(targetImage, tile, targetImageStartOffset, targetImageStride, componentsCount) {

    // RGB offsets
    var rOffset = 0;
    var gOffset = 1;
    var bOffset = 2;
    var pixelsOffset = 1; // ??

    // Let pixels be tile.pixels if defined, otherwise tile.items
    var pixels = tile.pixels || tile.items;

    // Calculate components if undefined
    if (componentsCount === undefined) {
        componentsCount = pixels.length / (tile.width * tile.height);
    }

    // Perform offsets depending on number of components
    switch (componentsCount) {
        case 1:
            gOffset = 0; // Greyscale?
            bOffset = 0;
            break;

        case 3:
            pixelsOffset = 3; // RGB?
            break;

        case 4:
            pixelsOffset = 4; // RGBa?
            break;

        default:
            throw 'Unsupported components count ' + componentsCount; // This is throwing for Dingo files w/ 1000 components
    }

    var targetImageIndex = targetImageStartOffset; // ??
    var pixel = 0; // Which pixel??
    for (var y = 0; y < tile.height; ++y) {
        var targetImageStartLine = targetImageIndex; // ??

        for (var x = 0; x < tile.width; ++x) {
            targetImage[targetImageIndex + 0] = pixels[pixel + rOffset];
            targetImage[targetImageIndex + 1] = pixels[pixel + gOffset];
            targetImage[targetImageIndex + 2] = pixels[pixel + bOffset];
            targetImage[targetImageIndex + 3] = 255;

            pixel += pixelsOffset;
            targetImageIndex += 4;
        }

        targetImageIndex = targetImageStartLine + targetImageStride;
    }
};

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = PdfjsJpxCoefficientsDecoder;

var PdfjsJpxContextPool = __webpack_require__(3);

function PdfjsJpxCoefficientsDecoder() {
    this._contextPool = new PdfjsJpxContextPool();
}

PdfjsJpxCoefficientsDecoder.prototype.start = function start(data, key) {
    var self = this;
    return new Promise(function (resolve, reject) {
        var image = self._contextPool.image;
        var currentContext = self._contextPool.getContext(data.headersCodestream);
        if (data.codeblocksData) {
            image.addPacketsData(currentContext, data.codeblocksData);
        }
        if (data.precinctCoefficients) {
            // NOTE: Apparently dead code that can be removed
            for (var j = 0; j < data.precinctCoefficients.length; ++j) {
                var precinct = data.precinctCoefficients[j];
                image.setPrecinctCoefficients(currentContext, precinct.coefficients, precinct.tileIndex, precinct.c, precinct.r, precinct.p);
            }
        }

        var coefficients = image.decodePrecinctCoefficients(currentContext,
        /*tileIndex=*/0, key.component, key.resolutionLevel, key.precinctIndexInComponentResolution);

        resolve({
            key: key,
            coefficients: coefficients,
            minQuality: data.minQuality
        });
    });
};

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZmNkMzI1ZTdhNjA0ZWI2M2YzNzQiLCJ3ZWJwYWNrOi8vLy4vc3JjL21pc2MvajJrLWpwaXAtZ2xvYmFscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlzYy9qcGlwLXJ1bnRpbWUtZmFjdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvcGRmLmpzL2NvcmUvanB4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvcGRmanMtanB4LWNvbnRleHQtcG9vbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd2VianBpcC1leHBvcnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvanBpcC1pbWFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWlzYy9zaW1wbGUtYWpheC1oZWxwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3F1YWxpdHktbGF5ZXJzL211dHVhbC1leGNsdXNpdmUtdHJhbnNhY3Rpb24taGVscGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9xdWFsaXR5LWxheWVycy9qcGlwLWNvZGluZy1wYXNzZXMtbnVtYmVyLXBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdG9jb2wvanBpcC1tZXNzYWdlLWhlYWRlci1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb3RvY29sL2pwaXAtY2hhbm5lbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd3JpdGVycy9qcGlwLWNvZGVzdHJlYW0tcmVjb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLWNvZGVzdHJlYW0tc3RydWN0dXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtY29tcG9uZW50LXN0cnVjdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGF0YWJpbnMvY29tcG9zaXRlLWFycmF5LmpzIiwid2VicGFjazovLy8uL3NyYy9kYXRhYmlucy9qcGlwLWRhdGFiaW4tcGFydHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RhdGFiaW5zL2pwaXAtZGF0YWJpbnMtc2F2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9qcGlwLWZldGNoLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvanBpcC1mZXRjaGVyLmpzIiwid2VicGFjazovLy8uL3NyYy93cml0ZXJzL2pwaXAtaGVhZGVyLW1vZGlmaWVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcGkvanBpcC1pbWFnZS1kYXRhLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9qcGlwLWxldmVsLWNhbGN1bGF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcnNlcnMvanBpcC1tYXJrZXJzLXBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFyc2Vycy9qcGlwLW9mZnNldHMtY2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd3JpdGVycy9qcGlwLXBhY2tldHMtZGF0YS1jb2xsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlLXN0cnVjdHVyZXMvanBpcC1wYXJhbXMtY29kZXN0cmVhbS1wYXJ0LmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcGFyYW1zLXByZWNpbmN0LWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcHJlY2luY3QtY29kZXN0cmVhbS1wYXJ0LmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcHJlY2luY3RzLWl0ZXJhdG9yLXdhaXRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLXF1YWxpdHktd2FpdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcmVxdWVzdC1wYXJhbXMtbW9kaWZpZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Byb3RvY29sL2pwaXAtcmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdG9jb2wvanBpcC1zZXNzaW9uLWhlbHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcHJvdG9jb2wvanBpcC1zZXNzaW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9wcm90b2NvbC9qcGlwLXJlY29ubmVjdGFibGUtcmVxdWVzdGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9wYXJzZXJzL2pwaXAtc3RydWN0dXJlLXBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLXRpbGUtc3RydWN0dXJlLmpzIiwid2VicGFjazovLy8uL3NyYy9xdWFsaXR5LWxheWVycy9qcGlwLWJpdHN0cmVhbS1yZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3F1YWxpdHktbGF5ZXJzL2pwaXAtdGFnLXRyZWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3F1YWxpdHktbGF5ZXJzL2pwaXAtY29kZWJsb2NrLWxlbmd0aC1wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3F1YWxpdHktbGF5ZXJzL2pwaXAtc3ViYmFuZC1sZW5ndGgtaW4tcGFja2V0LWhlYWRlci1jYWxjdWxhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9xdWFsaXR5LWxheWVycy9qcGlwLXBhY2tldC1sZW5ndGgtY2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcXVhbGl0eS1sYXllcnMvanBpcC1xdWFsaXR5LWxheWVycy1jYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBpL3BkZmpzLWpweC1kZWNvZGVyLWxlZ2FjeS5qcyIsIndlYnBhY2s6Ly8vLi92ZW5kb3IvcGRmLmpzL3NoYXJlZC91dGlsLmpzIiwid2VicGFjazovLy8uL3ZlbmRvci9wZGYuanMvY29yZS9hcml0aG1ldGljX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9wZGZqcy1qcHgtcGl4ZWxzLWRlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwaS9wZGZqcy1qcHgtY29lZmZpY2llbnRzLWRlY29kZXIuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImoya01hcmtlcnMiLCJTdGFydE9mQ29kZXN0cmVhbSIsIkltYWdlQW5kVGlsZVNpemUiLCJDb2RpbmdTdHlsZURlZmF1bHQiLCJDb2RpbmdTdHlsZUNvbXBvbmVudCIsIlF1YW50aXphdGlvbkRlZmF1bHQiLCJQcm9ncmVzc2lvbk9yZGVyQ2hhbmdlIiwiUGFja2VkUGFja2V0SGVhZGVyc0luTWFpbkhlYWRlciIsIlBhY2tlZFBhY2tldEhlYWRlcnNJblRpbGVIZWFkZXIiLCJTdGFydE9mVGlsZSIsIlN0YXJ0T2ZEYXRhIiwiRW5kT2ZDb2Rlc3RyZWFtIiwiQ29tbWVudCIsImoya09mZnNldHMiLCJNQVJLRVJfU0laRSIsIkxFTkdUSF9GSUVMRF9TSVpFIiwiTlVNX0NPTVBPTkVOVFNfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVIiLCJSRUZFUkVOQ0VfR1JJRF9TSVpFX09GRlNFVF9BRlRFUl9TSVpfTUFSS0VSIiwianBpcEVuZE9mUmVzcG9uc2VSZWFzb25zIiwiSU1BR0VfRE9ORSIsIldJTkRPV19ET05FIiwiV0lORE9XX0NIQU5HRSIsIkJZVEVfTElNSVQiLCJRVUFMSVRZX0xJTUlUIiwiU0VTU0lPTl9MSU1JVCIsIlJFU1BPTlNFX0xJTUlUIiwiTk9OX1NQRUNJRklFRCIsImoya0V4Y2VwdGlvbnMiLCJVbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24iLCJmZWF0dXJlIiwic3RhbmRhcmRTZWN0aW9uIiwiZGVzY3JpcHRpb24iLCJ0b1N0cmluZyIsIlBhcnNlRXhjZXB0aW9uIiwiSWxsZWdhbERhdGFFeGNlcHRpb24iLCJpbGxlZ2FsRGF0YURlc2NyaXB0aW9uIiwianBpcEV4Y2VwdGlvbnMiLCJJbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uIiwiQXJndW1lbnRFeGNlcHRpb24iLCJhcmd1bWVudE5hbWUiLCJhcmd1bWVudFZhbHVlIiwidW5kZWZpbmVkIiwiV3JvbmdTdHJlYW1FeGNlcHRpb24iLCJyZXF1ZXN0ZWRPcGVyYXRpb24iLCJpc0pQVCIsImNvcnJlY3RTdHJlYW0iLCJ3cm9uZ1N0cmVhbSIsInN3YXAiLCJJbnRlcm5hbEVycm9yRXhjZXB0aW9uIiwiTmFtZSIsInNpbXBsZUFqYXhIZWxwZXIiLCJyZXF1aXJlIiwibXV0dWFsRXhjbHVzaXZlVHJhbnNhY3Rpb25IZWxwZXIiLCJqcGlwQ29kaW5nUGFzc2VzTnVtYmVyUGFyc2VyIiwianBpcE1lc3NhZ2VIZWFkZXJQYXJzZXIiLCJKcGlwQ2hhbm5lbCIsIkpwaXBDb2Rlc3RyZWFtUmVjb25zdHJ1Y3RvciIsIkpwaXBDb2Rlc3RyZWFtU3RydWN0dXJlIiwiSnBpcENvbXBvbmVudFN0cnVjdHVyZSIsIkNvbXBvc2l0ZUFycmF5IiwiSnBpcERhdGFiaW5QYXJ0cyIsIkpwaXBEYXRhYmluc1NhdmVyIiwiSnBpcEZldGNoIiwiSnBpcEZldGNoZXIiLCJKcGlwSGVhZGVyTW9kaWZpZXIiLCJKcGlwSW1hZ2VEYXRhQ29udGV4dCIsIkpwaXBMZXZlbENhbGN1bGF0b3IiLCJKcGlwTWFya2Vyc1BhcnNlciIsIkpwaXBPZmZzZXRzQ2FsY3VsYXRvciIsIkpwaXBQYWNrZXRzRGF0YUNvbGxlY3RvciIsIkpwaXBQYXJhbXNDb2Rlc3RyZWFtUGFydCIsIkpwaXBQYXJhbXNQcmVjaW5jdEl0ZXJhdG9yIiwiSnBpcFByZWNpbmN0Q29kZXN0cmVhbVBhcnQiLCJKcGlwUHJlY2luY3RzSXRlcmF0b3JXYWl0ZXIiLCJKcGlwUXVhbGl0eVdhaXRlciIsIkpwaXBSZXF1ZXN0UGFyYW1zTW9kaWZpZXIiLCJKcGlwUmVxdWVzdCIsIkpwaXBTZXNzaW9uSGVscGVyIiwiSnBpcFNlc3Npb24iLCJKcGlwUmVjb25uZWN0YWJsZVJlcXVlc3RlciIsIkpwaXBTdHJ1Y3R1cmVQYXJzZXIiLCJKcGlwVGlsZVN0cnVjdHVyZSIsIkpwaXBCaXRzdHJlYW1SZWFkZXIiLCJKcGlwVGFnVHJlZSIsIkpwaXBDb2RlYmxvY2tMZW5ndGhQYXJzZXIiLCJKcGlwU3ViYmFuZExlbmd0aEluUGFja2V0SGVhZGVyQ2FsY3VsYXRvciIsIkpwaXBQYWNrZXRMZW5ndGhDYWxjdWxhdG9yIiwiSnBpcFF1YWxpdHlMYXllcnNDYWNoZSIsImpwaXBSdW50aW1lRmFjdG9yeSIsImNyZWF0ZUNoYW5uZWwiLCJtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCIsInNlc3Npb25IZWxwZXIiLCJjcmVhdGVDb2Rlc3RyZWFtUmVjb25zdHJ1Y3RvciIsImRhdGFiaW5zU2F2ZXIiLCJoZWFkZXJNb2RpZmllciIsInF1YWxpdHlMYXllcnNDYWNoZSIsImNyZWF0ZUxldmVsQ2FsY3VsYXRvciIsInBhcmFtcyIsImNyZWF0ZUNvZGVzdHJlYW1TdHJ1Y3R1cmUiLCJzdHJ1Y3R1cmVQYXJzZXIiLCJwcm9ncmVzc2lvbk9yZGVyIiwiY3JlYXRlQ29tcG9uZW50U3RydWN0dXJlIiwidGlsZVN0cnVjdHVyZSIsImNyZWF0ZUNvbXBvc2l0ZUFycmF5Iiwib2Zmc2V0IiwiY3JlYXRlRGF0YWJpblBhcnRzIiwiY2xhc3NJZCIsImluQ2xhc3NJZCIsImNyZWF0ZURhdGFiaW5zU2F2ZXIiLCJpc0pwaXBUaWxlcGFydFN0cmVhbSIsImNyZWF0ZUZldGNoZXIiLCJmZXRjaGVyU2hhcmVkT2JqZWN0cyIsIm9wdGlvbnMiLCJjcmVhdGVGZXRjaCIsImZldGNoQ29udGV4dCIsInJlcXVlc3RlciIsInByb2dyZXNzaXZlbmVzcyIsImNyZWF0ZUhlYWRlck1vZGlmaWVyIiwib2Zmc2V0c0NhbGN1bGF0b3IiLCJjcmVhdGVJbWFnZURhdGFDb250ZXh0IiwianBpcE9iamVjdHMiLCJjb2Rlc3RyZWFtUGFydFBhcmFtcyIsIm1heFF1YWxpdHkiLCJjcmVhdGVNYXJrZXJzUGFyc2VyIiwibWFpbkhlYWRlckRhdGFiaW4iLCJjcmVhdGVPZmZzZXRzQ2FsY3VsYXRvciIsIm1hcmtlcnNQYXJzZXIiLCJjcmVhdGVQYWNrZXRzRGF0YUNvbGxlY3RvciIsImNyZWF0ZVBhcmFtc0NvZGVzdHJlYW1QYXJ0IiwiY29kZXN0cmVhbVN0cnVjdHVyZSIsImNyZWF0ZVBhcmFtc1ByZWNpbmN0SXRlcmF0b3IiLCJpZHgiLCJpc0l0ZXJhdGVQcmVjaW5jdHNOb3RJbkNvZGVzdHJlYW1QYXJ0IiwiY3JlYXRlUHJlY2luY3RDb2Rlc3RyZWFtUGFydCIsInNpemVzQ2FsY3VsYXRvciIsInRpbGVJbmRleCIsImNvbXBvbmVudCIsImxldmVsIiwicHJlY2luY3RYIiwicHJlY2luY3RZIiwiY3JlYXRlUHJlY2luY3RzSXRlcmF0b3JXYWl0ZXIiLCJjb2Rlc3RyZWFtUGFydCIsIml0ZXJhdGVQcmVjaW5jdENhbGxiYWNrIiwiY3JlYXRlUXVhbGl0eVdhaXRlciIsInF1YWxpdHlMYXllclJlYWNoZWRDYWxsYmFjayIsInN0YXJ0VHJhY2tQcmVjaW5jdCIsImNhbGxiYWNrc1RoaXMiLCJjcmVhdGVSZXF1ZXN0UGFyYW1zTW9kaWZpZXIiLCJjcmVhdGVSZXF1ZXN0IiwiY2hhbm5lbCIsInJlcXVlc3RVcmwiLCJjYWxsYmFjayIsImZhaWx1cmVDYWxsYmFjayIsImNyZWF0ZVNlc3Npb25IZWxwZXIiLCJkYXRhUmVxdWVzdFVybCIsImtub3duVGFyZ2V0SWQiLCJjcmVhdGVTZXNzaW9uIiwibWF4Q2hhbm5lbHNJblNlc3Npb24iLCJ0YXJnZXRJZCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsImNyZWF0ZVJlY29ubmVjdGFibGVSZXF1ZXN0ZXIiLCJjcmVhdGVTdHJ1Y3R1cmVQYXJzZXIiLCJjcmVhdGVUaWxlU3RydWN0dXJlIiwic2l6ZVBhcmFtcyIsImNyZWF0ZUJpdHN0cmVhbVJlYWRlciIsImRhdGFiaW4iLCJjcmVhdGVUYWdUcmVlIiwiYml0c3RyZWFtUmVhZGVyIiwid2lkdGgiLCJoZWlnaHQiLCJjcmVhdGVDb2RlYmxvY2tMZW5ndGhQYXJzZXIiLCJ0cmFuc2FjdGlvbkhlbHBlciIsImNyZWF0ZVN1YmJhbmRMZW5ndGhJblBhY2tldEhlYWRlckNhbGN1bGF0b3IiLCJudW1Db2RlYmxvY2tzWEluU3ViYmFuZCIsIm51bUNvZGVibG9ja3NZSW5TdWJiYW5kIiwiY3JlYXRlUGFja2V0TGVuZ3RoQ2FsY3VsYXRvciIsImNvbXBvbmVudFN0cnVjdHVyZSIsInN0YXJ0T2Zmc2V0SW5EYXRhYmluIiwicHJlY2luY3QiLCJjcmVhdGVRdWFsaXR5TGF5ZXJzQ2FjaGUiLCJKcHhFcnJvciIsIkpweEVycm9yQ2xvc3VyZSIsIm1zZyIsIm1lc3NhZ2UiLCJwcm90b3R5cGUiLCJFcnJvciIsIm5hbWUiLCJjb25zdHJ1Y3RvciIsIkpweEltYWdlIiwiSnB4SW1hZ2VDbG9zdXJlIiwiU3ViYmFuZHNHYWluTG9nMiIsImZhaWxPbkNvcnJ1cHRlZEltYWdlIiwicGFyc2UiLCJKcHhJbWFnZV9wYXJzZSIsImRhdGEiLCJoZWFkIiwicGFyc2VDb2Rlc3RyZWFtIiwibGVuZ3RoIiwicG9zaXRpb24iLCJoZWFkZXJTaXplIiwibGJveCIsInRib3giLCJkYXRhTGVuZ3RoIiwianVtcERhdGFMZW5ndGgiLCJtZXRob2QiLCJjb2xvcnNwYWNlIiwiaGVhZGVyVHlwZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInBhcnNlSW1hZ2VQcm9wZXJ0aWVzIiwiSnB4SW1hZ2VfcGFyc2VJbWFnZVByb3BlcnRpZXMiLCJzdHJlYW0iLCJuZXdCeXRlIiwiZ2V0Qnl0ZSIsIm9sZEJ5dGUiLCJjb2RlIiwic2tpcCIsIlhzaXoiLCJnZXRJbnQzMiIsIllzaXoiLCJYT3NpeiIsIllPc2l6IiwiQ3NpeiIsImdldFVpbnQxNiIsImNvbXBvbmVudHNDb3VudCIsImJpdHNQZXJDb21wb25lbnQiLCJKcHhJbWFnZV9wYXJzZUNvZGVzdHJlYW0iLCJzdGFydCIsImVuZCIsImNvbnRleHQiLCJpc09ubHlQYXJzZUhlYWRlcnMiLCJyZWdpb25Ub1BhcnNlIiwiZG9Ob3RSZWNvdmVyIiwiaiIsInNxY2QiLCJzcHFjZHMiLCJzcHFjZFNpemUiLCJzY2FsYXJFeHBvdW5kZWQiLCJ0aWxlIiwibWFpbkhlYWRlciIsInNpeiIsIlhUc2l6IiwiWVRzaXoiLCJYVE9zaXoiLCJZVE9zaXoiLCJjb21wb25lbnRzIiwiaXNDb21wb25lbnRTaXplc1N1cHBvcnRlZCIsImkiLCJwcmVjaXNpb24iLCJpc1NpZ25lZCIsIlhSc2l6IiwiWVJzaXoiLCJjYWxjdWxhdGVDb21wb25lbnREaW1lbnNpb25zIiwicHVzaCIsIlNJWiIsImNhbGN1bGF0ZVRpbGVHcmlkcyIsIlFDQyIsIkNPQyIsInFjZCIsIm5vUXVhbnRpemF0aW9uIiwiZ3VhcmRCaXRzIiwic3BxY2QiLCJlcHNpbG9uIiwibXUiLCJTUHFjZHMiLCJRQ0QiLCJjdXJyZW50VGlsZSIsInFjYyIsImNxY2MiLCJjb2QiLCJzY29kIiwiZW50cm9weUNvZGVyV2l0aEN1c3RvbVByZWNpbmN0cyIsInNvcE1hcmtlclVzZWQiLCJlcGhNYXJrZXJVc2VkIiwibGF5ZXJzQ291bnQiLCJtdWx0aXBsZUNvbXBvbmVudFRyYW5zZm9ybSIsImRlY29tcG9zaXRpb25MZXZlbHNDb3VudCIsInhjYiIsInljYiIsImJsb2NrU3R5bGUiLCJzZWxlY3RpdmVBcml0aG1ldGljQ29kaW5nQnlwYXNzIiwicmVzZXRDb250ZXh0UHJvYmFiaWxpdGllcyIsInRlcm1pbmF0aW9uT25FYWNoQ29kaW5nUGFzcyIsInZlcnRpY2FsbHlTdHJpcGUiLCJwcmVkaWN0YWJsZVRlcm1pbmF0aW9uIiwic2VnbWVudGF0aW9uU3ltYm9sVXNlZCIsInJldmVyc2libGVUcmFuc2Zvcm1hdGlvbiIsInByZWNpbmN0c1NpemVzIiwicHJlY2luY3RzU2l6ZSIsIlBQeCIsIlBQeSIsInVuc3VwcG9ydGVkIiwiam9pbiIsIkNPRCIsImluZGV4IiwiZGF0YUVuZCIsInBhcnRJbmRleCIsInBhcnRzQ291bnQiLCJzbGljZSIsImluaXRpYWxpemVUaWxlIiwiYnVpbGRQYWNrZXRzIiwicGFyc2VUaWxlUGFja2V0cyIsImUiLCJkZWNvZGUiLCJpbnZhbGlkYXRlRGF0YSIsIkpweEltYWdlX2ludmFsaWRhdGVEYXRhIiwiZGF0YUludmFsaWRhdGlvbklkIiwiYWRkUGFja2V0c0RhdGEiLCJKcHhJbWFnZV9hZGRQYWNrZXREYXRhIiwicGFja2V0c0RhdGEiLCJwYWNrZXREYXRhT2Zmc2V0cyIsInBhY2tldE9mZnNldHMiLCJ0aWxlcyIsImMiLCJyZXNvbHV0aW9uIiwicmVzb2x1dGlvbnMiLCJyIiwicCIsInBpeGVsc1ByZWNpbmN0IiwicGl4ZWxzUHJlY2luY3RzIiwiY29kZWJsb2NrcyIsImhhc0RhdGEiLCJjb2RlYmxvY2tPZmZzZXRzIiwiaXNOb0RhdGEiLCJjb2RlYmxvY2siLCJ6ZXJvQml0UGxhbmVzIiwic3ViYmFuZERhdGFJZCIsInBhcmVudFN1YmJhbmQiLCJjb2RlYmxvY2tzV2l0aERhdGEiLCJpbmNsdWRlZCIsImNvZGluZ3Bhc3NlcyIsImRlY29kZVByZWNpbmN0Q29lZmZpY2llbnRzIiwiSnB4SW1hZ2VfZGVjb2RlQ29kZWJsb2NrQ29lZmZpY2llbnRzIiwidGlsZUlkeCIsImNvbXBvbmVudElkeCIsInJlc29sdXRpb25JZHgiLCJwcmVjaW5jdElkeCIsImNvZGluZ1N0eWxlUGFyYW1ldGVycyIsInF1YW50aXphdGlvblBhcmFtZXRlcnMiLCJyZXZlcnNpYmxlIiwicmVnaW9uSW5MZXZlbCIsImNhbGN1bGF0ZVJlZ2lvbkluTGV2ZWxPZlBpeGVsc1ByZWNpbmN0IiwiY29lZmZpY2llbnRzIiwiZ2V0Q29lZmZpY2llbnRzT2ZSZXNvbHV0aW9uIiwic2V0UHJlY2luY3RDb2VmZmljaWVudHMiLCJKcHhJbWFnZV9hZGRQcmVjaW5jdENvZWZmaWNpZW50cyIsInBpeGVsc1ByZWNpbmN0c1dpdGhEZWNvZGVkQ29lZmZpY2llbnRzIiwiaGFzRGVjb2RlZENvZWZmaWNpZW50cyIsImRlY29kZWRDb2VmZmljaWVudHMiLCJKcHhJbWFnZV9kZWNvZGUiLCJyZWdpb24iLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0cmFuc2Zvcm1Db21wb25lbnRzIiwic3ViYmFuZHMiLCJzdWJiYW5kUHJlY2luY3RzIiwiaW50ZXJsZWF2ZSIsInR5cGUiLCJ4MCIsInRieE1pbl8iLCJ5MCIsInRieU1pbl8iLCJ4MSIsInRieE1heF8iLCJ5MSIsInRieU1heF8iLCJ0YngwIiwidHJ4MCIsInRieTAiLCJ0cnkwIiwiTWF0aCIsIm1pbiIsIm1heCIsImNlaWwiLCJudW1YdGlsZXMiLCJudW1ZdGlsZXMiLCJxIiwidHgwIiwidHkwIiwidHgxIiwidHkxIiwiaWkiLCJqaiIsInRpbGVDb21wb25lbnQiLCJ0Y3gwIiwidGN5MCIsInRjeDEiLCJ0Y3kxIiwiZ2V0QmxvY2tzRGltZW5zaW9ucyIsImNvZE9yQ29jIiwicmVzdWx0IiwieGNiXyIsInljYl8iLCJidWlsZFByZWNpbmN0cyIsImRpbWVuc2lvbnMiLCJwcmVjaW5jdFdpZHRoIiwicHJlY2luY3RIZWlnaHQiLCJpc1plcm9SZXMiLCJyZXNMZXZlbCIsInByZWNpbmN0V2lkdGhJblN1YmJhbmQiLCJwcmVjaW5jdEhlaWdodEluU3ViYmFuZCIsIm51bXByZWNpbmN0c3dpZGUiLCJ0cngxIiwiZmxvb3IiLCJudW1wcmVjaW5jdHNoaWdoIiwidHJ5MSIsIm51bXByZWNpbmN0cyIsInByZWNpbmN0UGFyYW1ldGVycyIsImJ1aWxkQ29kZWJsb2NrcyIsInN1YmJhbmQiLCJjb2RlYmxvY2tXaWR0aCIsImNvZGVibG9ja0hlaWdodCIsImNieDAiLCJjYnkwIiwiY2J4MSIsInRieDEiLCJjYnkxIiwidGJ5MSIsInByZWNpbmN0cyIsInByZWNpbmN0TnVtYmVyIiwiY2J4IiwiY2J5IiwidGJ4MF8iLCJ0YnkwXyIsInRieDFfIiwidGJ5MV8iLCJwaSIsInBqIiwic3ViYmFuZFR5cGUiLCJMYmxvY2siLCJjYnhNaW4iLCJjYnhNYXgiLCJjYnlNaW4iLCJjYnlNYXgiLCJjb2RlYmxvY2tQYXJhbWV0ZXJzIiwibnVtY29kZWJsb2Nrd2lkZSIsIm51bWNvZGVibG9ja2hpZ2giLCJjcmVhdGVQYWNrZXQiLCJsYXllck51bWJlciIsIkxheWVyUmVzb2x1dGlvbkNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IiLCJjb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzIiwibWF4RGVjb21wb3NpdGlvbkxldmVsc0NvdW50IiwibCIsImsiLCJuZXh0UGFja2V0IiwiSnB4SW1hZ2VfbmV4dFBhY2tldCIsInBhY2tldCIsIlJlc29sdXRpb25MYXllckNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IiLCJSZXNvbHV0aW9uUG9zaXRpb25Db21wb25lbnRMYXllckl0ZXJhdG9yIiwibWF4TnVtUHJlY2luY3RzSW5MZXZlbCIsIkludDMyQXJyYXkiLCJtYXhOdW1QcmVjaW5jdHMiLCJQb3NpdGlvbkNvbXBvbmVudFJlc29sdXRpb25MYXllckl0ZXJhdG9yIiwiZ2V0UHJlY2luY3RTaXplc0luSW1hZ2VTY2FsZSIsInByZWNpbmN0c0l0ZXJhdGlvblNpemVzIiwicHgiLCJweSIsIm1heE51bUhpZ2giLCJtYXhOdW1XaWRlIiwic2l6ZUluSW1hZ2VTY2FsZSIsImdldFByZWNpbmN0SW5kZXhJZkV4aXN0IiwiQ29tcG9uZW50UG9zaXRpb25SZXNvbHV0aW9uTGF5ZXJJdGVyYXRvciIsInB4SW5kZXgiLCJweUluZGV4IiwicHJlY2luY3RJdGVyYXRpb25TaXplcyIsInBvc1giLCJtaW5XaWR0aCIsInBvc1kiLCJtaW5IZWlnaHQiLCJzdGFydFByZWNpbmN0Um93SW5kZXgiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJzaXplUGVyQ29tcG9uZW50IiwiQXJyYXkiLCJzaXplUGVyUmVzb2x1dGlvbiIsIm1pbldpZHRoQ3VycmVudENvbXBvbmVudCIsIm1pbkhlaWdodEN1cnJlbnRDb21wb25lbnQiLCJtYXhOdW1XaWRlQ3VycmVudENvbXBvbmVudCIsIm1heE51bUhpZ2hDdXJyZW50Q29tcG9uZW50Iiwic2NhbGUiLCJ3aWR0aEN1cnJlbnRSZXNvbHV0aW9uIiwiaGVpZ2h0Q3VycmVudFJlc29sdXRpb24iLCJpbmRleEluVGlsZUNvbXBvbmVudCIsImJsb2Nrc0RpbWVuc2lvbnMiLCJic2NhbGUiLCJyZXNvbHV0aW9uU3ViYmFuZHMiLCJwYWNrZXRzSXRlcmF0b3IiLCJidWZmZXIiLCJidWZmZXJTaXplIiwic2tpcE5leHRCaXQiLCJyZWFkQml0cyIsImNvdW50IiwiYiIsInNraXBNYXJrZXJJZkVxdWFsIiwidmFsdWUiLCJza2lwQnl0ZXMiLCJhbGlnblRvQnl0ZSIsInJlYWRDb2RpbmdwYXNzZXMiLCJxdWV1ZSIsImNvZGVibG9ja0NvbHVtbiIsImNvZGVibG9ja1JvdyIsImNvZGVibG9ja0luY2x1ZGVkIiwiZmlyc3RUaW1lSW5jbHVzaW9uIiwidmFsdWVSZWFkeSIsImluY2x1c2lvblRyZWUiLCJ6ZXJvQml0UGxhbmVzVHJlZSIsIkluY2x1c2lvblRyZWUiLCJUYWdUcmVlIiwicmVzZXQiLCJuZXh0TGV2ZWwiLCJpbmNyZW1lbnRWYWx1ZSIsImNvZGluZ3Bhc3Nlc0xvZzIiLCJiaXRzIiwiY29kZWREYXRhTGVuZ3RoIiwicGFja2V0SXRlbSIsInNoaWZ0IiwiYXJyYXlXaWR0aCIsImFycmF5SGVpZ2h0IiwiRmxvYXQzMkFycmF5IiwicmVnaW9uSW5TdWJiYW5kIiwicmVnaW9uVG1wIiwiaXNBbGxDb2VmZmljaWVudHNDb3BpZWQiLCJjb3B5RGVjb2RlZENvZWZmaWNpZW50cyIsInMiLCJzcyIsImNoYXJBdCIsImludGVybGVhdmVPZmZzZXQiLCJ0YXJnZXRTdGVwIiwidGFyZ2V0Um93U3RlcCIsInJlZ2lvbkluQ29kZWJsb2NrIiwiZ2FpbkxvZzIiLCJkZWx0YSIsInBvdyIsIm1iIiwidGFyZ2V0U3RhcnRPZmZzZXQiLCJibG9ja1dpZHRoIiwiYmxvY2tIZWlnaHQiLCJiaXRNb2RlbCIsImN1cnJlbnRDb2RpbmdwYXNzVHlwZSIsIkJpdE1vZGVsIiwidG90YWxMZW5ndGgiLCJkYXRhSXRlbSIsImVuY29kZWREYXRhIiwiVWludDhBcnJheSIsImNodW5rIiwic3ViYXJyYXkiLCJzZXQiLCJkZWNvZGVyIiwiQXJpdGhtZXRpY0RlY29kZXIiLCJzZXREZWNvZGVyIiwicnVuU2lnbmlmaWNhbmNlUHJvcGFnYXRpb25QYXNzIiwicnVuTWFnbml0dWRlUmVmaW5lbWVudFBhc3MiLCJydW5DbGVhbnVwUGFzcyIsImNoZWNrU2VnbWVudGF0aW9uU3ltYm9sIiwic2lnbiIsImNvZWZmaWNlbnRzU2lnbiIsIm1hZ25pdHVkZSIsImNvZWZmaWNlbnRzTWFnbml0dWRlIiwiYml0c0RlY29kZWQiLCJtYWduaXR1ZGVDb3JyZWN0aW9uIiwibiIsIm5iIiwiY29kZWJsb2NrUm93U3RhcnQiLCJ0YXJnZXRSb3dTdGFydCIsInBvcyIsImtrIiwicHJlY2luY3RSZWdpb25JbkxldmVsIiwiZGVjb2RlZCIsInNvdXJjZVdpZHRoIiwidGFyZ2V0V2lkdGgiLCJzb3VyY2UiLCJ0YXJnZXQiLCJyb3ciLCJ0cmFuc2Zvcm1UaWxlIiwidHJhbnNmb3JtIiwiUmV2ZXJzaWJsZVRyYW5zZm9ybSIsIklycmV2ZXJzaWJsZVRyYW5zZm9ybSIsInJlbGF0aXZlUmVnaW9uSW5UaWxlIiwic3ViYmFuZENvZWZmaWNpZW50cyIsImxldmVsV2lkdGgiLCJsZXZlbEhlaWdodCIsInJlZHVuZGFudENvZWZmcyIsInJlbGF0aXZlUmVnaW9uSW5MZXZlbCIsIml0ZW1zIiwiY2FsY3VsYXRlIiwibmVlZENyb3BUaWxlIiwiY3JvcHBlZEl0ZW1zIiwiY3JvcFRpbGUiLCJyZWR1bmRhbnRSb3dzVG9wIiwicmVkdW5kYW50Q29sdW1uc0xlZnQiLCJ0YXJnZXRPZmZzZXQiLCJzb3VyY2VPZmZzZXQiLCJzb3VyY2VFbmQiLCJyZXN1bHRJbWFnZXMiLCJ0cmFuc2Zvcm1lZFRpbGVzIiwidGlsZTAiLCJvdXQiLCJVaW50OENsYW1wZWRBcnJheSIsInkyIiwiZm91ckNvbXBvbmVudHMiLCJ5MGl0ZW1zIiwieTFpdGVtcyIsInkyaXRlbXMiLCJ5M2l0ZW1zIiwiY29tcG9uZW50MCIsImFscGhhMDEiLCJnIiwicWNkT3JRY2MiLCJUYWdUcmVlQ2xvc3VyZSIsImxldmVsc0xlbmd0aCIsImxldmVscyIsIlRhZ1RyZWVfcmVzZXQiLCJjdXJyZW50TGV2ZWwiLCJUYWdUcmVlX2luY3JlbWVudFZhbHVlIiwiVGFnVHJlZV9uZXh0TGV2ZWwiLCJJbmNsdXNpb25UcmVlQ2xvc3VyZSIsImRlZmF1bHRWYWx1ZSIsIkluY2x1c2lvblRyZWVfcmVzZXQiLCJzdG9wVmFsdWUiLCJwcm9wYWdhdGVWYWx1ZXMiLCJJbmNsdXNpb25UcmVlX2luY3JlbWVudFZhbHVlIiwiSW5jbHVzaW9uVHJlZV9wcm9wYWdhdGVWYWx1ZXMiLCJsZXZlbEluZGV4IiwiY3VycmVudFZhbHVlIiwiSW5jbHVzaW9uVHJlZV9uZXh0TGV2ZWwiLCJCaXRNb2RlbENsb3N1cmUiLCJVTklGT1JNX0NPTlRFWFQiLCJSVU5MRU5HVEhfQ09OVEVYVCIsIkxMQW5kTEhDb250ZXh0c0xhYmVsIiwiSExDb250ZXh0TGFiZWwiLCJISENvbnRleHRMYWJlbCIsImNvbnRleHRMYWJlbFRhYmxlIiwiY29lZmZpY2llbnRDb3VudCIsIm5laWdoYm9yc1NpZ25pZmljYW5jZSIsIlVpbnQzMkFycmF5IiwiVWludDE2QXJyYXkiLCJwcm9jZXNzaW5nRmxhZ3MiLCJCaXRNb2RlbF9zZXREZWNvZGVyIiwiQml0TW9kZWxfcmVzZXQiLCJjb250ZXh0cyIsIkludDhBcnJheSIsInNldE5laWdoYm9yc1NpZ25pZmljYW5jZSIsIkJpdE1vZGVsX3NldE5laWdoYm9yc1NpZ25pZmljYW5jZSIsImNvbHVtbiIsIkJpdE1vZGVsX3J1blNpZ25pZmljYW5jZVByb3BhZ2F0aW9uUGFzcyIsImxhYmVscyIsInByb2Nlc3NlZEludmVyc2VNYXNrIiwicHJvY2Vzc2VkTWFzayIsImZpcnN0TWFnbml0dWRlQml0TWFzayIsImkwIiwiaTEiLCJjb250ZXh0TGFiZWwiLCJkZWNpc2lvbiIsInJlYWRCaXQiLCJkZWNvZGVTaWduQml0IiwiQml0TW9kZWxfZGVjb2RlU2lnbkJpdCIsImNvbnRyaWJ1dGlvbiIsInNpZ24wIiwic2lnbjEiLCJzaWduaWZpY2FuY2UxIiwiaG9yaXpvbnRhbENvbnRyaWJ1dGlvbiIsIkJpdE1vZGVsX3J1bk1hZ25pdHVkZVJlZmluZW1lbnRQYXNzIiwid2lkdGg0IiwiaW5kZXgwIiwiaW5kZXhOZXh0Iiwic2lnbmlmaWNhbmNlIiwiYml0IiwiQml0TW9kZWxfcnVuQ2xlYW51cFBhc3MiLCJvbmVSb3dEb3duIiwidHdvUm93c0Rvd24iLCJ0aHJlZVJvd3NEb3duIiwiaU5leHQiLCJpbmRleEJhc2UiLCJjaGVja0FsbEVtcHR5IiwiYWxsRW1wdHkiLCJoYXNTaWduaWZpY2FudENvZWZmaWNlbnQiLCJpMiIsIkJpdE1vZGVsX2NoZWNrU2VnbWVudGF0aW9uU3ltYm9sIiwic3ltYm9sIiwiVHJhbnNmb3JtIiwiVHJhbnNmb3JtQ2xvc3VyZSIsInRyYW5zZm9ybUNhbGN1bGF0ZSIsInUwIiwidjAiLCJsbCIsIml0ZXJhdGUiLCJleHRlbmQiLCJzaXplIiwiajEiLCJqMiIsIlRyYW5zZm9ybV9pdGVyYXRlIiwiaGxfbGhfaGgiLCJsZXZlbFJlZ2lvbiIsImxsSXRlbXMiLCJsbFdpZHRoIiwibGxPZmZzZXRYIiwibGxPZmZzZXRZIiwibGxPZmZzZXQiLCJ1IiwidiIsImJ1ZmZlclBhZGRpbmciLCJyb3dCdWZmZXIiLCJmaWx0ZXIiLCJudW1CdWZmZXJzIiwiY29sQnVmZmVycyIsImN1cnJlbnRCdWZmZXIiLCJJcnJldmVyc2libGVUcmFuc2Zvcm1DbG9zdXJlIiwiY2FsbCIsIk9iamVjdCIsImNyZWF0ZSIsImlycmV2ZXJzaWJsZVRyYW5zZm9ybUZpbHRlciIsIngiLCJsZW4iLCJjdXJyZW50IiwibmV4dCIsImFscGhhIiwiYmV0YSIsImdhbW1hIiwiSyIsIktfIiwiUmV2ZXJzaWJsZVRyYW5zZm9ybUNsb3N1cmUiLCJyZXZlcnNpYmxlVHJhbnNmb3JtRmlsdGVyIiwiUGRmanNKcHhDb250ZXh0UG9vbCIsIl9pbWFnZSIsIl9jYWNoZWRDb250ZXh0cyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZ2V0Q29udGV4dCIsImhlYWRlcnNDb2Rlc3RyZWFtIiwiY29udGV4dHNPZlNhbWVMZW5ndGgiLCJjb250ZXh0SW5kZXgiLCJpc01hdGNoaW5nQ29udGV4dCIsImNvZGVzdHJlYW0iLCJjdXJyZW50Q29udGV4dCIsImpHbG9iYWxzIiwiSnBpcEltYWdlIiwiSW50ZXJuYWxzIiwiUGRmanNKcHhEZWNvZGVyTGVnYWN5IiwiUGRmanNKcHhQaXhlbHNEZWNvZGVyIiwiUGRmanNKcHhDb2VmZmljaWVudHNEZWNvZGVyIiwianBpcEZhY3RvcnkiLCJXT1JLRVJfVFlQRV9QSVhFTFMiLCJXT1JLRVJfVFlQRV9DT0VGRlMiLCJUQVNLX0FCT1JURURfUkVTVUxUX1BMQUNFSE9MREVSIiwiYXJnIiwidXJsIiwiY3JlYXRlSnBpcE9iamVjdHMiLCJwcm9ncmVzc2l2ZW5lc3NNb2RpZmllZCIsImltYWdlUGFyYW1zIiwibGV2ZWxDYWxjdWxhdG9yIiwiZmV0Y2hlciIsImZldGNoZXJPcHRpb25zIiwibm9uUHJvZ3Jlc3NpdmUiLCJxdWFsaXR5IiwicXVhbGl0eU1vZGlmaWVkIiwiY3VzdG9tUHJvZ3Jlc3NpdmUiLCJtaW5OdW1RdWFsaXR5TGF5ZXJzIiwiZm9yY2VNYXhRdWFsaXR5IiwiYXV0b1Byb2dyZXNzaXZlIiwiYXV0b1Byb2dyZXNzaXZlbmVzcyIsImdldEF1dG9tYXRpY1Byb2dyZXNzaXZlbmVzcyIsImN1c3RvbVByb2dyZXNzaXZlbmVzcyIsImN1c3RvbVByb2dyZXNzaXZlbmVzc01vZGlmaWVkIiwicGFyYW1zTW9kaWZpZXIiLCJtb2RpZnlDdXN0b21Qcm9ncmVzc2l2ZW5lc3MiLCJvcGVuZWQiLCJpbWFnZURlY29kZXIiLCJnZXRJbWFnZVBhcmFtcyIsImdldExldmVsQ2FsY3VsYXRvciIsImdldERlY29kZXJXb3JrZXJzSW5wdXRSZXRyZWl2ZXIiLCJnZXRGZXRjaGVyIiwiZ2V0V29ya2VyVHlwZU9wdGlvbnMiLCJ3b3JrZXJUeXBlIiwiY3Rvck5hbWUiLCJjdG9yQXJncyIsInNjcmlwdHNUb0ltcG9ydCIsImdldFNjcmlwdE5hbWUiLCJwYXRoVG9UcmFuc2ZlcmFibGVzSW5Qcm9taXNlUmVzdWx0IiwiY29kZXN0cmVhbVRyYW5zZmVyYWJsZSIsImNvZGVibG9ja1RyYW5zZmVyYWJsZSIsInRyYW5zZmVyYWJsZXMiLCJnZXRLZXlBc1N0cmluZyIsImtleSIsInRhc2tUeXBlIiwiaW5DbGFzc0luZGV4IiwicGFydFBhcmFtcyIsIm1vZGlmeUNvZGVzdHJlYW1QYXJ0UGFyYW1zIiwibWluWCIsIm1pblkiLCJtYXhYRXhjbHVzaXZlIiwibWF4WUV4Y2x1c2l2ZSIsInRhc2tTdGFydGVkIiwidGFzayIsInZhbGlkYXRlUHJvZ3Jlc3NpdmVuZXNzIiwic3RhcnRDb2VmZmljaWVudHNUYXNrIiwic3RhcnRQaXhlbHNUYXNrIiwiZmV0Y2hlck9wdGlvbnNBcmciLCJnZXRNYWluSGVhZGVyRGF0YWJpbiIsInJlY29uc3RydWN0b3IiLCJwYWNrZXRzRGF0YUNvbGxlY3RvciIsInNldFByb2dyZXNzaXZlbmVzcyIsInF1YWxpdHlXYWl0ZXIiLCJkZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5SW5kZXhCeUluQ2xhc3NJbmRleCIsIm9uIiwiZGVwZW5kZW5jeUtleSIsInByZWNpbmN0UXVhbGl0eUxheWVyUmVhY2hlZCIsIm1pblF1YWxpdHkiLCJpc0VuZGVkIiwic3RhdHVzIiwiaXNXYWl0aW5nRm9yV29ya2VyUmVzdWx0IiwidGVybWluYXRlZERlcGVuZHNUYXNrcyIsImRlcGVuZHNUYXNrcyIsImN1c3RvbUV2ZW50TmFtZSIsInRhc2tFbmRlZCIsInN0YXJ0VHJhY2tQcmVjaW5jdENhbGxiYWNrIiwicmVnaXN0ZXIiLCJwcmVjaW5jdERhdGFiaW4iLCJxdWFsaXR5SW5UaWxlIiwicHJlY2luY3RJdGVyYXRvciIsInByZWNpbmN0SW5kZXgiLCJwcmVjaW5jdFBvc2l0aW9uVG9JbmRleEluQ29tcG9uZW50UmVzb2x1dGlvbiIsInJlZ2lzdGVyVGFza0RlcGVuZGVuY3kiLCJyZXNvbHV0aW9uTGV2ZWwiLCJwcmVjaW5jdEluZGV4SW5Db21wb25lbnRSZXNvbHV0aW9uIiwib2Zmc2V0SW5SZWdpb24iLCJpbWFnZVRpbGVzWCIsInRpbGVzQm91bmRzIiwiY3JlYXRlSGVhZGVyc0NvZGVzdHJlYW0iLCJnZXRPZmZzZXRJblJlZ2lvbiIsImdldE51bVRpbGVzWCIsInN0YWdlIiwiZ2V0UHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCIsImNhblNraXAiLCJmb3JjZSIsImRhdGFSZWFkeSIsInByZWNpbmN0Q29lZmZpY2llbnRzIiwiZGVwZW5kVGFza1Jlc3VsdHMiLCJpc0RvbmUiLCJ0ZXJtaW5hdGUiLCJ1bnJlZ2lzdGVyIiwiZ2V0VGlsZVN0cnVjdHVyZSIsImhhZERhdGEiLCJpc1Rlcm1pbmF0ZWQiLCJvbkRhdGEiLCJjb250ZXh0XyIsImdldEZldGNoZWREYXRhIiwiZGlzcG9zZSIsInVzZUxlZ2FjeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0aWxlSXRlcmF0b3IiLCJnZXRUaWxlSXRlcmF0b3IiLCJ0cnlBZHZhbmNlIiwiZmlyc3RUaWxlSWQiLCJmaXJzdFRpbGVMZWZ0IiwiZ2V0VGlsZUxlZnQiLCJmaXJzdFRpbGVUb3AiLCJnZXRUaWxlVG9wIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJnZXRJbWFnZVdpZHRoIiwiZ2V0SW1hZ2VIZWlnaHQiLCJ0b2dnbGVMZWdhY3kiLCJjdXJyZW50U3RhY2tGcmFtZVJlZ2V4IiwibGFzdFN0YWNrRnJhbWVSZWdleFdpdGhTdHJ1ZGVsIiwiUmVnRXhwIiwibGFzdFN0YWNrRnJhbWVSZWdleCIsImVycm9yV2l0aFN0YWNrVHJhY2UiLCJzdGFjayIsInRyaW0iLCJleGVjIiwiZmlsZU5hbWUiLCJyZXF1ZXN0IiwiY2FsbGJhY2tGb3JBc3luY2hyb25vdXNSZXF1ZXN0IiwiZmFpbHVyZUNhbGxiYWNrRm9yQXN5bmNocm9ub3VzUmVxdWVzdCIsInByb2dyZXNzaXZlUmVxdWVzdFF1YW50Qnl0ZXMiLCJhamF4UmVzcG9uc2UiLCJYTUxIdHRwUmVxdWVzdCIsImlzU3luY2hyb25vdXMiLCJpc0ZpbmlzaGVkUmVxdWVzdCIsImJ5dGVzUmVjaWV2ZWRPbkxhc3RRdWFudCIsImludGVybmFsQWpheENhbGxiYWNrIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlIiwiYnl0ZXNSZWNpZXZlZCIsImJ5dGVMZW5ndGgiLCJieXRlc1RpbGxMYXN0UXVhbnQiLCJvcGVuIiwib25yZWFkeXN0YXRlY2hhbmdlIiwibW96UmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucHJvZ3Jlc3MiLCJzZW5kIiwiY3JlYXRlVHJhbnNhY3Rpb24iLCJzdGF0ZSIsInRyYW5zYWN0aW9uIiwiaXNBYm9ydGVkIiwiaXNBY3RpdmUiLCJjb21taXQiLCJhYm9ydCIsImlzU3VjY2Vzc2Z1bF8iLCJjcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0IiwiaW5pdGlhbFZhbHVlIiwiY2xvbmUiLCJwcmV2VmFsdWUiLCJsYXN0QWNjZXNzZWRUcmFuc2FjdGlvbiIsInRyYW5zYWN0aW9uYWxPYmplY3QiLCJnZXRWYWx1ZSIsImFjdGl2ZVRyYW5zYWN0aW9uIiwiZW5zdXJlQWxsb3dlZEFjY2VzcyIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJKcGlwQ29kaW5nUGFzc2VzTnVtYmVyUGFyc2VyQ2xvc3VyZSIsImJpdHNOZWVkZWRBZnRlckNvdW50T2ZPbmVzIiwiY3JlYXRlQml0c05lZWRlZEFmdGVyQ291bnRPZk9uZXNNYXAiLCJhZGRUb1Jlc3VsdEFmdGVyQ291bnRPZk9uZXMiLCJjcmVhdGVBZGRUb1Jlc3VsdEFmdGVyQ291bnRPZk9uZXNNYXAiLCJvbmVzQ291bnQiLCJjb3VudE9uZXNBbmRTaGlmdFVudGlsRmlyc3RaZXJvQml0IiwibW9yZUJpdHNOZWVkZWQiLCJtb3JlQml0cyIsInNoaWZ0Qml0cyIsImFkZFRvUmVzdWx0IiwiTFNCX01BU0siLCJCSVRfNF9NQVNLIiwiQklUU181Nl9NQVNLIiwiTVNCX01BU0siLCJMU0JfN19NQVNLIiwicGFyc2VOdW1iZXJJblZiYXMiLCJwYXJzZU51bWJlckluVmJhc0Nsb3N1cmUiLCJzdGFydE9mZnNldCIsImJpdHNUb1Rha2VJbkZpcnN0Qnl0ZSIsInNlbGYiLCJjdXJyZW50T2Zmc2V0IiwibWFza0ZpcnN0Qnl0ZSIsImVuZE9mZnNldCIsIm51bWJlciIsInBhcnNlTWVzc2FnZUhlYWRlciIsInBhcnNlTWVzc2FnZUhlYWRlckNsb3N1cmUiLCJwcmV2aW91c01lc3NhZ2VIZWFkZXIiLCJjbGFzc0FuZENzblByZWNlbnNlIiwiaGFzQ2xhc3NWYmFzIiwiaGFzQ29kZVN0cmVhbUluZGV4VmJhcyIsImlzTGFzdEJ5dGVJbkRhdGFiaW4iLCJwYXJzZWRJbkNsYXNzSWQiLCJwYXJzZWRDbGFzc0lkIiwiY29kZXN0cmVhbUluZGV4IiwicGFyc2VkQ3NuIiwicGFyc2VkT2Zmc2V0IiwibWVzc2FnZU9mZnNldEZyb21EYXRhYmluU3RhcnQiLCJwYXJzZWRMZW5ndGgiLCJtZXNzYWdlQm9keUxlbmd0aCIsImhhc0F1eFZiYXMiLCJhdXgiLCJwYXJzZWRBdXgiLCJib2R5U3RhcnQiLCJnZXRJbnQzMkNsb3N1cmUiLCJtc2IiLCJieXRlMiIsImJ5dGUxIiwibHNiIiwiZ2V0SW50MTYiLCJnZXRJbnQxNkNsb3N1cmUiLCJjaGFubmVsSWQiLCJyZXF1ZXN0SWQiLCJyZXF1ZXN0c1dhaXRpbmdGb3JDaGFubmVsQ3JlYXRpb24iLCJyZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZSIsImlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QiLCJyZXF1ZXN0RGF0YSIsIm51bVF1YWxpdHlMYXllcnMiLCJhbGxXYWl0aW5nUmVxdWVzdHMiLCJnZXRBbGxRdWV1ZWRSZXF1ZXN0Q291bnQiLCJjcmVhdGVSZXF1ZXN0VXJsIiwic3RhcnRSZXF1ZXN0Iiwic2VuZE1pbmltYWxSZXF1ZXN0IiwiY3JlYXRlTWluaW1hbFJlcXVlc3RVcmwiLCJnZXRJc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0IiwiZGVkaWNhdGVGb3JNb3ZhYmxlUmVxdWVzdCIsImdldENoYW5uZWxJZCIsInNldENoYW5uZWxJZCIsIm5ld0NoYW5uZWxJZCIsInJlcXVlc3RzVG9TZW5kIiwibmV4dFJlcXVlc3RJZCIsImdldFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlIiwicmVxdWVzdEVuZGVkIiwicmVxdWVzdHMiLCJpc0ZvdW5kIiwibmV4dFJlcXVlc3QiLCJpc0FsbE9sZFJlcXVlc3RzRW5kZWQiLCJwcmlvclRvSWQiLCJsYXN0UmVxdWVzdElkIiwiYWxsb3dTdG9wUHJldmlvdXNSZXF1ZXN0c0luQ2hhbm5lbCIsImdldERhdGFSZXF1ZXN0VXJsIiwiZ2V0VGFyZ2V0SWQiLCJhbHJlYWR5U2VudE1lc3NhZ2VzT25DaGFubmVsIiwiaXNTdG9wUHJldmlvdXMiLCJnZXRDb2Rlc3RyZWFtU3RydWN0dXJlIiwiZnJhbWVXaWR0aCIsImdldExldmVsV2lkdGgiLCJmcmFtZUhlaWdodCIsImdldExldmVsSGVpZ2h0IiwicmVnaW9uV2lkdGgiLCJyZWdpb25IZWlnaHQiLCJkdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uIiwiaXNEdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uIiwiY3JlYXRlQ29kZXN0cmVhbSIsImNyZWF0ZUNvZGVzdHJlYW1JbnRlcm5hbCIsImR1bW15UXVhbGl0eSIsImlzT25seUhlYWRlcnMiLCJpc09ubHlIZWFkZXJzV2l0aG91dEJpdHN0cmVhbSIsImNhbGN1bGF0ZWRMZW5ndGgiLCJjcmVhdGVDb2Rlc3RyZWFtT3JDYWxjdWxhdGVMZW5ndGgiLCJhY3R1YWxMZW5ndGgiLCJjcmVhdGVNYWluSGVhZGVyIiwidGlsZUlkVG9Xcml0ZSIsInRpbGVJZE9yaWdpbmFsIiwidGlsZUJ5dGVzQ29waWVkIiwiY3JlYXRlVGlsZSIsIm1hcmtlckJ5dGVzQ29waWVkIiwiY29weUJ5dGVzIiwibW9kaWZ5SW1hZ2VTaXplIiwiZnVsbFRpbGVzU2l6ZSIsImdldElzSnBpcFRpbGVQYXJ0U3RyZWFtIiwiZm9yY2VDb3B5QWxsUmFuZ2UiLCJieXRlc0FkZGVkIiwibW9kaWZ5TWFpbk9yVGlsZUhlYWRlciIsImFkZE1hbWF6YXZDb21tZW50IiwibWF4TnVtUXVhbGl0eUxheWVycyIsInN0YXJ0VGlsZU9mZnNldCIsInRpbGVIZWFkZXJEYXRhYmluIiwiZ2V0VGlsZUhlYWRlckRhdGFiaW4iLCJ0aWxlSGVhZGVyT2Zmc2V0cyIsImNyZWF0ZVRpbGVIZWFkZXJBbmRHZXRPZmZzZXRzIiwiZW5kVGlsZUhlYWRlck9mZnNldCIsImNyZWF0ZVRpbGVCaXRzdHJlYW0iLCJlbmRUaWxlT2Zmc2V0IiwiaGVhZGVyQW5kRGF0YUxlbmd0aCIsInN0YXJ0T2ZUaWxlSGVhZGVyT2Zmc2V0IiwibW9kaWZ5SW50MzIiLCJoZWFkZXJBbmREYXRhTGVuZ3RoUGxhY2Vob2xkZXJPZmZzZXQiLCJieXRlc0NvcGllZCIsInN0YXJ0T2ZUaWxlU2VnbWVudExlbmd0aCIsImhlYWRlckFuZERhdGFMZW5ndGhQbGFjZWhvbGRlciIsInRpbGVQYXJ0SW5kZXgiLCJudW1iZXJPZlRpbGVwYXJ0cyIsImFmdGVyU3RhcnRPZlRpbGVTZWdtZW50T2Zmc2V0Iiwib3B0aW9uYWxNYXJrZXIiLCJkYXRhYmluTGVuZ3RoIiwiZ2V0RGF0YWJpbkxlbmd0aElmS25vd24iLCJkYXRhYmluU3RhcnRPZmZzZXQiLCJpc0VuZGVkV2l0aFN0YXJ0T2ZEYXRhTWFya2VyIiwib2Zmc2V0cyIsIm51bVF1YWxpdHlMYXllcnNJblRpbGUiLCJnZXROdW1RdWFsaXR5TGF5ZXJzIiwiYWxsQnl0ZXNDb3BpZWQiLCJoYXNNb3JlUGFja2V0cyIsImNyZWF0ZVByZWNpbmN0SXRlcmF0b3IiLCJlbXB0eVBhY2tldHNUb1B1c2giLCJpc0luQ29kZXN0cmVhbVBhcnQiLCJwcmVjaW5jdFBvc2l0aW9uVG9JbkNsYXNzSW5kZXgiLCJnZXRQcmVjaW5jdERhdGFiaW4iLCJxdWFsaXR5TGF5ZXJPZmZzZXQiLCJnZXRRdWFsaXR5TGF5ZXJPZmZzZXQiLCJieXRlc1RvQ29weSIsIm1heExlbmd0aFRvQ29weSIsInB1dEJ5dGUiLCJyZXN1bHRTdGFydE9mZnNldCIsImpwaXBTdHJ1Y3R1cmVQYXJzZXIiLCJkZWZhdWx0VGlsZVN0cnVjdHVyZUJ5RWRnZVR5cGUiLCJjYWNoZWRUaWxlU3RydWN0dXJlcyIsImdldFNpemVzUGFyYW1zIiwidmFsaWRhdGVQYXJhbXMiLCJudW1UaWxlcyIsImdldE51bVRpbGVzWSIsImdldE51bUNvbXBvbmVudHMiLCJudW1Db21wb25lbnRzIiwiZ2V0VGlsZVdpZHRoIiwiZ2V0VGlsZUhlaWdodCIsImdldEZpcnN0VGlsZU9mZnNldFgiLCJnZXRGaXJzdFRpbGVPZmZzZXRZIiwidGlsZVgiLCJ0aWxlTGVmdCIsImdldEZpcnN0VGlsZVdpZHRoIiwidGlsZVkiLCJ0aWxlVG9wIiwiZ2V0Rmlyc3RUaWxlSGVpZ2h0IiwiZ2V0RGVmYXVsdFRpbGVTdHJ1Y3R1cmUiLCJnZXREZWZhdWx0VGlsZVN0cnVjdHVyZUludGVybmFsIiwiaG9yaXpvbnRhbEVkZ2VUeXBlIiwiRURHRV9UWVBFX05PX0VER0UiLCJ2ZXJ0aWNhbEVkZ2VUeXBlIiwidGlsZVBvc2l0aW9uVG9JbkNsYXNzSW5kZXgiLCJ0aWxlUG9zaXRpb24iLCJ0aWxlc1giLCJ0aWxlc1kiLCJ2YWxpZGF0ZUFyZ3VtZW50SW5SYW5nZSIsInRpbGVJbkNsYXNzSW5kZXhUb1Bvc2l0aW9uIiwiZ2V0VGlsZXNGcm9tUGl4ZWxzIiwiZ2V0U2l6ZU9mVGlsZXMiLCJ0aWxlQm91bmRzIiwidGlsZUlkIiwibWF4VGlsZUlkIiwiaXNFZGdlIiwiaXNFZGdlVGlsZUlkIiwidGlsZVBhcmFtcyIsInBhcnNlT3ZlcnJpZGVuVGlsZVBhcmFtcyIsInBhcmFtTmFtZSIsInBhcmFtVmFsdWUiLCJzdXByaW11bVBhcmFtVmFsdWUiLCJlZGdlVHlwZSIsImRlZmF1bHRUaWxlUGFyYW1zIiwicGFyc2VEZWZhdWx0VGlsZVBhcmFtcyIsImhvcml6b250YWxFZGdlIiwidmVydGljYWxFZGdlIiwiZWRnZSIsInN0cnVjdHVyZUJ5VmVydGljYWxUeXBlIiwidGlsZVNpemUiLCJnZXRUaWxlU2l6ZSIsImRlZmF1bHRDb21wb25lbnRQYXJhbXMiLCJzY2FsZVgiLCJzY2FsZVkiLCJwYXJhbXNQZXJDb21wb25lbnQiLCJjb21wb25lbnRzU2NhbGVYIiwiY29tcG9uZW50c1NjYWxlWSIsInBhcnNlQ29kZXN0cmVhbVN0cnVjdHVyZSIsInRpbGVXaWR0aExldmVsMCIsInRpbGVIZWlnaHRMZXZlbDAiLCJpbml0aWFsaXplIiwiZ2V0Q29tcG9uZW50U2NhbGVYIiwiZ2V0Q29tcG9uZW50U2NhbGVZIiwiZ2V0TnVtUmVzb2x1dGlvbkxldmVscyIsIm51bVJlc29sdXRpb25MZXZlbHMiLCJnZXRQcmVjaW5jdFdpZHRoIiwicHJlY2luY3RXaWR0aFBlckxldmVsIiwiZ2V0UHJlY2luY3RIZWlnaHQiLCJwcmVjaW5jdEhlaWdodFBlckxldmVsIiwiZ2V0TWF4Q29kZWJsb2NrV2lkdGgiLCJtYXhDb2RlYmxvY2tXaWR0aCIsImdldE1heENvZGVibG9ja0hlaWdodCIsIm1heENvZGVibG9ja0hlaWdodCIsImdldE51bUNvZGVibG9ja3NYSW5QcmVjaW5jdCIsImdldE51bUNvZGVibG9ja3NYIiwibnVtQ29kZWJsb2Nrc1giLCJjYWxjdWxhdGVOdW1Db2RlYmxvY2tzIiwiZ2V0TnVtQ29kZWJsb2Nrc1lJblByZWNpbmN0IiwiZ2V0TnVtQ29kZWJsb2Nrc1kiLCJudW1Db2RlYmxvY2tzWSIsImdldE51bVByZWNpbmN0c1giLCJwcmVjaW5jdHNYIiwiY2FsY3VsYXRlTnVtUHJlY2luY3RzIiwiZ2V0TnVtUHJlY2luY3RzWSIsInByZWNpbmN0c1kiLCJ0aWxlU2l6ZUxldmVsMCIsInByZWNpbmN0U2l6ZVBlckxldmVsIiwicmVzb2x1dGlvbkZhY3RvciIsImdldFJlc29sdXRpb25GYWN0b3IiLCJ0aWxlU2l6ZUluTGV2ZWwiLCJwcmVjaW5jdFNpemVJbkxldmVsIiwibnVtUHJlY2luY3RzIiwibWF4Q29kZWJsb2NrU2l6ZSIsInByZWNpbmN0QmVnaW5QaXhlbCIsInByZWNpbmN0U2l6ZSIsInN1YmJhbmRUeXBlRmFjdG9yIiwic3ViYmFuZE9mUHJlY2luY3RTaXplIiwibnVtQ29kZWJsb2NrcyIsImRpZmZlcmVuY2VGcm9tQmVzdExldmVsIiwiZmFjdG9yIiwiaW50ZXJuYWxQYXJ0cyIsImdldExlbmd0aCIsImdldE9mZnNldCIsInB1c2hTdWJBcnJheSIsInN1YkFycmF5IiwiY29weVRvT3RoZXJBdFRoZUVuZCIsIm1pbk9mZnNldCIsIm1heE9mZnNldCIsImNoZWNrT2Zmc2V0c1RvQ29weSIsIml0ZXJhdG9yIiwiZ2V0SW50ZXJuYWxQYXJ0c0l0ZXJhdG9yIiwidHJ5QWR2YW5jZUl0ZXJhdG9yIiwiY29weVRvVHlwZWRBcnJheSIsInJlc3VsdEFycmF5IiwicmVzdWx0QXJyYXlPZmZzZXQiLCJvZmZzZXRJblJlc3VsdCIsImNvcHlUb0FycmF5IiwiY29weVRvT3RoZXIiLCJvdGhlciIsIm90aGVyRW5kT2Zmc2V0IiwiaXNPdGhlckNvbnRhaW5zVGhpcyIsImV4cGVjdGVkT2Zmc2V0VmFsdWUiLCJlbXB0eUl0ZXJhdG9yIiwiaW50ZXJuYWxJdGVyYXRvckRhdGEiLCJpc0VuZE9mUmFuZ2UiLCJjdXJyZW50U3ViQXJyYXkiLCJjdXJyZW50SW50ZXJuYWxQYXJ0T2Zmc2V0IiwibmV4dEludGVybmFsUGFydE9mZnNldCIsImN1cnJlbnRJbnRlcm5hbFBhcnRJbmRleCIsImFscmVhZHlSZWFjaGVkVG9UaGVFbmQiLCJjdXRGaXJzdFN1YkFycmF5IiwiZW5zdXJlTm9FbmRPZkFycmF5UmVhY2hlZCIsImN1cnJlbnRJbnRlcm5hbFBhcnRMZW5ndGgiLCJjdXRMYXN0U3ViQXJyYXkiLCJpc0xhc3RTdWJBcnJheSIsInBhcnRzIiwiZGF0YWJpbkxlbmd0aElmS25vd24iLCJsb2FkZWRCeXRlcyIsImNhY2hlZERhdGEiLCJnZXRMb2FkZWRCeXRlcyIsImlzQWxsRGF0YWJpbkxvYWRlZCIsImdldENhY2hlZERhdGEiLCJvYmoiLCJnZXRDbGFzc0lkIiwiZ2V0SW5DbGFzc0lkIiwiY29weVRvQ29tcG9zaXRlQXJyYXkiLCJyYW5nZU9wdGlvbnMiLCJkdW1teVJlc3VsdFN0YXJ0T2Zmc2V0IiwiZ2V0UGFyYW1zRm9yQ29weUJ5dGVzIiwicmVzdWx0V2l0aG91dENvcHkiLCJtYXhMZW5ndGhDb3BpZWQiLCJpdGVyYXRlUmFuZ2UiLCJhZGRQYXJ0VG9SZXN1bHRJbkNvcHlUb0NvbXBvc2l0ZUFycmF5IiwicGFydCIsIm1pbk9mZnNldEluUGFydCIsIm1heE9mZnNldEluUGFydCIsInJlc3VsdEFycmF5T2Zmc2V0SW5EYXRhYmluIiwiYWN0dWFsQ29weUJ5dGVzIiwiYWRkUGFydFRvUmVzdWx0SW5Db3B5Qnl0ZXMiLCJnZXRFeGlzdGluZ1JhbmdlcyIsImFkZERhdGEiLCJoZWFkZXIiLCJuZXdQYXJ0IiwiZW5kT2Zmc2V0SW5NZXNzYWdlIiwiaW5kZXhGaXJzdFBhcnRBZnRlciIsImZpbmRGaXJzdFBhcnRBZnRlck9mZnNldCIsImluZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXIiLCJwcmV2aW91c1BhcnQiLCJwcmV2aW91c1BhcnRFbmRPZmZzZXQiLCJmaXJzdFBhcnROZWFyT3JBZnRlciIsImVuZE9mZnNldEluRGF0YWJpbiIsImJ5dGVzQWxyZWFkeVNhdmVkIiwic2hvdWxkU3dhcCIsInBhcnRUb01lcmdlSW5kZXgiLCJwYXJ0c1RvRGVsZXRlIiwiZmlyc3RSZWxldmFudFBhcnRJbmRleCIsImlzQWxsUmVxdWVzdGVkUmFuZ2VFeGlzdCIsImlzQWxsUmFuZ2VFeGlzdCIsInVudXNlZEVsZW1lbnRzIiwiYXZhaWxhYmxlTGVuZ3RoIiwiaXNVbnRpbE1heExlbmd0aEV4aXN0IiwibGFzdFBhcnQiLCJlbmRPZmZzZXRSZWNpZXZlZCIsImlzVW50aWxFbmRPZkRhdGFiaW5FeGlzdCIsImFkZFN1YlBhcnRUb1Jlc3VsdCIsIm1pbk9mZnNldEluRGF0YWJpblRvQ29weSIsIm1heE9mZnNldEluRGF0YWJpblRvQ29weSIsImxhc3RDb3BpZWRQYXJ0IiwiY3VycmVudE1pbk9mZnNldEluRGF0YWJpblRvQ29weSIsImN1cnJlbnRNYXhPZmZzZXRJbkRhdGFiaW5Ub0NvcHkiLCJsYXN0T2Zmc2V0Q29waWVkIiwiaXNKcGlwVGlsZVBhcnRTdHJlYW0iLCJQUkVDSU5DVF9OT19BVVhfQ0xBU1MiLCJQUkVDSU5DVF9XSVRIX0FVWF9DTEFTUyIsIlRJTEVfSEVBREVSX0NMQVNTIiwiVElMRV9OT19BVVhfQ0xBU1MiLCJUSUxFX1dJVEhfQVVYX0NMQVNTIiwiZGF0YWJpbnNCeUNsYXNzIiwiZm9yYmlkZGVuSW5KcHAiLCJmb3JiaWRkZW5JbkpwdCIsImxvYWRlZEJ5dGVzSW5SZWdpc3RlcmVkRGF0YWJpbnMiLCJjcmVhdGVEYXRhYmluc0FycmF5IiwiZ2V0RGF0YWJpbkZyb21BcnJheSIsImdldFRpbGVEYXRhYmluIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwibGlzdGVuZXIiLCJsaXN0ZW5lclRoaXMiLCJkYXRhYmluc0FycmF5IiwiZGF0YWJpbnMiLCJsaXN0ZW5lcnMiLCJoYW5kbGUiLCJpc1JlZ2lzdGVyZWQiLCJkYXRhYmluc1dpdGhMaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xlYW51cFVucmVnaXN0ZXJlZERhdGFiaW5zIiwic2F2ZURhdGEiLCJzYXZlTWFpbkhlYWRlciIsInNhdmVNZXRhZGF0YSIsImlzSnB0RXhwZWN0ZWQiLCJieXRlc0JlZm9yZSIsImJ5dGVzRGlmZmVyZW5jZSIsImRhdGFiaW5MaXN0ZW5lcnMiLCJsb2NhbExpc3RlbmVycyIsImlzSnBpcFRpbGVQYXJ0U3RyZWFtRXhwZWN0ZWQiLCJkYXRhYmluVHlwZURlc2NyaXB0aW9uIiwiZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSIsInNlcnZlclJlcXVlc3QiLCJpc0ZhaWx1cmUiLCJpc1Byb2dyZXNzaXZlIiwicmVxdWVzdGVkUHJvZ3Jlc3NpdmVTdGFnZSIsIm5leHRQcm9ncmVzc2l2ZVN0YWdlIiwic2V0RGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSIsImRlZGljYXRlZENoYW5uZWxIYW5kbGVfIiwibW92ZSIsImNvZGVzdHJlYW1QYXJ0UGFyYW1zXyIsInJlc3VtZSIsInN0b3AiLCJzdG9wUmVxdWVzdEFzeW5jIiwic3RvcHBlZCIsImlzUHJvZ3Jlc3NpdmVDaGFuZ2VkIiwiaXNQcm9ncmVzc2l2ZV8iLCJzZXRUaW1lb3V0IiwicmVxdWVzdGVyQ2FsbGJhY2tPbkFsbERhdGFSZWNpZXZlZCIsInJlcXVlc3RlckNhbGxiYWNrT25GYWlsdXJlIiwiaXNSZXNwb25zZURvbmUiLCJkb25lIiwiaXNPcGVuQ2FsbGVkIiwiaXNDbG9zZUNhbGxlZCIsInJlc29sdmVPcGVuIiwicmVqZWN0T3BlbiIsInByb2dyZXNzaXZlbmVzc18iLCJvcGVuZWRDb3VudCIsIm9wZW5Qcm9taXNlIiwic2V0U3RhdHVzQ2FsbGJhY2siLCJyZXF1ZXN0ZXJTdGF0dXNDYWxsYmFjayIsImlzT3BlbkNhbGxlZEJlZm9yZVByb21pc2VJbml0aWFsaXplZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY2xvc2UiLCJzdGFydEZldGNoIiwicGFyYW1zTW9kaWZpZWQiLCJmZXRjaCIsInN0YXJ0TW92YWJsZUZldGNoIiwiZGVkaWNhdGVDaGFubmVsRm9yTW92YWJsZVJlcXVlc3QiLCJyZXN1bSIsInJlY29ubmVjdCIsInJlcXVlc3RlclN0YXR1cyIsInNlcmlhbGl6YWJsZUV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImlzUmVhZHkiLCJjb25zb2xlIiwiZXJyb3IiLCJsb2NhbFJlc29sdmUiLCJsb2NhbFJlamVjdCIsImNsb25lZFBhcmFtcyIsImdldERlZmF1bHRDb21wb25lbnRTdHJ1Y3R1cmUiLCJpbWFnZUxldmVsIiwibG93ZXN0UXVhbGl0eSIsImhpZ2hlc3RRdWFsaXR5IiwibnVtUmVzb2x1dGlvbkxldmVsc0ZvckxpbWl0dGVkVmlld2VyIiwiZW5jb2RlZFByb2dyZXNzaW9uT3JkZXIiLCJlbmNvZGVQcm9ncmVzc2lvbk9yZGVyIiwib3JpZ2luYWxEYXRhYmluIiwiZGF0YWJpbk9mZnNldEluUmVzdWx0IiwibW9kaWZ5UHJvZ3Jlc3Npb25PcmRlciIsImJlc3RSZXNvbHV0aW9uTGV2ZWxzUmFuZ2VzIiwiZ2V0UmFuZ2VzT2ZCZXN0UmVzb2x1dGlvbkxldmVsc0RhdGEiLCJudW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0IiwiYnl0ZXNSZW1vdmVkIiwicmVtb3ZlUmFuZ2VzIiwicmFuZ2VzIiwibmV3UmVmZXJlbmNlR3JpZFNpemUiLCJzaXpNYXJrZXJPZmZzZXQiLCJnZXRJbWFnZUFuZFRpbGVTaXplT2Zmc2V0IiwicmVmZXJlbmNlR3JpZFNpemVPZmZzZXQiLCJpbWFnZU9mZnNldEJ5dGVzT2Zmc2V0IiwidGlsZVNpemVCeXRlc09mZnNldCIsImZpcnN0VGlsZU9mZnNldEJ5dGVzT2Zmc2V0IiwidGlsZVdpZHRoIiwidGlsZUhlaWdodCIsImNvZGluZ1N0eWxlT2Zmc2V0IiwiZ2V0Q29kaW5nU3R5bGVPZmZzZXQiLCJwcm9ncmVzc2lvbk9yZGVyT2Zmc2V0IiwicmFuZ2VzVG9SZW1vdmUiLCJhZGRPZmZzZXQiLCJtYXJrZXJTZWdtZW50TGVuZ3RoT2Zmc2V0Iiwib3JpZ2luYWxNYXJrZXJTZWdtZW50TGVuZ3RoIiwibmV3TWFya2VyU2VnbWVudExlbmd0aCIsIm9mZnNldFRhcmdldCIsIm9mZnNldFNvdXJjZSIsIm5leHRSYW5nZU9mZnNldCIsImJ5dGVzIiwiX2NvZGVzdHJlYW1QYXJ0IiwiX3JlY29uc3RydWN0b3IiLCJfcGFja2V0c0RhdGFDb2xsZWN0b3IiLCJfcXVhbGl0eUxheWVyc0NhY2hlIiwiX2NvZGVzdHJlYW1TdHJ1Y3R1cmUiLCJfZGF0YWJpbnNTYXZlciIsIl9qcGlwRmFjdG9yeSIsIl9tYXhRdWFsaXR5UGVyUHJlY2luY3QiLCJfcmVnaXN0ZXJlZFByZWNpbmN0RGF0YWJpbnMiLCJfZGF0YUxpc3RlbmVycyIsIl9pc0Rpc3Bvc2VkIiwiX2lzUHJvZ3Jlc3NpdmUiLCJfbGlzdGVuZXIiLCJfcXVhbGl0eUxheWVyUmVhY2hlZENhbGxiYWNrIiwiX3N0YXJ0VHJhY2tQcmVjaW5jdCIsIl9lbnN1cmVOb3REaXNwb3NlZCIsImdldFF1YWxpdHlSZWFjaGVkIiwiZ2V0QWxsQ29kZWJsb2Nrc0RhdGEiLCJfZ2V0Q29kZXN0cmVhbSIsImNvZGVibG9ja3NEYXRhIiwiZ2V0RmV0Y2hlZERhdGFBc0NvZGVzdHJlYW0iLCJkYXRhYmluTGlzdGVuZXJIYW5kbGUiLCJzZXRJc1Byb2dyZXNzaXZlIiwib2xkSXNQcm9ncmVzc2l2ZSIsImdldENvZGVzdHJlYW0iLCJxdWFsaXR5UmVhY2hlZCIsInByZWNpbmN0SGFuZGxlIiwiX3ByZWNpbmN0RGF0YUFycml2ZWQiLCJwcmVjaW5jdERhdGFBcnJpdmVkIiwicHJlY2luY3RJdGVyYXRvck9wdGlvbmFsIiwicXVhbGl0eUxheWVycyIsImVuc3VyZU5vdERpc3Bvc2VkIiwiTE9HMiIsImxvZyIsIkVER0VfVFlQRV9GSVJTVCIsIkVER0VfVFlQRV9MQVNUIiwiZ2V0SW1hZ2VMZXZlbCIsImdldExldmVsIiwicmVnaW9uSW1hZ2VMZXZlbCIsImxldmVsWCIsInNjcmVlbldpZHRoIiwibGV2ZWxZIiwic2NyZWVuSGVpZ2h0IiwiZ2V0TnVtUmVzb2x1dGlvbkxldmVsc0ZvckxpbWl0dGVkVmlld2VyIiwiZ2V0TG93ZXN0UXVhbGl0eSIsImdldEhpZ2hlc3RRdWFsaXR5IiwiZmlyc3RUaWxlSW5kZXgiLCJtaW5UaWxlWCIsIm1pblRpbGVZIiwibGFzdFRpbGVJbmRleCIsIm1heFRpbGVYRXhjbHVzaXZlIiwibWF4VGlsZVlFeGNsdXNpdmUiLCJmaXJzdEVkZ2VUeXBlIiwibGFzdEVkZ2VUeXBlIiwiZmlyc3RTaXplIiwibGFzdFNpemUiLCJmaXJzdFRpbGVXaWR0aCIsImZpcnN0VGlsZUhlaWdodCIsIm1heFgiLCJtYXhZIiwic3RhcnRYTm9GaXJzdCIsInN0YXJ0WU5vRmlyc3QiLCJlbmRYTm9GaXJzdCIsImVuZFlOb0ZpcnN0IiwibWF4VGlsZVgiLCJtYXhUaWxlWSIsImJvdW5kcyIsImdldFRpbGVEaW1lbnNpb25TaXplIiwiZ2V0Rmlyc3RUaWxlU2l6ZSIsImdldExldmVsU2l6ZSIsImdldE5vbkVkZ2VUaWxlU2l6ZSIsIm5vbkVkZ2VUaWxlU2l6ZSIsIndpZHRoV2l0aG91dEZpcnN0IiwibnVtVGlsZXNYIiwibnVtVGlsZXNZIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwiZmlyc3RUaWxlT2Zmc2V0WCIsImZpcnN0VGlsZU9mZnNldFkiLCJmaXJzdFRpbGVXaWR0aEJlc3RMZXZlbCIsImZpcnN0VGlsZUhlaWdodEJlc3RMZXZlbCIsIm1lc3NhZ2VIZWFkZXJQYXJzZXIiLCJDQUNIRV9LRVkiLCJnZXRNYW5kYXRvcnlNYXJrZXJPZmZzZXRJbkRhdGFiaW4iLCJnZXRNYW5kYXRvcnlNYXJrZXJPZmZzZXRJbkRhdGFiaW5DbG9zdXJlIiwibWFya2VyIiwibWFya2VyTmFtZSIsImdldE1hcmtlck9mZnNldEluRGF0YWJpbiIsImNoZWNrU3VwcG9ydGVkTWFya2VycyIsImNoZWNrU3VwcG9ydGVkTWFya2Vyc0Nsb3N1cmUiLCJtYXJrZXJzIiwiaXNNYXJrZXJzU3VwcG9ydGVkIiwiZGF0YWJpbk1hcmtlcnMiLCJnZXREYXRhYmluTWFya2VycyIsIm1hcmtlcnNBc1Byb3BlcnRpZXMiLCJnZXRNYXJrZXJBc1Byb3BlcnR5TmFtZSIsImV4aXN0aW5nTWFya2VyIiwibWFya2VyVG9PZmZzZXQiLCJpc01hcmtlckluTGlzdCIsImlzTWFya2VyIiwic3RyTWFya2VyIiwiZm9yY2VBbGxNYXJrZXJzUGFyc2VkIiwiaXNQYXJzZWRBbGxNYXJrZXJzIiwibGFzdE9mZnNldFBhcnNlZCIsImNhblBhcnNlIiwiYWN0dWFsUGFyc2VNYXJrZXJzIiwiYWZ0ZXJQYXJzZU1hcmtlcnMiLCJtYXJrZXJQb3NpdGlvbkRlc2NyaXB0aW9uIiwic3VwcG9ydGVkTWFya2VycyIsImdldENvZGluZ1N0eWxlQmFzZVBhcmFtcyIsImdldFJhbmdlc1dpdGhEYXRhT2ZSZXNvbHV0aW9uTGV2ZWxzQ2xvc3VyZSIsImRhdGFiaW5Db2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zIiwiZGF0YWJpbk9yTWFpbkhlYWRlckNvZGluZ1N0eWxlQmFzZVBhcmFtcyIsImNvZGluZ1N0eWxlTnVtUmVzb2x1dGlvbkxldmVscyIsImFkZFJhbmdlT2ZCZXN0UmVzb2x1dGlvbkxldmVsc0luQ29kaW5nU3R5bGUiLCJhZGRSYW5nZU9mQmVzdFJlc29sdXRpb25MZXZlbHNJblF1YW50aXphdGlvbiIsImlzTWFuZGF0b3J5IiwiY29kaW5nU3R5bGVEZWZhdWx0T2Zmc2V0IiwibnVtQnl0ZXMiLCJieXRlc09mZnNldCIsImdldEJ5dGVzIiwiY29kaW5nU3R5bGVGbGFnc0ZvckFsbENvbXBvbmVudHNPZmZzZXQiLCJjb2RpbmdTdHlsZUZsYWdzRm9yQWxsQ29tcG9uZW50cyIsImlzRGVmYXVsdFByZWNpbmN0U2l6ZSIsImlzU3RhcnRPZlBhY2tldE1hcmtlckFsbG93ZWQiLCJpc0VuZFBhY2tldEhlYWRlck1hcmtlckFsbG93ZWQiLCJudW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0SW5CeXRlcyIsIm51bURlY29tcG9zaXRpb25MZXZlbHMiLCJwcmVjaW5jdFNpemVzT2Zmc2V0IiwiY29kaW5nU3R5bGVEZWZhdWx0QmFzZVBhcmFtcyIsImxldmVsc05vdEluUmFuZ2UiLCJmaXJzdE9mZnNldEluUmFuZ2UiLCJtYXJrZXJMZW5ndGhPZmZzZXQiLCJwcmVjaW5jdFNpemVzUmFuZ2UiLCJnZXRRdWFudGl6YXRpb25EYXRhQnl0ZXNQZXJTdWJiYW5kIiwicXVhbnRpemF0aW9uU3R5bGVPZmZzZXQiLCJzcWNkT2Zmc2V0IiwicXVhbnRpemF0aW9uU3R5bGUiLCJieXRlc1BlclN1YmJhbmQiLCJxY2RNYXJrZXJPZmZzZXQiLCJzdWJiYW5kc05vdEluUmFuZ2UiLCJzdWJiYW5kc0luUmFuZ2UiLCJyYW5nZUxlbmd0aCIsInF1YW50aXphdGlvbnNSYW5nZSIsImV4cGVjdE5vQ29kaW5nU3R5bGVDb21wb25lbnQiLCJjb2NPZmZzZXQiLCJhbGxvd0VuZE9mUmFuZ2UiLCJhbHJlYWR5UmV0dXJuZWRDb2RlYmxvY2tzIiwiZ2V0TmV3Q29kZWJsb2Nrc0RhdGFBbmRVcGRhdGVSZXR1cm5lZENvZGVibG9ja3MiLCJ0aWxlSW5kZXhJbkNvZGVzdHJlYW1QYXJ0IiwiZHVtbXlPZmZzZXQiLCJhbGxSZWxldmFudEJ5dGVzTG9hZGVkIiwicmV0dXJuZWRJblByZWNpbmN0IiwibGF5ZXJQZXJDb2RlYmxvY2siLCJsYXllclJlYWNoZWQiLCJwdXNoUGFja2V0cyIsImRhdGFBc1VpbnQ4IiwicmV0dXJuZWRDb2RlYmxvY2tzSW5QcmVjaW5jdCIsImxheWVyIiwib2Zmc2V0SW5QcmVjaW5jdERhdGFiaW4iLCJjb2RlYmxvY2tPZmZzZXRzSW5EYXRhYmluIiwiZ2V0UGFja2V0T2Zmc2V0c0J5Q29kZWJsb2NrSW5kZXgiLCJoZWFkZXJTdGFydE9mZnNldCIsImhlYWRlckxlbmd0aCIsImNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4IiwiY29kZWJsb2NrT2Zmc2V0c0luUmVzdWx0IiwiaXNJbmNvbXBsZXRlUGFja2V0IiwicmV0dXJuZWQiLCJvZmZzZXRJblJlc3VsdEFycmF5IiwiY29kZWJsb2NrQm9keUxlbmd0aEJ5dGVzIiwiY29kaW5nUGFzc2VzIiwidmFsaWRhdGVUaWxlc0JvdW5kcyIsInNldGFibGVJdGVyYXRvciIsImlzU3RhcnRlZCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJ0aWxlc0luUm93IiwiZmlyc3RJblJvdyIsInRyeUFkdmFuY2VUaWxlSXRlcmF0b3IiLCJpc01vcmVUaWxlc0F2YWlsYWJsZSIsImlzSW5pdGlhbGl6ZWQiLCJwcmVjaW5jdHNJbkNvZGVzdHJlYW1QYXJ0UGVyTGV2ZWxQZXJDb21wb25lbnQiLCJuZWVkQWR2YW5jZU5leHRNZW1iZXIiLCJwcmVjaW5jdHNSYW5nZUhhc2giLCJuZWVkUmVzZXRQcmVjaW5jdFRvTWluaW1hbEluQ29kZXN0cmVhbVBhcnQiLCJhZHZhbmNlUHJvZ3Jlc3Npb25PcmRlck1lbWJlciIsInJhbmdlUGVyTGV2ZWwiLCJwcmVjaW5jdHNSYW5nZSIsIm1pblByZWNpbmN0WCIsIm1pblByZWNpbmN0WSIsIm1heFByZWNpbmN0WEV4Y2x1c2l2ZSIsIm1heFByZWNpbmN0WUV4Y2x1c2l2ZSIsIm1pbk51bVJlc29sdXRpb25MZXZlbHMiLCJnZXRNaW5OdW1SZXNvbHV0aW9uTGV2ZWxzT3ZlckNvbXBvbmVudHMiLCJnZXRQcmVjaW5jdHNJbkNvZGVzdHJlYW1QYXJ0UGVyTGV2ZWxQZXJDb21wb25lbnQiLCJmaXJzdFByZWNpbmN0c1JhbmdlIiwiZ2V0UHJvZ3Jlc3Npb25PcmRlciIsInBlckNvbXBvbmVudFJlc3VsdCIsIm1pbkxldmVsIiwidGlsZUxlZnRJbkxldmVsIiwidGlsZVRvcEluTGV2ZWwiLCJtaW5YSW5UaWxlIiwibWluWUluVGlsZSIsIm1heFhJblRpbGUiLCJtYXhZSW5UaWxlIiwiZ2V0Q29tcG9uZW50U3RydWN0dXJlIiwibGV2ZWxzSW5Db2Rlc3RyZWFtUGFydCIsInBlckxldmVsUmVzdWx0IiwiY29tcG9uZW50U2NhbGVYIiwiY29tcG9uZW50U2NhbGVZIiwibGV2ZWxJbkNvZGVzdHJlYW1QYXJ0IiwibGV2ZWxTY2FsZVgiLCJsZXZlbFNjYWxlWSIsInJlZHVuZGFudCIsIm1pblhJbkxldmVsIiwibWluWUluTGV2ZWwiLCJtYXhYSW5MZXZlbCIsIm1heFlJbkxldmVsIiwibWF4UHJlY2luY3RYIiwibWF4UHJlY2luY3RZIiwibWVtYmVySW5kZXgiLCJwcmVjaW5jdHNSYW5nZVBlckxldmVsIiwicHJlY2luY3RzUmFuZ2VJbkxldmVsQ29tcG9uZW50IiwiY2FsY3VsYXRlTGV2ZWwiLCJ5IiwidHJ5QWR2YW5jZVRpbGVDYWxscyIsImNoZWNrVmFsaWRUaWxlSXRlcmF0b3IiLCJ0cnlBZHZhbmNlQ2FsbHMiLCJpdGVyYXRvclR5cGUiLCJudW1SZXNvbHV0aW9uTGV2ZWxzSW5Db21wb25lbnQiLCJ0aWxlSGVhZGVyc05vdExvYWRlZCIsImlzVW5yZWdpc3RlcmVkIiwicmVnaXN0ZXJlZFRpbGVIZWFkZXJEYXRhYmlucyIsImFjY3VtdWxhdGVkRGF0YVBlckRhdGFiaW4iLCJpc0FsbFRpbGVIZWFkZXJzTG9hZGVkIiwiaXNBbHJlYWR5TG9hZGVkIiwidGlsZUhlYWRlckRhdGFBcnJpdmVkIiwidGlsZUFjY3VtdWxhdGVkRGF0YSIsIm1pbk51bVF1YWxpdHlMYXllcnNSZWFjaGVkIiwicHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCIsImlzUmVxdWVzdERvbmUiLCJhY2N1bXVsYXRlZERhdGFQZXJQcmVjaW5jdCIsInByZWNpbmN0Q291bnRCeVJlYWNoZWRRdWFsaXR5TGF5ZXIiLCJwcmVjaW5jdENvdW50SW5NYXhRdWFsaXR5TGF5ZXIiLCJwcmVjaW5jdENvdW50IiwicGVuZGluZ1ByZWNpbmN0VXBkYXRlIiwiZGVmYXVsdFRpbGVTdHJ1Y3R1cmUiLCJkZWZhdWx0TnVtUXVhbGl0eUxheWVycyIsInByZWNpbmN0c1dhaXRlciIsInRyeUFkdmFuY2VRdWFsaXR5TGF5ZXJzUmVhY2hlZCIsInByZWNpbmN0SW5DbGFzc0lkIiwiYWNjdW11bGF0ZWREYXRhIiwidXBkYXRlUHJlY2luY3REYXRhIiwiaXNVcGRhdGVkIiwiaXNNYXhRdWFsaXR5IiwicGVuZGluZ1F1YWxpdHlSZWFjaGVkIiwicXVhbGl0eVJlYWNoZWROdW1lcmljIiwiaGFzUHJlY2luY3RzSW5RdWFsaXR5TGF5ZXIiLCJudW1RdWFsaXR5TGF5ZXJzVG9XYWl0IiwiaXNGaXJzdCIsInF1YWxpdHlMYXllcnNSZXF1aXJlZCIsImZvcmNlQ3VycmVudFN0YWdlIiwic2tpcEZvcmNlQ2hlY2siLCJjb2Rlc3RyZWFtUGFydFBhcmFtc01vZGlmaWVkIiwiY2FzdENvZGVzdHJlYW1QYXJ0UGFyYW1zIiwidmFsaWRhdGVOdW1lcmljUGFyYW0iLCJudW1RdWFsaXR5TGF5ZXJzTnVtZXJpYyIsInF1YWxpdHlOdW1lcmljT3JNYXgiLCJmaXJzdFF1YWxpdHlMYXllcnNDb3VudCIsIm1pZGRsZVF1YWxpdHkiLCJyb3VuZCIsImlucHV0VmFsdWUiLCJwcm9wZXJ0eU5hbWUiLCJhbGxvd1VuZGVmaW5lZCIsImlzTmFOIiwiS0IiLCJQUk9HUkVTU0lWRU5FU1NfTUlOX0xFTkdUSF9CWVRFUyIsIlJFU1BPTlNFX0VOREVEX1NVQ0NFU1MiLCJSRVNQT05TRV9FTkRFRF9BQk9SVEVEIiwiUkVTUE9OU0VfRU5ERURfU0VOVF9BTk9USEVSX01FU1NBR0UiLCJlbmRlZEJ5VXNlciIsInJlc3BvbnNlTGVuZ3RoIiwicmVxdWVzdFN0YXJ0ZWQiLCJzZW5kTWVzc2FnZU9mRGF0YVJlcXVlc3QiLCJnZXRMYXN0UmVxdWVzdElkIiwiY2FsbENhbGxiYWNrQWZ0ZXJDb25jdXJyZW50UmVxdWVzdHNGaW5pc2hlZCIsImludGVybmFsU3VjY2Vzc0NhbGxiYWNrIiwiZmFpbGVkIiwiZW5kZWRSZWFzb24iLCJwcm9jZXNzQWpheFJlc3BvbnNlIiwib25FeGNlcHRpb24iLCJ3YWl0Rm9yQ29uY3VycmVudFJlcXVlc3RzVG9FbmQiLCJjaGVja0NvbmN1cnJlbnRSZXF1ZXN0c0ZpbmlzaGVkIiwiaW50ZXJuYWxGYWlsdXJlQ2FsbGJhY2siLCJjcmVhdGVkQ2hhbm5lbCIsImdldENyZWF0ZWRDaGFubmVsSWQiLCJzYXZlVG9EYXRhYmluc0Zyb21PZmZzZXQiLCJwYXJzZUVuZE9mUmVzcG9uc2UiLCJzaG91bGRDcmVhdGVDaGFubmVsIiwiZXhpc3RDaGFubmVsSW5TZXNzaW9uIiwiZ2V0Rmlyc3RDaGFubmVsIiwic2VuZEFqYXgiLCJlbmRSZXNwb25zZVJlc3VsdCIsInByZXZpb3VzSGVhZGVyIiwiZ2V0RGF0YWJpbnNTYXZlciIsImFqYXhIZWxwZXIiLCJzdGF0dXNDYWxsYmFjayIsInJlcXVlc3RFbmRlZENhbGxiYWNrIiwiY2hhbm5lbHMiLCJmaXJzdENoYW5uZWwiLCJhY3RpdmVSZXF1ZXN0cyIsIndhaXRpbmdGb3JDb25jdXJyZW50UmVxdWVzdHMiLCJvblN0YXR1c0NoYW5nZSIsImdldElzUmVhZHkiLCJzZXRJc1JlYWR5IiwiaXNSZWFkeV8iLCJzdGF0dXNDYWxsYmFja18iLCJzZXRSZXF1ZXN0RW5kZWRDYWxsYmFjayIsInJlcXVlc3RFbmRlZENhbGxiYWNrXyIsInRhcmdldElkRnJvbVNlcnZlciIsImdldFJlc3BvbnNlSGVhZGVyIiwiY2hhbm5lbEZyZWVkIiwiZ2V0QWN0aXZlUmVxdWVzdHNDb3VudCIsImNoYW5uZWxDcmVhdGVkIiwiY25ld1Jlc3BvbnNlIiwia2V5VmFsdWVQYWlyc0luUmVzcG9uc2UiLCJzcGxpdCIsImtleUFuZFZhbHVlIiwiY29uY3VycmVudFJlcXVlc3RzIiwibnVtUmVxdWVzdHMiLCJpc0FsbENvbmN1cnJlbnRSZXF1ZXN0c0ZpbmlzaGVkIiwid2FpdGluZyIsImZvcmtlZEZhaWx1cmVDYWxsYmFjayIsImZvcmtGYWlsdXJlQ2FsbGJhY2siLCJnZW5lcmFsRmFpbHVyZUNhbGxiYWNrIiwic2V0SW50ZXJ2YWxGdW5jdGlvbiIsImNsZWFySW50ZXJ2YWxGdW5jdGlvbiIsIlNFQ09ORCIsIktFRVBfQUxJVkVfSU5URVJWQUwiLCJjaGFubmVsTWFuYWdlbWVudFVybCIsImNsb3NlU2Vzc2lvblVybCIsImNsb3NlQ2FsbGJhY2tQZW5kaW5nIiwibm9uRGVkaWNhdGVkQ2hhbm5lbHMiLCJjaGFubmVsc0NyZWF0ZWQiLCJrZWVwQWxpdmVJbnRlcnZhbEhhbmRsZSIsImJhc2VVcmwiLCJxdWVyeVBhcmFtc0RlbGltaXRlciIsImluZGV4T2YiLCJzZXNzaW9uUmVhZHlDYWxsYmFjayIsImVuc3VyZVJlYWR5IiwiaGFzQWN0aXZlUmVxdWVzdHMiLCJpc0FjdGl2ZVJlcXVlc3RzIiwidHJ5R2V0Q2hhbm5lbCIsImNhbkNyZWF0ZU5ld0NoYW5uZWwiLCJzZWFyY2hPbmx5Q2hhbm5lbFdpdGhFbXB0eVF1ZXVlIiwibWF4UmVxdWVzdHNJbkNoYW5uZWwiLCJnZXRDaGFubmVsV2l0aE1pbmltYWxXYWl0aW5nUmVxdWVzdHMiLCJjbG9zZWRDYWxsYmFjayIsImNsb3NlSW50ZXJuYWwiLCJpc0V4dHJhY3RGcm9tTm9uRGVkaWNhdGVkTGlzdCIsIm1pbmltYWxXYWl0aW5nUmVxdWVzdHMiLCJ3YWl0aW5nUmVxdWVzdHMiLCJhcmJpdHJhcnlDaGFubmVsIiwiYXJiaXRyYXJ5Q2hhbm5lbElkIiwia2VlcEFsaXZlSGFuZGxlciIsImR1bW15Q2FsbGJhY2siLCJtYXhKcGlwQ2FjaGVTaXplQ29uZmlnIiwiTUIiLCJtYXhKcGlwQ2FjaGVTaXplIiwic2Vzc2lvbldhaXRpbmdGb3JSZWFkeSIsImFjdGl2ZVNlc3Npb24iLCJzZXNzaW9uV2FpdGluZ0ZvckRpc2Nvbm5lY3QiLCJ3YWl0aW5nRm9yQ2xvc2VTZXNzaW9ucyIsIm5vbkRlZGljYXRlZFJlcXVlc3RzV2FpdGluZ0ZvclNlbmQiLCJkZWRpY2F0ZWRDaGFubmVscyIsImxhc3RDbG9zZWRDYWxsYmFjayIsImNyZWF0ZUludGVybmFsU2Vzc2lvbiIsImNsb3NlSW50ZXJuYWxTZXNzaW9uIiwiY2hlY2tJZkFsbFNlc3Npb25zQ2xvc2VkQWZ0ZXJTZXNzaW9uQ2xvc2VkIiwibmV3U3RhdHVzQ2FsbGJhY2siLCJjaGVja1JlYWR5IiwiaW50ZXJuYWxEZWRpY2F0ZWRDaGFubmVsIiwiY3JlYXRlSW50ZXJuYWxEZWRpY2F0ZWRDaGFubmVsIiwiZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZVRvTW92ZSIsImludGVybmFsUmVxdWVzdCIsIm1vdmVEZWRpY2F0ZWRDaGFubmVsIiwid2FpdGluZ0ZvclJlYWR5Q2FsbGJhY2siLCJ0cnlEaXNjb25uZWN0V2FpdGluZ1Nlc3Npb24iLCJhY3RpdmVTZXNzaW9uUmVxdWVzdEVuZGVkQ2FsbGJhY2siLCJzZXNzaW9uIiwiY2FuQ2xvc2VTZXNzaW9uIiwibnVtQ29tcG9uZW50c09mZnNldCIsInJlZmVyZW5jZUdyaWRTaXplWCIsInJlZmVyZW5jZUdyaWRTaXplWSIsImltYWdlT2Zmc2V0WCIsImltYWdlT2Zmc2V0WSIsInRpbGVTaXplWCIsInRpbGVTaXplWSIsImNvbXBvbmVudHNEYXRhT2Zmc2V0IiwiY29tcG9uZW50c0RhdGFMZW5ndGgiLCJjb21wb25lbnRzRGF0YUJ5dGVzIiwicGFyc2VDb2RpbmdTdHlsZSIsImJhc2VQYXJhbXMiLCJudW1Db21wb25lbnRzQnl0ZXMiLCJwYWNrZWRQYWNrZXRIZWFkZXJzTWFya2VySW5UaWxlSGVhZGVyIiwicGFja2VkUGFja2V0SGVhZGVyc01hcmtlckluTWFpbkhlYWRlciIsImlzUGFja2V0SGVhZGVyc05lYXJEYXRhIiwiY29kaW5nU3R5bGVNb3JlRGF0YU9mZnNldCIsImNvZGluZ1N0eWxlTW9yZURhdGFCeXRlcyIsInBhcnNlQ29kZWJsb2NrU2l6ZSIsInByZWNpbmN0V2lkdGhzIiwicHJlY2luY3RIZWlnaHRzIiwicHJlY2luY3RTaXplc0J5dGVzIiwicHJlY2luY3RTaXplc0J5dGVzTmVlZGVkIiwiZGVmYXVsdFNpemUiLCJwcmVjaW5jdFNpemVPZmZzZXQiLCJzaXplRXhwb25lbnRzIiwicHB4IiwicHB5IiwiY29kZWJsb2NrU2l6ZUV4cG9uZW50TWludXMyIiwiY29kZWJsb2NrU2l6ZUV4cG9uZW50IiwiZGVmYXVsdENvbXBvbmVudFN0cnVjdHVyZSIsImNvbXBvbmVudFN0cnVjdHVyZXMiLCJjb21wb25lbnRUb0luQ2xhc3NMZXZlbFN0YXJ0SW5kZXgiLCJnZXRUaWxlV2lkdGhDbG9zdXJlIiwiZ2V0VGlsZUhlaWdodENsb3N1cmUiLCJnZXRJc1BhY2tldEhlYWRlck5lYXJEYXRhIiwiZ2V0SXNTdGFydE9mUGFja2V0TWFya2VyQWxsb3dlZCIsImdldElzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZCIsInByZWNpbmN0SW5DbGFzc0luZGV4VG9Qb3NpdGlvbiIsImluQ2xhc3NJbmRleFdpdGhvdXRUaWxlIiwibGV2ZWxTdGFydEluZGV4IiwibmV4dExldmVsU3RhcnRJbmRleCIsInByZWNpbmN0SW5kZXhJbkxldmVsIiwicHJlY2luY3RQb3NpdGlvbiIsInZhbGlkYXRlVGFyZ2V0UHJvZ3Jlc3Npb25PcmRlciIsImhhc1AiLCJoYXNDIiwiaGFzUiIsInByZXByb2Nlc3NQYXJhbXMiLCJkZWZhdWx0Q29tcG9uZW50IiwiaXNDb21wb25lbnRzSWRlbnRpY2FsU2l6ZSIsImlzUHJlY2luY3RQYXJ0aXRpb25GaXRzVG9UaWxlUGFydGl0aW9uIiwiYWNjdW11bGF0ZWRPZmZzZXQiLCJmaXJzdExldmVsUHJlY2luY3RzWCIsImZpcnN0TGV2ZWxQcmVjaW5jdHNZIiwicHJlY2luY3RzWEluTGV2ZWwiLCJwcmVjaW5jdHNZSW5MZXZlbCIsImlzSG9yaXpvbnRhbFBhcnRpdGlvblN1cHBvcnRlZCIsImNoZWNrSWZQcmVjaW5jdFBhcnRpdGlvblN0YXJ0c0luVGlsZVRvcExlZnQiLCJpc1ZlcnRpY2FsUGFydGl0aW9uU3VwcG9ydGVkIiwiZ2V0UHJlY2luY3RTaXplRnVuY3Rpb24iLCJnZXRMZXZlbFNpemVGdW5jdGlvbiIsImdldFRpbGVTaXplMURGdW5jdGlvbiIsImxldmVsU2l6ZSIsInRpbGVTaXplMUQiLCJKcGlwQml0c3RyZWFtUmVhZGVyQ2xvc3VyZSIsIk5VTExfQllURSIsInplcm9CaXRzVW50aWxGaXJzdE9uZUJpdE1hcCIsImNyZWF0ZVplcm9CaXRzVW50aWxGaXJzdE9uZUJpdE1hcCIsImluaXRpYWxTdGF0ZSIsIm5leHRPZmZzZXRUb1BhcnNlIiwidmFsaWRCaXRzSW5DdXJyZW50Qnl0ZSIsIm9yaWdpbmFsQnl0ZVdpdGhvdXRTaGlmdCIsImN1cnJlbnRCeXRlIiwiaXNTa2lwTmV4dEJ5dGUiLCJzdHJlYW1TdGF0ZSIsImNsb25lU3RhdGUiLCJnZXRBY3RpdmVUcmFuc2FjdGlvbiIsImdldEJpdHNDb3VudGVyIiwidHJ5VmFsaWRhdGVDdXJyZW50Qnl0ZSIsImdldERhdGFiaW5PZmZzZXQiLCJzZXREYXRhYmluT2Zmc2V0Iiwib2Zmc2V0SW5CeXRlcyIsInN0YXJ0TmV3VHJhbnNhY3Rpb24iLCJzaGlmdFJlbWFpbmluZ0JpdHNJbkJ5dGUiLCJzaGlmdEJpdCIsImNvdW50QW5kU2hpZnRCaXRzIiwiY291bnRaZXJvc0FuZFNoaWZ0VW50aWxGaXJzdE9uZUJpdCIsIm1heEJpdHNUb1NoaWZ0IiwiYml0c0NvdW50IiwicmVtYWluaW5nQml0cyIsImJpdHNUb1Rha2UiLCJyZW1vdmVCaXRzRnJvbUJ5dGUiLCJpc1VudGlsWmVyb0JpdCIsImNvdW50ZWRCaXRzIiwiZm91bmRUZXJtaW5hdGluZ0JpdCIsImJ5dGVWYWx1ZSIsImJpdHNDb3VudEluY2x1ZGluZ1Rlcm1pbmF0aW5nQml0IiwiYml0c0NvdW50Tm90SW5jbHVkaW5nVGVybWluYXRpbmdCaXQiLCJieXRlc05lZWRlZCIsInByZXZCeXRlIiwiYXJyYXlNYXAiLCJpc0FscmVhZHlSZWFkQml0c1RyYW5zYWN0aW9uYWxPYmplY3QiLCJjbG9uZUJvb2xlYW4iLCJvbGQiLCJjcmVhdGVMZXZlbHNBcnJheSIsInNldE1pbmltYWxWYWx1ZUlmTm90UmVhZEJpdHMiLCJtaW5pbWFsVmFsdWUiLCJpc0FscmVhZHlSZWFkQml0cyIsImNvbnRlbnQiLCJub2RlIiwibWluaW1hbFBvc3NpYmxlVmFsdWUiLCJpc1NtYWxsZXJUaGFuT3JFcXVhbHNUbyIsInNldEFscmVhZHlSZWFkQml0cyIsImdldE5leHROb2RlIiwiZ2V0Um9vdFRvTGVhZkl0ZXJhdG9yIiwiY3VycmVudE5vZGUiLCJsYXN0Tm9kZSIsImlzRmluYWxWYWx1ZSIsImFkZFRvVmFsdWUiLCJsZWFmIiwiZWxlbWVudENvdW50IiwidW5zaGlmdCIsImluaXROb2RlIiwicHJldkl0ZXJhdGVkTm9kZSIsImdldE5leHQiLCJzaGlmdEZhY3RvciIsImluZGV4SW5MZXZlbCIsIm9iamVjdFZhbHVlIiwiY2xvbmVOb2RlVmFsdWUiLCJub2RlVmFsdWUiLCJpc0FscmVhZHlSZWFkQml0c1RyYW5zYWN0aW9uYWxWYWx1ZSIsIkpwaXBDb2RlYmxvY2tMZW5ndGhQYXJzZXJDbG9zdXJlIiwiZXhhY3RMb2cyVGFibGUiLCJjcmVhdGVFeGFjdExvZzJUYWJsZSIsImxCbG9jayIsImxCbG9ja1ZhbHVlIiwiY2xvbmVMQmxvY2siLCJvbGRMQmxvY2siLCJhZGRUb0xCbG9jayIsImxCbG9ja1N0YXRlIiwiY29kaW5nUGFzc2VzTG9nMiIsIm1heENvZGluZ1Bhc3Nlc1Bvc3NpYmxlIiwiaW5wdXRWYWx1ZUxvd2VyQm91bmQiLCJpbnB1dFZhbHVlVXBwZXJCb3VuZCIsImxvZzJSZXN1bHQiLCJjb2RpbmdQYXNzZXNOdW1iZXJQYXJzZXIiLCJjb2RlYmxvY2tMZW5ndGhQYXJzZXJzIiwiaXNDb2RlYmxvY2tzSW5jbHVkZWQiLCJwYXJzZWRRdWFsaXR5TGF5ZXJzIiwiY2xvbmVMYXllcnMiLCJsYXllcnMiLCJjYWxjdWxhdGVTdWJiYW5kTGVuZ3RoIiwiY2FsY3VhbHRlU3ViYmFuZExlbmd0aCIsInF1YWxpdHlMYXllciIsImVuc3VyZVF1YWxpdHlMYXllck5vdFBhcnNlZFlldCIsImxhenlJbml0QXJyYXlzIiwiYWNjdW11bGF0ZWRCb2R5TGVuZ3RoQnl0ZXMiLCJjb2RlYmxvY2tJbmRleCIsImNvZGVibG9ja0xlbmd0aEJ5SW5kZXgiLCJjb2RlYmxvY2tCb2R5TGVuZ3RoIiwiZ2V0TmV4dENvZGVibG9ja0xlbmd0aCIsIm92ZXJhbGxCb2R5TGVuZ3RoQnl0ZXMiLCJwYXJzZWRRdWFsaXR5TGF5ZXJzVmFsdWUiLCJpc0luY2x1ZGVkIiwiY2xvbmVJc0luY2x1ZGVkIiwiaXNDb2RlYmxvY2tBbHJlYWR5SW5jbHVkZWQiLCJpc0NvZGVibG9ja0luY2x1ZGVkTm93IiwibGVuZ3RoUGFyc2VyIiwiYm9keUxlbmd0aEJ5dGVzIiwiY2FsY3VsYXRlZExlbmd0aHMiLCJpc1BhY2tldEhlYWRlck5lYXJEYXRhIiwic3ViYmFuZFBhcnNlcnMiLCJpbml0U3ViYmFuZFBhcnNlcnMiLCJjYWxjdWxhdGVFbmRPZmZzZXRPZkxhc3RGdWxsUGFja2V0IiwiY2FsY3VsYXRlRnVsbFBhY2tldHNBdmFpbGFibGVPZmZzZXRzIiwiaXNBbGxvd2VkRnVsbFF1YWxpdHkiLCJudW1RdWFsaXR5TGF5ZXJzVG9QYXJzZSIsImNoZWNrU3VwcG9ydGVkU3RydWN0dXJlIiwidHJ5VmFsaWRhdGVQYWNrZXRzIiwiZ2V0RnVsbFF1YWxpdHlMYXllcnNFbmRPZmZzZXQiLCJ0cnlDYWxjdWxhdGVOZXh0UGFja2V0TGVuZ3RoIiwibGFzdCIsImRhdGFiaW5PZmZzZXQiLCJpc01hcmtlckhlcmUiLCJzdGFydE9mUGFja2V0U2VnbWVudExlbmd0aCIsImlzUGFja2V0RXhpc3RJblF1YWxpdHlMYXllciIsImJvZHlMZW5ndGgiLCJhY3R1YWxDYWxjdWxhdGVQYWNrZXRMZW5ndGhBZnRlclplcm9MZW5ndGhCaXQiLCJoZWFkZXJFbmRPZmZzZXQiLCJib2R5Qnl0ZXMiLCJwYXJzZXIiLCJzdWJiYW5kQm9keUxlbmd0aCIsImNvbmNhdCIsImVuZFBhY2tldEhlYWRlck1hcmtlckxlbmd0aCIsIm51bVBhcnNlZFF1YWxpdHlMYXllciIsImxhc3RQYWNrZXQiLCJudW1TdWJiYW5kcyIsIm1hcmtlclNlY29uZEJ5dGUiLCJwb3NzaWJsZU1hcmtlciIsInBhY2tldExlbmd0aENhbGN1bGF0b3IiLCJnZXRQYWNrZXRQYXJzZXIiLCJsb2FkZWRSYW5nZXMiLCJlbmRPZmZzZXRMb2FkZWQiLCJsYXllcnNJblByZWNpbmN0IiwicmVkdWNlZExheWVyc1RvU2VhcmNoIiwicGFja2V0TGVuZ3RoQ2FsY3VsYXRvckNvbnRhaW5lciIsImNhbGN1bGF0b3IiLCJwaXhlbHMiLCJfY29weVRpbGVzUGl4ZWxzVG9PbmVQaXhlbHNBcnJheSIsImNvcHlUaWxlc1BpeGVsc1RvT25lUGl4ZWxzQXJyYXkiLCJyZXN1bHRSZWdpb24iLCJmaXJzdFRpbGUiLCJJbWFnZURhdGEiLCJieXRlc1BlclBpeGVsIiwicmdiYUltYWdlU3RyaWRlIiwidGlsZVJpZ2h0IiwidGlsZUJvdHRvbSIsImludGVyc2VjdGlvbkxlZnQiLCJpbnRlcnNlY3Rpb25Ub3AiLCJpbnRlcnNlY3Rpb25SaWdodCIsImludGVyc2VjdGlvbkJvdHRvbSIsImludGVyc2VjdGlvbldpZHRoIiwiaW50ZXJzZWN0aW9uSGVpZ2h0IiwidGlsZU9mZnNldFhQaXhlbHMiLCJ0aWxlT2Zmc2V0WVBpeGVscyIsInRpbGVPZmZzZXRCeXRlcyIsIl9jb3B5VGlsZSIsImNvcHlUaWxlIiwidGFyZ2V0SW1hZ2UiLCJ0YXJnZXRJbWFnZVN0YXJ0T2Zmc2V0IiwidGFyZ2V0SW1hZ2VTdHJpZGUiLCJyT2Zmc2V0IiwiZ09mZnNldCIsImJPZmZzZXQiLCJwaXhlbHNPZmZzZXQiLCJ0YXJnZXRJbWFnZUluZGV4IiwicGl4ZWwiLCJ0YXJnZXRJbWFnZVN0YXJ0TGluZSIsIklERU5USVRZX01BVFJJWCIsIkZPTlRfSURFTlRJVFlfTUFUUklYIiwiTmF0aXZlSW1hZ2VEZWNvZGluZyIsIk5PTkUiLCJERUNPREUiLCJESVNQTEFZIiwiUGVybWlzc2lvbkZsYWciLCJQUklOVCIsIk1PRElGWV9DT05URU5UUyIsIkNPUFkiLCJNT0RJRllfQU5OT1RBVElPTlMiLCJGSUxMX0lOVEVSQUNUSVZFX0ZPUk1TIiwiQ09QWV9GT1JfQUNDRVNTSUJJTElUWSIsIkFTU0VNQkxFIiwiUFJJTlRfSElHSF9RVUFMSVRZIiwiVGV4dFJlbmRlcmluZ01vZGUiLCJGSUxMIiwiU1RST0tFIiwiRklMTF9TVFJPS0UiLCJJTlZJU0lCTEUiLCJGSUxMX0FERF9UT19QQVRIIiwiU1RST0tFX0FERF9UT19QQVRIIiwiRklMTF9TVFJPS0VfQUREX1RPX1BBVEgiLCJBRERfVE9fUEFUSCIsIkZJTExfU1RST0tFX01BU0siLCJBRERfVE9fUEFUSF9GTEFHIiwiSW1hZ2VLaW5kIiwiR1JBWVNDQUxFXzFCUFAiLCJSR0JfMjRCUFAiLCJSR0JBXzMyQlBQIiwiQW5ub3RhdGlvblR5cGUiLCJURVhUIiwiTElOSyIsIkZSRUVURVhUIiwiTElORSIsIlNRVUFSRSIsIkNJUkNMRSIsIlBPTFlHT04iLCJQT0xZTElORSIsIkhJR0hMSUdIVCIsIlVOREVSTElORSIsIlNRVUlHR0xZIiwiU1RSSUtFT1VUIiwiU1RBTVAiLCJDQVJFVCIsIklOSyIsIlBPUFVQIiwiRklMRUFUVEFDSE1FTlQiLCJTT1VORCIsIk1PVklFIiwiV0lER0VUIiwiU0NSRUVOIiwiUFJJTlRFUk1BUksiLCJUUkFQTkVUIiwiV0FURVJNQVJLIiwiVEhSRUVEIiwiUkVEQUNUIiwiQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlIiwiTUFSS0VEIiwiUkVWSUVXIiwiQW5ub3RhdGlvbk1hcmtlZFN0YXRlIiwiVU5NQVJLRUQiLCJBbm5vdGF0aW9uUmV2aWV3U3RhdGUiLCJBQ0NFUFRFRCIsIlJFSkVDVEVEIiwiQ0FOQ0VMTEVEIiwiQ09NUExFVEVEIiwiQW5ub3RhdGlvblJlcGx5VHlwZSIsIkdST1VQIiwiUkVQTFkiLCJBbm5vdGF0aW9uRmxhZyIsIkhJRERFTiIsIk5PWk9PTSIsIk5PUk9UQVRFIiwiTk9WSUVXIiwiUkVBRE9OTFkiLCJMT0NLRUQiLCJUT0dHTEVOT1ZJRVciLCJMT0NLRURDT05URU5UUyIsIkFubm90YXRpb25GaWVsZEZsYWciLCJSRVFVSVJFRCIsIk5PRVhQT1JUIiwiTVVMVElMSU5FIiwiUEFTU1dPUkQiLCJOT1RPR0dMRVRPT0ZGIiwiUkFESU8iLCJQVVNIQlVUVE9OIiwiQ09NQk8iLCJFRElUIiwiU09SVCIsIkZJTEVTRUxFQ1QiLCJNVUxUSVNFTEVDVCIsIkRPTk9UU1BFTExDSEVDSyIsIkRPTk9UU0NST0xMIiwiQ09NQiIsIlJJQ0hURVhUIiwiUkFESU9TSU5VTklTT04iLCJDT01NSVRPTlNFTENIQU5HRSIsIkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUiLCJTT0xJRCIsIkRBU0hFRCIsIkJFVkVMRUQiLCJJTlNFVCIsIlN0cmVhbVR5cGUiLCJVTktOT1dOIiwiRkxBVEUiLCJMWlciLCJEQ1QiLCJKUFgiLCJKQklHIiwiQTg1IiwiQUhYIiwiQ0NGIiwiUkxYIiwiRm9udFR5cGUiLCJUWVBFMSIsIlRZUEUxQyIsIkNJREZPTlRUWVBFMCIsIkNJREZPTlRUWVBFMEMiLCJUUlVFVFlQRSIsIkNJREZPTlRUWVBFMiIsIlRZUEUzIiwiT1BFTlRZUEUiLCJUWVBFMCIsIk1NVFlQRTEiLCJWZXJib3NpdHlMZXZlbCIsIkVSUk9SUyIsIldBUk5JTkdTIiwiSU5GT1MiLCJDTWFwQ29tcHJlc3Npb25UeXBlIiwiQklOQVJZIiwiU1RSRUFNIiwiT1BTIiwiZGVwZW5kZW5jeSIsInNldExpbmVXaWR0aCIsInNldExpbmVDYXAiLCJzZXRMaW5lSm9pbiIsInNldE1pdGVyTGltaXQiLCJzZXREYXNoIiwic2V0UmVuZGVyaW5nSW50ZW50Iiwic2V0RmxhdG5lc3MiLCJzZXRHU3RhdGUiLCJzYXZlIiwicmVzdG9yZSIsIm1vdmVUbyIsImxpbmVUbyIsImN1cnZlVG8iLCJjdXJ2ZVRvMiIsImN1cnZlVG8zIiwiY2xvc2VQYXRoIiwicmVjdGFuZ2xlIiwic3Ryb2tlIiwiY2xvc2VTdHJva2UiLCJmaWxsIiwiZW9GaWxsIiwiZmlsbFN0cm9rZSIsImVvRmlsbFN0cm9rZSIsImNsb3NlRmlsbFN0cm9rZSIsImNsb3NlRU9GaWxsU3Ryb2tlIiwiZW5kUGF0aCIsImNsaXAiLCJlb0NsaXAiLCJiZWdpblRleHQiLCJlbmRUZXh0Iiwic2V0Q2hhclNwYWNpbmciLCJzZXRXb3JkU3BhY2luZyIsInNldEhTY2FsZSIsInNldExlYWRpbmciLCJzZXRGb250Iiwic2V0VGV4dFJlbmRlcmluZ01vZGUiLCJzZXRUZXh0UmlzZSIsIm1vdmVUZXh0Iiwic2V0TGVhZGluZ01vdmVUZXh0Iiwic2V0VGV4dE1hdHJpeCIsIm5leHRMaW5lIiwic2hvd1RleHQiLCJzaG93U3BhY2VkVGV4dCIsIm5leHRMaW5lU2hvd1RleHQiLCJuZXh0TGluZVNldFNwYWNpbmdTaG93VGV4dCIsInNldENoYXJXaWR0aCIsInNldENoYXJXaWR0aEFuZEJvdW5kcyIsInNldFN0cm9rZUNvbG9yU3BhY2UiLCJzZXRGaWxsQ29sb3JTcGFjZSIsInNldFN0cm9rZUNvbG9yIiwic2V0U3Ryb2tlQ29sb3JOIiwic2V0RmlsbENvbG9yIiwic2V0RmlsbENvbG9yTiIsInNldFN0cm9rZUdyYXkiLCJzZXRGaWxsR3JheSIsInNldFN0cm9rZVJHQkNvbG9yIiwic2V0RmlsbFJHQkNvbG9yIiwic2V0U3Ryb2tlQ01ZS0NvbG9yIiwic2V0RmlsbENNWUtDb2xvciIsInNoYWRpbmdGaWxsIiwiYmVnaW5JbmxpbmVJbWFnZSIsImJlZ2luSW1hZ2VEYXRhIiwiZW5kSW5saW5lSW1hZ2UiLCJwYWludFhPYmplY3QiLCJtYXJrUG9pbnQiLCJtYXJrUG9pbnRQcm9wcyIsImJlZ2luTWFya2VkQ29udGVudCIsImJlZ2luTWFya2VkQ29udGVudFByb3BzIiwiZW5kTWFya2VkQ29udGVudCIsImJlZ2luQ29tcGF0IiwiZW5kQ29tcGF0IiwicGFpbnRGb3JtWE9iamVjdEJlZ2luIiwicGFpbnRGb3JtWE9iamVjdEVuZCIsImJlZ2luR3JvdXAiLCJlbmRHcm91cCIsImJlZ2luQW5ub3RhdGlvbnMiLCJlbmRBbm5vdGF0aW9ucyIsImJlZ2luQW5ub3RhdGlvbiIsImVuZEFubm90YXRpb24iLCJwYWludEpwZWdYT2JqZWN0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXAiLCJwYWludEltYWdlWE9iamVjdCIsInBhaW50SW5saW5lSW1hZ2VYT2JqZWN0IiwicGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cCIsInBhaW50SW1hZ2VYT2JqZWN0UmVwZWF0IiwicGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0IiwicGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrIiwiY29uc3RydWN0UGF0aCIsIlVOU1VQUE9SVEVEX0ZFQVRVUkVTIiwidW5rbm93biIsImZvcm1zIiwiamF2YVNjcmlwdCIsInNtYXNrIiwic2hhZGluZ1BhdHRlcm4iLCJmb250IiwiUGFzc3dvcmRSZXNwb25zZXMiLCJORUVEX1BBU1NXT1JEIiwiSU5DT1JSRUNUX1BBU1NXT1JEIiwidmVyYm9zaXR5Iiwic2V0VmVyYm9zaXR5TGV2ZWwiLCJpc0ludGVnZXIiLCJnZXRWZXJib3NpdHlMZXZlbCIsImluZm8iLCJ3YXJuIiwidW5yZWFjaGFibGUiLCJhc3NlcnQiLCJjb25kIiwiaXNTYW1lT3JpZ2luIiwib3RoZXJVcmwiLCJiYXNlIiwiVVJMIiwib3JpZ2luIiwiX2lzVmFsaWRQcm90b2NvbCIsInByb3RvY29sIiwiY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCIsImFic29sdXRlVXJsIiwiZXgiLCJzaGFkb3ciLCJwcm9wIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiUGFzc3dvcmRFeGNlcHRpb24iLCJQYXNzd29yZEV4Y2VwdGlvbkNsb3N1cmUiLCJVbmtub3duRXJyb3JFeGNlcHRpb24iLCJVbmtub3duRXJyb3JFeGNlcHRpb25DbG9zdXJlIiwiZGV0YWlscyIsIkludmFsaWRQREZFeGNlcHRpb24iLCJJbnZhbGlkUERGRXhjZXB0aW9uQ2xvc3VyZSIsIk1pc3NpbmdQREZFeGNlcHRpb24iLCJNaXNzaW5nUERGRXhjZXB0aW9uQ2xvc3VyZSIsIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiIsIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbkNsb3N1cmUiLCJGb3JtYXRFcnJvciIsIkZvcm1hdEVycm9yQ2xvc3VyZSIsIkFib3J0RXhjZXB0aW9uIiwiQWJvcnRFeGNlcHRpb25DbG9zdXJlIiwiTnVsbENoYXJhY3RlcnNSZWdFeHAiLCJyZW1vdmVOdWxsQ2hhcmFjdGVycyIsInN0ciIsInJlcGxhY2UiLCJieXRlc1RvU3RyaW5nIiwiTUFYX0FSR1VNRU5UX0NPVU5UIiwiYXBwbHkiLCJzdHJCdWYiLCJjaHVua0VuZCIsInN0cmluZ1RvQnl0ZXMiLCJjaGFyQ29kZUF0IiwiYXJyYXlCeXRlTGVuZ3RoIiwiYXJyIiwiYXJyYXlzVG9CeXRlcyIsInJlc3VsdExlbmd0aCIsIml0ZW0iLCJpdGVtTGVuZ3RoIiwic3RyaW5nMzIiLCJsb2cyIiwicmVhZEludDgiLCJyZWFkVWludDE2IiwicmVhZFVpbnQzMiIsImlzTGl0dGxlRW5kaWFuIiwiYnVmZmVyOCIsInZpZXczMiIsImlzRXZhbFN1cHBvcnRlZCIsIkZ1bmN0aW9uIiwicmdiQnVmIiwiVXRpbCIsIm0xIiwibTIiLCJtIiwieHQiLCJ5dCIsImQiLCJwMSIsImFwcGx5VHJhbnNmb3JtIiwicDIiLCJwMyIsInA0IiwidHJhbnNwb3NlIiwiYSIsImZpcnN0Iiwic2Vjb25kIiwic3FydCIsInN4Iiwic3kiLCJyZWN0IiwicmVjdDEiLCJyZWN0MiIsImNvbXBhcmUiLCJvcmRlcmVkWCIsInNvcnQiLCJvcmRlcmVkWSIsIm5vcm1hbGl6ZVJlY3QiLCJQREZTdHJpbmdUcmFuc2xhdGVUYWJsZSIsInN0cmluZ1RvUERGU3RyaW5nIiwic3RyaW5nVG9VVEY4U3RyaW5nIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiZXNjYXBlIiwidXRmOFN0cmluZ1RvU3RyaW5nIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc0VtcHR5T2JqIiwiaXNCb29sIiwiaXNOdW0iLCJpc1N0cmluZyIsImlzQXJyYXlCdWZmZXIiLCJpc0FycmF5RXF1YWwiLCJhcnIxIiwiYXJyMiIsImV2ZXJ5IiwiZWxlbWVudCIsImlzU3BhY2UiLCJjaCIsImNyZWF0ZVByb21pc2VDYXBhYmlsaXR5IiwiY2FwYWJpbGl0eSIsImlzU2V0dGxlZCIsInByb21pc2UiLCJyZWFzb24iLCJjcmVhdGVPYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkxDbG9zdXJlIiwiZGlnaXRzIiwiY29udGVudFR5cGUiLCJmb3JjZURhdGFTY2hlbWEiLCJibG9iIiwiQmxvYiIsImIxIiwiYjIiLCJiMyIsImQxIiwiZDIiLCJkMyIsImQ0IiwiUmVhZGFibGVTdHJlYW0iLCJRZVRhYmxlIiwicWUiLCJubXBzIiwibmxwcyIsInN3aXRjaEZsYWciLCJicCIsImNoaWdoIiwiY2xvdyIsImJ5dGVJbiIsImN0IiwiY3hfaW5kZXgiLCJjeF9tcHMiLCJxZVRhYmxlSWN4IiwicWVJY3giLCJfY29udGV4dFBvb2wiLCJpbWFnZSIsImJvdW5kc1RpbGVzWCIsImNvZWZmcyIsImltYWdlVGlsZUluZGV4IiwiaW1hZ2VUaWxlWCIsImltYWdlVGlsZVkiLCJpbkJvdW5kc1RpbGVYIiwiaW5Cb3VuZHNUaWxlWSIsImluQm91bmRzVGlsZUluZGV4Il0sIm1hcHBpbmdzIjoiOztRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQSxLQUFLO1FBQ0w7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7UUFFQTtRQUNBOzs7Ozs7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QUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQW5CYyxFQW9CZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXBCYyxFQXFCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXJCYyxFQXNCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXRCYyxFQXVCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXZCYyxFQXdCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXhCYyxFQXlCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXpCYyxFQTBCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTFCYyxFQTJCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTNCYyxFQTRCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTVCYyxFQTZCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTdCYyxFQThCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTlCYyxFQStCZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQS9CYyxFQWdDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQWhDYyxFQWlDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQWpDYyxFQWtDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQWxDYyxFQW1DZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQW5DYyxFQW9DZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXBDYyxFQXFDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXJDYyxFQXNDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXRDYyxFQXVDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXZDYyxFQXdDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXhDYyxFQXlDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQXpDYyxFQTBDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTFDYyxFQTJDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTNDYyxFQTRDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTVDYyxFQTZDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTdDYyxFQThDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQTlDYyxFQStDZCxFQUFFSCxJQUFJLE1BQU4sRUFBY0MsTUFBTSxFQUFwQixFQUF3QkMsTUFBTSxFQUE5QixFQUFrQ0MsWUFBWSxDQUE5QyxFQS9DYyxDQUFoQjs7QUFrREE7Ozs7Ozs7Ozs7SUFTTTV5RCxpQjtBQUNKO0FBQ0EsNkJBQVlwVyxJQUFaLEVBQWtCaUMsS0FBbEIsRUFBeUJDLEdBQXpCLEVBQThCO0FBQUE7O0FBQzVCLFNBQUtsQyxJQUFMLEdBQVlBLElBQVo7QUFDQSxTQUFLaXBFLEVBQUwsR0FBVWhuRSxLQUFWO0FBQ0EsU0FBS29FLE9BQUwsR0FBZW5FLEdBQWY7O0FBRUEsU0FBS2duRSxLQUFMLEdBQWFscEUsS0FBS2lDLEtBQUwsQ0FBYjtBQUNBLFNBQUtrbkUsSUFBTCxHQUFZLENBQVo7O0FBRUEsU0FBS0MsTUFBTDs7QUFFQSxTQUFLRixLQUFMLEdBQWUsS0FBS0EsS0FBTCxJQUFjLENBQWYsR0FBb0IsTUFBckIsR0FBaUMsS0FBS0MsSUFBTCxJQUFhLENBQWQsR0FBbUIsSUFBaEU7QUFDQSxTQUFLQSxJQUFMLEdBQWEsS0FBS0EsSUFBTCxJQUFhLENBQWQsR0FBbUIsTUFBL0I7QUFDQSxTQUFLRSxFQUFMLElBQVcsQ0FBWDtBQUNBLFNBQUsvRCxDQUFMLEdBQVMsTUFBVDtBQUNEOztBQUVEOzs7Ozs2QkFDUztBQUNQLFVBQU10bEUsT0FBTyxLQUFLQSxJQUFsQjtBQUNBLFVBQUlpcEUsS0FBSyxLQUFLQSxFQUFkOztBQUVBLFVBQUlqcEUsS0FBS2lwRSxFQUFMLE1BQWEsSUFBakIsRUFBdUI7QUFDckIsWUFBSWpwRSxLQUFLaXBFLEtBQUssQ0FBVixJQUFlLElBQW5CLEVBQXlCO0FBQ3ZCLGVBQUtFLElBQUwsSUFBYSxNQUFiO0FBQ0EsZUFBS0UsRUFBTCxHQUFVLENBQVY7QUFDRCxTQUhELE1BR087QUFDTEo7QUFDQSxlQUFLRSxJQUFMLElBQWNucEUsS0FBS2lwRSxFQUFMLEtBQVksQ0FBMUI7QUFDQSxlQUFLSSxFQUFMLEdBQVUsQ0FBVjtBQUNBLGVBQUtKLEVBQUwsR0FBVUEsRUFBVjtBQUNEO0FBQ0YsT0FWRCxNQVVPO0FBQ0xBO0FBQ0EsYUFBS0UsSUFBTCxJQUFhRixLQUFLLEtBQUs1aUUsT0FBVixHQUFxQnJHLEtBQUtpcEUsRUFBTCxLQUFZLENBQWpDLEdBQXNDLE1BQW5EO0FBQ0EsYUFBS0ksRUFBTCxHQUFVLENBQVY7QUFDQSxhQUFLSixFQUFMLEdBQVVBLEVBQVY7QUFDRDtBQUNELFVBQUksS0FBS0UsSUFBTCxHQUFZLE1BQWhCLEVBQXdCO0FBQ3RCLGFBQUtELEtBQUwsSUFBZSxLQUFLQyxJQUFMLElBQWEsRUFBNUI7QUFDQSxhQUFLQSxJQUFMLElBQWEsTUFBYjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7NEJBQ1FwdEQsUSxFQUFVM0UsRyxFQUFLO0FBQ3JCO0FBQ0E7QUFDQSxVQUFJa3lELFdBQVd2dEQsU0FBUzNFLEdBQVQsS0FBaUIsQ0FBaEM7QUFBQSxVQUFtQ215RCxTQUFTeHRELFNBQVMzRSxHQUFULElBQWdCLENBQTVEO0FBQ0EsVUFBTW95RCxhQUFhWixRQUFRVSxRQUFSLENBQW5CO0FBQ0EsVUFBTUcsUUFBUUQsV0FBV1gsRUFBekI7QUFDQSxVQUFJOUQsVUFBSjtBQUNBLFVBQUlPLElBQUksS0FBS0EsQ0FBTCxHQUFTbUUsS0FBakI7O0FBRUEsVUFBSSxLQUFLUCxLQUFMLEdBQWFPLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBSW5FLElBQUltRSxLQUFSLEVBQWU7QUFDYm5FLGNBQUltRSxLQUFKO0FBQ0ExRSxjQUFJd0UsTUFBSjtBQUNBRCxxQkFBV0UsV0FBV1YsSUFBdEI7QUFDRCxTQUpELE1BSU87QUFDTHhELGNBQUltRSxLQUFKO0FBQ0ExRSxjQUFJLElBQUl3RSxNQUFSO0FBQ0EsY0FBSUMsV0FBV1IsVUFBWCxLQUEwQixDQUE5QixFQUFpQztBQUMvQk8scUJBQVN4RSxDQUFUO0FBQ0Q7QUFDRHVFLHFCQUFXRSxXQUFXVCxJQUF0QjtBQUNEO0FBQ0YsT0FkRCxNQWNPO0FBQ0wsYUFBS0csS0FBTCxJQUFjTyxLQUFkO0FBQ0EsWUFBSSxDQUFDbkUsSUFBSSxNQUFMLE1BQWlCLENBQXJCLEVBQXdCO0FBQ3RCLGVBQUtBLENBQUwsR0FBU0EsQ0FBVDtBQUNBLGlCQUFPaUUsTUFBUDtBQUNEO0FBQ0Q7QUFDQSxZQUFJakUsSUFBSW1FLEtBQVIsRUFBZTtBQUNiMUUsY0FBSSxJQUFJd0UsTUFBUjtBQUNBLGNBQUlDLFdBQVdSLFVBQVgsS0FBMEIsQ0FBOUIsRUFBaUM7QUFDL0JPLHFCQUFTeEUsQ0FBVDtBQUNEO0FBQ0R1RSxxQkFBV0UsV0FBV1QsSUFBdEI7QUFDRCxTQU5ELE1BTU87QUFDTGhFLGNBQUl3RSxNQUFKO0FBQ0FELHFCQUFXRSxXQUFXVixJQUF0QjtBQUNEO0FBQ0Y7QUFDRDtBQUNBLFNBQUc7QUFDRCxZQUFJLEtBQUtPLEVBQUwsS0FBWSxDQUFoQixFQUFtQjtBQUNqQixlQUFLRCxNQUFMO0FBQ0Q7O0FBRUQ5RCxjQUFNLENBQU47QUFDQSxhQUFLNEQsS0FBTCxHQUFlLEtBQUtBLEtBQUwsSUFBYyxDQUFmLEdBQW9CLE1BQXJCLEdBQWlDLEtBQUtDLElBQUwsSUFBYSxFQUFkLEdBQW9CLENBQWpFO0FBQ0EsYUFBS0EsSUFBTCxHQUFhLEtBQUtBLElBQUwsSUFBYSxDQUFkLEdBQW1CLE1BQS9CO0FBQ0EsYUFBS0UsRUFBTDtBQUNELE9BVEQsUUFTUyxDQUFDL0QsSUFBSSxNQUFMLE1BQWlCLENBVDFCO0FBVUEsV0FBS0EsQ0FBTCxHQUFTQSxDQUFUOztBQUVBdnBELGVBQVMzRSxHQUFULElBQWdCa3lELFlBQVksQ0FBWixHQUFnQkMsTUFBaEM7QUFDQSxhQUFPeEUsQ0FBUDtBQUNEOzs7Ozs7UUFJRDN1RCxpQixHQUFBQSxpQjs7Ozs7OztBQ3RMVzs7QUFFYnppQixPQUFPQyxPQUFQLEdBQWlCc3VCLHFCQUFqQjs7QUFFQSxJQUFJaEIsc0JBQXNCbHFCLG1CQUFPQSxDQUFDLENBQVIsQ0FBMUI7O0FBRUEsU0FBU2tyQixxQkFBVCxHQUFpQztBQUM3QixTQUFLd25ELFlBQUwsR0FBb0IsSUFBSXhvRCxtQkFBSixFQUFwQjtBQUNIOztBQUVEOzs7O0FBSUFnQixzQkFBc0I1aUIsU0FBdEIsQ0FBZ0MyQyxLQUFoQyxHQUF3QyxTQUFTQSxLQUFULENBQWVqQyxJQUFmLEVBQXFCO0FBQ3pELFFBQUlzdUIsT0FBTyxJQUFYO0FBQ0EsV0FBTyxJQUFJd1ksT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBa0JDLE1BQWxCLEVBQTBCO0FBQ3pDLFlBQUkyaUMsUUFBUXI3QyxLQUFLbzdDLFlBQUwsQ0FBa0JDLEtBQTlCO0FBQ0EsWUFBSTluRCxpQkFBaUJ5TSxLQUFLbzdDLFlBQUwsQ0FBa0Jub0QsVUFBbEIsQ0FBNkJ2aEIsS0FBS3doQixpQkFBbEMsQ0FBckI7O0FBRUEsWUFBSW5mLGdCQUFnQjtBQUNoQnlILGtCQUFROUosS0FBS3luQixjQUFMLENBQW9Ca0MsT0FEWjtBQUVoQjlmLGlCQUFRN0osS0FBS3luQixjQUFMLENBQW9CbUMsT0FGWjtBQUdoQjdmLG1CQUFRL0osS0FBS3luQixjQUFMLENBQW9Ca0MsT0FBcEIsR0FBOEIzcEIsS0FBS3luQixjQUFMLENBQW9CbnBCLEtBSDFDO0FBSWhCMEwsb0JBQVFoSyxLQUFLeW5CLGNBQUwsQ0FBb0JtQyxPQUFwQixHQUE4QjVwQixLQUFLeW5CLGNBQUwsQ0FBb0JscEI7QUFKMUMsU0FBcEI7O0FBT0EsWUFBSW1wQixjQUFjMW5CLEtBQUswbkIsV0FBdkI7QUFDQSxZQUFJa2lELGVBQWU1cEUsS0FBSzJuQixXQUFMLENBQWlCOGxCLGlCQUFqQixHQUFxQ3p0QyxLQUFLMm5CLFdBQUwsQ0FBaUIybEIsUUFBekU7QUFDQSxZQUFJQSxXQUFXdHRDLEtBQUsybkIsV0FBTCxDQUFpQjJsQixRQUFoQztBQUNBLFlBQUlDLFdBQVd2dEMsS0FBSzJuQixXQUFMLENBQWlCNGxCLFFBQWhDOztBQUVBLGFBQUssSUFBSWxxQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlyRCxLQUFLb29CLG9CQUFMLENBQTBCam9CLE1BQTlDLEVBQXNELEVBQUVrRCxDQUF4RCxFQUEyRDtBQUN2RCxnQkFBSXdtRSxTQUFTN3BFLEtBQUtvb0Isb0JBQUwsQ0FBMEIva0IsQ0FBMUIsQ0FBYjs7QUFFQSxnQkFBSXltRSxpQkFBaUJELE9BQU8va0QsR0FBUCxDQUFXMW9CLFNBQWhDO0FBQ0EsZ0JBQUkydEUsYUFBYUQsaUJBQWlCcGlELFdBQWxDO0FBQ0EsZ0JBQUlzaUQsYUFBYTkrRCxLQUFLaUMsS0FBTCxDQUFXMjhELGlCQUFpQnBpRCxXQUE1QixDQUFqQjtBQUNBLGdCQUFJdWlELGdCQUFnQkYsYUFBYXo4QixRQUFqQztBQUNBLGdCQUFJNDhCLGdCQUFnQkYsYUFBYXo4QixRQUFqQztBQUNBLGdCQUFJNDhCLG9CQUFvQkYsZ0JBQWlCQyxnQkFBZ0JOLFlBQXpEOztBQUVBRCxrQkFBTXJnRSx1QkFBTixDQUNJdVksY0FESixFQUVJZ29ELE9BQU96Z0UsWUFGWCxFQUdJK2dFLGlCQUhKLEVBSUlOLE9BQU8va0QsR0FBUCxDQUFXem9CLFNBSmYsRUFLSXd0RSxPQUFPL2tELEdBQVAsQ0FBV3lDLGVBTGYsRUFNSXNpRCxPQUFPL2tELEdBQVAsQ0FBVzBDLGtDQU5mO0FBT0g7O0FBRURtaUQsY0FBTTlpRSxNQUFOLENBQWFnYixjQUFiLEVBQTZCLEVBQUV4ZixlQUFlQSxhQUFqQixFQUE3Qjs7QUFFQSxZQUFJaUssU0FBU2dpQixLQUFLeWhDLGdDQUFMLENBQXNDNFosTUFBTXJpRSxLQUE1QyxFQUFtRGpGLGFBQW5ELEVBQWtFc25FLE1BQU03bkUsZUFBeEUsQ0FBYjtBQUNBaWxDLGdCQUFRejZCLE1BQVI7QUFDSCxLQXZDTSxDQUFQO0FBd0NILENBMUNEOztBQTRDQTs7Ozs7O0FBTUE0VixzQkFBc0I1aUIsU0FBdEIsQ0FBZ0N5d0QsZ0NBQWhDLEdBQ0ksU0FBU0MsK0JBQVQsQ0FBeUMxb0QsS0FBekMsRUFBZ0Qyb0QsWUFBaEQsRUFBOERudUQsZUFBOUQsRUFBK0U7O0FBRS9FLFFBQUlvdUQsWUFBWTVvRCxNQUFNLENBQU4sQ0FBaEI7QUFDQSxRQUFJaEosUUFBUTJ4RCxhQUFhbG1ELEtBQWIsR0FBcUJrbUQsYUFBYW5tRCxJQUE5QztBQUNBLFFBQUl2TCxTQUFTMHhELGFBQWFqbUQsTUFBYixHQUFzQmltRCxhQUFhcG1ELEdBQWhEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBSXlDLFNBQVMsSUFBSTZqRCxTQUFKLENBQWM3eEQsS0FBZCxFQUFxQkMsTUFBckIsQ0FBYjs7QUFFQSxRQUFJNnhELGdCQUFnQixDQUFwQixDQWpCK0UsQ0FpQnhEO0FBQ3ZCLFFBQUlDLGtCQUFrQi94RCxRQUFROHhELGFBQTlCLENBbEIrRSxDQWtCbEM7O0FBRTdDLFFBQUloMEQsWUFBWSxDQUFoQjs7QUFFQTs7QUFFQSxTQUFLLElBQUlpSCxJQUFJLENBQWIsRUFBZ0JBLElBQUlpRSxNQUFNbkgsTUFBMUIsRUFBa0MsRUFBRWtELENBQXBDLEVBQXVDO0FBQ25DLFlBQUlpdEQsWUFBWWhwRCxNQUFNakUsQ0FBTixFQUFTeUcsSUFBVCxHQUFnQnhDLE1BQU1qRSxDQUFOLEVBQVMvRSxLQUF6QztBQUNBLFlBQUlpeUQsYUFBYWpwRCxNQUFNakUsQ0FBTixFQUFTd0csR0FBVCxHQUFldkMsTUFBTWpFLENBQU4sRUFBUzlFLE1BQXpDOztBQUVBLFlBQUlpeUQsbUJBQW1CdGxELEtBQUtFLEdBQUwsQ0FBUzZrRCxhQUFhbm1ELElBQXRCLEVBQTRCeEMsTUFBTWpFLENBQU4sRUFBU3lHLElBQXJDLENBQXZCO0FBQ0EsWUFBSTJtRCxrQkFBa0J2bEQsS0FBS0UsR0FBTCxDQUFTNmtELGFBQWFwbUQsR0FBdEIsRUFBMkJ2QyxNQUFNakUsQ0FBTixFQUFTd0csR0FBcEMsQ0FBdEI7QUFDQSxZQUFJNm1ELG9CQUFvQnhsRCxLQUFLQyxHQUFMLENBQVM4a0QsYUFBYWxtRCxLQUF0QixFQUE2QnVtRCxTQUE3QixDQUF4QjtBQUNBLFlBQUlLLHFCQUFxQnpsRCxLQUFLQyxHQUFMLENBQVM4a0QsYUFBYWptRCxNQUF0QixFQUE4QnVtRCxVQUE5QixDQUF6Qjs7QUFFQSxZQUFJSyxvQkFBb0JGLG9CQUFvQkYsZ0JBQTVDO0FBQ0EsWUFBSUsscUJBQXFCRixxQkFBcUJGLGVBQTlDOztBQUVBLFlBQUlELHFCQUFxQmxwRCxNQUFNakUsQ0FBTixFQUFTeUcsSUFBOUIsSUFDQTJtRCxvQkFBb0JucEQsTUFBTWpFLENBQU4sRUFBU3dHLEdBRDdCLElBRUErbUQsc0JBQXNCdHBELE1BQU1qRSxDQUFOLEVBQVMvRSxLQUYvQixJQUdBdXlELHVCQUF1QnZwRCxNQUFNakUsQ0FBTixFQUFTOUUsTUFIcEMsRUFHNEM7O0FBRXhDLGtCQUFNLDJCQUFOO0FBQ0g7O0FBRUQsWUFBSXV5RCxvQkFBb0JOLG1CQUFtQlAsYUFBYW5tRCxJQUF4RDtBQUNBLFlBQUlpbkQsb0JBQW9CTixrQkFBa0JSLGFBQWFwbUQsR0FBdkQ7O0FBRUEsWUFBSW1uRCxrQkFDQUYsb0JBQW9CVixhQUFwQixHQUNBVyxvQkFBb0JWLGVBRnhCOztBQUlBLGFBQUtZLFNBQUwsQ0FDSTNrRCxPQUFPdE0sSUFEWCxFQUNpQnNILE1BQU1qRSxDQUFOLENBRGpCLEVBQzJCMnRELGVBRDNCLEVBQzRDWCxlQUQ1QyxFQUM2RHZ1RCxlQUQ3RDtBQUVIOztBQUVELFdBQU93SyxNQUFQO0FBQ0gsQ0F6REQ7O0FBMkRBOzs7Ozs7OztBQVFBNFYsc0JBQXNCNWlCLFNBQXRCLENBQWdDMnhELFNBQWhDLEdBQTRDLFNBQVNDLFFBQVQsQ0FDeENDLFdBRHdDLEVBQzNCdnVELElBRDJCLEVBQ3JCd3VELHNCQURxQixFQUNHQyxpQkFESCxFQUNzQnZ2RCxlQUR0QixFQUN1Qzs7QUFFL0U7QUFDQSxRQUFJd3ZELFVBQVUsQ0FBZDtBQUNBLFFBQUlDLFVBQVUsQ0FBZDtBQUNBLFFBQUlDLFVBQVUsQ0FBZDtBQUNBLFFBQUlDLGVBQWUsQ0FBbkIsQ0FOK0UsQ0FNekQ7O0FBRXRCO0FBQ0EsUUFBSTNCLFNBQVNsdEQsS0FBS2t0RCxNQUFMLElBQWVsdEQsS0FBSzJWLEtBQWpDOztBQUVBO0FBQ0EsUUFBSXpXLG9CQUFvQnhMLFNBQXhCLEVBQW1DO0FBQy9Cd0wsMEJBQWtCZ3VELE9BQU8zdkQsTUFBUCxJQUFpQnlDLEtBQUt0RSxLQUFMLEdBQWFzRSxLQUFLckUsTUFBbkMsQ0FBbEI7QUFDSDs7QUFFRDtBQUNBLFlBQVF1RCxlQUFSO0FBQ0ksYUFBSyxDQUFMO0FBQ0l5dkQsc0JBQVUsQ0FBVixDQURKLENBQ2lCO0FBQ2JDLHNCQUFVLENBQVY7QUFDQTs7QUFFSixhQUFLLENBQUw7QUFDSUMsMkJBQWUsQ0FBZixDQURKLENBQ3NCO0FBQ2xCOztBQUVKLGFBQUssQ0FBTDtBQUNJQSwyQkFBZSxDQUFmLENBREosQ0FDc0I7QUFDbEI7O0FBRUo7QUFDSSxrQkFBTSxrQ0FBa0MzdkQsZUFBeEMsQ0FmUixDQWVpRTtBQWZqRTs7QUFrQkEsUUFBSTR2RCxtQkFBbUJOLHNCQUF2QixDQW5DK0UsQ0FtQ2hDO0FBQy9DLFFBQUlPLFFBQVEsQ0FBWixDQXBDK0UsQ0FvQ2hFO0FBQ2YsU0FBSyxJQUFJcFosSUFBSSxDQUFiLEVBQWdCQSxJQUFJMzFDLEtBQUtyRSxNQUF6QixFQUFpQyxFQUFFZzZDLENBQW5DLEVBQXNDO0FBQ2xDLFlBQUlxWix1QkFBdUJGLGdCQUEzQixDQURrQyxDQUNXOztBQUU3QyxhQUFLLElBQUlueEMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJM2QsS0FBS3RFLEtBQXpCLEVBQWdDLEVBQUVpaUIsQ0FBbEMsRUFBcUM7QUFDakM0d0Msd0JBQVlPLG1CQUFtQixDQUEvQixJQUFvQzVCLE9BQU82QixRQUFRTCxPQUFmLENBQXBDO0FBQ0FILHdCQUFZTyxtQkFBbUIsQ0FBL0IsSUFBb0M1QixPQUFPNkIsUUFBUUosT0FBZixDQUFwQztBQUNBSix3QkFBWU8sbUJBQW1CLENBQS9CLElBQW9DNUIsT0FBTzZCLFFBQVFILE9BQWYsQ0FBcEM7QUFDQUwsd0JBQVlPLG1CQUFtQixDQUEvQixJQUFvQyxHQUFwQzs7QUFFQUMscUJBQVNGLFlBQVQ7QUFDQUMsZ0NBQW9CLENBQXBCO0FBQ0g7O0FBRURBLDJCQUFtQkUsdUJBQXVCUCxpQkFBMUM7QUFDSDtBQUNKLENBckRELEM7Ozs7Ozs7QUNuSWE7O0FBRWIxOUQsT0FBT0MsT0FBUCxHQUFpQnV1QiwyQkFBakI7O0FBRUEsSUFBSWpCLHNCQUFzQmxxQixtQkFBT0EsQ0FBQyxDQUFSLENBQTFCOztBQUVBLFNBQVNtckIsMkJBQVQsR0FBdUM7QUFDbkMsU0FBS3VuRCxZQUFMLEdBQW9CLElBQUl4b0QsbUJBQUosRUFBcEI7QUFDSDs7QUFFRGlCLDRCQUE0QjdpQixTQUE1QixDQUFzQzJDLEtBQXRDLEdBQThDLFNBQVNBLEtBQVQsQ0FBZWpDLElBQWYsRUFBcUI4a0IsR0FBckIsRUFBMEI7QUFDcEUsUUFBSXdKLE9BQU8sSUFBWDtBQUNBLFdBQU8sSUFBSXdZLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCQyxNQUFsQixFQUEwQjtBQUN6QyxZQUFJMmlDLFFBQVFyN0MsS0FBS283QyxZQUFMLENBQWtCQyxLQUE5QjtBQUNBLFlBQUk5bkQsaUJBQWlCeU0sS0FBS283QyxZQUFMLENBQWtCbm9ELFVBQWxCLENBQTZCdmhCLEtBQUt3aEIsaUJBQWxDLENBQXJCO0FBQ0EsWUFBSXhoQixLQUFLMHJDLGNBQVQsRUFBeUI7QUFDckJpK0Isa0JBQU0xaUUsY0FBTixDQUFxQjRhLGNBQXJCLEVBQXFDN2hCLEtBQUswckMsY0FBMUM7QUFDSDtBQUNELFlBQUkxckMsS0FBS29vQixvQkFBVCxFQUErQjtBQUMzQjtBQUNBLGlCQUFLLElBQUk3bEIsSUFBSSxDQUFiLEVBQWdCQSxJQUFJdkMsS0FBS29vQixvQkFBTCxDQUEwQmpvQixNQUE5QyxFQUFzRCxFQUFFb0MsQ0FBeEQsRUFBMkQ7QUFDdkQsb0JBQUl2RCxXQUFXZ0IsS0FBS29vQixvQkFBTCxDQUEwQjdsQixDQUExQixDQUFmO0FBQ0FvbkUsc0JBQU1yZ0UsdUJBQU4sQ0FDSXVZLGNBREosRUFDb0I3aUIsU0FBU29LLFlBRDdCLEVBQzJDcEssU0FBUzVDLFNBRHBELEVBRUk0QyxTQUFTdUksQ0FGYixFQUVnQnZJLFNBQVMwSSxDQUZ6QixFQUU0QjFJLFNBQVMySSxDQUZyQztBQUdIO0FBQ0o7O0FBRUQsWUFBSXlCLGVBQWV1Z0UsTUFBTWxoRSwwQkFBTixDQUNmb1osY0FEZTtBQUVmLHNCQUFjLENBRkMsRUFHZmlELElBQUl6b0IsU0FIVyxFQUlmeW9CLElBQUl5QyxlQUpXLEVBS2Z6QyxJQUFJMEMsa0NBTFcsQ0FBbkI7O0FBT0F1ZixnQkFBUTtBQUNKamlCLGlCQUFLQSxHQUREO0FBRUoxYiwwQkFBY0EsWUFGVjtBQUdKbWQsd0JBQVl2bUIsS0FBS3VtQjtBQUhiLFNBQVI7QUFLSCxLQTVCTSxDQUFQO0FBNkJILENBL0JELEMiLCJmaWxlIjoid2VianBpcC5kZXYuZGVidWcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCBmY2QzMjVlN2E2MDRlYjYzZjM3NCIsIid1c2Ugc3RyaWN0JztcblxuLy8gSlBFRzIwMDAgY29kZXN0cmVhbSBtYXJrZXJzXG5tb2R1bGUuZXhwb3J0cy5qMmtNYXJrZXJzID0ge1xuICAgIFN0YXJ0T2ZDb2Rlc3RyZWFtOiBbMHhGRiwgMHg0Rl0sIC8vIFNPQ1xuICAgIEltYWdlQW5kVGlsZVNpemU6IFsweEZGLCAweDUxXSwgLy8gU0laXG4gICAgQ29kaW5nU3R5bGVEZWZhdWx0OiBbMHhGRiwgMHg1Ml0sIC8vIENPRFxuICAgIENvZGluZ1N0eWxlQ29tcG9uZW50OiBbMHhGRiwgMHg1M10sIC8vIENPQ1xuICAgIFF1YW50aXphdGlvbkRlZmF1bHQ6IFsweEZGLCAweDVDXSwgLy8gUUNEXG4gICAgUHJvZ3Jlc3Npb25PcmRlckNoYW5nZTogWzB4RkYsIDB4NUZdLCAvLyBQT0NcbiAgICBQYWNrZWRQYWNrZXRIZWFkZXJzSW5NYWluSGVhZGVyOiBbMHhGRiwgMHg2MF0sIC8vIFBQTVxuICAgIFBhY2tlZFBhY2tldEhlYWRlcnNJblRpbGVIZWFkZXI6IFsweEZGLCAweDYxXSwgLy8gUFBUXG4gICAgU3RhcnRPZlRpbGU6IFsweEZGLCAweDkwXSwgLy8gU09UXG4gICAgU3RhcnRPZkRhdGE6IFsweEZGLCAweDkzXSwgLy8gU09EXG4gICAgRW5kT2ZDb2Rlc3RyZWFtOiBbMHhGRiwgMHhEOV0sIC8vIEVPQ1xuICAgIENvbW1lbnQ6IFsweEZGLCAweDY0XSAvLyBDT01cbn07XG5cbi8vIEpQRUcyMDAwIG9mZnNldHNcbm1vZHVsZS5leHBvcnRzLmoya09mZnNldHMgPSB7XG4gICAgTUFSS0VSX1NJWkU6IDIsXG4gICAgTEVOR1RIX0ZJRUxEX1NJWkU6IDIsXG4gICAgXG4gICAgTlVNX0NPTVBPTkVOVFNfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVI6IDM4LFxuICAgIFJFRkVSRU5DRV9HUklEX1NJWkVfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVI6IDZcblxufTtcblxuLy8gSlBJUCBlbmQgb2YgcmVzcG9uc2UgcmVhc29uc1xubW9kdWxlLmV4cG9ydHMuanBpcEVuZE9mUmVzcG9uc2VSZWFzb25zID0ge1xuICAgIElNQUdFX0RPTkUgOiAxLFxuICAgIFdJTkRPV19ET05FIDogMixcbiAgICBXSU5ET1dfQ0hBTkdFIDogMyxcbiAgICBCWVRFX0xJTUlUIDogNCxcbiAgICBRVUFMSVRZX0xJTUlUIDogNSxcbiAgICBTRVNTSU9OX0xJTUlUIDogNixcbiAgICBSRVNQT05TRV9MSU1JVCA6IDcsXG4gICAgTk9OX1NQRUNJRklFRCA6IDhcbn07XG5cbi8vIEpQRUcyMDAwIGV4Y2VwdGlvbnMgKGVycm9ycylcbm1vZHVsZS5leHBvcnRzLmoya0V4Y2VwdGlvbnMgPSB7XG4gICAgVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uOiBmdW5jdGlvbihmZWF0dXJlLCBzdGFuZGFyZFNlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGZlYXR1cmU7XG4gICAgICAgIGlmIChzdGFuZGFyZFNlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gKz0gJyAoc3BlY2lmaWVkIGluIHNlY3Rpb24gJyArIHN0YW5kYXJkU2VjdGlvbiArICcgb2YgcGFydCAxOiBDb3JlIENvZGluZyBTeXN0ZW0gc3RhbmRhcmQpIGlzIG5vdCBzdXBwb3J0ZWQgeWV0JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdKMmsgVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uOiAnICsgdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBQYXJzZUV4Y2VwdGlvbjogZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICBcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdKMmsgUGFyc2VFeGNlcHRpb246ICcgKyB0aGlzLmRlc2NyaXB0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIElsbGVnYWxEYXRhRXhjZXB0aW9uOiBmdW5jdGlvbihpbGxlZ2FsRGF0YURlc2NyaXB0aW9uLCBzdGFuZGFyZFNlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGlsbGVnYWxEYXRhRGVzY3JpcHRpb24gKyAnIChzZWUgc2VjdGlvbiAnICsgc3RhbmRhcmRTZWN0aW9uICsgJyBvZiBwYXJ0IDk6IEludGVyYWN0aXZpdHkgdG9vbHMsIEFQSXMgYW5kIFByb3RvY29scyknO1xuICAgICAgICBcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdKMmsgSWxsZWdhbERhdGFFeGNlcHRpb246ICcgKyB0aGlzLmRlc2NyaXB0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxuLy8gSlBJUCBleGNlcHRpb25zIChlcnJvcnMpXG5tb2R1bGUuZXhwb3J0cy5qcGlwRXhjZXB0aW9ucyA9IHtcbiAgICBVbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb246IGZ1bmN0aW9uKGZlYXR1cmUsIHN0YW5kYXJkU2VjdGlvbikge1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gZmVhdHVyZTtcbiAgICAgICAgaWYgKHN0YW5kYXJkU2VjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiArPSAnIChzcGVjaWZpZWQgaW4gc2VjdGlvbiAnICsgc3RhbmRhcmRTZWN0aW9uICsgJyBvZiBwYXJ0IDk6IEludGVyYWN0aXZpdHkgdG9vbHMsIEFQSXMgYW5kIFByb3RvY29scykgaXMgbm90IHN1cHBvcnRlZCB5ZXQnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0pwaXAgVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uOiAnICsgdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBQYXJzZUV4Y2VwdGlvbjogZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICBcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdKcGlwIFBhcnNlRXhjZXB0aW9uOiAnICsgdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBJbGxlZ2FsRGF0YUV4Y2VwdGlvbjogZnVuY3Rpb24oaWxsZWdhbERhdGFEZXNjcmlwdGlvbiwgc3RhbmRhcmRTZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBpbGxlZ2FsRGF0YURlc2NyaXB0aW9uICsgJyAoc2VlIHNlY3Rpb24gJyArIHN0YW5kYXJkU2VjdGlvbiArICcgb2YgcGFydCA5OiBJbnRlcmFjdGl2aXR5IHRvb2xzLCBBUElzIGFuZCBQcm90b2NvbHMpJztcbiAgICAgICAgXG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnSnBpcCBJbGxlZ2FsRGF0YUV4Y2VwdGlvbjogJyArIHRoaXMuZGVzY3JpcHRpb247XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIFxuICAgIElsbGVnYWxPcGVyYXRpb25FeGNlcHRpb246IGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnSnBpcCBJbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uOiAnICsgdGhpcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgXG4gICAgQXJndW1lbnRFeGNlcHRpb246IGZ1bmN0aW9uKGFyZ3VtZW50TmFtZSwgYXJndW1lbnRWYWx1ZSwgZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9ICdBcmd1bWVudCAnICsgYXJndW1lbnROYW1lICsgJyBoYXMgaW52YWxpZCB2YWx1ZSAnICtcbiAgICAgICAgICAgIGFyZ3VtZW50VmFsdWUgKyAoZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCA/ICcgOicgKyBkZXNjcmlwdGlvbiA6ICcnKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnSnBpcCBBcmd1bWVudEV4Y2VwdGlvbjogJyArIHRoaXMuZGVzY3JpcHRpb247XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgV3JvbmdTdHJlYW1FeGNlcHRpb246IGZ1bmN0aW9uKHJlcXVlc3RlZE9wZXJhdGlvbiwgaXNKUFQpIHtcbiAgICAgICAgdmFyIGNvcnJlY3RTdHJlYW0gPSAnSlBQIChKUElQIFByZWNpbmN0KSc7XG4gICAgICAgIHZhciB3cm9uZ1N0cmVhbSA9ICdKUFQgKEpQSVAgVGlsZS1wYXJ0KSc7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNKUFQpIHtcbiAgICAgICAgICAgIHZhciBzd2FwID0gY29ycmVjdFN0cmVhbTtcbiAgICAgICAgICAgIGNvcnJlY3RTdHJlYW0gPSB3cm9uZ1N0cmVhbTtcbiAgICAgICAgICAgIHdyb25nU3RyZWFtID0gc3dhcDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9ICAgICdTdHJlYW0gdHlwZSBpcyAnICsgd3JvbmdTdHJlYW0gKyAnLCBidXQgJyArIHJlcXVlc3RlZE9wZXJhdGlvbiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyBpcyBhbGxvd2VkIG9ubHkgaW4gJyArIGNvcnJlY3RTdHJlYW0gKyAnIHN0cmVhbSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHRoaXMudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAnSnBpcCBXcm9uZ1N0cmVhbUV4Y2VwdGlvbjogJyArIHRoaXMuZGVzY3JpcHRpb247XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgSW50ZXJuYWxFcnJvckV4Y2VwdGlvbjogZnVuY3Rpb24oZGVzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICBcbiAgICAgICAgdGhpcy50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICdKcGlwIEludGVybmFsRXJyb3JFeGNlcHRpb246ICcgKyB0aGlzLmRlc2NyaXB0aW9uO1xuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufTtcblxuLy8gT3RoZXIgZXhjZXB0aW9uc1xubW9kdWxlLmV4cG9ydHMuajJrRXhjZXB0aW9ucy5VbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24uTmFtZSA9XG4gICAgJ2oya0V4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uJztcbm1vZHVsZS5leHBvcnRzLmoya0V4Y2VwdGlvbnMuUGFyc2VFeGNlcHRpb24uTmFtZSA9XG4gICAgJ2oya0V4Y2VwdGlvbnMuUGFyc2VFeGNlcHRpb24nO1xubW9kdWxlLmV4cG9ydHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbi5OYW1lID1cbiAgICAnajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbic7XG5cbm1vZHVsZS5leHBvcnRzLmpwaXBFeGNlcHRpb25zLlVuc3VwcG9ydGVkRmVhdHVyZUV4Y2VwdGlvbi5OYW1lID1cbiAgICAnanBpcEV4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uJztcbm1vZHVsZS5leHBvcnRzLmpwaXBFeGNlcHRpb25zLlBhcnNlRXhjZXB0aW9uLk5hbWUgPVxuICAgICdqcGlwRXhjZXB0aW9ucy5QYXJzZUV4Y2VwdGlvbic7XG5tb2R1bGUuZXhwb3J0cy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbi5OYW1lID1cbiAgICAnanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24nO1xubW9kdWxlLmV4cG9ydHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbi5OYW1lID1cbiAgICAnanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbic7XG5tb2R1bGUuZXhwb3J0cy5qcGlwRXhjZXB0aW9ucy5Bcmd1bWVudEV4Y2VwdGlvbi5OYW1lID1cbiAgICAnanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24nO1xubW9kdWxlLmV4cG9ydHMuanBpcEV4Y2VwdGlvbnMuV3JvbmdTdHJlYW1FeGNlcHRpb24uTmFtZSA9XG4gICAgJ2pwaXBFeGNlcHRpb25zLldyb25nU3RyZWFtRXhjZXB0aW9uJztcbm1vZHVsZS5leHBvcnRzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24uTmFtZSA9XG4gICAgJ2pwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24nO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9taXNjL2oyay1qcGlwLWdsb2JhbHMuanMiLCIndXNlIHN0cmljdCc7XG4vLyBIYW5kbGVzIFhNTEh0dHAgcmVxdWVzdHMgYW5kIGluZm9ybWF0aW9uPyB0cmFuc2FjdGlvbnNcbnZhciBzaW1wbGVBamF4SGVscGVyICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ3NpbXBsZS1hamF4LWhlbHBlci5qcycgICAgICAgICAgICAgICAgICk7XG52YXIgbXV0dWFsRXhjbHVzaXZlVHJhbnNhY3Rpb25IZWxwZXIgPSByZXF1aXJlKCdtdXR1YWwtZXhjbHVzaXZlLXRyYW5zYWN0aW9uLWhlbHBlci5qcycpO1xuXG4vLyBIYW5kbGVzIHNvbWUgKGNyeXB0aWMpIGJpdHN0cmVhbSBzdHVmZiBhbmQgcGFyc2VzIG1lc3NhZ2UgaGVhZGVyc1xudmFyIGpwaXBDb2RpbmdQYXNzZXNOdW1iZXJQYXJzZXIgPSByZXF1aXJlKCdqcGlwLWNvZGluZy1wYXNzZXMtbnVtYmVyLXBhcnNlci5qcycpO1xudmFyIGpwaXBNZXNzYWdlSGVhZGVyUGFyc2VyICAgICAgPSByZXF1aXJlKCdqcGlwLW1lc3NhZ2UtaGVhZGVyLXBhcnNlci5qcycgICAgICApO1xuXG52YXIgSnBpcENoYW5uZWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLWNoYW5uZWwuanMnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBDb2Rlc3RyZWFtUmVjb25zdHJ1Y3RvciAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1jb2Rlc3RyZWFtLXJlY29uc3RydWN0b3IuanMnICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwQ29kZXN0cmVhbVN0cnVjdHVyZSAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtY29kZXN0cmVhbS1zdHJ1Y3R1cmUuanMnICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcENvbXBvbmVudFN0cnVjdHVyZSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLWNvbXBvbmVudC1zdHJ1Y3R1cmUuanMnICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIENvbXBvc2l0ZUFycmF5ICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnY29tcG9zaXRlLWFycmF5LmpzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwRGF0YWJpblBhcnRzICAgICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtZGF0YWJpbi1wYXJ0cy5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcERhdGFiaW5zU2F2ZXIgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLWRhdGFiaW5zLXNhdmVyLmpzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBGZXRjaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1mZXRjaC5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwRmV0Y2hlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtZmV0Y2hlci5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcEhlYWRlck1vZGlmaWVyICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLWhlYWRlci1tb2RpZmllci5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBJbWFnZURhdGFDb250ZXh0ICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1pbWFnZS1kYXRhLWNvbnRleHQuanMnICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwTGV2ZWxDYWxjdWxhdG9yICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtbGV2ZWwtY2FsY3VsYXRvci5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcE1hcmtlcnNQYXJzZXIgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLW1hcmtlcnMtcGFyc2VyLmpzJyAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBPZmZzZXRzQ2FsY3VsYXRvciAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1vZmZzZXRzLWNhbGN1bGF0b3IuanMnICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwUGFja2V0c0RhdGFDb2xsZWN0b3IgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtcGFja2V0cy1kYXRhLWNvbGxlY3Rvci5qcycgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcFBhcmFtc0NvZGVzdHJlYW1QYXJ0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLXBhcmFtcy1jb2Rlc3RyZWFtLXBhcnQuanMnICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBQYXJhbXNQcmVjaW5jdEl0ZXJhdG9yICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1wYXJhbXMtcHJlY2luY3QtaXRlcmF0b3IuanMnICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwUHJlY2luY3RDb2Rlc3RyZWFtUGFydCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtcHJlY2luY3QtY29kZXN0cmVhbS1wYXJ0LmpzJyAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcFByZWNpbmN0c0l0ZXJhdG9yV2FpdGVyICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLXByZWNpbmN0cy1pdGVyYXRvci13YWl0ZXIuanMnICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBRdWFsaXR5V2FpdGVyICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1xdWFsaXR5LXdhaXRlci5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwUmVxdWVzdFBhcmFtc01vZGlmaWVyICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtcmVxdWVzdC1wYXJhbXMtbW9kaWZpZXIuanMnICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcFJlcXVlc3QgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLXJlcXVlc3QuanMnICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBTZXNzaW9uSGVscGVyICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1zZXNzaW9uLWhlbHBlci5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwU2Vzc2lvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtc2Vzc2lvbi5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcFJlY29ubmVjdGFibGVSZXF1ZXN0ZXIgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLXJlY29ubmVjdGFibGUtcmVxdWVzdGVyLmpzJyAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBTdHJ1Y3R1cmVQYXJzZXIgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1zdHJ1Y3R1cmUtcGFyc2VyLmpzJyAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwVGlsZVN0cnVjdHVyZSAgICAgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtdGlsZS1zdHJ1Y3R1cmUuanMnICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcEJpdHN0cmVhbVJlYWRlciAgICAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqcGlwLWJpdHN0cmVhbS1yZWFkZXIuanMnICAgICAgICAgICAgICAgICAgICAgICAgICApO1xudmFyIEpwaXBUYWdUcmVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC10YWctdHJlZS5qcycgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwQ29kZWJsb2NrTGVuZ3RoUGFyc2VyICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtY29kZWJsb2NrLWxlbmd0aC1wYXJzZXIuanMnICAgICAgICAgICAgICAgICAgICk7XG52YXIgSnBpcFN1YmJhbmRMZW5ndGhJblBhY2tldEhlYWRlckNhbGN1bGF0b3IgPSByZXF1aXJlKCdqcGlwLXN1YmJhbmQtbGVuZ3RoLWluLXBhY2tldC1oZWFkZXItY2FsY3VsYXRvci5qcycpO1xudmFyIEpwaXBQYWNrZXRMZW5ndGhDYWxjdWxhdG9yICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnanBpcC1wYWNrZXQtbGVuZ3RoLWNhbGN1bGF0b3IuanMnICAgICAgICAgICAgICAgICAgKTtcbnZhciBKcGlwUXVhbGl0eUxheWVyc0NhY2hlICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJ2pwaXAtcXVhbGl0eS1sYXllcnMtY2FjaGUuanMnICAgICAgICAgICAgICAgICAgICAgICk7XG5cbnZhciBqcGlwUnVudGltZUZhY3RvcnkgPSB7XG4gICAgY3JlYXRlQ2hhbm5lbDogZnVuY3Rpb24gY3JlYXRlQ2hhbm5lbChcbiAgICAgICAgbWF4UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2VJbkNoYW5uZWwsIHNlc3Npb25IZWxwZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcENoYW5uZWwoXG4gICAgICAgICAgICBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCxcbiAgICAgICAgICAgIHNlc3Npb25IZWxwZXIsXG4gICAgICAgICAgICBqcGlwUnVudGltZUZhY3RvcnkpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlQ29kZXN0cmVhbVJlY29uc3RydWN0b3I6IGZ1bmN0aW9uKFxuICAgICAgICBkYXRhYmluc1NhdmVyLCBoZWFkZXJNb2RpZmllciwgcXVhbGl0eUxheWVyc0NhY2hlKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBDb2Rlc3RyZWFtUmVjb25zdHJ1Y3RvcihcbiAgICAgICAgICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgICAgICAgICBoZWFkZXJNb2RpZmllcixcbiAgICAgICAgICAgIHF1YWxpdHlMYXllcnNDYWNoZSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVMZXZlbENhbGN1bGF0b3I6IGZ1bmN0aW9uKHBhcmFtcykge1xuICAgICAgICByZXR1cm4gbmV3IEpwaXBMZXZlbENhbGN1bGF0b3IocGFyYW1zKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZUNvZGVzdHJlYW1TdHJ1Y3R1cmU6IGZ1bmN0aW9uKHN0cnVjdHVyZVBhcnNlciwgcHJvZ3Jlc3Npb25PcmRlcikge1xuICAgICAgICByZXR1cm4gbmV3IEpwaXBDb2Rlc3RyZWFtU3RydWN0dXJlKFxuICAgICAgICAgICAgc3RydWN0dXJlUGFyc2VyLCBqcGlwUnVudGltZUZhY3RvcnksIHByb2dyZXNzaW9uT3JkZXIpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlQ29tcG9uZW50U3RydWN0dXJlOiBmdW5jdGlvbihwYXJhbXMsIHRpbGVTdHJ1Y3R1cmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwQ29tcG9uZW50U3RydWN0dXJlKHBhcmFtcywgdGlsZVN0cnVjdHVyZSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVDb21wb3NpdGVBcnJheTogZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcG9zaXRlQXJyYXkob2Zmc2V0KTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZURhdGFiaW5QYXJ0czogZnVuY3Rpb24oY2xhc3NJZCwgaW5DbGFzc0lkKSB7XG4gICAgICAgIHJldHVybiBuZXcgSnBpcERhdGFiaW5QYXJ0cyhjbGFzc0lkLCBpbkNsYXNzSWQsIGpwaXBSdW50aW1lRmFjdG9yeSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVEYXRhYmluc1NhdmVyOiBmdW5jdGlvbihpc0pwaXBUaWxlcGFydFN0cmVhbSkge1xuICAgICAgICByZXR1cm4gbmV3IEpwaXBEYXRhYmluc1NhdmVyKGlzSnBpcFRpbGVwYXJ0U3RyZWFtLCBqcGlwUnVudGltZUZhY3RvcnkpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlRmV0Y2hlcjogZnVuY3Rpb24oZGF0YWJpbnNTYXZlciwgZmV0Y2hlclNoYXJlZE9iamVjdHMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwRmV0Y2hlcihkYXRhYmluc1NhdmVyLCBmZXRjaGVyU2hhcmVkT2JqZWN0cywgb3B0aW9ucywganBpcFJ1bnRpbWVGYWN0b3J5KTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZUZldGNoOiBmdW5jdGlvbihmZXRjaENvbnRleHQsIHJlcXVlc3RlciwgcHJvZ3Jlc3NpdmVuZXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcgSnBpcEZldGNoKGZldGNoQ29udGV4dCwgcmVxdWVzdGVyLCBwcm9ncmVzc2l2ZW5lc3MpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlSGVhZGVyTW9kaWZpZXI6IGZ1bmN0aW9uKFxuICAgICAgICBvZmZzZXRzQ2FsY3VsYXRvciwgcHJvZ3Jlc3Npb25PcmRlcikge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwSGVhZGVyTW9kaWZpZXIoXG4gICAgICAgICAgICBvZmZzZXRzQ2FsY3VsYXRvciwgcHJvZ3Jlc3Npb25PcmRlcik7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVJbWFnZURhdGFDb250ZXh0OiBmdW5jdGlvbihcbiAgICAgICAganBpcE9iamVjdHMsIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLCBtYXhRdWFsaXR5LCBwcm9ncmVzc2l2ZW5lc3MpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcEltYWdlRGF0YUNvbnRleHQoXG4gICAgICAgICAgICBqcGlwT2JqZWN0cywgY29kZXN0cmVhbVBhcnRQYXJhbXMsIG1heFF1YWxpdHksIHByb2dyZXNzaXZlbmVzcyk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVNYXJrZXJzUGFyc2VyOiBmdW5jdGlvbihtYWluSGVhZGVyRGF0YWJpbikge1xuICAgICAgICByZXR1cm4gbmV3IEpwaXBNYXJrZXJzUGFyc2VyKFxuICAgICAgICAgICAgbWFpbkhlYWRlckRhdGFiaW4sIGpwaXBNZXNzYWdlSGVhZGVyUGFyc2VyLCBqcGlwUnVudGltZUZhY3RvcnkpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlT2Zmc2V0c0NhbGN1bGF0b3I6IGZ1bmN0aW9uKG1haW5IZWFkZXJEYXRhYmluLCBtYXJrZXJzUGFyc2VyKSB7XG4gICAgICAgIHJldHVybiBuZXcgSnBpcE9mZnNldHNDYWxjdWxhdG9yKG1haW5IZWFkZXJEYXRhYmluLCBtYXJrZXJzUGFyc2VyKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVBhY2tldHNEYXRhQ29sbGVjdG9yOiBmdW5jdGlvbihkYXRhYmluc1NhdmVyLCBxdWFsaXR5TGF5ZXJzQ2FjaGUpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcFBhY2tldHNEYXRhQ29sbGVjdG9yKFxuICAgICAgICAgICAgZGF0YWJpbnNTYXZlcixcbiAgICAgICAgICAgIHF1YWxpdHlMYXllcnNDYWNoZSxcbiAgICAgICAgICAgIGpwaXBSdW50aW1lRmFjdG9yeSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVQYXJhbXNDb2Rlc3RyZWFtUGFydDogZnVuY3Rpb24oXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLCBjb2Rlc3RyZWFtU3RydWN0dXJlKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBQYXJhbXNDb2Rlc3RyZWFtUGFydChcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLCBjb2Rlc3RyZWFtU3RydWN0dXJlLCBqcGlwUnVudGltZUZhY3RvcnkpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlUGFyYW1zUHJlY2luY3RJdGVyYXRvcjogZnVuY3Rpb24gY3JlYXRlUGFyYW1zUHJlY2luY3RJdGVyYXRvcihcbiAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgaWR4LFxuICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgaXNJdGVyYXRlUHJlY2luY3RzTm90SW5Db2Rlc3RyZWFtUGFydCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwUGFyYW1zUHJlY2luY3RJdGVyYXRvcihcbiAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgICAgICBpZHgsXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgICAgIGlzSXRlcmF0ZVByZWNpbmN0c05vdEluQ29kZXN0cmVhbVBhcnQpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlUHJlY2luY3RDb2Rlc3RyZWFtUGFydDogZnVuY3Rpb24gY3JlYXRlUHJlY2luY3RDb2Rlc3RyZWFtUGFydChcbiAgICAgICAgc2l6ZXNDYWxjdWxhdG9yLFxuICAgICAgICB0aWxlU3RydWN0dXJlLFxuICAgICAgICB0aWxlSW5kZXgsXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgbGV2ZWwsXG4gICAgICAgIHByZWNpbmN0WCxcbiAgICAgICAgcHJlY2luY3RZKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBQcmVjaW5jdENvZGVzdHJlYW1QYXJ0KFxuICAgICAgICAgICAgc2l6ZXNDYWxjdWxhdG9yLFxuICAgICAgICAgICAgdGlsZVN0cnVjdHVyZSxcbiAgICAgICAgICAgIHRpbGVJbmRleCxcbiAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICAgIGxldmVsLFxuICAgICAgICAgICAgcHJlY2luY3RYLFxuICAgICAgICAgICAgcHJlY2luY3RZKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVByZWNpbmN0c0l0ZXJhdG9yV2FpdGVyOiBmdW5jdGlvbiBjcmVhdGVQcmVjaW5jdHNJdGVyYXRvcldhaXRlcihcbiAgICAgICAgY29kZXN0cmVhbVBhcnQsXG4gICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgICAgIGl0ZXJhdGVQcmVjaW5jdENhbGxiYWNrKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBQcmVjaW5jdHNJdGVyYXRvcldhaXRlcihcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgICAgICAgICBpdGVyYXRlUHJlY2luY3RDYWxsYmFjayxcbiAgICAgICAgICAgIGpwaXBSdW50aW1lRmFjdG9yeSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVRdWFsaXR5V2FpdGVyOiBmdW5jdGlvbiBjcmVhdGVRdWFsaXR5V2FpdGVyKFxuICAgICAgICBjb2Rlc3RyZWFtUGFydCxcbiAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzLFxuICAgICAgICBtYXhRdWFsaXR5LFxuICAgICAgICBxdWFsaXR5TGF5ZXJSZWFjaGVkQ2FsbGJhY2ssXG4gICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgICAgIHN0YXJ0VHJhY2tQcmVjaW5jdCxcbiAgICAgICAgY2FsbGJhY2tzVGhpcykge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwUXVhbGl0eVdhaXRlcihcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzLFxuICAgICAgICAgICAgbWF4UXVhbGl0eSxcbiAgICAgICAgICAgIHF1YWxpdHlMYXllclJlYWNoZWRDYWxsYmFjayxcbiAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLFxuICAgICAgICAgICAgc3RhcnRUcmFja1ByZWNpbmN0LFxuICAgICAgICAgICAgY2FsbGJhY2tzVGhpcyxcbiAgICAgICAgICAgIGpwaXBSdW50aW1lRmFjdG9yeSk7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVSZXF1ZXN0UGFyYW1zTW9kaWZpZXI6IGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3RQYXJhbXNNb2RpZmllcihcbiAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwUmVxdWVzdFBhcmFtc01vZGlmaWVyKGNvZGVzdHJlYW1TdHJ1Y3R1cmUpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlUmVxdWVzdDogZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChcbiAgICAgICAgc2Vzc2lvbkhlbHBlciwgY2hhbm5lbCwgcmVxdWVzdFVybCwgY2FsbGJhY2ssIGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwUmVxdWVzdChcbiAgICAgICAgICAgIHNlc3Npb25IZWxwZXIsXG4gICAgICAgICAgICBqcGlwTWVzc2FnZUhlYWRlclBhcnNlcixcbiAgICAgICAgICAgIGNoYW5uZWwsXG4gICAgICAgICAgICByZXF1ZXN0VXJsLFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2spO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlU2Vzc2lvbkhlbHBlcjogZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbkhlbHBlcihcbiAgICAgICAgZGF0YVJlcXVlc3RVcmwsXG4gICAgICAgIGtub3duVGFyZ2V0SWQsXG4gICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgIGRhdGFiaW5zU2F2ZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcFNlc3Npb25IZWxwZXIoXG4gICAgICAgICAgICBkYXRhUmVxdWVzdFVybCxcbiAgICAgICAgICAgIGtub3duVGFyZ2V0SWQsXG4gICAgICAgICAgICBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICAgICAgZGF0YWJpbnNTYXZlcixcbiAgICAgICAgICAgIHNpbXBsZUFqYXhIZWxwZXIpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlU2Vzc2lvbjogZnVuY3Rpb24gY3JlYXRlU2Vzc2lvbihcbiAgICAgICAgbWF4Q2hhbm5lbHNJblNlc3Npb24sXG4gICAgICAgIG1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsLFxuICAgICAgICB0YXJnZXRJZCxcbiAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgZGF0YWJpbnNTYXZlcikge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwU2Vzc2lvbihcbiAgICAgICAgICAgIG1heENoYW5uZWxzSW5TZXNzaW9uLFxuICAgICAgICAgICAgbWF4UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2VJbkNoYW5uZWwsXG4gICAgICAgICAgICB0YXJnZXRJZCxcbiAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLFxuICAgICAgICAgICAgc2V0SW50ZXJ2YWwsXG4gICAgICAgICAgICBjbGVhckludGVydmFsLFxuICAgICAgICAgICAganBpcFJ1bnRpbWVGYWN0b3J5KTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVJlY29ubmVjdGFibGVSZXF1ZXN0ZXI6IGZ1bmN0aW9uKFxuICAgICAgICBtYXhDaGFubmVsc0luU2Vzc2lvbixcbiAgICAgICAgbWF4UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2VJbkNoYW5uZWwsXG4gICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgIGRhdGFiaW5zU2F2ZXIpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcFJlY29ubmVjdGFibGVSZXF1ZXN0ZXIoXG4gICAgICAgICAgICBtYXhDaGFubmVsc0luU2Vzc2lvbixcbiAgICAgICAgICAgIG1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsLFxuICAgICAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgICAgICAgICBqcGlwUnVudGltZUZhY3RvcnkpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlU3RydWN0dXJlUGFyc2VyOiBmdW5jdGlvbihkYXRhYmluc1NhdmVyLCBtYXJrZXJzUGFyc2VyLCBvZmZzZXRzQ2FsY3VsYXRvcikge1xuICAgICAgICByZXR1cm4gbmV3IEpwaXBTdHJ1Y3R1cmVQYXJzZXIoXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLCBtYXJrZXJzUGFyc2VyLCBqcGlwTWVzc2FnZUhlYWRlclBhcnNlciwgb2Zmc2V0c0NhbGN1bGF0b3IpO1xuICAgIH0sXG4gICAgXG4gICAgY3JlYXRlVGlsZVN0cnVjdHVyZTogZnVuY3Rpb24oXG4gICAgICAgIHNpemVQYXJhbXMsIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsIHByb2dyZXNzaW9uT3JkZXIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwVGlsZVN0cnVjdHVyZShcbiAgICAgICAgICAgIHNpemVQYXJhbXMsIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsIGpwaXBSdW50aW1lRmFjdG9yeSwgcHJvZ3Jlc3Npb25PcmRlcik7XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVCaXRzdHJlYW1SZWFkZXI6IGZ1bmN0aW9uIGNyZWF0ZUJpdHN0cmVhbVJlYWRlcihkYXRhYmluKSB7XG4gICAgICAgIHJldHVybiBuZXcgSnBpcEJpdHN0cmVhbVJlYWRlcihcbiAgICAgICAgICAgIGRhdGFiaW4sIG11dHVhbEV4Y2x1c2l2ZVRyYW5zYWN0aW9uSGVscGVyKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVRhZ1RyZWU6IGZ1bmN0aW9uIGNyZWF0ZVRhZ1RyZWUoYml0c3RyZWFtUmVhZGVyLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBuZXcgSnBpcFRhZ1RyZWUoXG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIsIHdpZHRoLCBoZWlnaHQsIG11dHVhbEV4Y2x1c2l2ZVRyYW5zYWN0aW9uSGVscGVyKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZUNvZGVibG9ja0xlbmd0aFBhcnNlcjogZnVuY3Rpb24gY3JlYXRlQ29kZWJsb2NrTGVuZ3RoUGFyc2VyKFxuICAgICAgICBiaXRzdHJlYW1SZWFkZXIsIHRyYW5zYWN0aW9uSGVscGVyKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBDb2RlYmxvY2tMZW5ndGhQYXJzZXIoXG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIsIG11dHVhbEV4Y2x1c2l2ZVRyYW5zYWN0aW9uSGVscGVyKTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVN1YmJhbmRMZW5ndGhJblBhY2tldEhlYWRlckNhbGN1bGF0b3IgOlxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVTdWJiYW5kTGVuZ3RoSW5QYWNrZXRIZWFkZXJDYWxjdWxhdG9yKFxuICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLCBudW1Db2RlYmxvY2tzWEluU3ViYmFuZCwgbnVtQ29kZWJsb2Nrc1lJblN1YmJhbmQpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBuZXcgSnBpcFN1YmJhbmRMZW5ndGhJblBhY2tldEhlYWRlckNhbGN1bGF0b3IoXG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIsXG4gICAgICAgICAgICBudW1Db2RlYmxvY2tzWEluU3ViYmFuZCxcbiAgICAgICAgICAgIG51bUNvZGVibG9ja3NZSW5TdWJiYW5kLFxuICAgICAgICAgICAganBpcENvZGluZ1Bhc3Nlc051bWJlclBhcnNlcixcbiAgICAgICAgICAgIG11dHVhbEV4Y2x1c2l2ZVRyYW5zYWN0aW9uSGVscGVyLFxuICAgICAgICAgICAganBpcFJ1bnRpbWVGYWN0b3J5KTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVBhY2tldExlbmd0aENhbGN1bGF0b3I6IGZ1bmN0aW9uIGNyZWF0ZVBhY2tldExlbmd0aENhbGN1bGF0b3IoXG4gICAgICAgIHRpbGVTdHJ1Y3R1cmUsXG4gICAgICAgIGNvbXBvbmVudFN0cnVjdHVyZSxcbiAgICAgICAgZGF0YWJpbixcbiAgICAgICAgc3RhcnRPZmZzZXRJbkRhdGFiaW4sXG4gICAgICAgIHByZWNpbmN0KSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBQYWNrZXRMZW5ndGhDYWxjdWxhdG9yKFxuICAgICAgICAgICAgdGlsZVN0cnVjdHVyZSxcbiAgICAgICAgICAgIGNvbXBvbmVudFN0cnVjdHVyZSxcbiAgICAgICAgICAgIGRhdGFiaW4sXG4gICAgICAgICAgICBzdGFydE9mZnNldEluRGF0YWJpbixcbiAgICAgICAgICAgIHByZWNpbmN0LFxuICAgICAgICAgICAganBpcFJ1bnRpbWVGYWN0b3J5KTtcbiAgICB9LFxuICAgIFxuICAgIGNyZWF0ZVF1YWxpdHlMYXllcnNDYWNoZTogZnVuY3Rpb24gY3JlYXRlUXVhbGl0eUxheWVyc0NhY2hlKFxuICAgICAgICBjb2Rlc3RyZWFtU3RydWN0dXJlKSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbmV3IEpwaXBRdWFsaXR5TGF5ZXJzQ2FjaGUoXG4gICAgICAgICAgICBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICAgICAganBpcFJ1bnRpbWVGYWN0b3J5KTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGpwaXBSdW50aW1lRmFjdG9yeTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvbWlzYy9qcGlwLXJ1bnRpbWUtZmFjdG9yeS5qcyIsIi8qIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5pbXBvcnQge1xuICBpbmZvLCBsb2cyLCByZWFkVWludDE2LCByZWFkVWludDMyLCB3YXJuXG59IGZyb20gJy4uL3NoYXJlZC91dGlsJztcbmltcG9ydCB7IEFyaXRobWV0aWNEZWNvZGVyIH0gZnJvbSAnLi9hcml0aG1ldGljX2RlY29kZXInO1xuXG5sZXQgSnB4RXJyb3IgPSAoZnVuY3Rpb24gSnB4RXJyb3JDbG9zdXJlKCkge1xuICBmdW5jdGlvbiBKcHhFcnJvcihtc2cpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnSlBYIGVycm9yOiAnICsgbXNnO1xuICB9XG5cbiAgSnB4RXJyb3IucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIEpweEVycm9yLnByb3RvdHlwZS5uYW1lID0gJ0pweEVycm9yJztcbiAgSnB4RXJyb3IuY29uc3RydWN0b3IgPSBKcHhFcnJvcjtcblxuICByZXR1cm4gSnB4RXJyb3I7XG59KSgpO1xuXG52YXIgSnB4SW1hZ2UgPSAoZnVuY3Rpb24gSnB4SW1hZ2VDbG9zdXJlKCkge1xuICAvLyBUYWJsZSBFLjFcbiAgdmFyIFN1YmJhbmRzR2FpbkxvZzIgPSB7XG4gICAgJ0xMJzogMCxcbiAgICAnTEgnOiAxLFxuICAgICdITCc6IDEsXG4gICAgJ0hIJzogMixcbiAgfTtcbiAgZnVuY3Rpb24gSnB4SW1hZ2UoKSB7XG4gICAgdGhpcy5mYWlsT25Db3JydXB0ZWRJbWFnZSA9IGZhbHNlO1xuICB9XG4gIEpweEltYWdlLnByb3RvdHlwZSA9IHtcbiAgICBwYXJzZTogZnVuY3Rpb24gSnB4SW1hZ2VfcGFyc2UoZGF0YSkge1xuXG4gICAgICB2YXIgaGVhZCA9IHJlYWRVaW50MTYoZGF0YSwgMCk7XG4gICAgICAvLyBObyBib3ggaGVhZGVyLCBpbW1lZGlhdGUgc3RhcnQgb2YgY29kZXN0cmVhbSAoU09DKVxuICAgICAgaWYgKGhlYWQgPT09IDB4RkY0Rikge1xuICAgICAgICB0aGlzLnBhcnNlQ29kZXN0cmVhbShkYXRhLCAwLCBkYXRhLmxlbmd0aCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGhlYWRlclNpemUgPSA4O1xuICAgICAgICB2YXIgbGJveCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pO1xuICAgICAgICB2YXIgdGJveCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyA0KTtcbiAgICAgICAgcG9zaXRpb24gKz0gaGVhZGVyU2l6ZTtcbiAgICAgICAgaWYgKGxib3ggPT09IDEpIHtcbiAgICAgICAgICAvLyBYTEJveDogcmVhZCBVSW50NjQgYWNjb3JkaW5nIHRvIHNwZWMuXG4gICAgICAgICAgLy8gSmF2YVNjcmlwdCdzIGludCBwcmVjaXNpb24gb2YgNTMgYml0IHNob3VsZCBiZSBzdWZmaWNpZW50IGhlcmUuXG4gICAgICAgICAgbGJveCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24pICogNDI5NDk2NzI5NiArXG4gICAgICAgICAgICAgICAgIHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyA0KTtcbiAgICAgICAgICBwb3NpdGlvbiArPSA4O1xuICAgICAgICAgIGhlYWRlclNpemUgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGJveCA9PT0gMCkge1xuICAgICAgICAgIGxib3ggPSBsZW5ndGggLSBwb3NpdGlvbiArIGhlYWRlclNpemU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxib3ggPCBoZWFkZXJTaXplKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEpweEVycm9yKCdJbnZhbGlkIGJveCBmaWVsZCBzaXplJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRhdGFMZW5ndGggPSBsYm94IC0gaGVhZGVyU2l6ZTtcbiAgICAgICAgdmFyIGp1bXBEYXRhTGVuZ3RoID0gdHJ1ZTtcbiAgICAgICAgc3dpdGNoICh0Ym94KSB7XG4gICAgICAgICAgY2FzZSAweDZBNzAzMjY4OiAvLyAnanAyaCdcbiAgICAgICAgICAgIGp1bXBEYXRhTGVuZ3RoID0gZmFsc2U7IC8vIHBhcnNpbmcgY2hpbGQgYm94ZXNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMHg2MzZGNkM3MjogLy8gJ2NvbHInXG4gICAgICAgICAgICAvLyBDb2xvcnNwYWNlcyBhcmUgbm90IHVzZWQsIHRoZSBDUyBmcm9tIHRoZSBQREYgaXMgdXNlZC5cbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBkYXRhW3Bvc2l0aW9uXTtcbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IDEpIHtcbiAgICAgICAgICAgICAgLy8gZW51bWVyYXRlZCBjb2xvcnNwYWNlXG4gICAgICAgICAgICAgIHZhciBjb2xvcnNwYWNlID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbiArIDMpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKGNvbG9yc3BhY2UpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE2OiAvLyB0aGlzIGluZGljYXRlcyBhIHNSR0IgY29sb3JzcGFjZVxuICAgICAgICAgICAgICAgIGNhc2UgMTc6IC8vIHRoaXMgaW5kaWNhdGVzIGEgZ3JheXNjYWxlIGNvbG9yc3BhY2VcbiAgICAgICAgICAgICAgICBjYXNlIDE4OiAvLyB0aGlzIGluZGljYXRlcyBhIFlVViBjb2xvcnNwYWNlXG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgd2FybignVW5rbm93biBjb2xvcnNwYWNlICcgKyBjb2xvcnNwYWNlKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gMikge1xuICAgICAgICAgICAgICBpbmZvKCdJQ0MgcHJvZmlsZSBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDB4NkE3MDMyNjM6IC8vICdqcDJjJ1xuICAgICAgICAgICAgdGhpcy5wYXJzZUNvZGVzdHJlYW0oZGF0YSwgcG9zaXRpb24sIHBvc2l0aW9uICsgZGF0YUxlbmd0aCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDB4NkE1MDIwMjA6IC8vICdqUFxcMDI0XFwwMjQnXG4gICAgICAgICAgICBpZiAocmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbikgIT09IDB4MGQwYTg3MGEpIHtcbiAgICAgICAgICAgICAgd2FybignSW52YWxpZCBKUDIgc2lnbmF0dXJlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGhlYWRlciB0eXBlcyBhcmUgdmFsaWQgYnV0IGN1cnJlbnRseSBub3QgdXNlZDpcbiAgICAgICAgICBjYXNlIDB4NkE1MDFBMUE6IC8vICdqUFxcMDMyXFwwMzInXG4gICAgICAgICAgY2FzZSAweDY2NzQ3OTcwOiAvLyAnZnR5cCdcbiAgICAgICAgICBjYXNlIDB4NzI3MjY1NzE6IC8vICdycmVxJ1xuICAgICAgICAgIGNhc2UgMHg3MjY1NzMyMDogLy8gJ3JlcyAnXG4gICAgICAgICAgY2FzZSAweDY5Njg2NDcyOiAvLyAnaWhkcidcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB2YXIgaGVhZGVyVHlwZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKHRib3ggPj4gMjQpICYgMHhGRixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGJveCA+PiAxNikgJiAweEZGLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0Ym94ID4+IDgpICYgMHhGRixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ym94ICYgMHhGRik7XG4gICAgICAgICAgICB3YXJuKCdVbnN1cHBvcnRlZCBoZWFkZXIgdHlwZSAnICsgdGJveCArICcgKCcgKyBoZWFkZXJUeXBlICsgJyknKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChqdW1wRGF0YUxlbmd0aCkge1xuICAgICAgICAgIHBvc2l0aW9uICs9IGRhdGFMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBhcnNlSW1hZ2VQcm9wZXJ0aWVzOiBmdW5jdGlvbiBKcHhJbWFnZV9wYXJzZUltYWdlUHJvcGVydGllcyhzdHJlYW0pIHtcbiAgICAgIHZhciBuZXdCeXRlID0gc3RyZWFtLmdldEJ5dGUoKTtcbiAgICAgIHdoaWxlIChuZXdCeXRlID49IDApIHtcbiAgICAgICAgdmFyIG9sZEJ5dGUgPSBuZXdCeXRlO1xuICAgICAgICBuZXdCeXRlID0gc3RyZWFtLmdldEJ5dGUoKTtcbiAgICAgICAgdmFyIGNvZGUgPSAob2xkQnl0ZSA8PCA4KSB8IG5ld0J5dGU7XG4gICAgICAgIC8vIEltYWdlIGFuZCB0aWxlIHNpemUgKFNJWilcbiAgICAgICAgaWYgKGNvZGUgPT09IDB4RkY1MSkge1xuICAgICAgICAgIHN0cmVhbS5za2lwKDQpO1xuICAgICAgICAgIHZhciBYc2l6ID0gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7IC8vIEJ5dGUgNFxuICAgICAgICAgIHZhciBZc2l6ID0gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7IC8vIEJ5dGUgOFxuICAgICAgICAgIHZhciBYT3NpeiA9IHN0cmVhbS5nZXRJbnQzMigpID4+PiAwOyAvLyBCeXRlIDEyXG4gICAgICAgICAgdmFyIFlPc2l6ID0gc3RyZWFtLmdldEludDMyKCkgPj4+IDA7IC8vIEJ5dGUgMTZcbiAgICAgICAgICBzdHJlYW0uc2tpcCgxNik7XG4gICAgICAgICAgdmFyIENzaXogPSBzdHJlYW0uZ2V0VWludDE2KCk7IC8vIEJ5dGUgMzZcbiAgICAgICAgICB0aGlzLndpZHRoID0gWHNpeiAtIFhPc2l6O1xuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gWXNpeiAtIFlPc2l6O1xuICAgICAgICAgIHRoaXMuY29tcG9uZW50c0NvdW50ID0gQ3NpejtcbiAgICAgICAgICAvLyBSZXN1bHRzIGFyZSBhbHdheXMgcmV0dXJuZWQgYXMgYFVpbnQ4Q2xhbXBlZEFycmF5YHMuXG4gICAgICAgICAgdGhpcy5iaXRzUGVyQ29tcG9uZW50ID0gODtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBKcHhFcnJvcignTm8gc2l6ZSBtYXJrZXIgZm91bmQgaW4gSlBYIHN0cmVhbScpO1xuICAgIH0sXG4gICAgcGFyc2VDb2Rlc3RyZWFtOiBmdW5jdGlvbiBKcHhJbWFnZV9wYXJzZUNvZGVzdHJlYW0oXG4gICAgICBkYXRhLCBzdGFydCwgZW5kLCBvcHRpb25zKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHt9O1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICB2YXIgaXNPbmx5UGFyc2VIZWFkZXJzID0gISFvcHRpb25zLmlzT25seVBhcnNlSGVhZGVycztcbiAgICAgIHZhciByZWdpb25Ub1BhcnNlID0gb3B0aW9ucy5yZWdpb25Ub1BhcnNlO1xuICAgICAgaWYgKHJlZ2lvblRvUGFyc2UgIT09IHVuZGVmaW5lZCAmJiBpc09ubHlQYXJzZUhlYWRlcnMpIHtcbiAgICAgICAgdGhyb3cgJ0pQWCBFcnJvcjogb3B0aW9ucy5yZWdpb25Ub1BhcnNlIGlzIHVuZWZmZWN0aXZlIGlmICcgK1xuICAgICAgICAgICdvcHRpb25zLmlzT25seVBhcnNlSGVhZGVycyA9IHRydWUnO1xuICAgICAgfVxuICAgICAgXG4gICAgICB2YXIgZG9Ob3RSZWNvdmVyID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSBzdGFydDtcbiAgICAgICAgd2hpbGUgKHBvc2l0aW9uICsgMSA8IGVuZCkge1xuICAgICAgICAgIHZhciBjb2RlID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7XG4gICAgICAgICAgcG9zaXRpb24gKz0gMjtcblxuICAgICAgICAgIHZhciBsZW5ndGggPSAwLCBqLCBzcWNkLCBzcHFjZHMsIHNwcWNkU2l6ZSwgc2NhbGFyRXhwb3VuZGVkLCB0aWxlO1xuICAgICAgICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgICAgICAgY2FzZSAweEZGNEY6IC8vIFN0YXJ0IG9mIGNvZGVzdHJlYW0gKFNPQylcbiAgICAgICAgICAgICAgY29udGV4dC5tYWluSGVhZGVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDB4RkZEOTogLy8gRW5kIG9mIGNvZGVzdHJlYW0gKEVPQylcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDB4RkY1MTogLy8gSW1hZ2UgYW5kIHRpbGUgc2l6ZSAoU0laKVxuICAgICAgICAgICAgICBsZW5ndGggPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgdmFyIHNpeiA9IHt9O1xuICAgICAgICAgICAgICBzaXouWHNpeiA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyA0KTtcbiAgICAgICAgICAgICAgc2l6LllzaXogPSByZWFkVWludDMyKGRhdGEsIHBvc2l0aW9uICsgOCk7XG4gICAgICAgICAgICAgIHNpei5YT3NpeiA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyAxMik7XG4gICAgICAgICAgICAgIHNpei5ZT3NpeiA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyAxNik7XG4gICAgICAgICAgICAgIHNpei5YVHNpeiA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyAyMCk7XG4gICAgICAgICAgICAgIHNpei5ZVHNpeiA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyAyNCk7XG4gICAgICAgICAgICAgIHNpei5YVE9zaXogPSByZWFkVWludDMyKGRhdGEsIHBvc2l0aW9uICsgMjgpO1xuICAgICAgICAgICAgICBzaXouWVRPc2l6ID0gcmVhZFVpbnQzMihkYXRhLCBwb3NpdGlvbiArIDMyKTtcbiAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHJlYWRVaW50MTYoZGF0YSwgcG9zaXRpb24gKyAzNik7XG4gICAgICAgICAgICAgIHNpei5Dc2l6ID0gY29tcG9uZW50c0NvdW50O1xuICAgICAgICAgICAgICB2YXIgY29tcG9uZW50cyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgaXNDb21wb25lbnRTaXplc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIGogPSBwb3NpdGlvbiArIDM4O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvbmVudHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHtcbiAgICAgICAgICAgICAgICAgIHByZWNpc2lvbjogKGRhdGFbal0gJiAweDdGKSArIDEsXG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZDogISEoZGF0YVtqXSAmIDB4ODApLFxuICAgICAgICAgICAgICAgICAgWFJzaXo6IGRhdGFbaiArIDFdLFxuICAgICAgICAgICAgICAgICAgWVJzaXo6IGRhdGFbaiArIDJdLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaiArPSAzO1xuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZUNvbXBvbmVudERpbWVuc2lvbnMoY29tcG9uZW50LCBzaXopO1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChyZWdpb25Ub1BhcnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlzQ29tcG9uZW50U2l6ZXNTdXBwb3J0ZWQgJj1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50LlhSc2l6ID09PSAxICYmIGNvbXBvbmVudC5ZUnNpeiA9PT0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGV4dC5TSVogPSBzaXo7XG4gICAgICAgICAgICAgIGNvbnRleHQuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgICAgICAgIGNhbGN1bGF0ZVRpbGVHcmlkcyhjb250ZXh0LCBjb21wb25lbnRzKTtcbiAgICAgICAgICAgICAgY29udGV4dC5RQ0MgPSBbXTtcbiAgICAgICAgICAgICAgY29udGV4dC5DT0MgPSBbXTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlmICghaXNDb21wb25lbnRTaXplc1N1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSlBYIEVycm9yOiBXaGVuIHJlZ2lvblRvUGFyc2UgaXMgdXNlZCwgJyArXG4gICAgICAgICAgICAgICAgICAnY29tcG9uZW50IHNpemUgb3RoZXIgdGhhbiAxIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMHhGRjVDOiAvLyBRdWFudGl6YXRpb24gZGVmYXVsdCAoUUNEKVxuICAgICAgICAgICAgICBsZW5ndGggPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgdmFyIHFjZCA9IHt9O1xuICAgICAgICAgICAgICBqID0gcG9zaXRpb24gKyAyO1xuICAgICAgICAgICAgICBzcWNkID0gZGF0YVtqKytdO1xuICAgICAgICAgICAgICBzd2l0Y2ggKHNxY2QgJiAweDFGKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgc3BxY2RTaXplID0gODtcbiAgICAgICAgICAgICAgICAgIHNjYWxhckV4cG91bmRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICBzcHFjZFNpemUgPSAxNjtcbiAgICAgICAgICAgICAgICAgIHNjYWxhckV4cG91bmRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgc3BxY2RTaXplID0gMTY7XG4gICAgICAgICAgICAgICAgICBzY2FsYXJFeHBvdW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBTUWNkIHZhbHVlICcgKyBzcWNkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBxY2Qubm9RdWFudGl6YXRpb24gPSAoc3BxY2RTaXplID09PSA4KTtcbiAgICAgICAgICAgICAgcWNkLnNjYWxhckV4cG91bmRlZCA9IHNjYWxhckV4cG91bmRlZDtcbiAgICAgICAgICAgICAgcWNkLmd1YXJkQml0cyA9IHNxY2QgPj4gNTtcbiAgICAgICAgICAgICAgc3BxY2RzID0gW107XG4gICAgICAgICAgICAgIHdoaWxlIChqIDwgbGVuZ3RoICsgcG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICB2YXIgc3BxY2QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAoc3BxY2RTaXplID09PSA4KSB7XG4gICAgICAgICAgICAgICAgICBzcHFjZC5lcHNpbG9uID0gZGF0YVtqKytdID4+IDM7XG4gICAgICAgICAgICAgICAgICBzcHFjZC5tdSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHNwcWNkLmVwc2lsb24gPSBkYXRhW2pdID4+IDM7XG4gICAgICAgICAgICAgICAgICBzcHFjZC5tdSA9ICgoZGF0YVtqXSAmIDB4NykgPDwgOCkgfCBkYXRhW2ogKyAxXTtcbiAgICAgICAgICAgICAgICAgIGogKz0gMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3BxY2RzLnB1c2goc3BxY2QpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHFjZC5TUHFjZHMgPSBzcHFjZHM7XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0Lm1haW5IZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LlFDRCA9IHFjZDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaWxlLlFDRCA9IHFjZDtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaWxlLlFDQyA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweEZGNUQ6IC8vIFF1YW50aXphdGlvbiBjb21wb25lbnQgKFFDQylcbiAgICAgICAgICAgICAgbGVuZ3RoID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgIHZhciBxY2MgPSB7fTtcbiAgICAgICAgICAgICAgaiA9IHBvc2l0aW9uICsgMjtcbiAgICAgICAgICAgICAgdmFyIGNxY2M7XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0LlNJWi5Dc2l6IDwgMjU3KSB7XG4gICAgICAgICAgICAgICAgY3FjYyA9IGRhdGFbaisrXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjcWNjID0gcmVhZFVpbnQxNihkYXRhLCBqKTtcbiAgICAgICAgICAgICAgICBqICs9IDI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgc3FjZCA9IGRhdGFbaisrXTtcbiAgICAgICAgICAgICAgc3dpdGNoIChzcWNkICYgMHgxRikge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgIHNwcWNkU2l6ZSA9IDg7XG4gICAgICAgICAgICAgICAgICBzY2FsYXJFeHBvdW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgc3BxY2RTaXplID0gMTY7XG4gICAgICAgICAgICAgICAgICBzY2FsYXJFeHBvdW5kZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgIHNwcWNkU2l6ZSA9IDE2O1xuICAgICAgICAgICAgICAgICAgc2NhbGFyRXhwb3VuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgU1FjZCB2YWx1ZSAnICsgc3FjZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcWNjLm5vUXVhbnRpemF0aW9uID0gKHNwcWNkU2l6ZSA9PT0gOCk7XG4gICAgICAgICAgICAgIHFjYy5zY2FsYXJFeHBvdW5kZWQgPSBzY2FsYXJFeHBvdW5kZWQ7XG4gICAgICAgICAgICAgIHFjYy5ndWFyZEJpdHMgPSBzcWNkID4+IDU7XG4gICAgICAgICAgICAgIHNwcWNkcyA9IFtdO1xuICAgICAgICAgICAgICB3aGlsZSAoaiA8IChsZW5ndGggKyBwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBzcHFjZCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChzcHFjZFNpemUgPT09IDgpIHtcbiAgICAgICAgICAgICAgICAgIHNwcWNkLmVwc2lsb24gPSBkYXRhW2orK10gPj4gMztcbiAgICAgICAgICAgICAgICAgIHNwcWNkLm11ID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc3BxY2QuZXBzaWxvbiA9IGRhdGFbal0gPj4gMztcbiAgICAgICAgICAgICAgICAgIHNwcWNkLm11ID0gKChkYXRhW2pdICYgMHg3KSA8PCA4KSB8IGRhdGFbaiArIDFdO1xuICAgICAgICAgICAgICAgICAgaiArPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzcHFjZHMucHVzaChzcHFjZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcWNjLlNQcWNkcyA9IHNwcWNkcztcbiAgICAgICAgICAgICAgaWYgKGNvbnRleHQubWFpbkhlYWRlcikge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuUUNDW2NxY2NdID0gcWNjO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRleHQuY3VycmVudFRpbGUuUUNDW2NxY2NdID0gcWNjO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweEZGNTI6IC8vIENvZGluZyBzdHlsZSBkZWZhdWx0IChDT0QpXG4gICAgICAgICAgICAgIGxlbmd0aCA9IHJlYWRVaW50MTYoZGF0YSwgcG9zaXRpb24pO1xuICAgICAgICAgICAgICB2YXIgY29kID0ge307XG4gICAgICAgICAgICAgIGogPSBwb3NpdGlvbiArIDI7XG4gICAgICAgICAgICAgIHZhciBzY29kID0gZGF0YVtqKytdO1xuICAgICAgICAgICAgICBjb2QuZW50cm9weUNvZGVyV2l0aEN1c3RvbVByZWNpbmN0cyA9ICEhKHNjb2QgJiAxKTtcbiAgICAgICAgICAgICAgY29kLnNvcE1hcmtlclVzZWQgPSAhIShzY29kICYgMik7XG4gICAgICAgICAgICAgIGNvZC5lcGhNYXJrZXJVc2VkID0gISEoc2NvZCAmIDQpO1xuICAgICAgICAgICAgICBjb2QucHJvZ3Jlc3Npb25PcmRlciA9IGRhdGFbaisrXTtcbiAgICAgICAgICAgICAgY29kLmxheWVyc0NvdW50ID0gcmVhZFVpbnQxNihkYXRhLCBqKTtcbiAgICAgICAgICAgICAgaiArPSAyO1xuICAgICAgICAgICAgICBjb2QubXVsdGlwbGVDb21wb25lbnRUcmFuc2Zvcm0gPSBkYXRhW2orK107XG5cbiAgICAgICAgICAgICAgY29kLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9IGRhdGFbaisrXTtcbiAgICAgICAgICAgICAgY29kLnhjYiA9IChkYXRhW2orK10gJiAweEYpICsgMjtcbiAgICAgICAgICAgICAgY29kLnljYiA9IChkYXRhW2orK10gJiAweEYpICsgMjtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrU3R5bGUgPSBkYXRhW2orK107XG4gICAgICAgICAgICAgIGNvZC5zZWxlY3RpdmVBcml0aG1ldGljQ29kaW5nQnlwYXNzID0gISEoYmxvY2tTdHlsZSAmIDEpO1xuICAgICAgICAgICAgICBjb2QucmVzZXRDb250ZXh0UHJvYmFiaWxpdGllcyA9ICEhKGJsb2NrU3R5bGUgJiAyKTtcbiAgICAgICAgICAgICAgY29kLnRlcm1pbmF0aW9uT25FYWNoQ29kaW5nUGFzcyA9ICEhKGJsb2NrU3R5bGUgJiA0KTtcbiAgICAgICAgICAgICAgY29kLnZlcnRpY2FsbHlTdHJpcGUgPSAhIShibG9ja1N0eWxlICYgOCk7XG4gICAgICAgICAgICAgIGNvZC5wcmVkaWN0YWJsZVRlcm1pbmF0aW9uID0gISEoYmxvY2tTdHlsZSAmIDE2KTtcbiAgICAgICAgICAgICAgY29kLnNlZ21lbnRhdGlvblN5bWJvbFVzZWQgPSAhIShibG9ja1N0eWxlICYgMzIpO1xuICAgICAgICAgICAgICBjb2QucmV2ZXJzaWJsZVRyYW5zZm9ybWF0aW9uID0gZGF0YVtqKytdO1xuICAgICAgICAgICAgICBpZiAoY29kLmVudHJvcHlDb2RlcldpdGhDdXN0b21QcmVjaW5jdHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJlY2luY3RzU2l6ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoaiA8IGxlbmd0aCArIHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgcHJlY2luY3RzU2l6ZSA9IGRhdGFbaisrXTtcbiAgICAgICAgICAgICAgICAgIHByZWNpbmN0c1NpemVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBQUHg6IHByZWNpbmN0c1NpemUgJiAweEYsXG4gICAgICAgICAgICAgICAgICAgIFBQeTogcHJlY2luY3RzU2l6ZSA+PiA0LFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvZC5wcmVjaW5jdHNTaXplcyA9IHByZWNpbmN0c1NpemVzO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHZhciB1bnN1cHBvcnRlZCA9IFtdO1xuICAgICAgICAgICAgICBpZiAoY29kLnNlbGVjdGl2ZUFyaXRobWV0aWNDb2RpbmdCeXBhc3MpIHtcbiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZC5wdXNoKCdzZWxlY3RpdmVBcml0aG1ldGljQ29kaW5nQnlwYXNzJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGNvZC5yZXNldENvbnRleHRQcm9iYWJpbGl0aWVzKSB7XG4gICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWQucHVzaCgncmVzZXRDb250ZXh0UHJvYmFiaWxpdGllcycpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjb2QudGVybWluYXRpb25PbkVhY2hDb2RpbmdQYXNzKSB7XG4gICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWQucHVzaCgndGVybWluYXRpb25PbkVhY2hDb2RpbmdQYXNzJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGNvZC52ZXJ0aWNhbGx5U3RyaXBlKSB7XG4gICAgICAgICAgICAgICAgdW5zdXBwb3J0ZWQucHVzaCgndmVydGljYWxseVN0cmlwZScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjb2QucHJlZGljdGFibGVUZXJtaW5hdGlvbikge1xuICAgICAgICAgICAgICAgIHVuc3VwcG9ydGVkLnB1c2goJ3ByZWRpY3RhYmxlVGVybWluYXRpb24nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodW5zdXBwb3J0ZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGRvTm90UmVjb3ZlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBDT0Qgb3B0aW9ucyAoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuc3VwcG9ydGVkLmpvaW4oJywgJykgKyAnKScpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChjb250ZXh0Lm1haW5IZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LkNPRCA9IGNvZDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaWxlLkNPRCA9IGNvZDtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmN1cnJlbnRUaWxlLkNPQyA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweEZGOTA6IC8vIFN0YXJ0IG9mIHRpbGUtcGFydCAoU09UKVxuICAgICAgICAgICAgICBsZW5ndGggPSByZWFkVWludDE2KGRhdGEsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgdGlsZSA9IHt9O1xuICAgICAgICAgICAgICB0aWxlLmluZGV4ID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbiArIDIpO1xuICAgICAgICAgICAgICB0aWxlLmxlbmd0aCA9IHJlYWRVaW50MzIoZGF0YSwgcG9zaXRpb24gKyA0KTtcbiAgICAgICAgICAgICAgdGlsZS5kYXRhRW5kID0gdGlsZS5sZW5ndGggKyBwb3NpdGlvbiAtIDI7XG4gICAgICAgICAgICAgIHRpbGUucGFydEluZGV4ID0gZGF0YVtwb3NpdGlvbiArIDhdO1xuICAgICAgICAgICAgICB0aWxlLnBhcnRzQ291bnQgPSBkYXRhW3Bvc2l0aW9uICsgOV07XG5cbiAgICAgICAgICAgICAgY29udGV4dC5tYWluSGVhZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmICh0aWxlLnBhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHJlc2V0IGNvbXBvbmVudCBzcGVjaWZpYyBzZXR0aW5nc1xuICAgICAgICAgICAgICAgIHRpbGUuQ09EID0gY29udGV4dC5DT0Q7XG4gICAgICAgICAgICAgICAgdGlsZS5DT0MgPSBjb250ZXh0LkNPQy5zbGljZSgwKTsgLy8gY2xvbmUgb2YgdGhlIGdsb2JhbCBDT0NcbiAgICAgICAgICAgICAgICB0aWxlLlFDRCA9IGNvbnRleHQuUUNEO1xuICAgICAgICAgICAgICAgIHRpbGUuUUNDID0gY29udGV4dC5RQ0Muc2xpY2UoMCk7IC8vIGNsb25lIG9mIHRoZSBnbG9iYWwgQ09DXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udGV4dC5jdXJyZW50VGlsZSA9IHRpbGU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweEZGOTM6IC8vIFN0YXJ0IG9mIGRhdGEgKFNPRClcbiAgICAgICAgICAgICAgdGlsZSA9IGNvbnRleHQuY3VycmVudFRpbGU7XG4gICAgICAgICAgICAgIGlmICh0aWxlLnBhcnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGluaXRpYWxpemVUaWxlKGNvbnRleHQsIHRpbGUuaW5kZXgpO1xuICAgICAgICAgICAgICAgIGJ1aWxkUGFja2V0cyhjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIG1vdmluZyB0byB0aGUgZW5kIG9mIHRoZSBkYXRhXG4gICAgICAgICAgICAgIGxlbmd0aCA9IHRpbGUuZGF0YUVuZCAtIHBvc2l0aW9uO1xuICAgICAgICAgICAgICBpZiAoIWlzT25seVBhcnNlSGVhZGVycykge1xuICAgICAgICAgICAgICAgIHBhcnNlVGlsZVBhY2tldHMoY29udGV4dCwgZGF0YSwgcG9zaXRpb24sIGxlbmd0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAweEZGNTU6IC8vIFRpbGUtcGFydCBsZW5ndGhzLCBtYWluIGhlYWRlciAoVExNKVxuICAgICAgICAgICAgY2FzZSAweEZGNTc6IC8vIFBhY2tldCBsZW5ndGgsIG1haW4gaGVhZGVyIChQTE0pXG4gICAgICAgICAgICBjYXNlIDB4RkY1ODogLy8gUGFja2V0IGxlbmd0aCwgdGlsZS1wYXJ0IGhlYWRlciAoUExUKVxuICAgICAgICAgICAgY2FzZSAweEZGNjQ6IC8vIENvbW1lbnQgKENPTSlcbiAgICAgICAgICAgICAgbGVuZ3RoID0gcmVhZFVpbnQxNihkYXRhLCBwb3NpdGlvbik7XG4gICAgICAgICAgICAgIC8vIHNraXBwaW5nIGNvbnRlbnRcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDB4RkY1MzogLy8gQ29kaW5nIHN0eWxlIGNvbXBvbmVudCAoQ09DKVxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVzdHJlYW0gY29kZSAweEZGNTMgKENPQykgaXMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbm90IGltcGxlbWVudGVkJyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29kZXN0cmVhbSBjb2RlOiAnICsgY29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3NpdGlvbiArPSBsZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvTm90UmVjb3ZlciB8fCB0aGlzLmZhaWxPbkNvcnJ1cHRlZEltYWdlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEpweEVycm9yKGUubWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybignSlBYOiBUcnlpbmcgdG8gcmVjb3ZlciBmcm9tOiAnICsgZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc09ubHlQYXJzZUhlYWRlcnMpIHtcbiAgICAgICAgdGhpcy5kZWNvZGUoY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICB0aGlzLndpZHRoID0gY29udGV4dC5TSVouWHNpeiAtIGNvbnRleHQuU0laLlhPc2l6O1xuICAgICAgdGhpcy5oZWlnaHQgPSBjb250ZXh0LlNJWi5Zc2l6IC0gY29udGV4dC5TSVouWU9zaXo7XG4gICAgICB0aGlzLmNvbXBvbmVudHNDb3VudCA9IGNvbnRleHQuU0laLkNzaXo7XG4gICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9LFxuICAgIGludmFsaWRhdGVEYXRhOiBmdW5jdGlvbiBKcHhJbWFnZV9pbnZhbGlkYXRlRGF0YShjb250ZXh0KSB7XG4gICAgICBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZCA9XG4gICAgICAgIChjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZCB8fCAwKSArIDE7XG4gICAgfSxcbiAgICBhZGRQYWNrZXRzRGF0YTogZnVuY3Rpb24gSnB4SW1hZ2VfYWRkUGFja2V0RGF0YShjb250ZXh0LCBwYWNrZXRzRGF0YSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwYWNrZXRzRGF0YS5wYWNrZXREYXRhT2Zmc2V0cy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIgcGFja2V0T2Zmc2V0cyA9IHBhY2tldHNEYXRhLnBhY2tldERhdGFPZmZzZXRzW2pdO1xuICAgICAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbcGFja2V0T2Zmc2V0cy50aWxlSW5kZXhdO1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW3BhY2tldE9mZnNldHMuY107XG4gICAgICAgIHZhciByZXNvbHV0aW9uID0gY29tcG9uZW50LnJlc29sdXRpb25zW3BhY2tldE9mZnNldHMucl07XG4gICAgICAgIHZhciBwID0gcGFja2V0T2Zmc2V0cy5wO1xuICAgICAgICB2YXIgcGl4ZWxzUHJlY2luY3QgPSByZXNvbHV0aW9uLnBpeGVsc1ByZWNpbmN0c1twXTtcbiAgICAgICAgdmFyIGNvZGVibG9ja3MgPSBwaXhlbHNQcmVjaW5jdC5jb2RlYmxvY2tzO1xuICAgICAgICBwaXhlbHNQcmVjaW5jdC5oYXNEYXRhID0gdHJ1ZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWNrZXRPZmZzZXRzLmNvZGVibG9ja09mZnNldHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICB2YXIgY29kZWJsb2NrT2Zmc2V0cyA9IHBhY2tldE9mZnNldHMuY29kZWJsb2NrT2Zmc2V0c1tpXTtcbiAgICAgICAgICB2YXIgaXNOb0RhdGEgPSBjb2RlYmxvY2tPZmZzZXRzLnN0YXJ0ID09PSBjb2RlYmxvY2tPZmZzZXRzLmVuZDtcbiAgICAgICAgICBpZiAoaXNOb0RhdGEpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY29kZWJsb2NrID0gY29kZWJsb2Nrc1tpXTtcbiAgICAgICAgICBpZiAoY29kZWJsb2NrLmRhdGFJbnZhbGlkYXRpb25JZCAhPT0gY29udGV4dC5kYXRhSW52YWxpZGF0aW9uSWQpIHtcbiAgICAgICAgICAgIGNvZGVibG9jay5kYXRhSW52YWxpZGF0aW9uSWQgPSBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZDtcbiAgICAgICAgICAgIGNvZGVibG9jay5kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY29kZWJsb2NrLnplcm9CaXRQbGFuZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB2YXIgc3ViYmFuZERhdGFJZCA9IGNvZGVibG9jay5wYXJlbnRTdWJiYW5kLmRhdGFJbnZhbGlkYXRpb25JZDtcbiAgICAgICAgICAgIGlmIChzdWJiYW5kRGF0YUlkICE9PSBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZCkge1xuICAgICAgICAgICAgICBzdWJiYW5kRGF0YUlkID0gY29udGV4dC5kYXRhSW52YWxpZGF0aW9uSWQ7XG4gICAgICAgICAgICAgIGNvZGVibG9jay5wYXJlbnRTdWJiYW5kLmRhdGFJbnZhbGlkYXRpb25JZCA9IHN1YmJhbmREYXRhSWQ7XG4gICAgICAgICAgICAgIGNvZGVibG9jay5wYXJlbnRTdWJiYW5kLmNvZGVibG9ja3NXaXRoRGF0YSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY29kZWJsb2NrWydkYXRhJ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29kZWJsb2NrLmRhdGEgPSBbXTtcbiAgICAgICAgICAgIGNvZGVibG9jay5wYXJlbnRTdWJiYW5kLmNvZGVibG9ja3NXaXRoRGF0YS5wdXNoKGNvZGVibG9jayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjb2RlYmxvY2tPZmZzZXRzLnplcm9CaXRQbGFuZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGNvZGVibG9jay56ZXJvQml0UGxhbmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgY29kZWJsb2NrLnplcm9CaXRQbGFuZXMgPSBjb2RlYmxvY2tPZmZzZXRzLnplcm9CaXRQbGFuZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZWJsb2NrLnplcm9CaXRQbGFuZXMgIT09IGNvZGVibG9ja09mZnNldHMuemVyb0JpdFBsYW5lcykge1xuICAgICAgICAgICAgICB0aHJvdyAnSlBYIEVycm9yOiBVbm1hdGNoZWQgemVybyBiaXQgcGxhbmVzJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVibG9jay56ZXJvQml0UGxhbmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93ICdKUFggRXJyb3I6IHplcm9CaXRQbGFuZXMgaXMgdW5rbm93bic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvZGVibG9jay5pbmNsdWRlZCA9IHRydWU7XG4gICAgICAgICAgY29kZWJsb2NrLmRhdGEucHVzaCh7XG4gICAgICAgICAgICBkYXRhOiBwYWNrZXRzRGF0YS5kYXRhLFxuICAgICAgICAgICAgc3RhcnQ6IGNvZGVibG9ja09mZnNldHMuc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGNvZGVibG9ja09mZnNldHMuZW5kLFxuICAgICAgICAgICAgY29kaW5ncGFzc2VzOiBjb2RlYmxvY2tPZmZzZXRzLmNvZGluZ3Bhc3Nlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkZWNvZGVQcmVjaW5jdENvZWZmaWNpZW50czogZnVuY3Rpb24gSnB4SW1hZ2VfZGVjb2RlQ29kZWJsb2NrQ29lZmZpY2llbnRzKFxuICAgICAgICBjb250ZXh0LCB0aWxlSWR4LCBjb21wb25lbnRJZHgsIHJlc29sdXRpb25JZHgsIHByZWNpbmN0SWR4KSB7XG4gICAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUlkeF07XG4gICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW2NvbXBvbmVudElkeF07XG4gICAgICB2YXIgcmVzb2x1dGlvbiA9IGNvbXBvbmVudC5yZXNvbHV0aW9uc1tyZXNvbHV0aW9uSWR4XTtcbiAgICAgIHZhciBwaXhlbHNQcmVjaW5jdCA9IHJlc29sdXRpb24ucGl4ZWxzUHJlY2luY3RzW3ByZWNpbmN0SWR4XTtcbiAgICAgIFxuICAgICAgdmFyIGNvZGluZ1N0eWxlUGFyYW1ldGVycyA9IGNvbXBvbmVudC5jb2RpbmdTdHlsZVBhcmFtZXRlcnM7XG4gICAgICB2YXIgcXVhbnRpemF0aW9uUGFyYW1ldGVycyA9IGNvbXBvbmVudC5xdWFudGl6YXRpb25QYXJhbWV0ZXJzO1xuICAgICAgdmFyIHNwcWNkcyA9IHF1YW50aXphdGlvblBhcmFtZXRlcnMuU1BxY2RzO1xuICAgICAgdmFyIHNjYWxhckV4cG91bmRlZCA9IHF1YW50aXphdGlvblBhcmFtZXRlcnMuc2NhbGFyRXhwb3VuZGVkO1xuICAgICAgdmFyIGd1YXJkQml0cyA9IHF1YW50aXphdGlvblBhcmFtZXRlcnMuZ3VhcmRCaXRzO1xuICAgICAgdmFyIHNlZ21lbnRhdGlvblN5bWJvbFVzZWQgPSBjb2RpbmdTdHlsZVBhcmFtZXRlcnMuc2VnbWVudGF0aW9uU3ltYm9sVXNlZDtcbiAgICAgIHZhciBwcmVjaXNpb24gPSBjb250ZXh0LmNvbXBvbmVudHNbY29tcG9uZW50SWR4XS5wcmVjaXNpb247XG4gICAgICB2YXIgcmV2ZXJzaWJsZSA9IGNvZGluZ1N0eWxlUGFyYW1ldGVycy5yZXZlcnNpYmxlVHJhbnNmb3JtYXRpb247XG4gICAgICBcbiAgICAgIHZhciByZWdpb25JbkxldmVsID0gY2FsY3VsYXRlUmVnaW9uSW5MZXZlbE9mUGl4ZWxzUHJlY2luY3QoXG4gICAgICAgIHBpeGVsc1ByZWNpbmN0LCByZXNvbHV0aW9uKTtcbiAgICAgIHZhciBjb2VmZmljaWVudHMgPVxuICAgICAgICBnZXRDb2VmZmljaWVudHNPZlJlc29sdXRpb24ocmVzb2x1dGlvbiwgc3BxY2RzLCBzY2FsYXJFeHBvdW5kZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24sIGd1YXJkQml0cywgcmV2ZXJzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRhdGlvblN5bWJvbFVzZWQsIHJlZ2lvbkluTGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZCk7XG4gICAgICBcbiAgICAgIHJldHVybiBjb2VmZmljaWVudHM7XG4gICAgfSxcbiAgICBzZXRQcmVjaW5jdENvZWZmaWNpZW50czogZnVuY3Rpb24gSnB4SW1hZ2VfYWRkUHJlY2luY3RDb2VmZmljaWVudHMoXG4gICAgICAgIGNvbnRleHQsIGNvZWZmaWNpZW50cywgdGlsZUlkeCwgY29tcG9uZW50SWR4LCByZXNvbHV0aW9uSWR4LFxuICAgICAgICBwcmVjaW5jdElkeCkge1xuICAgICAgdmFyIHRpbGUgPSBjb250ZXh0LnRpbGVzW3RpbGVJZHhdO1xuICAgICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuY29tcG9uZW50c1tjb21wb25lbnRJZHhdO1xuICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcmVzb2x1dGlvbklkeF07XG4gICAgICB2YXIgcGl4ZWxzUHJlY2luY3QgPSByZXNvbHV0aW9uLnBpeGVsc1ByZWNpbmN0c1twcmVjaW5jdElkeF07XG4gICAgICBcbiAgICAgIGlmIChyZXNvbHV0aW9uLmRhdGFJbnZhbGlkYXRpb25JZCAhPT0gY29udGV4dC5kYXRhSW52YWxpZGF0aW9uSWQpIHtcbiAgICAgICAgcmVzb2x1dGlvbi5kYXRhSW52YWxpZGF0aW9uSWQgPSBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZDtcbiAgICAgICAgcmVzb2x1dGlvbi5waXhlbHNQcmVjaW5jdHNXaXRoRGVjb2RlZENvZWZmaWNpZW50cyA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFwaXhlbHNQcmVjaW5jdC5oYXNEZWNvZGVkQ29lZmZpY2llbnRzKSB7XG4gICAgICAgIHJlc29sdXRpb24ucGl4ZWxzUHJlY2luY3RzV2l0aERlY29kZWRDb2VmZmljaWVudHMucHVzaChwaXhlbHNQcmVjaW5jdCk7XG4gICAgICB9XG4gICAgICBwaXhlbHNQcmVjaW5jdC5kZWNvZGVkQ29lZmZpY2llbnRzID0gY29lZmZpY2llbnRzO1xuICAgICAgcmVzb2x1dGlvbi5oYXNEZWNvZGVkQ29lZmZpY2llbnRzID0gdHJ1ZTtcbiAgICAgIHBpeGVsc1ByZWNpbmN0LmRhdGFJbnZhbGlkYXRpb25JZCA9IGNvbnRleHQuZGF0YUludmFsaWRhdGlvbklkO1xuICAgIH0sXG4gICAgZGVjb2RlOiBmdW5jdGlvbiBKcHhJbWFnZV9kZWNvZGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgaWYgKG9wdGlvbnMgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnJlZ2lvblRvUGFyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcmVnaW9uID0gb3B0aW9ucy5yZWdpb25Ub1BhcnNlO1xuICAgICAgICBpZiAocmVnaW9uLnRvcCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICByZWdpb24ubGVmdCA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICByZWdpb24ucmlnaHQgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgcmVnaW9uLmJvdHRvbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdKUFggRXJyb3I6IEVpdGhlciBsZWZ0LCB0b3AsIHJpZ2h0IG9yICcgK1xuICAgICAgICAgICAgJ2JvdHRvbSBhcmUgdW5kZWZpbmVkIGluIHJlZ2lvblRvUGFyc2UnKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnJlZ2lvblRvUGFyc2UgPSByZWdpb247XG4gICAgICB9XG4gICAgICB0aGlzLnRpbGVzID0gdHJhbnNmb3JtQ29tcG9uZW50cyhjb250ZXh0KTtcbiAgICAgIGNvbnRleHQucmVnaW9uVG9QYXJzZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZVJlZ2lvbkluTGV2ZWxPZlBpeGVsc1ByZWNpbmN0KHBpeGVsc1ByZWNpbmN0cywgcmVzb2x1dGlvbikge1xuICAgIHZhciByZWdpb25JbkxldmVsO1xuICAgIHZhciBzdWJiYW5kcyA9IHJlc29sdXRpb24uc3ViYmFuZHM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwaXhlbHNQcmVjaW5jdHMuc3ViYmFuZFByZWNpbmN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGludGVybGVhdmUgPSByZXNvbHV0aW9uLnN1YmJhbmRzW2ldLnR5cGUgIT09ICdMTCc7XG4gICAgICB2YXIgeDAgPSBwaXhlbHNQcmVjaW5jdHMuc3ViYmFuZFByZWNpbmN0c1tpXS50YnhNaW5fO1xuICAgICAgdmFyIHkwID0gcGl4ZWxzUHJlY2luY3RzLnN1YmJhbmRQcmVjaW5jdHNbaV0udGJ5TWluXztcbiAgICAgIHZhciB4MSA9IHBpeGVsc1ByZWNpbmN0cy5zdWJiYW5kUHJlY2luY3RzW2ldLnRieE1heF87XG4gICAgICB2YXIgeTEgPSBwaXhlbHNQcmVjaW5jdHMuc3ViYmFuZFByZWNpbmN0c1tpXS50YnlNYXhfO1xuICAgICAgaWYgKGludGVybGVhdmUpIHtcbiAgICAgICAgeDAgPSAoeDAgLSByZXNvbHV0aW9uLnN1YmJhbmRzW2ldLnRieDApICogMiArIHJlc29sdXRpb24udHJ4MDtcbiAgICAgICAgeTAgPSAoeTAgLSByZXNvbHV0aW9uLnN1YmJhbmRzW2ldLnRieTApICogMiArIHJlc29sdXRpb24udHJ5MDtcbiAgICAgICAgeDEgPSAoeDEgLSByZXNvbHV0aW9uLnN1YmJhbmRzW2ldLnRieDApICogMiArIHJlc29sdXRpb24udHJ4MDtcbiAgICAgICAgeTEgPSAoeTEgLSByZXNvbHV0aW9uLnN1YmJhbmRzW2ldLnRieTApICogMiArIHJlc29sdXRpb24udHJ5MDtcbiAgICAgIH1cbiAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgIHJlZ2lvbkluTGV2ZWwgPSB7IHgwOiB4MCwgeTA6IHkwLCB4MTogeDEsIHkxOiB5MSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MCA9IE1hdGgubWluKHJlZ2lvbkluTGV2ZWwueDAsIHgwKTtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MCA9IE1hdGgubWluKHJlZ2lvbkluTGV2ZWwueTAsIHkwKTtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MSA9IE1hdGgubWF4KHJlZ2lvbkluTGV2ZWwueDEsIHgxKTtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MSA9IE1hdGgubWF4KHJlZ2lvbkluTGV2ZWwueTEsIHkxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlZ2lvbkluTGV2ZWw7XG4gIH1cbiAgZnVuY3Rpb24gY2FsY3VsYXRlQ29tcG9uZW50RGltZW5zaW9ucyhjb21wb25lbnQsIHNpeikge1xuICAgIC8vIFNlY3Rpb24gQi4yIENvbXBvbmVudCBtYXBwaW5nXG4gICAgY29tcG9uZW50LngwID0gTWF0aC5jZWlsKHNpei5YT3NpeiAvIGNvbXBvbmVudC5YUnNpeik7XG4gICAgY29tcG9uZW50LngxID0gTWF0aC5jZWlsKHNpei5Yc2l6IC8gY29tcG9uZW50LlhSc2l6KTtcbiAgICBjb21wb25lbnQueTAgPSBNYXRoLmNlaWwoc2l6LllPc2l6IC8gY29tcG9uZW50LllSc2l6KTtcbiAgICBjb21wb25lbnQueTEgPSBNYXRoLmNlaWwoc2l6LllzaXogLyBjb21wb25lbnQuWVJzaXopO1xuICAgIGNvbXBvbmVudC53aWR0aCA9IGNvbXBvbmVudC54MSAtIGNvbXBvbmVudC54MDtcbiAgICBjb21wb25lbnQuaGVpZ2h0ID0gY29tcG9uZW50LnkxIC0gY29tcG9uZW50LnkwO1xuICB9XG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZVRpbGVHcmlkcyhjb250ZXh0LCBjb21wb25lbnRzKSB7XG4gICAgdmFyIHNpeiA9IGNvbnRleHQuU0laO1xuICAgIC8vIFNlY3Rpb24gQi4zIERpdmlzaW9uIGludG8gdGlsZSBhbmQgdGlsZS1jb21wb25lbnRzXG4gICAgdmFyIHRpbGUsIHRpbGVzID0gW107XG4gICAgdmFyIG51bVh0aWxlcyA9IE1hdGguY2VpbCgoc2l6LlhzaXogLSBzaXouWFRPc2l6KSAvIHNpei5YVHNpeik7XG4gICAgdmFyIG51bVl0aWxlcyA9IE1hdGguY2VpbCgoc2l6LllzaXogLSBzaXouWVRPc2l6KSAvIHNpei5ZVHNpeik7XG4gICAgZm9yICh2YXIgcSA9IDA7IHEgPCBudW1ZdGlsZXM7IHErKykge1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBudW1YdGlsZXM7IHArKykge1xuICAgICAgICB0aWxlID0ge307XG4gICAgICAgIHRpbGUudHgwID0gTWF0aC5tYXgoc2l6LlhUT3NpeiArIHAgKiBzaXouWFRzaXosIHNpei5YT3Npeik7XG4gICAgICAgIHRpbGUudHkwID0gTWF0aC5tYXgoc2l6LllUT3NpeiArIHEgKiBzaXouWVRzaXosIHNpei5ZT3Npeik7XG4gICAgICAgIHRpbGUudHgxID0gTWF0aC5taW4oc2l6LlhUT3NpeiArIChwICsgMSkgKiBzaXouWFRzaXosIHNpei5Yc2l6KTtcbiAgICAgICAgdGlsZS50eTEgPSBNYXRoLm1pbihzaXouWVRPc2l6ICsgKHEgKyAxKSAqIHNpei5ZVHNpeiwgc2l6LllzaXopO1xuICAgICAgICB0aWxlLndpZHRoID0gdGlsZS50eDEgLSB0aWxlLnR4MDtcbiAgICAgICAgdGlsZS5oZWlnaHQgPSB0aWxlLnR5MSAtIHRpbGUudHkwO1xuICAgICAgICB0aWxlLmNvbXBvbmVudHMgPSBbXTtcbiAgICAgICAgdGlsZXMucHVzaCh0aWxlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29udGV4dC50aWxlcyA9IHRpbGVzO1xuXG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHNpei5Dc2l6O1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNvbXBvbmVudHNDb3VudDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciBjb21wb25lbnQgPSBjb21wb25lbnRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gdGlsZXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICB2YXIgdGlsZUNvbXBvbmVudCA9IHt9O1xuICAgICAgICB0aWxlID0gdGlsZXNbal07XG4gICAgICAgIHRpbGVDb21wb25lbnQudGN4MCA9IE1hdGguY2VpbCh0aWxlLnR4MCAvIGNvbXBvbmVudC5YUnNpeik7XG4gICAgICAgIHRpbGVDb21wb25lbnQudGN5MCA9IE1hdGguY2VpbCh0aWxlLnR5MCAvIGNvbXBvbmVudC5ZUnNpeik7XG4gICAgICAgIHRpbGVDb21wb25lbnQudGN4MSA9IE1hdGguY2VpbCh0aWxlLnR4MSAvIGNvbXBvbmVudC5YUnNpeik7XG4gICAgICAgIHRpbGVDb21wb25lbnQudGN5MSA9IE1hdGguY2VpbCh0aWxlLnR5MSAvIGNvbXBvbmVudC5ZUnNpeik7XG4gICAgICAgIHRpbGVDb21wb25lbnQud2lkdGggPSB0aWxlQ29tcG9uZW50LnRjeDEgLSB0aWxlQ29tcG9uZW50LnRjeDA7XG4gICAgICAgIHRpbGVDb21wb25lbnQuaGVpZ2h0ID0gdGlsZUNvbXBvbmVudC50Y3kxIC0gdGlsZUNvbXBvbmVudC50Y3kwO1xuICAgICAgICB0aWxlLmNvbXBvbmVudHNbaV0gPSB0aWxlQ29tcG9uZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRCbG9ja3NEaW1lbnNpb25zKGNvbnRleHQsIGNvbXBvbmVudCwgcikge1xuICAgIHZhciBjb2RPckNvYyA9IGNvbXBvbmVudC5jb2RpbmdTdHlsZVBhcmFtZXRlcnM7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmICghY29kT3JDb2MuZW50cm9weUNvZGVyV2l0aEN1c3RvbVByZWNpbmN0cykge1xuICAgICAgcmVzdWx0LlBQeCA9IDE1O1xuICAgICAgcmVzdWx0LlBQeSA9IDE1O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuUFB4ID0gY29kT3JDb2MucHJlY2luY3RzU2l6ZXNbcl0uUFB4O1xuICAgICAgcmVzdWx0LlBQeSA9IGNvZE9yQ29jLnByZWNpbmN0c1NpemVzW3JdLlBQeTtcbiAgICB9XG4gICAgLy8gY2FsY3VsYXRlIGNvZGVibG9jayBzaXplIGFzIGRlc2NyaWJlZCBpbiBzZWN0aW9uIEIuN1xuICAgIHJlc3VsdC54Y2JfID0gKHIgPiAwID8gTWF0aC5taW4oY29kT3JDb2MueGNiLCByZXN1bHQuUFB4IC0gMSkgOlxuICAgICAgICAgICAgICAgICAgIE1hdGgubWluKGNvZE9yQ29jLnhjYiwgcmVzdWx0LlBQeCkpO1xuICAgIHJlc3VsdC55Y2JfID0gKHIgPiAwID8gTWF0aC5taW4oY29kT3JDb2MueWNiLCByZXN1bHQuUFB5IC0gMSkgOlxuICAgICAgICAgICAgICAgICAgIE1hdGgubWluKGNvZE9yQ29jLnljYiwgcmVzdWx0LlBQeSkpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZnVuY3Rpb24gYnVpbGRQcmVjaW5jdHMoY29udGV4dCwgcmVzb2x1dGlvbiwgZGltZW5zaW9ucykge1xuICAgIC8vIFNlY3Rpb24gQi42IERpdmlzaW9uIHJlc29sdXRpb24gdG8gcHJlY2luY3RzXG4gICAgdmFyIHByZWNpbmN0V2lkdGggPSAxIDw8IGRpbWVuc2lvbnMuUFB4O1xuICAgIHZhciBwcmVjaW5jdEhlaWdodCA9IDEgPDwgZGltZW5zaW9ucy5QUHk7XG4gICAgLy8gSmFzcGVyIGludHJvZHVjZXMgY29kZWJsb2NrIGdyb3VwcyBmb3IgbWFwcGluZyBlYWNoIHN1YmJhbmQgY29kZWJsb2Nrc1xuICAgIC8vIHRvIHByZWNpbmN0cy4gUHJlY2luY3QgcGFydGl0aW9uIGRpdmlkZXMgYSByZXNvbHV0aW9uIGFjY29yZGluZyB0byB3aWR0aFxuICAgIC8vIGFuZCBoZWlnaHQgcGFyYW1ldGVycy4gVGhlIHN1YmJhbmQgdGhhdCBiZWxvbmdzIHRvIHRoZSByZXNvbHV0aW9uIGxldmVsXG4gICAgLy8gaGFzIGEgZGlmZmVyZW50IHNpemUgdGhhbiB0aGUgbGV2ZWwsIHVubGVzcyBpdCBpcyB0aGUgemVybyByZXNvbHV0aW9uLlxuXG4gICAgLy8gRnJvbSBKYXNwZXIgZG9jdW1lbnRhdGlvbjoganBlZzIwMDAucGRmLCBzZWN0aW9uIEs6IFRpZXItMiBjb2Rpbmc6XG4gICAgLy8gVGhlIHByZWNpbmN0IHBhcnRpdGlvbmluZyBmb3IgYSBwYXJ0aWN1bGFyIHN1YmJhbmQgaXMgZGVyaXZlZCBmcm9tIGFcbiAgICAvLyBwYXJ0aXRpb25pbmcgb2YgaXRzIHBhcmVudCBMTCBiYW5kIChpLmUuLCB0aGUgTEwgYmFuZCBhdCB0aGUgbmV4dCBoaWdoZXJcbiAgICAvLyByZXNvbHV0aW9uIGxldmVsKS4uLiBUaGUgTEwgYmFuZCBhc3NvY2lhdGVkIHdpdGggZWFjaCByZXNvbHV0aW9uIGxldmVsIGlzXG4gICAgLy8gZGl2aWRlZCBpbnRvIHByZWNpbmN0cy4uLiBFYWNoIG9mIHRoZSByZXN1bHRpbmcgcHJlY2luY3QgcmVnaW9ucyBpcyB0aGVuXG4gICAgLy8gbWFwcGVkIGludG8gaXRzIGNoaWxkIHN1YmJhbmRzIChpZiBhbnkpIGF0IHRoZSBuZXh0IGxvd2VyIHJlc29sdXRpb25cbiAgICAvLyBsZXZlbC4gVGhpcyBpcyBhY2NvbXBsaXNoZWQgYnkgdXNpbmcgdGhlIGNvb3JkaW5hdGUgdHJhbnNmb3JtYXRpb25cbiAgICAvLyAodSwgdikgPSAoY2VpbCh4LzIpLCBjZWlsKHkvMikpIHdoZXJlICh4LCB5KSBhbmQgKHUsIHYpIGFyZSB0aGVcbiAgICAvLyBjb29yZGluYXRlcyBvZiBhIHBvaW50IGluIHRoZSBMTCBiYW5kIGFuZCBjaGlsZCBzdWJiYW5kLCByZXNwZWN0aXZlbHkuXG4gICAgdmFyIGlzWmVyb1JlcyA9IHJlc29sdXRpb24ucmVzTGV2ZWwgPT09IDA7XG4gICAgdmFyIHByZWNpbmN0V2lkdGhJblN1YmJhbmQgPSAxIDw8IChkaW1lbnNpb25zLlBQeCArIChpc1plcm9SZXMgPyAwIDogLTEpKTtcbiAgICB2YXIgcHJlY2luY3RIZWlnaHRJblN1YmJhbmQgPSAxIDw8IChkaW1lbnNpb25zLlBQeSArIChpc1plcm9SZXMgPyAwIDogLTEpKTtcbiAgICB2YXIgbnVtcHJlY2luY3Rzd2lkZSA9IChyZXNvbHV0aW9uLnRyeDEgPiByZXNvbHV0aW9uLnRyeDAgP1xuICAgICAgTWF0aC5jZWlsKHJlc29sdXRpb24udHJ4MSAvIHByZWNpbmN0V2lkdGgpIC1cbiAgICAgIE1hdGguZmxvb3IocmVzb2x1dGlvbi50cngwIC8gcHJlY2luY3RXaWR0aCkgOiAwKTtcbiAgICB2YXIgbnVtcHJlY2luY3RzaGlnaCA9IChyZXNvbHV0aW9uLnRyeTEgPiByZXNvbHV0aW9uLnRyeTAgP1xuICAgICAgTWF0aC5jZWlsKHJlc29sdXRpb24udHJ5MSAvIHByZWNpbmN0SGVpZ2h0KSAtXG4gICAgICBNYXRoLmZsb29yKHJlc29sdXRpb24udHJ5MCAvIHByZWNpbmN0SGVpZ2h0KSA6IDApO1xuICAgIHZhciBudW1wcmVjaW5jdHMgPSBudW1wcmVjaW5jdHN3aWRlICogbnVtcHJlY2luY3RzaGlnaDtcblxuICAgIHJlc29sdXRpb24ucHJlY2luY3RQYXJhbWV0ZXJzID0ge1xuICAgICAgcHJlY2luY3RXaWR0aCxcbiAgICAgIHByZWNpbmN0SGVpZ2h0LFxuICAgICAgbnVtcHJlY2luY3Rzd2lkZSxcbiAgICAgIG51bXByZWNpbmN0c2hpZ2gsXG4gICAgICBudW1wcmVjaW5jdHMsXG4gICAgICBwcmVjaW5jdFdpZHRoSW5TdWJiYW5kLFxuICAgICAgcHJlY2luY3RIZWlnaHRJblN1YmJhbmQsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBidWlsZENvZGVibG9ja3MoY29udGV4dCwgc3ViYmFuZCwgZGltZW5zaW9ucywgaW5kZXgpIHtcbiAgICAvLyBTZWN0aW9uIEIuNyBEaXZpc2lvbiBzdWItYmFuZCBpbnRvIGNvZGUtYmxvY2tzXG4gICAgdmFyIHhjYl8gPSBkaW1lbnNpb25zLnhjYl87XG4gICAgdmFyIHljYl8gPSBkaW1lbnNpb25zLnljYl87XG4gICAgdmFyIGNvZGVibG9ja1dpZHRoID0gMSA8PCB4Y2JfO1xuICAgIHZhciBjb2RlYmxvY2tIZWlnaHQgPSAxIDw8IHljYl87XG4gICAgdmFyIGNieDAgPSBzdWJiYW5kLnRieDAgPj4geGNiXztcbiAgICB2YXIgY2J5MCA9IHN1YmJhbmQudGJ5MCA+PiB5Y2JfO1xuICAgIHZhciBjYngxID0gKHN1YmJhbmQudGJ4MSArIGNvZGVibG9ja1dpZHRoIC0gMSkgPj4geGNiXztcbiAgICB2YXIgY2J5MSA9IChzdWJiYW5kLnRieTEgKyBjb2RlYmxvY2tIZWlnaHQgLSAxKSA+PiB5Y2JfO1xuICAgIHZhciBwcmVjaW5jdFBhcmFtZXRlcnMgPSBzdWJiYW5kLnJlc29sdXRpb24ucHJlY2luY3RQYXJhbWV0ZXJzO1xuICAgIHZhciBjb2RlYmxvY2tzID0gW107XG4gICAgdmFyIHByZWNpbmN0cyA9IFtdO1xuICAgIHZhciBpLCBqLCBjb2RlYmxvY2ssIHByZWNpbmN0TnVtYmVyO1xuICAgIGZvciAoaiA9IGNieTA7IGogPCBjYnkxOyBqKyspIHtcbiAgICAgIGZvciAoaSA9IGNieDA7IGkgPCBjYngxOyBpKyspIHtcbiAgICAgICAgY29kZWJsb2NrID0ge1xuICAgICAgICAgIGNieDogaSxcbiAgICAgICAgICBjYnk6IGosXG4gICAgICAgICAgdGJ4MDogY29kZWJsb2NrV2lkdGggKiBpLFxuICAgICAgICAgIHRieTA6IGNvZGVibG9ja0hlaWdodCAqIGosXG4gICAgICAgICAgdGJ4MTogY29kZWJsb2NrV2lkdGggKiAoaSArIDEpLFxuICAgICAgICAgIHRieTE6IGNvZGVibG9ja0hlaWdodCAqIChqICsgMSksXG4gICAgICAgICAgcGFyZW50U3ViYmFuZDogc3ViYmFuZCxcbiAgICAgICAgfTtcblxuICAgICAgICBjb2RlYmxvY2sudGJ4MF8gPSBNYXRoLm1heChzdWJiYW5kLnRieDAsIGNvZGVibG9jay50YngwKTtcbiAgICAgICAgY29kZWJsb2NrLnRieTBfID0gTWF0aC5tYXgoc3ViYmFuZC50YnkwLCBjb2RlYmxvY2sudGJ5MCk7XG4gICAgICAgIGNvZGVibG9jay50YngxXyA9IE1hdGgubWluKHN1YmJhbmQudGJ4MSwgY29kZWJsb2NrLnRieDEpO1xuICAgICAgICBjb2RlYmxvY2sudGJ5MV8gPSBNYXRoLm1pbihzdWJiYW5kLnRieTEsIGNvZGVibG9jay50YnkxKTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgcHJlY2luY3QgbnVtYmVyIGZvciB0aGlzIGNvZGVibG9jaywgY29kZWJsb2NrIHBvc2l0aW9uXG4gICAgICAgIC8vIHNob3VsZCBiZSByZWxhdGl2ZSB0byBpdHMgc3ViYmFuZCwgdXNlIGFjdHVhbCBkaW1lbnNpb24gYW5kIHBvc2l0aW9uXG4gICAgICAgIC8vIFNlZSBjb21tZW50IGFib3V0IGNvZGVibG9jayBncm91cCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgIHZhciBwaSA9IE1hdGguZmxvb3IoKGNvZGVibG9jay50YngwXyAtIHN1YmJhbmQudGJ4MCkgL1xuICAgICAgICAgIHByZWNpbmN0UGFyYW1ldGVycy5wcmVjaW5jdFdpZHRoSW5TdWJiYW5kKTtcbiAgICAgICAgdmFyIHBqID0gTWF0aC5mbG9vcigoY29kZWJsb2NrLnRieTBfIC0gc3ViYmFuZC50YnkwKSAvXG4gICAgICAgICAgcHJlY2luY3RQYXJhbWV0ZXJzLnByZWNpbmN0SGVpZ2h0SW5TdWJiYW5kKTtcbiAgICAgICAgcHJlY2luY3ROdW1iZXIgPSBwaSArIChwaiAqIHByZWNpbmN0UGFyYW1ldGVycy5udW1wcmVjaW5jdHN3aWRlKTtcblxuICAgICAgICBjb2RlYmxvY2sucHJlY2luY3ROdW1iZXIgPSBwcmVjaW5jdE51bWJlcjtcbiAgICAgICAgY29kZWJsb2NrLnN1YmJhbmRUeXBlID0gc3ViYmFuZC50eXBlO1xuICAgICAgICBjb2RlYmxvY2suTGJsb2NrID0gMztcblxuICAgICAgICBpZiAoY29kZWJsb2NrLnRieDFfIDw9IGNvZGVibG9jay50YngwXyB8fFxuICAgICAgICAgICAgY29kZWJsb2NrLnRieTFfIDw9IGNvZGVibG9jay50YnkwXykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvZGVibG9ja3MucHVzaChjb2RlYmxvY2spO1xuICAgICAgICAvLyBidWlsZGluZyBwcmVjaW5jdCBmb3IgdGhlIHN1Yi1iYW5kXG4gICAgICAgIHZhciBwcmVjaW5jdCA9IHByZWNpbmN0c1twcmVjaW5jdE51bWJlcl07XG4gICAgICAgIGlmIChwcmVjaW5jdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGkgPCBwcmVjaW5jdC5jYnhNaW4pIHtcbiAgICAgICAgICAgIHByZWNpbmN0LmNieE1pbiA9IGk7XG4gICAgICAgICAgICBwcmVjaW5jdC50YnhNaW5fID0gY29kZWJsb2NrLnRieDBfO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IHByZWNpbmN0LmNieE1heCkge1xuICAgICAgICAgICAgcHJlY2luY3QuY2J4TWF4ID0gaTtcbiAgICAgICAgICAgIHByZWNpbmN0LnRieE1heF8gPSBjb2RlYmxvY2sudGJ4MV87XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChqIDwgcHJlY2luY3QuY2J5TWluKSB7XG4gICAgICAgICAgICBwcmVjaW5jdC5jYnlNaW4gPSBqO1xuICAgICAgICAgICAgcHJlY2luY3QudGJ5TWluXyA9IGNvZGVibG9jay50YnkwXztcbiAgICAgICAgICB9IGVsc2UgaWYgKGogPiBwcmVjaW5jdC5jYnlNYXgpIHtcbiAgICAgICAgICAgIHByZWNpbmN0LmNieU1heCA9IGo7XG4gICAgICAgICAgICBwcmVjaW5jdC50YnlNYXhfID0gY29kZWJsb2NrLnRieTFfO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmVjaW5jdHNbcHJlY2luY3ROdW1iZXJdID0gcHJlY2luY3QgPSB7XG4gICAgICAgICAgICBjYnhNaW46IGksXG4gICAgICAgICAgICBjYnlNaW46IGosXG4gICAgICAgICAgICBjYnhNYXg6IGksXG4gICAgICAgICAgICBjYnlNYXg6IGosXG4gICAgICAgICAgICB0YnhNaW5fOiBjb2RlYmxvY2sudGJ4MF8sXG4gICAgICAgICAgICB0YnhNYXhfOiBjb2RlYmxvY2sudGJ4MV8sXG4gICAgICAgICAgICB0YnlNaW5fOiBjb2RlYmxvY2sudGJ5MF8sXG4gICAgICAgICAgICB0YnlNYXhfOiBjb2RlYmxvY2sudGJ5MV8sXG4gICAgICAgICAgICBwaXhlbHNQcmVjaW5jdDogc3ViYmFuZC5yZXNvbHV0aW9uLnBpeGVsc1ByZWNpbmN0c1twcmVjaW5jdE51bWJlcl0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlY2luY3RbJ3BpeGVsc1ByZWNpbmN0J10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHByZWNpbmN0LnBpeGVsc1ByZWNpbmN0ID0ge1xuICAgICAgICAgICAgY29kZWJsb2NrczogW10sXG4gICAgICAgICAgICBzdWJiYW5kUHJlY2luY3RzOiBbXSxcbiAgICAgICAgICAgIGhhc0RhdGE6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgICBzdWJiYW5kLnJlc29sdXRpb24ucGl4ZWxzUHJlY2luY3RzW3ByZWNpbmN0TnVtYmVyXSA9XG4gICAgICAgICAgICBwcmVjaW5jdC5waXhlbHNQcmVjaW5jdDtcbiAgICAgICAgfVxuICAgICAgICBjb2RlYmxvY2sucHJlY2luY3QgPSBwcmVjaW5jdDtcbiAgICAgICAgdmFyIHBpeGVsc1ByZWNpbmN0ID0gcHJlY2luY3QucGl4ZWxzUHJlY2luY3Q7XG4gICAgICAgIHBpeGVsc1ByZWNpbmN0LmNvZGVibG9ja3MucHVzaChjb2RlYmxvY2spO1xuICAgICAgICBpZiAocGl4ZWxzUHJlY2luY3Quc3ViYmFuZFByZWNpbmN0c1tpbmRleF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBpeGVsc1ByZWNpbmN0LnN1YmJhbmRQcmVjaW5jdHNbaW5kZXhdID0gcHJlY2luY3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc3ViYmFuZC5jb2RlYmxvY2tQYXJhbWV0ZXJzID0ge1xuICAgICAgY29kZWJsb2NrV2lkdGg6IHhjYl8sXG4gICAgICBjb2RlYmxvY2tIZWlnaHQ6IHljYl8sXG4gICAgICBudW1jb2RlYmxvY2t3aWRlOiBjYngxIC0gY2J4MCArIDEsXG4gICAgICBudW1jb2RlYmxvY2toaWdoOiBjYnkxIC0gY2J5MCArIDEsXG4gICAgfTtcbiAgICBzdWJiYW5kLmNvZGVibG9ja3MgPSBjb2RlYmxvY2tzO1xuICAgIHN1YmJhbmQuc3ViYmFuZFByZWNpbmN0cyA9IHByZWNpbmN0cztcbiAgICBzdWJiYW5kLmNvZGVibG9ja3NXaXRoRGF0YSA9IFtdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVBhY2tldChyZXNvbHV0aW9uLCBwcmVjaW5jdE51bWJlciwgbGF5ZXJOdW1iZXIpIHtcbiAgICAvLyBTZWN0aW9uIEIuMTAuOCBPcmRlciBvZiBpbmZvIGluIHBhY2tldFxuICAgIC8vIHN1Yi1iYW5kcyBhbHJlYWR5IG9yZGVyZWQgaW4gJ0xMJywgJ0hMJywgJ0xIJywgYW5kICdISCcgc2VxdWVuY2VcbiAgICByZXR1cm4ge1xuICAgICAgbGF5ZXJOdW1iZXIsXG4gICAgICBjb2RlYmxvY2tzOiByZXNvbHV0aW9uLnBpeGVsc1ByZWNpbmN0c1twcmVjaW5jdE51bWJlcl0uY29kZWJsb2NrcyxcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIExheWVyUmVzb2x1dGlvbkNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoY29udGV4dCkge1xuICAgIHZhciBzaXogPSBjb250ZXh0LlNJWjtcbiAgICB2YXIgdGlsZUluZGV4ID0gY29udGV4dC5jdXJyZW50VGlsZS5pbmRleDtcbiAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUluZGV4XTtcbiAgICB2YXIgbGF5ZXJzQ291bnQgPSB0aWxlLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMubGF5ZXJzQ291bnQ7XG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHNpei5Dc2l6O1xuICAgIHZhciBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPSAwO1xuICAgIGZvciAodmFyIHEgPSAwOyBxIDwgY29tcG9uZW50c0NvdW50OyBxKyspIHtcbiAgICAgIG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9IE1hdGgubWF4KG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCxcbiAgICAgICAgdGlsZS5jb21wb25lbnRzW3FdLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpO1xuICAgIH1cblxuICAgIHZhciBsID0gMCwgciA9IDAsIGkgPSAwLCBrID0gMDtcblxuICAgIHRoaXMubmV4dFBhY2tldCA9IGZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKSB7XG4gICAgICAvLyBTZWN0aW9uIEIuMTIuMS4xIExheWVyLXJlc29sdXRpb24tY29tcG9uZW50LXBvc2l0aW9uXG4gICAgICBmb3IgKDsgbCA8IGxheWVyc0NvdW50OyBsKyspIHtcbiAgICAgICAgZm9yICg7IHIgPD0gbWF4RGVjb21wb3NpdGlvbkxldmVsc0NvdW50OyByKyspIHtcbiAgICAgICAgICBmb3IgKDsgaSA8IGNvbXBvbmVudHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHIgPiBjb21wb25lbnQuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudCkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcl07XG4gICAgICAgICAgICB2YXIgbnVtcHJlY2luY3RzID0gcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzO1xuICAgICAgICAgICAgZm9yICg7IGsgPCBudW1wcmVjaW5jdHM7KSB7XG4gICAgICAgICAgICAgIHZhciBwYWNrZXQgPSBjcmVhdGVQYWNrZXQocmVzb2x1dGlvbiwgaywgbCk7XG4gICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgcmV0dXJuIHBhY2tldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgICByID0gMDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBKcHhFcnJvcignT3V0IG9mIHBhY2tldHMnKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIFJlc29sdXRpb25MYXllckNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoY29udGV4dCkge1xuICAgIHZhciBzaXogPSBjb250ZXh0LlNJWjtcbiAgICB2YXIgdGlsZUluZGV4ID0gY29udGV4dC5jdXJyZW50VGlsZS5pbmRleDtcbiAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUluZGV4XTtcbiAgICB2YXIgbGF5ZXJzQ291bnQgPSB0aWxlLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMubGF5ZXJzQ291bnQ7XG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHNpei5Dc2l6O1xuICAgIHZhciBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPSAwO1xuICAgIGZvciAodmFyIHEgPSAwOyBxIDwgY29tcG9uZW50c0NvdW50OyBxKyspIHtcbiAgICAgIG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9IE1hdGgubWF4KG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCxcbiAgICAgICAgdGlsZS5jb21wb25lbnRzW3FdLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpO1xuICAgIH1cblxuICAgIHZhciByID0gMCwgbCA9IDAsIGkgPSAwLCBrID0gMDtcblxuICAgIHRoaXMubmV4dFBhY2tldCA9IGZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKSB7XG4gICAgICAvLyBTZWN0aW9uIEIuMTIuMS4yIFJlc29sdXRpb24tbGF5ZXItY29tcG9uZW50LXBvc2l0aW9uXG4gICAgICBmb3IgKDsgciA8PSBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQ7IHIrKykge1xuICAgICAgICBmb3IgKDsgbCA8IGxheWVyc0NvdW50OyBsKyspIHtcbiAgICAgICAgICBmb3IgKDsgaSA8IGNvbXBvbmVudHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHIgPiBjb21wb25lbnQuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudCkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcl07XG4gICAgICAgICAgICB2YXIgbnVtcHJlY2luY3RzID0gcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzO1xuICAgICAgICAgICAgZm9yICg7IGsgPCBudW1wcmVjaW5jdHM7KSB7XG4gICAgICAgICAgICAgIHZhciBwYWNrZXQgPSBjcmVhdGVQYWNrZXQocmVzb2x1dGlvbiwgaywgbCk7XG4gICAgICAgICAgICAgIGsrKztcbiAgICAgICAgICAgICAgcmV0dXJuIHBhY2tldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgfVxuICAgICAgICBsID0gMDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBKcHhFcnJvcignT3V0IG9mIHBhY2tldHMnKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIFJlc29sdXRpb25Qb3NpdGlvbkNvbXBvbmVudExheWVySXRlcmF0b3IoY29udGV4dCkge1xuICAgIHZhciBzaXogPSBjb250ZXh0LlNJWjtcbiAgICB2YXIgdGlsZUluZGV4ID0gY29udGV4dC5jdXJyZW50VGlsZS5pbmRleDtcbiAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUluZGV4XTtcbiAgICB2YXIgbGF5ZXJzQ291bnQgPSB0aWxlLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMubGF5ZXJzQ291bnQ7XG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHNpei5Dc2l6O1xuICAgIHZhciBsLCByLCBjLCBwO1xuICAgIHZhciBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPSAwO1xuICAgIGZvciAoYyA9IDA7IGMgPCBjb21wb25lbnRzQ291bnQ7IGMrKykge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuY29tcG9uZW50c1tjXTtcbiAgICAgIG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9IE1hdGgubWF4KG1heERlY29tcG9zaXRpb25MZXZlbHNDb3VudCxcbiAgICAgICAgY29tcG9uZW50LmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpO1xuICAgIH1cbiAgICB2YXIgbWF4TnVtUHJlY2luY3RzSW5MZXZlbCA9IG5ldyBJbnQzMkFycmF5KFxuICAgICAgbWF4RGVjb21wb3NpdGlvbkxldmVsc0NvdW50ICsgMSk7XG4gICAgZm9yIChyID0gMDsgciA8PSBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQ7ICsrcikge1xuICAgICAgdmFyIG1heE51bVByZWNpbmN0cyA9IDA7XG4gICAgICBmb3IgKGMgPSAwOyBjIDwgY29tcG9uZW50c0NvdW50OyArK2MpIHtcbiAgICAgICAgdmFyIHJlc29sdXRpb25zID0gdGlsZS5jb21wb25lbnRzW2NdLnJlc29sdXRpb25zO1xuICAgICAgICBpZiAociA8IHJlc29sdXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgIG1heE51bVByZWNpbmN0cyA9IE1hdGgubWF4KG1heE51bVByZWNpbmN0cyxcbiAgICAgICAgICAgIHJlc29sdXRpb25zW3JdLnByZWNpbmN0UGFyYW1ldGVycy5udW1wcmVjaW5jdHMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtYXhOdW1QcmVjaW5jdHNJbkxldmVsW3JdID0gbWF4TnVtUHJlY2luY3RzO1xuICAgIH1cbiAgICBsID0gMDtcbiAgICByID0gMDtcbiAgICBjID0gMDtcbiAgICBwID0gMDtcblxuICAgIHRoaXMubmV4dFBhY2tldCA9IGZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKSB7XG4gICAgICAvLyBTZWN0aW9uIEIuMTIuMS4zIFJlc29sdXRpb24tcG9zaXRpb24tY29tcG9uZW50LWxheWVyXG4gICAgICBmb3IgKDsgciA8PSBtYXhEZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQ7IHIrKykge1xuICAgICAgICBmb3IgKDsgcCA8IG1heE51bVByZWNpbmN0c0luTGV2ZWxbcl07IHArKykge1xuICAgICAgICAgIGZvciAoOyBjIDwgY29tcG9uZW50c0NvdW50OyBjKyspIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQgPSB0aWxlLmNvbXBvbmVudHNbY107XG4gICAgICAgICAgICBpZiAociA+IGNvbXBvbmVudC5jb2RpbmdTdHlsZVBhcmFtZXRlcnMuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50KSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcl07XG4gICAgICAgICAgICB2YXIgbnVtcHJlY2luY3RzID0gcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzO1xuICAgICAgICAgICAgaWYgKHAgPj0gbnVtcHJlY2luY3RzKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICg7IGwgPCBsYXllcnNDb3VudDspIHtcbiAgICAgICAgICAgICAgdmFyIHBhY2tldCA9IGNyZWF0ZVBhY2tldChyZXNvbHV0aW9uLCBwLCBsKTtcbiAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgICByZXR1cm4gcGFja2V0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHAgPSAwO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEpweEVycm9yKCdPdXQgb2YgcGFja2V0cycpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gUG9zaXRpb25Db21wb25lbnRSZXNvbHV0aW9uTGF5ZXJJdGVyYXRvcihjb250ZXh0KSB7XG4gICAgdmFyIHNpeiA9IGNvbnRleHQuU0laO1xuICAgIHZhciB0aWxlSW5kZXggPSBjb250ZXh0LmN1cnJlbnRUaWxlLmluZGV4O1xuICAgIHZhciB0aWxlID0gY29udGV4dC50aWxlc1t0aWxlSW5kZXhdO1xuICAgIHZhciBsYXllcnNDb3VudCA9IHRpbGUuY29kaW5nU3R5bGVEZWZhdWx0UGFyYW1ldGVycy5sYXllcnNDb3VudDtcbiAgICB2YXIgY29tcG9uZW50c0NvdW50ID0gc2l6LkNzaXo7XG4gICAgdmFyIHByZWNpbmN0c1NpemVzID0gZ2V0UHJlY2luY3RTaXplc0luSW1hZ2VTY2FsZSh0aWxlKTtcbiAgICB2YXIgcHJlY2luY3RzSXRlcmF0aW9uU2l6ZXMgPSBwcmVjaW5jdHNTaXplcztcbiAgICB2YXIgbCA9IDAsIHIgPSAwLCBjID0gMCwgcHggPSAwLCBweSA9IDA7XG5cbiAgICB0aGlzLm5leHRQYWNrZXQgPSBmdW5jdGlvbiBKcHhJbWFnZV9uZXh0UGFja2V0KCkge1xuICAgICAgLy8gU2VjdGlvbiBCLjEyLjEuNCBQb3NpdGlvbi1jb21wb25lbnQtcmVzb2x1dGlvbi1sYXllclxuICAgICAgZm9yICg7IHB5IDwgcHJlY2luY3RzSXRlcmF0aW9uU2l6ZXMubWF4TnVtSGlnaDsgcHkrKykge1xuICAgICAgICBmb3IgKDsgcHggPCBwcmVjaW5jdHNJdGVyYXRpb25TaXplcy5tYXhOdW1XaWRlOyBweCsrKSB7XG4gICAgICAgICAgZm9yICg7IGMgPCBjb21wb25lbnRzQ291bnQ7IGMrKykge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuY29tcG9uZW50c1tjXTtcbiAgICAgICAgICAgIHZhciBkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPVxuICAgICAgICAgICAgICBjb21wb25lbnQuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudDtcbiAgICAgICAgICAgIGZvciAoOyByIDw9IGRlY29tcG9zaXRpb25MZXZlbHNDb3VudDsgcisrKSB7XG4gICAgICAgICAgICAgIHZhciByZXNvbHV0aW9uID0gY29tcG9uZW50LnJlc29sdXRpb25zW3JdO1xuICAgICAgICAgICAgICB2YXIgc2l6ZUluSW1hZ2VTY2FsZSA9XG4gICAgICAgICAgICAgICAgcHJlY2luY3RzU2l6ZXMuY29tcG9uZW50c1tjXS5yZXNvbHV0aW9uc1tyXTtcbiAgICAgICAgICAgICAgdmFyIGsgPSBnZXRQcmVjaW5jdEluZGV4SWZFeGlzdChcbiAgICAgICAgICAgICAgICBweCxcbiAgICAgICAgICAgICAgICBweSxcbiAgICAgICAgICAgICAgICBzaXplSW5JbWFnZVNjYWxlLFxuICAgICAgICAgICAgICAgIHByZWNpbmN0c0l0ZXJhdGlvblNpemVzLFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb24pO1xuICAgICAgICAgICAgICBpZiAoayA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZvciAoOyBsIDwgbGF5ZXJzQ291bnQ7KSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhY2tldCA9IGNyZWF0ZVBhY2tldChyZXNvbHV0aW9uLCBrLCBsKTtcbiAgICAgICAgICAgICAgICBsKys7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhY2tldDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHIgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjID0gMDtcbiAgICAgICAgfVxuICAgICAgICBweCA9IDA7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgSnB4RXJyb3IoJ091dCBvZiBwYWNrZXRzJyk7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBDb21wb25lbnRQb3NpdGlvblJlc29sdXRpb25MYXllckl0ZXJhdG9yKGNvbnRleHQpIHtcbiAgICB2YXIgc2l6ID0gY29udGV4dC5TSVo7XG4gICAgdmFyIHRpbGVJbmRleCA9IGNvbnRleHQuY3VycmVudFRpbGUuaW5kZXg7XG4gICAgdmFyIHRpbGUgPSBjb250ZXh0LnRpbGVzW3RpbGVJbmRleF07XG4gICAgdmFyIGxheWVyc0NvdW50ID0gdGlsZS5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLmxheWVyc0NvdW50O1xuICAgIHZhciBjb21wb25lbnRzQ291bnQgPSBzaXouQ3NpejtcbiAgICB2YXIgcHJlY2luY3RzU2l6ZXMgPSBnZXRQcmVjaW5jdFNpemVzSW5JbWFnZVNjYWxlKHRpbGUpO1xuICAgIHZhciBsID0gMCwgciA9IDAsIGMgPSAwLCBweCA9IDAsIHB5ID0gMDtcblxuICAgIHRoaXMubmV4dFBhY2tldCA9IGZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKSB7XG4gICAgICAvLyBTZWN0aW9uIEIuMTIuMS41IENvbXBvbmVudC1wb3NpdGlvbi1yZXNvbHV0aW9uLWxheWVyXG4gICAgICBmb3IgKDsgYyA8IGNvbXBvbmVudHNDb3VudDsgKytjKSB7XG4gICAgICAgIHZhciBjb21wb25lbnQgPSB0aWxlLmNvbXBvbmVudHNbY107XG4gICAgICAgIHZhciBwcmVjaW5jdHNJdGVyYXRpb25TaXplcyA9IHByZWNpbmN0c1NpemVzLmNvbXBvbmVudHNbY107XG4gICAgICAgIHZhciBkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPVxuICAgICAgICAgIGNvbXBvbmVudC5jb2RpbmdTdHlsZVBhcmFtZXRlcnMuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50O1xuICAgICAgICBmb3IgKDsgcHkgPCBwcmVjaW5jdHNJdGVyYXRpb25TaXplcy5tYXhOdW1IaWdoOyBweSsrKSB7XG4gICAgICAgICAgZm9yICg7IHB4IDwgcHJlY2luY3RzSXRlcmF0aW9uU2l6ZXMubWF4TnVtV2lkZTsgcHgrKykge1xuICAgICAgICAgICAgZm9yICg7IHIgPD0gZGVjb21wb3NpdGlvbkxldmVsc0NvdW50OyByKyspIHtcbiAgICAgICAgICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcl07XG4gICAgICAgICAgICAgIHZhciBzaXplSW5JbWFnZVNjYWxlID0gcHJlY2luY3RzSXRlcmF0aW9uU2l6ZXMucmVzb2x1dGlvbnNbcl07XG4gICAgICAgICAgICAgIHZhciBrID0gZ2V0UHJlY2luY3RJbmRleElmRXhpc3QoXG4gICAgICAgICAgICAgICAgcHgsXG4gICAgICAgICAgICAgICAgcHksXG4gICAgICAgICAgICAgICAgc2l6ZUluSW1hZ2VTY2FsZSxcbiAgICAgICAgICAgICAgICBwcmVjaW5jdHNJdGVyYXRpb25TaXplcyxcbiAgICAgICAgICAgICAgICByZXNvbHV0aW9uKTtcbiAgICAgICAgICAgICAgaWYgKGsgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBmb3IgKDsgbCA8IGxheWVyc0NvdW50Oykge1xuICAgICAgICAgICAgICAgIHZhciBwYWNrZXQgPSBjcmVhdGVQYWNrZXQocmVzb2x1dGlvbiwgaywgbCk7XG4gICAgICAgICAgICAgICAgbCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWNrZXQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHB5ID0gMDtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBKcHhFcnJvcignT3V0IG9mIHBhY2tldHMnKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFByZWNpbmN0SW5kZXhJZkV4aXN0KFxuICAgIHB4SW5kZXgsIHB5SW5kZXgsIHNpemVJbkltYWdlU2NhbGUsIHByZWNpbmN0SXRlcmF0aW9uU2l6ZXMsIHJlc29sdXRpb24pIHtcbiAgICB2YXIgcG9zWCA9IHB4SW5kZXggKiBwcmVjaW5jdEl0ZXJhdGlvblNpemVzLm1pbldpZHRoO1xuICAgIHZhciBwb3NZID0gcHlJbmRleCAqIHByZWNpbmN0SXRlcmF0aW9uU2l6ZXMubWluSGVpZ2h0O1xuICAgIGlmIChwb3NYICUgc2l6ZUluSW1hZ2VTY2FsZS53aWR0aCAhPT0gMCB8fFxuICAgICAgICBwb3NZICUgc2l6ZUluSW1hZ2VTY2FsZS5oZWlnaHQgIT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgc3RhcnRQcmVjaW5jdFJvd0luZGV4ID1cbiAgICAgIChwb3NZIC8gc2l6ZUluSW1hZ2VTY2FsZS53aWR0aCkgKlxuICAgICAgcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3Rzd2lkZTtcbiAgICByZXR1cm4gKHBvc1ggLyBzaXplSW5JbWFnZVNjYWxlLmhlaWdodCkgKyBzdGFydFByZWNpbmN0Um93SW5kZXg7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UHJlY2luY3RTaXplc0luSW1hZ2VTY2FsZSh0aWxlKSB7XG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHRpbGUuY29tcG9uZW50cy5sZW5ndGg7XG4gICAgdmFyIG1pbldpZHRoID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB2YXIgbWluSGVpZ2h0ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB2YXIgbWF4TnVtV2lkZSA9IDA7XG4gICAgdmFyIG1heE51bUhpZ2ggPSAwO1xuICAgIHZhciBzaXplUGVyQ29tcG9uZW50ID0gbmV3IEFycmF5KGNvbXBvbmVudHNDb3VudCk7XG4gICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb21wb25lbnRzQ291bnQ7IGMrKykge1xuICAgICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuY29tcG9uZW50c1tjXTtcbiAgICAgIHZhciBkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgPVxuICAgICAgICBjb21wb25lbnQuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudDtcbiAgICAgIHZhciBzaXplUGVyUmVzb2x1dGlvbiA9IG5ldyBBcnJheShkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgKyAxKTtcbiAgICAgIHZhciBtaW5XaWR0aEN1cnJlbnRDb21wb25lbnQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgdmFyIG1pbkhlaWdodEN1cnJlbnRDb21wb25lbnQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICAgICAgdmFyIG1heE51bVdpZGVDdXJyZW50Q29tcG9uZW50ID0gMDtcbiAgICAgIHZhciBtYXhOdW1IaWdoQ3VycmVudENvbXBvbmVudCA9IDA7XG4gICAgICB2YXIgc2NhbGUgPSAxO1xuICAgICAgZm9yICh2YXIgciA9IGRlY29tcG9zaXRpb25MZXZlbHNDb3VudDsgciA+PSAwOyAtLXIpIHtcbiAgICAgICAgdmFyIHJlc29sdXRpb24gPSBjb21wb25lbnQucmVzb2x1dGlvbnNbcl07XG4gICAgICAgIHZhciB3aWR0aEN1cnJlbnRSZXNvbHV0aW9uID1cbiAgICAgICAgICBzY2FsZSAqIHJlc29sdXRpb24ucHJlY2luY3RQYXJhbWV0ZXJzLnByZWNpbmN0V2lkdGg7XG4gICAgICAgIHZhciBoZWlnaHRDdXJyZW50UmVzb2x1dGlvbiA9XG4gICAgICAgICAgc2NhbGUgKiByZXNvbHV0aW9uLnByZWNpbmN0UGFyYW1ldGVycy5wcmVjaW5jdEhlaWdodDtcbiAgICAgICAgbWluV2lkdGhDdXJyZW50Q29tcG9uZW50ID0gTWF0aC5taW4oXG4gICAgICAgICAgbWluV2lkdGhDdXJyZW50Q29tcG9uZW50LFxuICAgICAgICAgIHdpZHRoQ3VycmVudFJlc29sdXRpb24pO1xuICAgICAgICBtaW5IZWlnaHRDdXJyZW50Q29tcG9uZW50ID0gTWF0aC5taW4oXG4gICAgICAgICAgbWluSGVpZ2h0Q3VycmVudENvbXBvbmVudCxcbiAgICAgICAgICBoZWlnaHRDdXJyZW50UmVzb2x1dGlvbik7XG4gICAgICAgIG1heE51bVdpZGVDdXJyZW50Q29tcG9uZW50ID0gTWF0aC5tYXgobWF4TnVtV2lkZUN1cnJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3Rzd2lkZSk7XG4gICAgICAgIG1heE51bUhpZ2hDdXJyZW50Q29tcG9uZW50ID0gTWF0aC5tYXgobWF4TnVtSGlnaEN1cnJlbnRDb21wb25lbnQsXG4gICAgICAgICAgcmVzb2x1dGlvbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzaGlnaCk7XG4gICAgICAgIHNpemVQZXJSZXNvbHV0aW9uW3JdID0ge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aEN1cnJlbnRSZXNvbHV0aW9uLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0Q3VycmVudFJlc29sdXRpb24sXG4gICAgICAgIH07XG4gICAgICAgIHNjYWxlIDw8PSAxO1xuICAgICAgfVxuICAgICAgbWluV2lkdGggPSBNYXRoLm1pbihtaW5XaWR0aCwgbWluV2lkdGhDdXJyZW50Q29tcG9uZW50KTtcbiAgICAgIG1pbkhlaWdodCA9IE1hdGgubWluKG1pbkhlaWdodCwgbWluSGVpZ2h0Q3VycmVudENvbXBvbmVudCk7XG4gICAgICBtYXhOdW1XaWRlID0gTWF0aC5tYXgobWF4TnVtV2lkZSwgbWF4TnVtV2lkZUN1cnJlbnRDb21wb25lbnQpO1xuICAgICAgbWF4TnVtSGlnaCA9IE1hdGgubWF4KG1heE51bUhpZ2gsIG1heE51bUhpZ2hDdXJyZW50Q29tcG9uZW50KTtcbiAgICAgIHNpemVQZXJDb21wb25lbnRbY10gPSB7XG4gICAgICAgIHJlc29sdXRpb25zOiBzaXplUGVyUmVzb2x1dGlvbixcbiAgICAgICAgbWluV2lkdGg6IG1pbldpZHRoQ3VycmVudENvbXBvbmVudCxcbiAgICAgICAgbWluSGVpZ2h0OiBtaW5IZWlnaHRDdXJyZW50Q29tcG9uZW50LFxuICAgICAgICBtYXhOdW1XaWRlOiBtYXhOdW1XaWRlQ3VycmVudENvbXBvbmVudCxcbiAgICAgICAgbWF4TnVtSGlnaDogbWF4TnVtSGlnaEN1cnJlbnRDb21wb25lbnQsXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY29tcG9uZW50czogc2l6ZVBlckNvbXBvbmVudCxcbiAgICAgIG1pbldpZHRoLFxuICAgICAgbWluSGVpZ2h0LFxuICAgICAgbWF4TnVtV2lkZSxcbiAgICAgIG1heE51bUhpZ2gsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBidWlsZFBhY2tldHMoY29udGV4dCkge1xuICAgIHZhciBzaXogPSBjb250ZXh0LlNJWjtcbiAgICB2YXIgdGlsZUluZGV4ID0gY29udGV4dC5jdXJyZW50VGlsZS5pbmRleDtcbiAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUluZGV4XTtcbiAgICB2YXIgY29tcG9uZW50c0NvdW50ID0gc2l6LkNzaXo7XG4gICAgLy8gQ3JlYXRpbmcgcmVzb2x1dGlvbnMgYW5kIHN1Yi1iYW5kcyBmb3IgZWFjaCBjb21wb25lbnRcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbXBvbmVudHNDb3VudDsgYysrKSB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW2NdO1xuICAgICAgdmFyIGRlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9XG4gICAgICAgIGNvbXBvbmVudC5jb2RpbmdTdHlsZVBhcmFtZXRlcnMuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50O1xuICAgICAgLy8gU2VjdGlvbiBCLjUgUmVzb2x1dGlvbiBsZXZlbHMgYW5kIHN1Yi1iYW5kc1xuICAgICAgdmFyIHJlc29sdXRpb25zID0gW107XG4gICAgICB2YXIgc3ViYmFuZHMgPSBbXTtcbiAgICAgIHZhciBpbmRleEluVGlsZUNvbXBvbmVudCA9IDA7XG4gICAgICBmb3IgKHZhciByID0gMDsgciA8PSBkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQ7IHIrKykge1xuICAgICAgICB2YXIgYmxvY2tzRGltZW5zaW9ucyA9IGdldEJsb2Nrc0RpbWVuc2lvbnMoY29udGV4dCwgY29tcG9uZW50LCByKTtcbiAgICAgICAgdmFyIHJlc29sdXRpb24gPSB7fTtcbiAgICAgICAgdmFyIHNjYWxlID0gMSA8PCAoZGVjb21wb3NpdGlvbkxldmVsc0NvdW50IC0gcik7XG4gICAgICAgIHJlc29sdXRpb24udHJ4MCA9IE1hdGguY2VpbChjb21wb25lbnQudGN4MCAvIHNjYWxlKTtcbiAgICAgICAgcmVzb2x1dGlvbi50cnkwID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3kwIC8gc2NhbGUpO1xuICAgICAgICByZXNvbHV0aW9uLnRyeDEgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeDEgLyBzY2FsZSk7XG4gICAgICAgIHJlc29sdXRpb24udHJ5MSA9IE1hdGguY2VpbChjb21wb25lbnQudGN5MSAvIHNjYWxlKTtcbiAgICAgICAgcmVzb2x1dGlvbi5yZXNMZXZlbCA9IHI7XG4gICAgICAgIHJlc29sdXRpb24ucGl4ZWxzUHJlY2luY3RzID0gW107XG4gICAgICAgIHJlc29sdXRpb24ucGl4ZWxzUHJlY2luY3RzV2l0aERlY29kZWRDb2VmZmljaWVudHMgPSBbXTtcbiAgICAgICAgYnVpbGRQcmVjaW5jdHMoY29udGV4dCwgcmVzb2x1dGlvbiwgYmxvY2tzRGltZW5zaW9ucyk7XG4gICAgICAgIHJlc29sdXRpb25zLnB1c2gocmVzb2x1dGlvbik7XG5cbiAgICAgICAgdmFyIHN1YmJhbmQ7XG4gICAgICAgIGlmIChyID09PSAwKSB7XG4gICAgICAgICAgLy8gb25lIHN1Yi1iYW5kIChMTCkgd2l0aCBsYXN0IGRlY29tcG9zaXRpb25cbiAgICAgICAgICBzdWJiYW5kID0ge307XG4gICAgICAgICAgc3ViYmFuZC50eXBlID0gJ0xMJztcbiAgICAgICAgICBzdWJiYW5kLnRieDAgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeDAgLyBzY2FsZSk7XG4gICAgICAgICAgc3ViYmFuZC50YnkwID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3kwIC8gc2NhbGUpO1xuICAgICAgICAgIHN1YmJhbmQudGJ4MSA9IE1hdGguY2VpbChjb21wb25lbnQudGN4MSAvIHNjYWxlKTtcbiAgICAgICAgICBzdWJiYW5kLnRieTEgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeTEgLyBzY2FsZSk7XG4gICAgICAgICAgc3ViYmFuZC5yZXNvbHV0aW9uID0gcmVzb2x1dGlvbjtcbiAgICAgICAgICBzdWJiYW5kLmluZGV4SW5UaWxlQ29tcG9uZW50ID0gaW5kZXhJblRpbGVDb21wb25lbnQrKztcbiAgICAgICAgICBidWlsZENvZGVibG9ja3MoY29udGV4dCwgc3ViYmFuZCwgYmxvY2tzRGltZW5zaW9ucywgMCk7XG4gICAgICAgICAgc3ViYmFuZHMucHVzaChzdWJiYW5kKTtcbiAgICAgICAgICByZXNvbHV0aW9uLnN1YmJhbmRzID0gW3N1YmJhbmRdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBic2NhbGUgPSAxIDw8IChkZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQgLSByICsgMSk7XG4gICAgICAgICAgdmFyIHJlc29sdXRpb25TdWJiYW5kcyA9IFtdO1xuICAgICAgICAgIC8vIHRocmVlIHN1Yi1iYW5kcyAoSEwsIExIIGFuZCBISCkgd2l0aCByZXN0IG9mIGRlY29tcG9zaXRpb25zXG4gICAgICAgICAgc3ViYmFuZCA9IHt9O1xuICAgICAgICAgIHN1YmJhbmQudHlwZSA9ICdITCc7XG4gICAgICAgICAgc3ViYmFuZC50YngwID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3gwIC8gYnNjYWxlIC0gMC41KTtcbiAgICAgICAgICBzdWJiYW5kLnRieTAgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeTAgLyBic2NhbGUpO1xuICAgICAgICAgIHN1YmJhbmQudGJ4MSA9IE1hdGguY2VpbChjb21wb25lbnQudGN4MSAvIGJzY2FsZSAtIDAuNSk7XG4gICAgICAgICAgc3ViYmFuZC50YnkxID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3kxIC8gYnNjYWxlKTtcbiAgICAgICAgICBzdWJiYW5kLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICAgICAgICAgIHN1YmJhbmQuaW5kZXhJblRpbGVDb21wb25lbnQgPSBpbmRleEluVGlsZUNvbXBvbmVudCsrO1xuICAgICAgICAgIGJ1aWxkQ29kZWJsb2Nrcyhjb250ZXh0LCBzdWJiYW5kLCBibG9ja3NEaW1lbnNpb25zLCAwKTtcbiAgICAgICAgICBzdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuICAgICAgICAgIHJlc29sdXRpb25TdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuXG4gICAgICAgICAgc3ViYmFuZCA9IHt9O1xuICAgICAgICAgIHN1YmJhbmQudHlwZSA9ICdMSCc7XG4gICAgICAgICAgc3ViYmFuZC50YngwID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3gwIC8gYnNjYWxlKTtcbiAgICAgICAgICBzdWJiYW5kLnRieTAgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeTAgLyBic2NhbGUgLSAwLjUpO1xuICAgICAgICAgIHN1YmJhbmQudGJ4MSA9IE1hdGguY2VpbChjb21wb25lbnQudGN4MSAvIGJzY2FsZSk7XG4gICAgICAgICAgc3ViYmFuZC50YnkxID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3kxIC8gYnNjYWxlIC0gMC41KTtcbiAgICAgICAgICBzdWJiYW5kLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICAgICAgICAgIHN1YmJhbmQuaW5kZXhJblRpbGVDb21wb25lbnQgPSBpbmRleEluVGlsZUNvbXBvbmVudCsrO1xuICAgICAgICAgIGJ1aWxkQ29kZWJsb2Nrcyhjb250ZXh0LCBzdWJiYW5kLCBibG9ja3NEaW1lbnNpb25zLCAxKTtcbiAgICAgICAgICBzdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuICAgICAgICAgIHJlc29sdXRpb25TdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuXG4gICAgICAgICAgc3ViYmFuZCA9IHt9O1xuICAgICAgICAgIHN1YmJhbmQudHlwZSA9ICdISCc7XG4gICAgICAgICAgc3ViYmFuZC50YngwID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3gwIC8gYnNjYWxlIC0gMC41KTtcbiAgICAgICAgICBzdWJiYW5kLnRieTAgPSBNYXRoLmNlaWwoY29tcG9uZW50LnRjeTAgLyBic2NhbGUgLSAwLjUpO1xuICAgICAgICAgIHN1YmJhbmQudGJ4MSA9IE1hdGguY2VpbChjb21wb25lbnQudGN4MSAvIGJzY2FsZSAtIDAuNSk7XG4gICAgICAgICAgc3ViYmFuZC50YnkxID0gTWF0aC5jZWlsKGNvbXBvbmVudC50Y3kxIC8gYnNjYWxlIC0gMC41KTtcbiAgICAgICAgICBzdWJiYW5kLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xuICAgICAgICAgIHN1YmJhbmQuaW5kZXhJblRpbGVDb21wb25lbnQgPSBpbmRleEluVGlsZUNvbXBvbmVudCsrO1xuICAgICAgICAgIGJ1aWxkQ29kZWJsb2Nrcyhjb250ZXh0LCBzdWJiYW5kLCBibG9ja3NEaW1lbnNpb25zLCAyKTtcbiAgICAgICAgICBzdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuICAgICAgICAgIHJlc29sdXRpb25TdWJiYW5kcy5wdXNoKHN1YmJhbmQpO1xuXG4gICAgICAgICAgcmVzb2x1dGlvbi5zdWJiYW5kcyA9IHJlc29sdXRpb25TdWJiYW5kcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29tcG9uZW50LnJlc29sdXRpb25zID0gcmVzb2x1dGlvbnM7XG4gICAgICBjb21wb25lbnQuc3ViYmFuZHMgPSBzdWJiYW5kcztcbiAgICB9XG4gICAgLy8gR2VuZXJhdGUgdGhlIHBhY2tldHMgc2VxdWVuY2VcbiAgICB2YXIgcHJvZ3Jlc3Npb25PcmRlciA9IHRpbGUuY29kaW5nU3R5bGVEZWZhdWx0UGFyYW1ldGVycy5wcm9ncmVzc2lvbk9yZGVyO1xuICAgIHN3aXRjaCAocHJvZ3Jlc3Npb25PcmRlcikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB0aWxlLnBhY2tldHNJdGVyYXRvciA9XG4gICAgICAgICAgbmV3IExheWVyUmVzb2x1dGlvbkNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICB0aWxlLnBhY2tldHNJdGVyYXRvciA9XG4gICAgICAgICAgbmV3IFJlc29sdXRpb25MYXllckNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICB0aWxlLnBhY2tldHNJdGVyYXRvciA9XG4gICAgICAgICAgbmV3IFJlc29sdXRpb25Qb3NpdGlvbkNvbXBvbmVudExheWVySXRlcmF0b3IoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICB0aWxlLnBhY2tldHNJdGVyYXRvciA9XG4gICAgICAgICAgbmV3IFBvc2l0aW9uQ29tcG9uZW50UmVzb2x1dGlvbkxheWVySXRlcmF0b3IoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICB0aWxlLnBhY2tldHNJdGVyYXRvciA9XG4gICAgICAgICAgbmV3IENvbXBvbmVudFBvc2l0aW9uUmVzb2x1dGlvbkxheWVySXRlcmF0b3IoY29udGV4dCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEpweEVycm9yKGBVbnN1cHBvcnRlZCBwcm9ncmVzc2lvbiBvcmRlciAke3Byb2dyZXNzaW9uT3JkZXJ9YCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHBhcnNlVGlsZVBhY2tldHMoY29udGV4dCwgZGF0YSwgb2Zmc2V0LCBkYXRhTGVuZ3RoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gMDtcbiAgICB2YXIgYnVmZmVyLCBidWZmZXJTaXplID0gMCwgc2tpcE5leHRCaXQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiByZWFkQml0cyhjb3VudCkge1xuICAgICAgd2hpbGUgKGJ1ZmZlclNpemUgPCBjb3VudCkge1xuICAgICAgICB2YXIgYiA9IGRhdGFbb2Zmc2V0ICsgcG9zaXRpb25dO1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICBpZiAoc2tpcE5leHRCaXQpIHtcbiAgICAgICAgICBidWZmZXIgPSAoYnVmZmVyIDw8IDcpIHwgYjtcbiAgICAgICAgICBidWZmZXJTaXplICs9IDc7XG4gICAgICAgICAgc2tpcE5leHRCaXQgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBidWZmZXIgPSAoYnVmZmVyIDw8IDgpIHwgYjtcbiAgICAgICAgICBidWZmZXJTaXplICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGIgPT09IDB4RkYpIHtcbiAgICAgICAgICBza2lwTmV4dEJpdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlclNpemUgLT0gY291bnQ7XG4gICAgICByZXR1cm4gKGJ1ZmZlciA+Pj4gYnVmZmVyU2l6ZSkgJiAoKDEgPDwgY291bnQpIC0gMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNraXBNYXJrZXJJZkVxdWFsKHZhbHVlKSB7XG4gICAgICBpZiAoZGF0YVtvZmZzZXQgKyBwb3NpdGlvbiAtIDFdID09PSAweEZGICYmXG4gICAgICAgICAgZGF0YVtvZmZzZXQgKyBwb3NpdGlvbl0gPT09IHZhbHVlKSB7XG4gICAgICAgIHNraXBCeXRlcygxKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGRhdGFbb2Zmc2V0ICsgcG9zaXRpb25dID09PSAweEZGICYmXG4gICAgICAgICAgICAgICAgIGRhdGFbb2Zmc2V0ICsgcG9zaXRpb24gKyAxXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgc2tpcEJ5dGVzKDIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2tpcEJ5dGVzKGNvdW50KSB7XG4gICAgICBwb3NpdGlvbiArPSBjb3VudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWxpZ25Ub0J5dGUoKSB7XG4gICAgICBidWZmZXJTaXplID0gMDtcbiAgICAgIGlmIChza2lwTmV4dEJpdCkge1xuICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICBza2lwTmV4dEJpdCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWFkQ29kaW5ncGFzc2VzKCkge1xuICAgICAgaWYgKHJlYWRCaXRzKDEpID09PSAwKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgaWYgKHJlYWRCaXRzKDEpID09PSAwKSB7XG4gICAgICAgIHJldHVybiAyO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gcmVhZEJpdHMoMik7XG4gICAgICBpZiAodmFsdWUgPCAzKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSArIDM7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHJlYWRCaXRzKDUpO1xuICAgICAgaWYgKHZhbHVlIDwgMzEpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICsgNjtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gcmVhZEJpdHMoNyk7XG4gICAgICByZXR1cm4gdmFsdWUgKyAzNztcbiAgICB9XG4gICAgdmFyIHRpbGVJbmRleCA9IGNvbnRleHQuY3VycmVudFRpbGUuaW5kZXg7XG4gICAgdmFyIHRpbGUgPSBjb250ZXh0LnRpbGVzW3RpbGVJbmRleF07XG4gICAgdmFyIHNvcE1hcmtlclVzZWQgPSBjb250ZXh0LkNPRC5zb3BNYXJrZXJVc2VkO1xuICAgIHZhciBlcGhNYXJrZXJVc2VkID0gY29udGV4dC5DT0QuZXBoTWFya2VyVXNlZDtcbiAgICB2YXIgcGFja2V0c0l0ZXJhdG9yID0gdGlsZS5wYWNrZXRzSXRlcmF0b3I7XG4gICAgd2hpbGUgKHBvc2l0aW9uIDwgZGF0YUxlbmd0aCkge1xuICAgICAgYWxpZ25Ub0J5dGUoKTtcbiAgICAgIGlmIChzb3BNYXJrZXJVc2VkICYmIHNraXBNYXJrZXJJZkVxdWFsKDB4OTEpKSB7XG4gICAgICAgIC8vIFNraXAgYWxzbyBtYXJrZXIgc2VnbWVudCBsZW5ndGggYW5kIHBhY2tldCBzZXF1ZW5jZSBJRFxuICAgICAgICBza2lwQnl0ZXMoNCk7XG4gICAgICB9XG4gICAgICB2YXIgcGFja2V0ID0gcGFja2V0c0l0ZXJhdG9yLm5leHRQYWNrZXQoKTtcbiAgICAgIGlmICghcmVhZEJpdHMoMSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgbGF5ZXJOdW1iZXIgPSBwYWNrZXQubGF5ZXJOdW1iZXI7XG4gICAgICB2YXIgcXVldWUgPSBbXSwgY29kZWJsb2NrO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcGFja2V0LmNvZGVibG9ja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBjb2RlYmxvY2sgPSBwYWNrZXQuY29kZWJsb2Nrc1tpXTtcbiAgICAgICAgdmFyIHByZWNpbmN0ID0gY29kZWJsb2NrLnByZWNpbmN0O1xuICAgICAgICB2YXIgY29kZWJsb2NrQ29sdW1uID0gY29kZWJsb2NrLmNieCAtIHByZWNpbmN0LmNieE1pbjtcbiAgICAgICAgdmFyIGNvZGVibG9ja1JvdyA9IGNvZGVibG9jay5jYnkgLSBwcmVjaW5jdC5jYnlNaW47XG4gICAgICAgIHZhciBjb2RlYmxvY2tJbmNsdWRlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RUaW1lSW5jbHVzaW9uID0gZmFsc2U7XG4gICAgICAgIHZhciB2YWx1ZVJlYWR5O1xuICAgICAgICBpZiAoY29kZWJsb2NrWydpbmNsdWRlZCddICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2RlYmxvY2tJbmNsdWRlZCA9ICEhcmVhZEJpdHMoMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcmVhZGluZyBpbmNsdXNpb24gdHJlZVxuICAgICAgICAgIHByZWNpbmN0ID0gY29kZWJsb2NrLnByZWNpbmN0O1xuICAgICAgICAgIHZhciBpbmNsdXNpb25UcmVlLCB6ZXJvQml0UGxhbmVzVHJlZTtcbiAgICAgICAgICBpZiAocHJlY2luY3RbJ2luY2x1c2lvblRyZWUnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpbmNsdXNpb25UcmVlID0gcHJlY2luY3QuaW5jbHVzaW9uVHJlZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gYnVpbGRpbmcgaW5jbHVzaW9uIGFuZCB6ZXJvIGJpdC1wbGFuZXMgdHJlZXNcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHByZWNpbmN0LmNieE1heCAtIHByZWNpbmN0LmNieE1pbiArIDE7XG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gcHJlY2luY3QuY2J5TWF4IC0gcHJlY2luY3QuY2J5TWluICsgMTtcbiAgICAgICAgICAgIGluY2x1c2lvblRyZWUgPSBuZXcgSW5jbHVzaW9uVHJlZSh3aWR0aCwgaGVpZ2h0LCBsYXllck51bWJlcik7XG4gICAgICAgICAgICB6ZXJvQml0UGxhbmVzVHJlZSA9IG5ldyBUYWdUcmVlKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgcHJlY2luY3QuaW5jbHVzaW9uVHJlZSA9IGluY2x1c2lvblRyZWU7XG4gICAgICAgICAgICBwcmVjaW5jdC56ZXJvQml0UGxhbmVzVHJlZSA9IHplcm9CaXRQbGFuZXNUcmVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmNsdXNpb25UcmVlLnJlc2V0KGNvZGVibG9ja0NvbHVtbiwgY29kZWJsb2NrUm93LCBsYXllck51bWJlcikpIHtcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgIGlmIChyZWFkQml0cygxKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlUmVhZHkgPSAhaW5jbHVzaW9uVHJlZS5uZXh0TGV2ZWwoKTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVSZWFkeSkge1xuICAgICAgICAgICAgICAgICAgY29kZWJsb2NrLmluY2x1ZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNvZGVibG9ja0luY2x1ZGVkID0gZmlyc3RUaW1lSW5jbHVzaW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmNsdXNpb25UcmVlLmluY3JlbWVudFZhbHVlKGxheWVyTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvZGVibG9ja0luY2x1ZGVkKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZpcnN0VGltZUluY2x1c2lvbikge1xuICAgICAgICAgIHplcm9CaXRQbGFuZXNUcmVlID0gcHJlY2luY3QuemVyb0JpdFBsYW5lc1RyZWU7XG4gICAgICAgICAgemVyb0JpdFBsYW5lc1RyZWUucmVzZXQoY29kZWJsb2NrQ29sdW1uLCBjb2RlYmxvY2tSb3cpO1xuICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBpZiAocmVhZEJpdHMoMSkpIHtcbiAgICAgICAgICAgICAgdmFsdWVSZWFkeSA9ICF6ZXJvQml0UGxhbmVzVHJlZS5uZXh0TGV2ZWwoKTtcbiAgICAgICAgICAgICAgaWYgKHZhbHVlUmVhZHkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgemVyb0JpdFBsYW5lc1RyZWUuaW5jcmVtZW50VmFsdWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29kZWJsb2NrLnplcm9CaXRQbGFuZXMgPSB6ZXJvQml0UGxhbmVzVHJlZS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY29kaW5ncGFzc2VzID0gcmVhZENvZGluZ3Bhc3NlcygpO1xuICAgICAgICB3aGlsZSAocmVhZEJpdHMoMSkpIHtcbiAgICAgICAgICBjb2RlYmxvY2suTGJsb2NrKys7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNvZGluZ3Bhc3Nlc0xvZzIgPSBsb2cyKGNvZGluZ3Bhc3Nlcyk7XG4gICAgICAgIC8vIHJvdW5kaW5nIGRvd24gbG9nMlxuICAgICAgICB2YXIgYml0cyA9ICgoY29kaW5ncGFzc2VzIDwgKDEgPDwgY29kaW5ncGFzc2VzTG9nMikpID9cbiAgICAgICAgICBjb2RpbmdwYXNzZXNMb2cyIC0gMSA6IGNvZGluZ3Bhc3Nlc0xvZzIpICsgY29kZWJsb2NrLkxibG9jaztcbiAgICAgICAgdmFyIGNvZGVkRGF0YUxlbmd0aCA9IHJlYWRCaXRzKGJpdHMpO1xuICAgICAgICBxdWV1ZS5wdXNoKHtcbiAgICAgICAgICBjb2RlYmxvY2ssXG4gICAgICAgICAgY29kaW5ncGFzc2VzLFxuICAgICAgICAgIGRhdGFMZW5ndGg6IGNvZGVkRGF0YUxlbmd0aCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBhbGlnblRvQnl0ZSgpO1xuICAgICAgaWYgKGVwaE1hcmtlclVzZWQpIHtcbiAgICAgICAgc2tpcE1hcmtlcklmRXF1YWwoMHg5Mik7XG4gICAgICB9XG4gICAgICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgcGFja2V0SXRlbSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGNvZGVibG9jayA9IHBhY2tldEl0ZW0uY29kZWJsb2NrO1xuICAgICAgICBpZiAoY29kZWJsb2NrWydkYXRhJ10gPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgY29kZWJsb2NrLmRhdGFJbnZhbGlkYXRpb25JZCAhPT0gY29udGV4dC5kYXRhSW52YWxpZGF0aW9uSWQpIHtcbiAgICAgICAgICBjb2RlYmxvY2suZGF0YSA9IFtdO1xuICAgICAgICAgIGNvZGVibG9jay5wYXJlbnRTdWJiYW5kLmNvZGVibG9ja3NXaXRoRGF0YS5wdXNoKGNvZGVibG9jayk7XG4gICAgICAgICAgY29kZWJsb2NrLnBhcmVudFN1YmJhbmQuZGF0YUludmFsaWRhdGlvbklkID1cbiAgICAgICAgICAgIGNvbnRleHQuZGF0YUludmFsaWRhdGlvbklkO1xuICAgICAgICAgIGNvZGVibG9jay5kYXRhSW52YWxpZGF0aW9uSWQgPSBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZDtcbiAgICAgICAgfVxuICAgICAgICBjb2RlYmxvY2suZGF0YS5wdXNoKHtcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIHN0YXJ0OiBvZmZzZXQgKyBwb3NpdGlvbixcbiAgICAgICAgICBlbmQ6IG9mZnNldCArIHBvc2l0aW9uICsgcGFja2V0SXRlbS5kYXRhTGVuZ3RoLFxuICAgICAgICAgIGNvZGluZ3Bhc3NlczogcGFja2V0SXRlbS5jb2RpbmdwYXNzZXMsXG4gICAgICAgIH0pO1xuICAgICAgICBjb2RlYmxvY2sucHJlY2luY3QucGl4ZWxzUHJlY2luY3QuaGFzRGF0YSA9IHRydWU7XG4gICAgICAgIHBvc2l0aW9uICs9IHBhY2tldEl0ZW0uZGF0YUxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGdldENvZWZmaWNpZW50c09mUmVzb2x1dGlvbihyZXNvbHV0aW9uLCBzcHFjZHMsIHNjYWxhckV4cG91bmRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWNpc2lvbiwgZ3VhcmRCaXRzLCByZXZlcnNpYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudGF0aW9uU3ltYm9sVXNlZCwgcmVnaW9uSW5MZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFJbnZhbGlkYXRpb25JZCkge1xuICAgIC8vIEFsbG9jYXRlIHNwYWNlIGZvciB0aGUgd2hvbGUgc3VibGV2ZWwuXG4gICAgdmFyIGFycmF5V2lkdGggPSByZWdpb25JbkxldmVsLngxIC0gcmVnaW9uSW5MZXZlbC54MDtcbiAgICB2YXIgYXJyYXlIZWlnaHQgPSByZWdpb25JbkxldmVsLnkxIC0gcmVnaW9uSW5MZXZlbC55MDtcbiAgICB2YXIgY29lZmZpY2llbnRzID0gbmV3IEZsb2F0MzJBcnJheShhcnJheVdpZHRoICogYXJyYXlIZWlnaHQpO1xuICAgIHZhciByZWdpb25JblN1YmJhbmQ7XG4gICAgdmFyIHJlZ2lvblRtcCA9IHsgeDA6IDAsIHgxOiAwLCB5MDogMCwgeTE6IDEgfTtcbiAgICBcbiAgICBpZiAocmVzb2x1dGlvbi5oYXNEZWNvZGVkQ29lZmZpY2llbnRzICYmXG4gICAgICAgIHJlc29sdXRpb24uZGF0YUludmFsaWRhdGlvbklkID09PSBkYXRhSW52YWxpZGF0aW9uSWQpIHtcbiAgICAgIFxuICAgICAgdmFyIGlzQWxsQ29lZmZpY2llbnRzQ29waWVkID0gY29weURlY29kZWRDb2VmZmljaWVudHMoXG4gICAgICAgIHJlc29sdXRpb24sIHJlZ2lvbkluTGV2ZWwsIGNvZWZmaWNpZW50cywgYXJyYXlXaWR0aCxcbiAgICAgICAgZGF0YUludmFsaWRhdGlvbklkKTtcbiAgICAgIFxuICAgICAgaWYgKGlzQWxsQ29lZmZpY2llbnRzQ29waWVkKSB7XG4gICAgICAgIHJldHVybiBjb2VmZmljaWVudHM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgcyA9IDAsIHNzID0gcmVzb2x1dGlvbi5zdWJiYW5kcy5sZW5ndGg7IHMgPCBzczsgcysrKSB7XG4gICAgICB2YXIgc3ViYmFuZCA9IHJlc29sdXRpb24uc3ViYmFuZHNbc107XG4gICAgICBpZiAoc3ViYmFuZC5kYXRhSW52YWxpZGF0aW9uSWQgIT09IGRhdGFJbnZhbGlkYXRpb25JZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgdmFyIGludGVybGVhdmUgPSBzdWJiYW5kLnR5cGUgIT09ICdMTCc7XG4gICAgICB2YXIgcmVnaW9uSW5TdWJiYW5kO1xuICAgICAgaWYgKCFpbnRlcmxlYXZlKSB7XG4gICAgICAgIHJlZ2lvbkluU3ViYmFuZCA9IHJlZ2lvbkluTGV2ZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWdpb25UbXAueDAgPSAocmVnaW9uSW5MZXZlbC54MCAtIHJlc29sdXRpb24udHJ4MCkgLyAyICsgc3ViYmFuZC50YngwO1xuICAgICAgICByZWdpb25UbXAueTAgPSAocmVnaW9uSW5MZXZlbC55MCAtIHJlc29sdXRpb24udHJ5MCkgLyAyICsgc3ViYmFuZC50YnkwO1xuICAgICAgICByZWdpb25UbXAueDEgPSAocmVnaW9uSW5MZXZlbC54MSAtIHJlc29sdXRpb24udHJ4MCkgLyAyICsgc3ViYmFuZC50YngwO1xuICAgICAgICByZWdpb25UbXAueTEgPSAocmVnaW9uSW5MZXZlbC55MSAtIHJlc29sdXRpb24udHJ5MCkgLyAyICsgc3ViYmFuZC50YnkwO1xuICAgICAgICByZWdpb25JblN1YmJhbmQgPSByZWdpb25UbXA7XG4gICAgICB9XG5cbiAgICAgIC8vIEluIHRoZSBmaXJzdCByZXNvbHV0aW9uIGxldmVsLCBjb3B5Q29lZmZpY2llbnRzIHdpbGwgZmlsbCB0aGVcbiAgICAgIC8vIHdob2xlIGFycmF5IHdpdGggY29lZmZpY2llbnRzLiBJbiB0aGUgc3VjY2VlZGluZyBwYXNzZXMsXG4gICAgICAvLyBjb3B5Q29lZmZpY2llbnRzIHdpbGwgY29uc2VjdXRpdmVseSBmaWxsIGluIHRoZSB2YWx1ZXMgdGhhdCBiZWxvbmdcbiAgICAgIC8vIHRvIHRoZSBpbnRlcmxlYXZlZCBwb3NpdGlvbnMgb2YgdGhlIEhMLCBMSCwgYW5kIEhIIGNvZWZmaWNpZW50cy5cbiAgICAgIC8vIFRoZSBMTCBjb2VmZmljaWVudHMgd2lsbCB0aGVuIGJlIGludGVybGVhdmVkIGluIFRyYW5zZm9ybS5pdGVyYXRlKCkuXG5cbiAgICAgIHZhciB4MCA9IHN1YmJhbmQudGJ4MDtcbiAgICAgIHZhciB5MCA9IHN1YmJhbmQudGJ5MDtcbiAgICAgIHZhciB3aWR0aCA9IHN1YmJhbmQudGJ4MSAtIHN1YmJhbmQudGJ4MDtcbiAgICAgIHZhciBjb2RlYmxvY2tzID0gc3ViYmFuZC5jb2RlYmxvY2tzV2l0aERhdGE7XG4gICAgICB2YXIgcmlnaHQgPSBzdWJiYW5kLnR5cGUuY2hhckF0KDApID09PSAnSCcgPyAxIDogMDtcbiAgICAgIHZhciBib3R0b20gPSBzdWJiYW5kLnR5cGUuY2hhckF0KDEpID09PSAnSCcgPyBhcnJheVdpZHRoIDogMDtcbiAgICAgIHZhciBpbnRlcmxlYXZlT2Zmc2V0ID0gcmlnaHQgKyBib3R0b207XG4gICAgICB2YXIgaW50ZXJsZWF2ZSA9IHN1YmJhbmQudHlwZSAhPT0gJ0xMJztcbiAgICAgIHZhciB0YXJnZXRTdGVwID0gaW50ZXJsZWF2ZSA/IDIgOiAxO1xuICAgICAgdmFyIHRhcmdldFJvd1N0ZXAgPSBhcnJheVdpZHRoICogdGFyZ2V0U3RlcDtcbiAgXG4gICAgICB2YXIgcmVnaW9uSW5Db2RlYmxvY2sgPSB7XG4gICAgICAgIHgwOiAwLFxuICAgICAgICB5MDogMCxcbiAgICAgICAgeDE6IDAsXG4gICAgICAgIHkxOiAwXG4gICAgICB9O1xuICAgICAgXG4gICAgICB2YXIgbXUsIGVwc2lsb247XG4gICAgICBpZiAoIXNjYWxhckV4cG91bmRlZCkge1xuICAgICAgICAvLyBmb3JtdWxhIEUtNVxuICAgICAgICBtdSA9IHNwcWNkc1swXS5tdTtcbiAgICAgICAgdmFyIHIgPSBzdWJiYW5kLnJlc29sdXRpb24ucmVzTGV2ZWw7XG4gICAgICAgIGVwc2lsb24gPSBzcHFjZHNbMF0uZXBzaWxvbiArIChyID4gMCA/IDEgLSByIDogMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW5kZXhJblRpbGVDb21wb25lbnQgPSBzdWJiYW5kLmluZGV4SW5UaWxlQ29tcG9uZW50O1xuICAgICAgICBtdSA9IHNwcWNkc1tpbmRleEluVGlsZUNvbXBvbmVudF0ubXU7XG4gICAgICAgIGVwc2lsb24gPSBzcHFjZHNbaW5kZXhJblRpbGVDb21wb25lbnRdLmVwc2lsb247XG4gICAgICB9XG4gIFxuICAgICAgdmFyIGdhaW5Mb2cyID0gU3ViYmFuZHNHYWluTG9nMltzdWJiYW5kLnR5cGVdO1xuICBcbiAgICAgIC8vIGNhbGN1bGF0ZSBxdWFudGl6YXRpb24gY29lZmZpY2llbnQgKFNlY3Rpb24gRS4xLjEuMSlcbiAgICAgIHZhciBkZWx0YSA9IChyZXZlcnNpYmxlID8gMSA6XG4gICAgICAgIE1hdGgucG93KDIsIHByZWNpc2lvbiArIGdhaW5Mb2cyIC0gZXBzaWxvbikgKiAoMSArIG11IC8gMjA0OCkpO1xuICAgICAgdmFyIG1iID0gKGd1YXJkQml0cyArIGVwc2lsb24gLSAxKTtcbiAgICAgIFxuICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY29kZWJsb2Nrcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgIHZhciBjb2RlYmxvY2sgPSBjb2RlYmxvY2tzW2ldO1xuICAgICAgICBpZiAoY29kZWJsb2NrLnByZWNpbmN0LnBpeGVsc1ByZWNpbmN0LmRlY29kZWRDb2VmZmljaWVudHMgJiZcbiAgICAgICAgICAgIGNvZGVibG9jay5kYXRhSW52YWxpZGF0aW9uSWQgPT09IGRhdGFJbnZhbGlkYXRpb25JZCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZWdpb25JbkNvZGVibG9jay54MCA9IE1hdGgubWF4KGNvZGVibG9jay50YngwXywgcmVnaW9uSW5TdWJiYW5kLngwKTtcbiAgICAgICAgcmVnaW9uSW5Db2RlYmxvY2sueTAgPSBNYXRoLm1heChjb2RlYmxvY2sudGJ5MF8sIHJlZ2lvbkluU3ViYmFuZC55MCk7XG4gICAgICAgIHJlZ2lvbkluQ29kZWJsb2NrLngxID0gTWF0aC5taW4oY29kZWJsb2NrLnRieDFfLCByZWdpb25JblN1YmJhbmQueDEpO1xuICAgICAgICByZWdpb25JbkNvZGVibG9jay55MSA9IE1hdGgubWluKGNvZGVibG9jay50YnkxXywgcmVnaW9uSW5TdWJiYW5kLnkxKTtcbiAgICAgICAgaWYgKHJlZ2lvbkluQ29kZWJsb2NrLngwID49IHJlZ2lvbkluQ29kZWJsb2NrLngxIHx8XG4gICAgICAgICAgICByZWdpb25JbkNvZGVibG9jay55MCA+PSByZWdpb25JbkNvZGVibG9jay55MSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGFyZ2V0U3RhcnRPZmZzZXQgPVxuICAgICAgICAgIChyZWdpb25JbkNvZGVibG9jay54MCAtIHJlZ2lvbkluU3ViYmFuZC54MCkgKiB0YXJnZXRTdGVwICtcbiAgICAgICAgICAocmVnaW9uSW5Db2RlYmxvY2sueTAgLSByZWdpb25JblN1YmJhbmQueTApICogdGFyZ2V0Um93U3RlcCArXG4gICAgICAgICAgaW50ZXJsZWF2ZU9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIHZhciBibG9ja1dpZHRoID0gY29kZWJsb2NrLnRieDFfIC0gY29kZWJsb2NrLnRieDBfO1xuICAgICAgICB2YXIgYmxvY2tIZWlnaHQgPSBjb2RlYmxvY2sudGJ5MV8gLSBjb2RlYmxvY2sudGJ5MF87XG4gICAgICAgIHZhciBiaXRNb2RlbCwgY3VycmVudENvZGluZ3Bhc3NUeXBlO1xuICAgICAgICBiaXRNb2RlbCA9IG5ldyBCaXRNb2RlbChibG9ja1dpZHRoLCBibG9ja0hlaWdodCwgY29kZWJsb2NrLnN1YmJhbmRUeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlYmxvY2suemVyb0JpdFBsYW5lcywgbWIpO1xuICAgICAgICBjdXJyZW50Q29kaW5ncGFzc1R5cGUgPSAyOyAvLyBmaXJzdCBiaXQgcGxhbmUgc3RhcnRzIGZyb20gY2xlYW51cFxuICAgICAgICBcbiAgICAgICAgLy8gY29sbGVjdCBkYXRhXG4gICAgICAgIHZhciBkYXRhID0gY29kZWJsb2NrLmRhdGEsIHRvdGFsTGVuZ3RoID0gMCwgY29kaW5ncGFzc2VzID0gMDtcbiAgICAgICAgdmFyIGosIGpqLCBkYXRhSXRlbTtcbiAgICAgICAgZm9yIChqID0gMCwgamogPSBkYXRhLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICBkYXRhSXRlbSA9IGRhdGFbal07XG4gICAgICAgICAgdG90YWxMZW5ndGggKz0gZGF0YUl0ZW0uZW5kIC0gZGF0YUl0ZW0uc3RhcnQ7XG4gICAgICAgICAgY29kaW5ncGFzc2VzICs9IGRhdGFJdGVtLmNvZGluZ3Bhc3NlcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW5jb2RlZERhdGEgPSBuZXcgVWludDhBcnJheSh0b3RhbExlbmd0aCk7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IDA7XG4gICAgICAgIGZvciAoaiA9IDAsIGpqID0gZGF0YS5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgZGF0YUl0ZW0gPSBkYXRhW2pdO1xuICAgICAgICAgIHZhciBjaHVuayA9IGRhdGFJdGVtLmRhdGEuc3ViYXJyYXkoZGF0YUl0ZW0uc3RhcnQsIGRhdGFJdGVtLmVuZCk7XG4gICAgICAgICAgZW5jb2RlZERhdGEuc2V0KGNodW5rLCBwb3NpdGlvbik7XG4gICAgICAgICAgcG9zaXRpb24gKz0gY2h1bmsubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIC8vIGRlY29kaW5nIHRoZSBpdGVtXG4gICAgICAgIHZhciBkZWNvZGVyID0gbmV3IEFyaXRobWV0aWNEZWNvZGVyKGVuY29kZWREYXRhLCAwLCB0b3RhbExlbmd0aCk7XG4gICAgICAgIGJpdE1vZGVsLnNldERlY29kZXIoZGVjb2Rlcik7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29kaW5ncGFzc2VzOyBqKyspIHtcbiAgICAgICAgICBzd2l0Y2ggKGN1cnJlbnRDb2RpbmdwYXNzVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBiaXRNb2RlbC5ydW5TaWduaWZpY2FuY2VQcm9wYWdhdGlvblBhc3MoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGJpdE1vZGVsLnJ1bk1hZ25pdHVkZVJlZmluZW1lbnRQYXNzKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBiaXRNb2RlbC5ydW5DbGVhbnVwUGFzcygpO1xuICAgICAgICAgICAgICBpZiAoc2VnbWVudGF0aW9uU3ltYm9sVXNlZCkge1xuICAgICAgICAgICAgICAgIGJpdE1vZGVsLmNoZWNrU2VnbWVudGF0aW9uU3ltYm9sKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRDb2RpbmdwYXNzVHlwZSA9IChjdXJyZW50Q29kaW5ncGFzc1R5cGUgKyAxKSAlIDM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBvZmZzZXQgPSAoY29kZWJsb2NrLnRieDBfIC0geDApICsgKGNvZGVibG9jay50YnkwXyAtIHkwKSAqIHdpZHRoO1xuICAgICAgICB2YXIgc2lnbiA9IGJpdE1vZGVsLmNvZWZmaWNlbnRzU2lnbjtcbiAgICAgICAgdmFyIG1hZ25pdHVkZSA9IGJpdE1vZGVsLmNvZWZmaWNlbnRzTWFnbml0dWRlO1xuICAgICAgICB2YXIgYml0c0RlY29kZWQgPSBiaXRNb2RlbC5iaXRzRGVjb2RlZDtcbiAgICAgICAgdmFyIG1hZ25pdHVkZUNvcnJlY3Rpb24gPSByZXZlcnNpYmxlID8gMCA6IDAuNTtcbiAgICAgICAgdmFyIGssIG4sIG5iO1xuICAgICAgICB2YXIgY29kZWJsb2NrUm93U3RhcnQgPVxuICAgICAgICAgIChyZWdpb25JbkNvZGVibG9jay54MCAtIGNvZGVibG9jay50YngwXykgK1xuICAgICAgICAgIChyZWdpb25JbkNvZGVibG9jay55MCAtIGNvZGVibG9jay50YnkwXykgKiBibG9ja1dpZHRoO1xuICAgICAgICB2YXIgdGFyZ2V0Um93U3RhcnQgPSB0YXJnZXRTdGFydE9mZnNldDtcbiAgICAgICAgLy8gRG8gdGhlIGludGVybGVhdmluZyBvZiBTZWN0aW9uIEYuMy4zIGhlcmUsIHNvIHdlIGRvIG5vdCBuZWVkXG4gICAgICAgIC8vIHRvIGNvcHkgbGF0ZXIuIExMIGxldmVsIGlzIG5vdCBpbnRlcmxlYXZlZCwganVzdCBjb3BpZWQuXG4gICAgICAgIGZvciAodmFyIGogPSByZWdpb25JbkNvZGVibG9jay55MDsgaiA8IHJlZ2lvbkluQ29kZWJsb2NrLnkxOyBqKyspIHtcbiAgICAgICAgICB2YXIgcG9zaXRpb24gPSBjb2RlYmxvY2tSb3dTdGFydDtcbiAgICAgICAgICB2YXIgcG9zID0gdGFyZ2V0Um93U3RhcnQ7XG4gICAgICAgICAgY29kZWJsb2NrUm93U3RhcnQgKz0gYmxvY2tXaWR0aDtcbiAgICAgICAgICB0YXJnZXRSb3dTdGFydCArPSB0YXJnZXRSb3dTdGVwO1xuICAgICAgICAgIFxuICAgICAgICAgIGZvciAoayA9IHJlZ2lvbkluQ29kZWJsb2NrLngwOyBrIDwgcmVnaW9uSW5Db2RlYmxvY2sueDE7IGsrKykge1xuICAgICAgICAgICAgbiA9IG1hZ25pdHVkZVtwb3NpdGlvbl07XG4gICAgICAgICAgICBpZiAobiAhPT0gMCkge1xuICAgICAgICAgICAgICBuID0gKG4gKyBtYWduaXR1ZGVDb3JyZWN0aW9uKSAqIGRlbHRhO1xuICAgICAgICAgICAgICBpZiAoc2lnbltwb3NpdGlvbl0gIT09IDApIHtcbiAgICAgICAgICAgICAgICBuID0gLW47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbmIgPSBiaXRzRGVjb2RlZFtwb3NpdGlvbl07XG4gICAgICAgICAgICAgIGlmIChyZXZlcnNpYmxlICYmIChuYiA+PSBtYikpIHtcbiAgICAgICAgICAgICAgICBjb2VmZmljaWVudHNbcG9zXSA9IG47XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29lZmZpY2llbnRzW3Bvc10gPSBuICogKDEgPDwgKG1iIC0gbmIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0Kys7XG4gICAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgICAgcG9zICs9IHRhcmdldFN0ZXA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9mZnNldCArPSB3aWR0aCAtIGJsb2NrV2lkdGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNvZWZmaWNpZW50cztcbiAgfVxuICBmdW5jdGlvbiBjb3B5RGVjb2RlZENvZWZmaWNpZW50cyhyZXNvbHV0aW9uLCByZWdpb25JbkxldmVsLCBjb2VmZmljaWVudHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5V2lkdGgsIGRhdGFJbnZhbGlkYXRpb25JZCkge1xuICAgIHZhciBpc0FsbENvZWZmaWNpZW50c0NvcGllZCA9IHRydWU7XG4gICAgdmFyIHN1YmJhbmRzID0gcmVzb2x1dGlvbi5zdWJiYW5kcztcbiAgICB2YXIgaW50ZXJsZWF2ZSA9IHN1YmJhbmRzWzBdLnR5cGUgIT09ICdMTCc7XG4gICAgXG4gICAgdmFyIGtrID0gcmVzb2x1dGlvbi5waXhlbHNQcmVjaW5jdHNXaXRoRGVjb2RlZENvZWZmaWNpZW50cy5sZW5ndGg7XG4gICAgZm9yICh2YXIgayA9IDA7IGsgPCBrazsgKytrKSB7XG4gICAgICB2YXIgcGl4ZWxzUHJlY2luY3QgPVxuICAgICAgICByZXNvbHV0aW9uLnBpeGVsc1ByZWNpbmN0c1dpdGhEZWNvZGVkQ29lZmZpY2llbnRzW2tdO1xuICAgICAgdmFyIHByZWNpbmN0UmVnaW9uSW5MZXZlbCA9IGNhbGN1bGF0ZVJlZ2lvbkluTGV2ZWxPZlBpeGVsc1ByZWNpbmN0KFxuICAgICAgICBwaXhlbHNQcmVjaW5jdCwgcmVzb2x1dGlvbik7XG4gICAgICB2YXIgeDAgPSBNYXRoLm1heChwcmVjaW5jdFJlZ2lvbkluTGV2ZWwueDAsIHJlZ2lvbkluTGV2ZWwueDApO1xuICAgICAgdmFyIHkwID0gTWF0aC5tYXgocHJlY2luY3RSZWdpb25JbkxldmVsLnkwLCByZWdpb25JbkxldmVsLnkwKTtcbiAgICAgIHZhciB4MSA9IE1hdGgubWluKHByZWNpbmN0UmVnaW9uSW5MZXZlbC54MSwgcmVnaW9uSW5MZXZlbC54MSk7XG4gICAgICB2YXIgeTEgPSBNYXRoLm1pbihwcmVjaW5jdFJlZ2lvbkluTGV2ZWwueTEsIHJlZ2lvbkluTGV2ZWwueTEpO1xuICAgICAgaWYgKHgwID49IHgxIHx8IHkwID49IHkxKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHBpeGVsc1ByZWNpbmN0LmRhdGFJbnZhbGlkYXRpb25JZCAhPT0gZGF0YUludmFsaWRhdGlvbklkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFwaXhlbHNQcmVjaW5jdFsnZGVjb2RlZENvZWZmaWNpZW50cyddKSB7XG4gICAgICAgIGlmIChwaXhlbHNQcmVjaW5jdC5oYXNEYXRhKSB7XG4gICAgICAgICAgaXNBbGxDb2VmZmljaWVudHNDb3BpZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBkZWNvZGVkID0gcGl4ZWxzUHJlY2luY3QuZGVjb2RlZENvZWZmaWNpZW50cztcbiAgICAgIHZhciB3aWR0aCA9IHgxIC0geDA7XG4gICAgICB2YXIgc291cmNlV2lkdGggPSBwcmVjaW5jdFJlZ2lvbkluTGV2ZWwueDEgLSBwcmVjaW5jdFJlZ2lvbkluTGV2ZWwueDA7XG4gICAgICB2YXIgdGFyZ2V0V2lkdGggPSBhcnJheVdpZHRoO1xuICAgICAgdmFyIHNvdXJjZSA9ICh4MCAtIHByZWNpbmN0UmVnaW9uSW5MZXZlbC54MCkgK1xuICAgICAgICAgICAgICAgICAgICh5MCAtIHByZWNpbmN0UmVnaW9uSW5MZXZlbC55MCkgKiBzb3VyY2VXaWR0aDtcbiAgICAgIHZhciB0YXJnZXQgPSAoeDAgLSByZWdpb25JbkxldmVsLngwKSArXG4gICAgICAgICAgICAgICAgICAgKHkwIC0gcmVnaW9uSW5MZXZlbC55MCkgKiB0YXJnZXRXaWR0aDtcbiAgICAgIFxuICAgICAgZm9yICh2YXIgcm93ID0geTA7IHJvdyA8IHkxOyArK3Jvdykge1xuICAgICAgICBjb2VmZmljaWVudHMuc2V0KGRlY29kZWQuc3ViYXJyYXkoc291cmNlLCBzb3VyY2UgKyB3aWR0aCksIHRhcmdldCk7XG4gICAgICAgIHNvdXJjZSArPSBzb3VyY2VXaWR0aDtcbiAgICAgICAgdGFyZ2V0ICs9IHRhcmdldFdpZHRoO1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gaXNBbGxDb2VmZmljaWVudHNDb3BpZWQ7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNmb3JtVGlsZShjb250ZXh0LCB0aWxlLCBjKSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuY29tcG9uZW50c1tjXTtcbiAgICB2YXIgY29kaW5nU3R5bGVQYXJhbWV0ZXJzID0gY29tcG9uZW50LmNvZGluZ1N0eWxlUGFyYW1ldGVycztcblxuICAgIHZhciBxdWFudGl6YXRpb25QYXJhbWV0ZXJzID0gY29tcG9uZW50LnF1YW50aXphdGlvblBhcmFtZXRlcnM7XG4gICAgdmFyIGRlY29tcG9zaXRpb25MZXZlbHNDb3VudCA9XG4gICAgICBjb2RpbmdTdHlsZVBhcmFtZXRlcnMuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50O1xuICAgIHZhciBzcHFjZHMgPSBxdWFudGl6YXRpb25QYXJhbWV0ZXJzLlNQcWNkcztcbiAgICB2YXIgc2NhbGFyRXhwb3VuZGVkID0gcXVhbnRpemF0aW9uUGFyYW1ldGVycy5zY2FsYXJFeHBvdW5kZWQ7XG4gICAgdmFyIGd1YXJkQml0cyA9IHF1YW50aXphdGlvblBhcmFtZXRlcnMuZ3VhcmRCaXRzO1xuICAgIHZhciBzZWdtZW50YXRpb25TeW1ib2xVc2VkID0gY29kaW5nU3R5bGVQYXJhbWV0ZXJzLnNlZ21lbnRhdGlvblN5bWJvbFVzZWQ7XG4gICAgdmFyIHByZWNpc2lvbiA9IGNvbnRleHQuY29tcG9uZW50c1tjXS5wcmVjaXNpb247XG5cbiAgICB2YXIgcmV2ZXJzaWJsZSA9IGNvZGluZ1N0eWxlUGFyYW1ldGVycy5yZXZlcnNpYmxlVHJhbnNmb3JtYXRpb247XG4gICAgdmFyIHRyYW5zZm9ybSA9IChyZXZlcnNpYmxlID8gbmV3IFJldmVyc2libGVUcmFuc2Zvcm0oKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IElycmV2ZXJzaWJsZVRyYW5zZm9ybSgpKTtcblxuICAgIHZhciByZWxhdGl2ZVJlZ2lvbkluVGlsZTtcbiAgICBpZiAoY29udGV4dC5yZWdpb25Ub1BhcnNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciB4MSA9IE1hdGgubWluKGNvbXBvbmVudC50Y3gxLCBjb250ZXh0LnJlZ2lvblRvUGFyc2UucmlnaHQpO1xuICAgICAgdmFyIHkxID0gTWF0aC5taW4oY29tcG9uZW50LnRjeTEsIGNvbnRleHQucmVnaW9uVG9QYXJzZS5ib3R0b20pO1xuICAgICAgcmVsYXRpdmVSZWdpb25JblRpbGUgPSB7XG4gICAgICAgIHgwOiBNYXRoLm1heCgwLCBjb250ZXh0LnJlZ2lvblRvUGFyc2UubGVmdCAtIGNvbXBvbmVudC50Y3gwKSxcbiAgICAgICAgeTA6IE1hdGgubWF4KDAsIGNvbnRleHQucmVnaW9uVG9QYXJzZS50b3AgLSBjb21wb25lbnQudGN5MCksXG4gICAgICAgIHgxOiB4MSAtIGNvbXBvbmVudC50Y3gwLFxuICAgICAgICB5MTogeTEgLSBjb21wb25lbnQudGN5MFxuICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgdmFyIHN1YmJhbmRDb2VmZmljaWVudHMgPSBbXTtcbiAgICB2YXIgcmVnaW9uSW5MZXZlbCA9IHsgeDA6IDAsIHkwOiAwLCB4MTogMCwgeTE6IDAgfTtcbiAgICB2YXIgcmVnaW9uID0geyB4MDogMCwgeTA6IDAsIHgxOiAwLCB5MTogMCB9O1xuICAgIFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDw9IGRlY29tcG9zaXRpb25MZXZlbHNDb3VudDsgaSsrKSB7XG4gICAgICB2YXIgcmVzb2x1dGlvbiA9IGNvbXBvbmVudC5yZXNvbHV0aW9uc1tpXTtcblxuICAgICAgdmFyIGxldmVsV2lkdGggPSByZXNvbHV0aW9uLnRyeDEgLSByZXNvbHV0aW9uLnRyeDA7XG4gICAgICB2YXIgbGV2ZWxIZWlnaHQgPSByZXNvbHV0aW9uLnRyeTEgLSByZXNvbHV0aW9uLnRyeTA7XG4gICAgICBcbiAgICAgIHZhciByZWdpb25JbkxldmVsO1xuICAgICAgaWYgKHJlbGF0aXZlUmVnaW9uSW5UaWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MCA9IHJlc29sdXRpb24udHJ4MDtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MCA9IHJlc29sdXRpb24udHJ5MDtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MSA9IHJlc29sdXRpb24udHJ4MTtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MSA9IHJlc29sdXRpb24udHJ5MTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBzY2FsZSA9IDEgPDwgKGRlY29tcG9zaXRpb25MZXZlbHNDb3VudCAtIGkpO1xuICAgICAgICB2YXIgcmVkdW5kYW50Q29lZmZzID0gNDtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MCA9IE1hdGguY2VpbChyZWxhdGl2ZVJlZ2lvbkluVGlsZS54MCAvIHNjYWxlKSAtXG4gICAgICAgICAgcmVkdW5kYW50Q29lZmZzO1xuICAgICAgICByZWdpb25JbkxldmVsLnkwID0gTWF0aC5jZWlsKHJlbGF0aXZlUmVnaW9uSW5UaWxlLnkwIC8gc2NhbGUpIC1cbiAgICAgICAgICByZWR1bmRhbnRDb2VmZnM7XG4gICAgICAgIHJlZ2lvbkluTGV2ZWwueDEgPSBNYXRoLmNlaWwocmVsYXRpdmVSZWdpb25JblRpbGUueDEgLyBzY2FsZSkgK1xuICAgICAgICAgIHJlZHVuZGFudENvZWZmcztcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MSA9IE1hdGguY2VpbChyZWxhdGl2ZVJlZ2lvbkluVGlsZS55MSAvIHNjYWxlKSArXG4gICAgICAgICAgcmVkdW5kYW50Q29lZmZzO1xuICAgICAgICBcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MCA9IDIgKiBNYXRoLmZsb29yKHJlZ2lvbkluTGV2ZWwueDAgLyAyKSArXG4gICAgICAgICAgcmVzb2x1dGlvbi50cngwO1xuICAgICAgICByZWdpb25JbkxldmVsLnkwID0gMiAqIE1hdGguZmxvb3IocmVnaW9uSW5MZXZlbC55MCAvIDIpICtcbiAgICAgICAgICByZXNvbHV0aW9uLnRyeTA7XG4gICAgICAgIHJlZ2lvbkluTGV2ZWwueDEgPSAyICogTWF0aC5mbG9vcihyZWdpb25JbkxldmVsLngxIC8gMikgK1xuICAgICAgICAgIHJlc29sdXRpb24udHJ4MDtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MSA9IDIgKiBNYXRoLmZsb29yKHJlZ2lvbkluTGV2ZWwueTEgLyAyKSArXG4gICAgICAgICAgcmVzb2x1dGlvbi50cnkwO1xuICAgICAgICBcbiAgICAgICAgcmVnaW9uSW5MZXZlbC54MCA9IE1hdGgubWF4KHJlZ2lvbkluTGV2ZWwueDAsIHJlc29sdXRpb24udHJ4MCk7XG4gICAgICAgIHJlZ2lvbkluTGV2ZWwueTAgPSBNYXRoLm1heChyZWdpb25JbkxldmVsLnkwLCByZXNvbHV0aW9uLnRyeTApO1xuICAgICAgICByZWdpb25JbkxldmVsLngxID0gTWF0aC5taW4ocmVnaW9uSW5MZXZlbC54MSwgcmVzb2x1dGlvbi50cngxKTtcbiAgICAgICAgcmVnaW9uSW5MZXZlbC55MSA9IE1hdGgubWluKHJlZ2lvbkluTGV2ZWwueTEsIHJlc29sdXRpb24udHJ5MSk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHZhciBjb2VmZmljaWVudHMgPVxuICAgICAgICBnZXRDb2VmZmljaWVudHNPZlJlc29sdXRpb24ocmVzb2x1dGlvbiwgc3BxY2RzLCBzY2FsYXJFeHBvdW5kZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24sIGd1YXJkQml0cywgcmV2ZXJzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRhdGlvblN5bWJvbFVzZWQsIHJlZ2lvbkluTGV2ZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LmRhdGFJbnZhbGlkYXRpb25JZCk7XG4gICAgICBcbiAgICAgIHZhciByZWxhdGl2ZVJlZ2lvbkluTGV2ZWwgPSB7XG4gICAgICAgIHgwOiByZWdpb25JbkxldmVsLngwIC0gcmVzb2x1dGlvbi50cngwLFxuICAgICAgICB5MDogcmVnaW9uSW5MZXZlbC55MCAtIHJlc29sdXRpb24udHJ5MCxcbiAgICAgICAgeDE6IHJlZ2lvbkluTGV2ZWwueDEgLSByZXNvbHV0aW9uLnRyeDAsXG4gICAgICAgIHkxOiByZWdpb25JbkxldmVsLnkxIC0gcmVzb2x1dGlvbi50cnkwXG4gICAgICB9O1xuICAgICAgc3ViYmFuZENvZWZmaWNpZW50cy5wdXNoKHtcbiAgICAgICAgbGV2ZWxXaWR0aCxcbiAgICAgICAgbGV2ZWxIZWlnaHQsXG4gICAgICAgIGl0ZW1zOiBjb2VmZmljaWVudHMsXG4gICAgICAgIHJlbGF0aXZlUmVnaW9uSW5MZXZlbDogcmVsYXRpdmVSZWdpb25JbkxldmVsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IHRyYW5zZm9ybS5jYWxjdWxhdGUoc3ViYmFuZENvZWZmaWNpZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnQudGN4MCwgY29tcG9uZW50LnRjeTApO1xuICAgIHZhciByZWxhdGl2ZVJlZ2lvbkluTGV2ZWwgPSByZXN1bHQucmVsYXRpdmVSZWdpb25JbkxldmVsO1xuICAgIFxuICAgIGlmIChjb250ZXh0LnJlZ2lvblRvUGFyc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIG5lZWRDcm9wVGlsZSA9XG4gICAgICAgIHJlbGF0aXZlUmVnaW9uSW5UaWxlLngwICE9PSByZWxhdGl2ZVJlZ2lvbkluTGV2ZWwueDAgfHxcbiAgICAgICAgcmVsYXRpdmVSZWdpb25JblRpbGUueTAgIT09IHJlbGF0aXZlUmVnaW9uSW5MZXZlbC55MCB8fFxuICAgICAgICByZWxhdGl2ZVJlZ2lvbkluVGlsZS54MSAhPT0gcmVsYXRpdmVSZWdpb25JbkxldmVsLngxIHx8XG4gICAgICAgIHJlbGF0aXZlUmVnaW9uSW5UaWxlLnkxICE9PSByZWxhdGl2ZVJlZ2lvbkluTGV2ZWwueTE7XG4gICAgICBpZiAobmVlZENyb3BUaWxlKSB7XG4gICAgICAgIHZhciBjcm9wcGVkSXRlbXMgPSBjcm9wVGlsZShcbiAgICAgICAgICByZWxhdGl2ZVJlZ2lvbkluVGlsZSwgcmVsYXRpdmVSZWdpb25JbkxldmVsLCByZXN1bHQuaXRlbXMpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGxlZnQ6IGNvbXBvbmVudC50Y3gwICsgcmVsYXRpdmVSZWdpb25JblRpbGUueDAsXG4gICAgICAgICAgdG9wOiBjb21wb25lbnQudGN5MCArIHJlbGF0aXZlUmVnaW9uSW5UaWxlLnkwLFxuICAgICAgICAgIHdpZHRoOiByZWxhdGl2ZVJlZ2lvbkluVGlsZS54MSAtIHJlbGF0aXZlUmVnaW9uSW5UaWxlLngwLFxuICAgICAgICAgIGhlaWdodDogcmVsYXRpdmVSZWdpb25JblRpbGUueTEgLSByZWxhdGl2ZVJlZ2lvbkluVGlsZS55MCxcbiAgICAgICAgICBpdGVtczogY3JvcHBlZEl0ZW1zLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogY29tcG9uZW50LnRjeDAsXG4gICAgICB0b3A6IGNvbXBvbmVudC50Y3kwLFxuICAgICAgd2lkdGg6IHJlbGF0aXZlUmVnaW9uSW5MZXZlbC54MSAtIHJlbGF0aXZlUmVnaW9uSW5MZXZlbC54MCxcbiAgICAgIGhlaWdodDogcmVsYXRpdmVSZWdpb25JbkxldmVsLnkxIC0gcmVsYXRpdmVSZWdpb25JbkxldmVsLnkwLFxuICAgICAgaXRlbXM6IHJlc3VsdC5pdGVtc1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gY3JvcFRpbGUocmVsYXRpdmVSZWdpb25JblRpbGUsIHJlbGF0aXZlUmVnaW9uSW5MZXZlbCwgaXRlbXMpIHtcbiAgICAvLyBDcm9wIHRoZSA0IHJlZHVuZGFudCBwaXhlbHMgdXNlZCBmb3IgdGhlIERXVFxuICAgIFxuICAgIHZhciB3aWR0aCA9IHJlbGF0aXZlUmVnaW9uSW5UaWxlLngxIC0gcmVsYXRpdmVSZWdpb25JblRpbGUueDA7XG4gICAgdmFyIGhlaWdodCA9IHJlbGF0aXZlUmVnaW9uSW5UaWxlLnkxIC0gcmVsYXRpdmVSZWdpb25JblRpbGUueTA7XG4gICAgdmFyIHNvdXJjZVdpZHRoID0gcmVsYXRpdmVSZWdpb25JbkxldmVsLngxIC0gcmVsYXRpdmVSZWdpb25JbkxldmVsLngwO1xuICAgIFxuICAgIHZhciByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHdpZHRoICogaGVpZ2h0KTtcbiAgICBcbiAgICB2YXIgcmVkdW5kYW50Um93c1RvcCA9XG4gICAgICByZWxhdGl2ZVJlZ2lvbkluVGlsZS55MCAtIHJlbGF0aXZlUmVnaW9uSW5MZXZlbC55MDtcbiAgICB2YXIgcmVkdW5kYW50Q29sdW1uc0xlZnQgPVxuICAgICAgcmVsYXRpdmVSZWdpb25JblRpbGUueDAgLSByZWxhdGl2ZVJlZ2lvbkluTGV2ZWwueDA7XG4gICAgICBcbiAgICB2YXIgdGFyZ2V0T2Zmc2V0ID0gMDtcbiAgICB2YXIgc291cmNlT2Zmc2V0ID0gcmVkdW5kYW50Q29sdW1uc0xlZnQgKyBzb3VyY2VXaWR0aCAqIHJlZHVuZGFudFJvd3NUb3A7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWlnaHQ7ICsraSkge1xuICAgICAgdmFyIHNvdXJjZUVuZCA9IHNvdXJjZU9mZnNldCArIHdpZHRoO1xuICAgICAgXG4gICAgICByZXN1bHQuc2V0KFxuICAgICAgICBpdGVtcy5zdWJhcnJheShzb3VyY2VPZmZzZXQsIHNvdXJjZUVuZCksXG4gICAgICAgIHRhcmdldE9mZnNldCk7XG4gICAgICBcbiAgICAgIHNvdXJjZU9mZnNldCArPSBzb3VyY2VXaWR0aDtcbiAgICAgIHRhcmdldE9mZnNldCArPSB3aWR0aDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Db21wb25lbnRzKGNvbnRleHQpIHtcbiAgICB2YXIgc2l6ID0gY29udGV4dC5TSVo7XG4gICAgdmFyIGNvbXBvbmVudHMgPSBjb250ZXh0LmNvbXBvbmVudHM7XG4gICAgdmFyIGNvbXBvbmVudHNDb3VudCA9IHNpei5Dc2l6O1xuICAgIHZhciByZXN1bHRJbWFnZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjb250ZXh0LnRpbGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIHZhciB0aWxlID0gY29udGV4dC50aWxlc1tpXTtcbiAgICAgIFxuICAgICAgaWYgKGNvbnRleHQucmVnaW9uVG9QYXJzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChjb250ZXh0LnJlZ2lvblRvUGFyc2UubGVmdCA+PSB0aWxlLnR4MSB8fFxuICAgICAgICAgICAgY29udGV4dC5yZWdpb25Ub1BhcnNlLnRvcCA+PSB0aWxlLnR5MSB8fFxuICAgICAgICAgICAgY29udGV4dC5yZWdpb25Ub1BhcnNlLnJpZ2h0IDw9IHRpbGUudHgwIHx8XG4gICAgICAgICAgICBjb250ZXh0LnJlZ2lvblRvUGFyc2UuYm90dG9tIDw9IHRpbGUudHkwKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgdmFyIHRyYW5zZm9ybWVkVGlsZXMgPSBbXTtcbiAgICAgIHZhciBjO1xuICAgICAgZm9yIChjID0gMDsgYyA8IGNvbXBvbmVudHNDb3VudDsgYysrKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkVGlsZXNbY10gPSB0cmFuc2Zvcm1UaWxlKGNvbnRleHQsIHRpbGUsIGMpO1xuICAgICAgfVxuICAgICAgdmFyIHRpbGUwID0gdHJhbnNmb3JtZWRUaWxlc1swXTtcbiAgICAgIHZhciBvdXQgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkodGlsZTAuaXRlbXMubGVuZ3RoICogY29tcG9uZW50c0NvdW50KTtcbiAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgIGxlZnQ6IHRpbGUwLmxlZnQsXG4gICAgICAgIHRvcDogdGlsZTAudG9wLFxuICAgICAgICB3aWR0aDogdGlsZTAud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGlsZTAuaGVpZ2h0LFxuICAgICAgICBpdGVtczogb3V0LFxuICAgICAgfTtcblxuICAgICAgLy8gU2VjdGlvbiBHLjIuMiBJbnZlcnNlIG11bHRpIGNvbXBvbmVudCB0cmFuc2Zvcm1cbiAgICAgIHZhciBzaGlmdCwgb2Zmc2V0O1xuICAgICAgdmFyIHBvcyA9IDAsIGosIGpqLCB5MCwgeTEsIHkyO1xuICAgICAgaWYgKHRpbGUuY29kaW5nU3R5bGVEZWZhdWx0UGFyYW1ldGVycy5tdWx0aXBsZUNvbXBvbmVudFRyYW5zZm9ybSkge1xuICAgICAgICB2YXIgZm91ckNvbXBvbmVudHMgPSBjb21wb25lbnRzQ291bnQgPT09IDQ7XG4gICAgICAgIHZhciB5MGl0ZW1zID0gdHJhbnNmb3JtZWRUaWxlc1swXS5pdGVtcztcbiAgICAgICAgdmFyIHkxaXRlbXMgPSB0cmFuc2Zvcm1lZFRpbGVzWzFdLml0ZW1zO1xuICAgICAgICB2YXIgeTJpdGVtcyA9IHRyYW5zZm9ybWVkVGlsZXNbMl0uaXRlbXM7XG4gICAgICAgIHZhciB5M2l0ZW1zID0gZm91ckNvbXBvbmVudHMgPyB0cmFuc2Zvcm1lZFRpbGVzWzNdLml0ZW1zIDogbnVsbDtcblxuICAgICAgICAvLyBIQUNLOiBUaGUgbXVsdGlwbGUgY29tcG9uZW50IHRyYW5zZm9ybSBmb3JtdWxhcyBiZWxvdyBhc3N1bWUgdGhhdFxuICAgICAgICAvLyBhbGwgY29tcG9uZW50cyBoYXZlIHRoZSBzYW1lIHByZWNpc2lvbi4gV2l0aCB0aGlzIGluIG1pbmQsIHdlXG4gICAgICAgIC8vIGNvbXB1dGUgc2hpZnQgYW5kIG9mZnNldCBvbmx5IG9uY2UuXG4gICAgICAgIHNoaWZ0ID0gY29tcG9uZW50c1swXS5wcmVjaXNpb24gLSA4O1xuICAgICAgICBvZmZzZXQgPSAoMTI4IDw8IHNoaWZ0KSArIDAuNTtcblxuICAgICAgICB2YXIgY29tcG9uZW50MCA9IHRpbGUuY29tcG9uZW50c1swXTtcbiAgICAgICAgdmFyIGFscGhhMDEgPSBjb21wb25lbnRzQ291bnQgLSAzO1xuICAgICAgICBqaiA9IHkwaXRlbXMubGVuZ3RoO1xuICAgICAgICBpZiAoIWNvbXBvbmVudDAuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLnJldmVyc2libGVUcmFuc2Zvcm1hdGlvbikge1xuICAgICAgICAgIC8vIGludmVyc2UgaXJyZXZlcnNpYmxlIG11bHRpcGxlIGNvbXBvbmVudCB0cmFuc2Zvcm1cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgamo7IGorKywgcG9zICs9IGFscGhhMDEpIHtcbiAgICAgICAgICAgIHkwID0geTBpdGVtc1tqXSArIG9mZnNldDtcbiAgICAgICAgICAgIHkxID0geTFpdGVtc1tqXTtcbiAgICAgICAgICAgIHkyID0geTJpdGVtc1tqXTtcbiAgICAgICAgICAgIG91dFtwb3MrK10gPSAoeTAgKyAxLjQwMiAqIHkyKSA+PiBzaGlmdDtcbiAgICAgICAgICAgIG91dFtwb3MrK10gPSAoeTAgLSAwLjM0NDEzICogeTEgLSAwLjcxNDE0ICogeTIpID4+IHNoaWZ0O1xuICAgICAgICAgICAgb3V0W3BvcysrXSA9ICh5MCArIDEuNzcyICogeTEpID4+IHNoaWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpbnZlcnNlIHJldmVyc2libGUgbXVsdGlwbGUgY29tcG9uZW50IHRyYW5zZm9ybVxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqajsgaisrLCBwb3MgKz0gYWxwaGEwMSkge1xuICAgICAgICAgICAgeTAgPSB5MGl0ZW1zW2pdICsgb2Zmc2V0O1xuICAgICAgICAgICAgeTEgPSB5MWl0ZW1zW2pdO1xuICAgICAgICAgICAgeTIgPSB5Mml0ZW1zW2pdO1xuICAgICAgICAgICAgbGV0IGcgPSB5MCAtICgoeTIgKyB5MSkgPj4gMik7XG5cbiAgICAgICAgICAgIG91dFtwb3MrK10gPSAoZyArIHkyKSA+PiBzaGlmdDtcbiAgICAgICAgICAgIG91dFtwb3MrK10gPSBnID4+IHNoaWZ0O1xuICAgICAgICAgICAgb3V0W3BvcysrXSA9IChnICsgeTEpID4+IHNoaWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZm91ckNvbXBvbmVudHMpIHtcbiAgICAgICAgICBmb3IgKGogPSAwLCBwb3MgPSAzOyBqIDwgamo7IGorKywgcG9zICs9IDQpIHtcbiAgICAgICAgICAgIG91dFtwb3NdID0gKHkzaXRlbXNbal0gKyBvZmZzZXQpID4+IHNoaWZ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHsgLy8gbm8gbXVsdGktY29tcG9uZW50IHRyYW5zZm9ybVxuICAgICAgICBmb3IgKGMgPSAwOyBjIDwgY29tcG9uZW50c0NvdW50OyBjKyspIHtcbiAgICAgICAgICB2YXIgaXRlbXMgPSB0cmFuc2Zvcm1lZFRpbGVzW2NdLml0ZW1zO1xuICAgICAgICAgIHNoaWZ0ID0gY29tcG9uZW50c1tjXS5wcmVjaXNpb24gLSA4O1xuICAgICAgICAgIG9mZnNldCA9ICgxMjggPDwgc2hpZnQpICsgMC41O1xuICAgICAgICAgIGZvciAocG9zID0gYywgaiA9IDAsIGpqID0gaXRlbXMubGVuZ3RoOyBqIDwgamo7IGorKykge1xuICAgICAgICAgICAgb3V0W3Bvc10gPSAoaXRlbXNbal0gKyBvZmZzZXQpID4+IHNoaWZ0O1xuICAgICAgICAgICAgcG9zICs9IGNvbXBvbmVudHNDb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlc3VsdEltYWdlcy5wdXNoKHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRJbWFnZXM7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZVRpbGUoY29udGV4dCwgdGlsZUluZGV4KSB7XG4gICAgdmFyIHNpeiA9IGNvbnRleHQuU0laO1xuICAgIHZhciBjb21wb25lbnRzQ291bnQgPSBzaXouQ3NpejtcbiAgICB2YXIgdGlsZSA9IGNvbnRleHQudGlsZXNbdGlsZUluZGV4XTtcbiAgICBmb3IgKHZhciBjID0gMDsgYyA8IGNvbXBvbmVudHNDb3VudDsgYysrKSB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gdGlsZS5jb21wb25lbnRzW2NdO1xuICAgICAgdmFyIHFjZE9yUWNjID0gKGNvbnRleHQuY3VycmVudFRpbGUuUUNDW2NdICE9PSB1bmRlZmluZWQgP1xuICAgICAgICBjb250ZXh0LmN1cnJlbnRUaWxlLlFDQ1tjXSA6IGNvbnRleHQuY3VycmVudFRpbGUuUUNEKTtcbiAgICAgIGNvbXBvbmVudC5xdWFudGl6YXRpb25QYXJhbWV0ZXJzID0gcWNkT3JRY2M7XG4gICAgICB2YXIgY29kT3JDb2MgPSAoY29udGV4dC5jdXJyZW50VGlsZS5DT0NbY10gIT09IHVuZGVmaW5lZCA/XG4gICAgICAgIGNvbnRleHQuY3VycmVudFRpbGUuQ09DW2NdIDogY29udGV4dC5jdXJyZW50VGlsZS5DT0QpO1xuICAgICAgY29tcG9uZW50LmNvZGluZ1N0eWxlUGFyYW1ldGVycyA9IGNvZE9yQ29jO1xuICAgIH1cbiAgICB0aWxlLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMgPSBjb250ZXh0LmN1cnJlbnRUaWxlLkNPRDtcbiAgfVxuXG4gIC8vIFNlY3Rpb24gQi4xMC4yIFRhZyB0cmVlc1xuICB2YXIgVGFnVHJlZSA9IChmdW5jdGlvbiBUYWdUcmVlQ2xvc3VyZSgpIHtcbiAgICBmdW5jdGlvbiBUYWdUcmVlKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAgIHZhciBsZXZlbHNMZW5ndGggPSBsb2cyKE1hdGgubWF4KHdpZHRoLCBoZWlnaHQpKSArIDE7XG4gICAgICB0aGlzLmxldmVscyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZXZlbHNMZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgbGV2ZWwgPSB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5sZXZlbHMucHVzaChsZXZlbCk7XG4gICAgICAgIHdpZHRoID0gTWF0aC5jZWlsKHdpZHRoIC8gMik7XG4gICAgICAgIGhlaWdodCA9IE1hdGguY2VpbChoZWlnaHQgLyAyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgVGFnVHJlZS5wcm90b3R5cGUgPSB7XG4gICAgICByZXNldDogZnVuY3Rpb24gVGFnVHJlZV9yZXNldChpLCBqKSB7XG4gICAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSAwLCB2YWx1ZSA9IDAsIGxldmVsO1xuICAgICAgICB3aGlsZSAoY3VycmVudExldmVsIDwgdGhpcy5sZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsc1tjdXJyZW50TGV2ZWxdO1xuICAgICAgICAgIHZhciBpbmRleCA9IGkgKyBqICogbGV2ZWwud2lkdGg7XG4gICAgICAgICAgaWYgKGxldmVsLml0ZW1zW2luZGV4XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGxldmVsLml0ZW1zW2luZGV4XTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXZlbC5pbmRleCA9IGluZGV4O1xuICAgICAgICAgIGkgPj49IDE7XG4gICAgICAgICAgaiA+Pj0gMTtcbiAgICAgICAgICBjdXJyZW50TGV2ZWwrKztcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50TGV2ZWwtLTtcbiAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsc1tjdXJyZW50TGV2ZWxdO1xuICAgICAgICBsZXZlbC5pdGVtc1tsZXZlbC5pbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnZhbHVlO1xuICAgICAgfSxcbiAgICAgIGluY3JlbWVudFZhbHVlOiBmdW5jdGlvbiBUYWdUcmVlX2luY3JlbWVudFZhbHVlKCkge1xuICAgICAgICB2YXIgbGV2ZWwgPSB0aGlzLmxldmVsc1t0aGlzLmN1cnJlbnRMZXZlbF07XG4gICAgICAgIGxldmVsLml0ZW1zW2xldmVsLmluZGV4XSsrO1xuICAgICAgfSxcbiAgICAgIG5leHRMZXZlbDogZnVuY3Rpb24gVGFnVHJlZV9uZXh0TGV2ZWwoKSB7XG4gICAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbDtcbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy5sZXZlbHNbY3VycmVudExldmVsXTtcbiAgICAgICAgdmFyIHZhbHVlID0gbGV2ZWwuaXRlbXNbbGV2ZWwuaW5kZXhdO1xuICAgICAgICBjdXJyZW50TGV2ZWwtLTtcbiAgICAgICAgaWYgKGN1cnJlbnRMZXZlbCA8IDApIHtcbiAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XG4gICAgICAgIGxldmVsID0gdGhpcy5sZXZlbHNbY3VycmVudExldmVsXTtcbiAgICAgICAgbGV2ZWwuaXRlbXNbbGV2ZWwuaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiBUYWdUcmVlO1xuICB9KSgpO1xuXG4gIHZhciBJbmNsdXNpb25UcmVlID0gKGZ1bmN0aW9uIEluY2x1c2lvblRyZWVDbG9zdXJlKCkge1xuICAgIGZ1bmN0aW9uIEluY2x1c2lvblRyZWUod2lkdGgsIGhlaWdodCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgbGV2ZWxzTGVuZ3RoID0gbG9nMihNYXRoLm1heCh3aWR0aCwgaGVpZ2h0KSkgKyAxO1xuICAgICAgdGhpcy5sZXZlbHMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gbmV3IFVpbnQ4QXJyYXkod2lkdGggKiBoZWlnaHQpO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgamogPSBpdGVtcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgICAgaXRlbXNbal0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGV2ZWwgPSB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGl0ZW1zLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxldmVscy5wdXNoKGxldmVsKTtcblxuICAgICAgICB3aWR0aCA9IE1hdGguY2VpbCh3aWR0aCAvIDIpO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLmNlaWwoaGVpZ2h0IC8gMik7XG4gICAgICB9XG4gICAgfVxuICAgIEluY2x1c2lvblRyZWUucHJvdG90eXBlID0ge1xuICAgICAgcmVzZXQ6IGZ1bmN0aW9uIEluY2x1c2lvblRyZWVfcmVzZXQoaSwgaiwgc3RvcFZhbHVlKSB7XG4gICAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSAwO1xuICAgICAgICB3aGlsZSAoY3VycmVudExldmVsIDwgdGhpcy5sZXZlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIGxldmVsID0gdGhpcy5sZXZlbHNbY3VycmVudExldmVsXTtcbiAgICAgICAgICB2YXIgaW5kZXggPSBpICsgaiAqIGxldmVsLndpZHRoO1xuICAgICAgICAgIGxldmVsLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgdmFyIHZhbHVlID0gbGV2ZWwuaXRlbXNbaW5kZXhdO1xuXG4gICAgICAgICAgaWYgKHZhbHVlID09PSAweEZGKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUgPiBzdG9wVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExldmVsID0gY3VycmVudExldmVsO1xuICAgICAgICAgICAgLy8gYWxyZWFkeSBrbm93IGFib3V0IHRoaXMgb25lLCBwcm9wYWdhdGluZyB0aGUgdmFsdWUgdG8gdG9wIGxldmVsc1xuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVWYWx1ZXMoKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpID4+PSAxO1xuICAgICAgICAgIGogPj49IDE7XG4gICAgICAgICAgY3VycmVudExldmVsKys7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWwgLSAxO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBpbmNyZW1lbnRWYWx1ZTogZnVuY3Rpb24gSW5jbHVzaW9uVHJlZV9pbmNyZW1lbnRWYWx1ZShzdG9wVmFsdWUpIHtcbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy5sZXZlbHNbdGhpcy5jdXJyZW50TGV2ZWxdO1xuICAgICAgICBsZXZlbC5pdGVtc1tsZXZlbC5pbmRleF0gPSBzdG9wVmFsdWUgKyAxO1xuICAgICAgICB0aGlzLnByb3BhZ2F0ZVZhbHVlcygpO1xuICAgICAgfSxcbiAgICAgIHByb3BhZ2F0ZVZhbHVlczogZnVuY3Rpb24gSW5jbHVzaW9uVHJlZV9wcm9wYWdhdGVWYWx1ZXMoKSB7XG4gICAgICAgIHZhciBsZXZlbEluZGV4ID0gdGhpcy5jdXJyZW50TGV2ZWw7XG4gICAgICAgIHZhciBsZXZlbCA9IHRoaXMubGV2ZWxzW2xldmVsSW5kZXhdO1xuICAgICAgICB2YXIgY3VycmVudFZhbHVlID0gbGV2ZWwuaXRlbXNbbGV2ZWwuaW5kZXhdO1xuICAgICAgICB3aGlsZSAoLS1sZXZlbEluZGV4ID49IDApIHtcbiAgICAgICAgICBsZXZlbCA9IHRoaXMubGV2ZWxzW2xldmVsSW5kZXhdO1xuICAgICAgICAgIGxldmVsLml0ZW1zW2xldmVsLmluZGV4XSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5leHRMZXZlbDogZnVuY3Rpb24gSW5jbHVzaW9uVHJlZV9uZXh0TGV2ZWwoKSB7XG4gICAgICAgIHZhciBjdXJyZW50TGV2ZWwgPSB0aGlzLmN1cnJlbnRMZXZlbDtcbiAgICAgICAgdmFyIGxldmVsID0gdGhpcy5sZXZlbHNbY3VycmVudExldmVsXTtcbiAgICAgICAgdmFyIHZhbHVlID0gbGV2ZWwuaXRlbXNbbGV2ZWwuaW5kZXhdO1xuICAgICAgICBsZXZlbC5pdGVtc1tsZXZlbC5pbmRleF0gPSAweEZGO1xuICAgICAgICBjdXJyZW50TGV2ZWwtLTtcbiAgICAgICAgaWYgKGN1cnJlbnRMZXZlbCA8IDApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmN1cnJlbnRMZXZlbCA9IGN1cnJlbnRMZXZlbDtcbiAgICAgICAgbGV2ZWwgPSB0aGlzLmxldmVsc1tjdXJyZW50TGV2ZWxdO1xuICAgICAgICBsZXZlbC5pdGVtc1tsZXZlbC5pbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIEluY2x1c2lvblRyZWU7XG4gIH0pKCk7XG5cbiAgLy8gU2VjdGlvbiBELiBDb2VmZmljaWVudCBiaXQgbW9kZWxpbmdcbiAgdmFyIEJpdE1vZGVsID0gKGZ1bmN0aW9uIEJpdE1vZGVsQ2xvc3VyZSgpIHtcbiAgICB2YXIgVU5JRk9STV9DT05URVhUID0gMTc7XG4gICAgdmFyIFJVTkxFTkdUSF9DT05URVhUID0gMTg7XG4gICAgLy8gVGFibGUgRC0xXG4gICAgLy8gVGhlIGluZGV4IGlzIGJpbmFyeSBwcmVzZW50YXRpb246IDBkZGR2dmhoLCBkZGQgLSBzdW0gb2YgRGkgKDAuLjQpLFxuICAgIC8vIHZ2IC0gc3VtIG9mIFZpICgwLi4yKSwgYW5kIGhoIC0gc3VtIG9mIEhpICgwLi4yKVxuICAgIHZhciBMTEFuZExIQ29udGV4dHNMYWJlbCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsIDUsIDgsIDAsIDMsIDcsIDgsIDAsIDQsIDcsIDgsIDAsIDAsIDAsIDAsIDAsIDEsIDYsIDgsIDAsIDMsIDcsIDgsIDAsIDQsXG4gICAgICA3LCA4LCAwLCAwLCAwLCAwLCAwLCAyLCA2LCA4LCAwLCAzLCA3LCA4LCAwLCA0LCA3LCA4LCAwLCAwLCAwLCAwLCAwLCAyLCA2LFxuICAgICAgOCwgMCwgMywgNywgOCwgMCwgNCwgNywgOCwgMCwgMCwgMCwgMCwgMCwgMiwgNiwgOCwgMCwgMywgNywgOCwgMCwgNCwgNywgOFxuICAgIF0pO1xuICAgIHZhciBITENvbnRleHRMYWJlbCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsIDMsIDQsIDAsIDUsIDcsIDcsIDAsIDgsIDgsIDgsIDAsIDAsIDAsIDAsIDAsIDEsIDMsIDQsIDAsIDYsIDcsIDcsIDAsIDgsXG4gICAgICA4LCA4LCAwLCAwLCAwLCAwLCAwLCAyLCAzLCA0LCAwLCA2LCA3LCA3LCAwLCA4LCA4LCA4LCAwLCAwLCAwLCAwLCAwLCAyLCAzLFxuICAgICAgNCwgMCwgNiwgNywgNywgMCwgOCwgOCwgOCwgMCwgMCwgMCwgMCwgMCwgMiwgMywgNCwgMCwgNiwgNywgNywgMCwgOCwgOCwgOFxuICAgIF0pO1xuICAgIHZhciBISENvbnRleHRMYWJlbCA9IG5ldyBVaW50OEFycmF5KFtcbiAgICAgIDAsIDEsIDIsIDAsIDEsIDIsIDIsIDAsIDIsIDIsIDIsIDAsIDAsIDAsIDAsIDAsIDMsIDQsIDUsIDAsIDQsIDUsIDUsIDAsIDUsXG4gICAgICA1LCA1LCAwLCAwLCAwLCAwLCAwLCA2LCA3LCA3LCAwLCA3LCA3LCA3LCAwLCA3LCA3LCA3LCAwLCAwLCAwLCAwLCAwLCA4LCA4LFxuICAgICAgOCwgMCwgOCwgOCwgOCwgMCwgOCwgOCwgOCwgMCwgMCwgMCwgMCwgMCwgOCwgOCwgOCwgMCwgOCwgOCwgOCwgMCwgOCwgOCwgOFxuICAgIF0pO1xuXG4gICAgZnVuY3Rpb24gQml0TW9kZWwod2lkdGgsIGhlaWdodCwgc3ViYmFuZCwgemVyb0JpdFBsYW5lcywgbWIpIHtcbiAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXG4gICAgICB0aGlzLmNvbnRleHRMYWJlbFRhYmxlID0gKHN1YmJhbmQgPT09ICdISCcgPyBISENvbnRleHRMYWJlbCA6XG4gICAgICAgIChzdWJiYW5kID09PSAnSEwnID8gSExDb250ZXh0TGFiZWwgOiBMTEFuZExIQ29udGV4dHNMYWJlbCkpO1xuXG4gICAgICB2YXIgY29lZmZpY2llbnRDb3VudCA9IHdpZHRoICogaGVpZ2h0O1xuXG4gICAgICAvLyBjb2VmZmljaWVudHMgb3V0c2lkZSB0aGUgZW5jb2RpbmcgcmVnaW9uIHRyZWF0ZWQgYXMgaW5zaWduaWZpY2FudFxuICAgICAgLy8gYWRkIGJvcmRlciBzdGF0ZSBjZWxscyBmb3Igc2lnbmlmaWNhbmNlU3RhdGVcbiAgICAgIHRoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlID0gbmV3IFVpbnQ4QXJyYXkoY29lZmZpY2llbnRDb3VudCk7XG4gICAgICB0aGlzLmNvZWZmaWNlbnRzU2lnbiA9IG5ldyBVaW50OEFycmF5KGNvZWZmaWNpZW50Q291bnQpO1xuICAgICAgdGhpcy5jb2VmZmljZW50c01hZ25pdHVkZSA9IG1iID4gMTQgPyBuZXcgVWludDMyQXJyYXkoY29lZmZpY2llbnRDb3VudCkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1iID4gNiA/IG5ldyBVaW50MTZBcnJheShjb2VmZmljaWVudENvdW50KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFVpbnQ4QXJyYXkoY29lZmZpY2llbnRDb3VudCk7XG4gICAgICB0aGlzLnByb2Nlc3NpbmdGbGFncyA9IG5ldyBVaW50OEFycmF5KGNvZWZmaWNpZW50Q291bnQpO1xuXG4gICAgICB2YXIgYml0c0RlY29kZWQgPSBuZXcgVWludDhBcnJheShjb2VmZmljaWVudENvdW50KTtcbiAgICAgIGlmICh6ZXJvQml0UGxhbmVzICE9PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29lZmZpY2llbnRDb3VudDsgaSsrKSB7XG4gICAgICAgICAgYml0c0RlY29kZWRbaV0gPSB6ZXJvQml0UGxhbmVzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmJpdHNEZWNvZGVkID0gYml0c0RlY29kZWQ7XG5cbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9XG5cbiAgICBCaXRNb2RlbC5wcm90b3R5cGUgPSB7XG4gICAgICBzZXREZWNvZGVyOiBmdW5jdGlvbiBCaXRNb2RlbF9zZXREZWNvZGVyKGRlY29kZXIpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVyID0gZGVjb2RlcjtcbiAgICAgIH0sXG4gICAgICByZXNldDogZnVuY3Rpb24gQml0TW9kZWxfcmVzZXQoKSB7XG4gICAgICAgIC8vIFdlIGhhdmUgMTcgY29udGV4dHMgdGhhdCBhcmUgYWNjZXNzZWQgdmlhIGNvbnRleHQgbGFiZWxzLFxuICAgICAgICAvLyBwbHVzIHRoZSB1bmlmb3JtIGFuZCBydW5sZW5ndGggY29udGV4dC5cbiAgICAgICAgdGhpcy5jb250ZXh0cyA9IG5ldyBJbnQ4QXJyYXkoMTkpO1xuXG4gICAgICAgIC8vIENvbnRleHRzIGFyZSBwYWNrZWQgaW50byAxIGJ5dGU6XG4gICAgICAgIC8vIGhpZ2hlc3QgNyBiaXRzIGNhcnJ5IHRoZSBpbmRleCwgbG93ZXN0IGJpdCBjYXJyaWVzIG1wc1xuICAgICAgICB0aGlzLmNvbnRleHRzWzBdID0gKDQgPDwgMSkgfCAwO1xuICAgICAgICB0aGlzLmNvbnRleHRzW1VOSUZPUk1fQ09OVEVYVF0gPSAoNDYgPDwgMSkgfCAwO1xuICAgICAgICB0aGlzLmNvbnRleHRzW1JVTkxFTkdUSF9DT05URVhUXSA9ICgzIDw8IDEpIHwgMDtcbiAgICAgIH0sXG4gICAgICBzZXROZWlnaGJvcnNTaWduaWZpY2FuY2U6XG4gICAgICAgIGZ1bmN0aW9uIEJpdE1vZGVsX3NldE5laWdoYm9yc1NpZ25pZmljYW5jZShyb3csIGNvbHVtbiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIG5laWdoYm9yc1NpZ25pZmljYW5jZSA9IHRoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlO1xuICAgICAgICB2YXIgd2lkdGggPSB0aGlzLndpZHRoLCBoZWlnaHQgPSB0aGlzLmhlaWdodDtcbiAgICAgICAgdmFyIGxlZnQgPSAoY29sdW1uID4gMCk7XG4gICAgICAgIHZhciByaWdodCA9IChjb2x1bW4gKyAxIDwgd2lkdGgpO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICBpZiAocm93ID4gMCkge1xuICAgICAgICAgIGkgPSBpbmRleCAtIHdpZHRoO1xuICAgICAgICAgIGlmIChsZWZ0KSB7XG4gICAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaSAtIDFdICs9IDB4MTA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgICAgbmVpZ2hib3JzU2lnbmlmaWNhbmNlW2kgKyAxXSArPSAweDEwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaV0gKz0gMHgwNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyb3cgKyAxIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgaSA9IGluZGV4ICsgd2lkdGg7XG4gICAgICAgICAgaWYgKGxlZnQpIHtcbiAgICAgICAgICAgIG5laWdoYm9yc1NpZ25pZmljYW5jZVtpIC0gMV0gKz0gMHgxMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaSArIDFdICs9IDB4MTA7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5laWdoYm9yc1NpZ25pZmljYW5jZVtpXSArPSAweDA0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlZnQpIHtcbiAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaW5kZXggLSAxXSArPSAweDAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyaWdodCkge1xuICAgICAgICAgIG5laWdoYm9yc1NpZ25pZmljYW5jZVtpbmRleCArIDFdICs9IDB4MDE7XG4gICAgICAgIH1cbiAgICAgICAgbmVpZ2hib3JzU2lnbmlmaWNhbmNlW2luZGV4XSB8PSAweDgwO1xuICAgICAgfSxcbiAgICAgIHJ1blNpZ25pZmljYW5jZVByb3BhZ2F0aW9uUGFzczpcbiAgICAgICAgZnVuY3Rpb24gQml0TW9kZWxfcnVuU2lnbmlmaWNhbmNlUHJvcGFnYXRpb25QYXNzKCkge1xuICAgICAgICB2YXIgZGVjb2RlciA9IHRoaXMuZGVjb2RlcjtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHZhciBjb2VmZmljZW50c01hZ25pdHVkZSA9IHRoaXMuY29lZmZpY2VudHNNYWduaXR1ZGU7XG4gICAgICAgIHZhciBjb2VmZmljZW50c1NpZ24gPSB0aGlzLmNvZWZmaWNlbnRzU2lnbjtcbiAgICAgICAgdmFyIG5laWdoYm9yc1NpZ25pZmljYW5jZSA9IHRoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlO1xuICAgICAgICB2YXIgcHJvY2Vzc2luZ0ZsYWdzID0gdGhpcy5wcm9jZXNzaW5nRmxhZ3M7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBsYWJlbHMgPSB0aGlzLmNvbnRleHRMYWJlbFRhYmxlO1xuICAgICAgICB2YXIgYml0c0RlY29kZWQgPSB0aGlzLmJpdHNEZWNvZGVkO1xuICAgICAgICB2YXIgcHJvY2Vzc2VkSW52ZXJzZU1hc2sgPSB+MTtcbiAgICAgICAgdmFyIHByb2Nlc3NlZE1hc2sgPSAxO1xuICAgICAgICB2YXIgZmlyc3RNYWduaXR1ZGVCaXRNYXNrID0gMjtcblxuICAgICAgICBmb3IgKHZhciBpMCA9IDA7IGkwIDwgaGVpZ2h0OyBpMCArPSA0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpMCAqIHdpZHRoICsgajtcbiAgICAgICAgICAgIGZvciAodmFyIGkxID0gMDsgaTEgPCA0OyBpMSsrLCBpbmRleCArPSB3aWR0aCkge1xuICAgICAgICAgICAgICB2YXIgaSA9IGkwICsgaTE7XG4gICAgICAgICAgICAgIGlmIChpID49IGhlaWdodCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vIGNsZWFyIHByb2Nlc3NlZCBmbGFnIGZpcnN0XG4gICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gJj0gcHJvY2Vzc2VkSW52ZXJzZU1hc2s7XG5cbiAgICAgICAgICAgICAgaWYgKGNvZWZmaWNlbnRzTWFnbml0dWRlW2luZGV4XSB8fFxuICAgICAgICAgICAgICAgICAgIW5laWdoYm9yc1NpZ25pZmljYW5jZVtpbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHZhciBjb250ZXh0TGFiZWwgPSBsYWJlbHNbbmVpZ2hib3JzU2lnbmlmaWNhbmNlW2luZGV4XV07XG4gICAgICAgICAgICAgIHZhciBkZWNpc2lvbiA9IGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgY29udGV4dExhYmVsKTtcbiAgICAgICAgICAgICAgaWYgKGRlY2lzaW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNpZ24gPSB0aGlzLmRlY29kZVNpZ25CaXQoaSwgaiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvZWZmaWNlbnRzU2lnbltpbmRleF0gPSBzaWduO1xuICAgICAgICAgICAgICAgIGNvZWZmaWNlbnRzTWFnbml0dWRlW2luZGV4XSA9IDE7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXROZWlnaGJvcnNTaWduaWZpY2FuY2UoaSwgaiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gfD0gZmlyc3RNYWduaXR1ZGVCaXRNYXNrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJpdHNEZWNvZGVkW2luZGV4XSsrO1xuICAgICAgICAgICAgICBwcm9jZXNzaW5nRmxhZ3NbaW5kZXhdIHw9IHByb2Nlc3NlZE1hc2s7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVjb2RlU2lnbkJpdDogZnVuY3Rpb24gQml0TW9kZWxfZGVjb2RlU2lnbkJpdChyb3csIGNvbHVtbiwgaW5kZXgpIHtcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy53aWR0aCwgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIHZhciBjb2VmZmljZW50c01hZ25pdHVkZSA9IHRoaXMuY29lZmZpY2VudHNNYWduaXR1ZGU7XG4gICAgICAgIHZhciBjb2VmZmljZW50c1NpZ24gPSB0aGlzLmNvZWZmaWNlbnRzU2lnbjtcbiAgICAgICAgdmFyIGNvbnRyaWJ1dGlvbiwgc2lnbjAsIHNpZ24xLCBzaWduaWZpY2FuY2UxO1xuICAgICAgICB2YXIgY29udGV4dExhYmVsLCBkZWNvZGVkO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSBob3Jpem9udGFsIGNvbnRyaWJ1dGlvblxuICAgICAgICBzaWduaWZpY2FuY2UxID0gKGNvbHVtbiA+IDAgJiYgY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXggLSAxXSAhPT0gMCk7XG4gICAgICAgIGlmIChjb2x1bW4gKyAxIDwgd2lkdGggJiYgY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXggKyAxXSAhPT0gMCkge1xuICAgICAgICAgIHNpZ24xID0gY29lZmZpY2VudHNTaWduW2luZGV4ICsgMV07XG4gICAgICAgICAgaWYgKHNpZ25pZmljYW5jZTEpIHtcbiAgICAgICAgICAgIHNpZ24wID0gY29lZmZpY2VudHNTaWduW2luZGV4IC0gMV07XG4gICAgICAgICAgICBjb250cmlidXRpb24gPSAxIC0gc2lnbjEgLSBzaWduMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udHJpYnV0aW9uID0gMSAtIHNpZ24xIC0gc2lnbjE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNpZ25pZmljYW5jZTEpIHtcbiAgICAgICAgICBzaWduMCA9IGNvZWZmaWNlbnRzU2lnbltpbmRleCAtIDFdO1xuICAgICAgICAgIGNvbnRyaWJ1dGlvbiA9IDEgLSBzaWduMCAtIHNpZ24wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRyaWJ1dGlvbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhvcml6b250YWxDb250cmlidXRpb24gPSAzICogY29udHJpYnV0aW9uO1xuXG4gICAgICAgIC8vIGNhbGN1bGF0ZSB2ZXJ0aWNhbCBjb250cmlidXRpb24gYW5kIGNvbWJpbmUgd2l0aCB0aGUgaG9yaXpvbnRhbFxuICAgICAgICBzaWduaWZpY2FuY2UxID0gKHJvdyA+IDAgJiYgY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXggLSB3aWR0aF0gIT09IDApO1xuICAgICAgICBpZiAocm93ICsgMSA8IGhlaWdodCAmJiBjb2VmZmljZW50c01hZ25pdHVkZVtpbmRleCArIHdpZHRoXSAhPT0gMCkge1xuICAgICAgICAgIHNpZ24xID0gY29lZmZpY2VudHNTaWduW2luZGV4ICsgd2lkdGhdO1xuICAgICAgICAgIGlmIChzaWduaWZpY2FuY2UxKSB7XG4gICAgICAgICAgICBzaWduMCA9IGNvZWZmaWNlbnRzU2lnbltpbmRleCAtIHdpZHRoXTtcbiAgICAgICAgICAgIGNvbnRyaWJ1dGlvbiA9IDEgLSBzaWduMSAtIHNpZ24wICsgaG9yaXpvbnRhbENvbnRyaWJ1dGlvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udHJpYnV0aW9uID0gMSAtIHNpZ24xIC0gc2lnbjEgKyBob3Jpem9udGFsQ29udHJpYnV0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaWduaWZpY2FuY2UxKSB7XG4gICAgICAgICAgc2lnbjAgPSBjb2VmZmljZW50c1NpZ25baW5kZXggLSB3aWR0aF07XG4gICAgICAgICAgY29udHJpYnV0aW9uID0gMSAtIHNpZ24wIC0gc2lnbjAgKyBob3Jpem9udGFsQ29udHJpYnV0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRyaWJ1dGlvbiA9IGhvcml6b250YWxDb250cmlidXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udHJpYnV0aW9uID49IDApIHtcbiAgICAgICAgICBjb250ZXh0TGFiZWwgPSA5ICsgY29udHJpYnV0aW9uO1xuICAgICAgICAgIGRlY29kZWQgPSB0aGlzLmRlY29kZXIucmVhZEJpdCh0aGlzLmNvbnRleHRzLCBjb250ZXh0TGFiZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnRleHRMYWJlbCA9IDkgLSBjb250cmlidXRpb247XG4gICAgICAgICAgZGVjb2RlZCA9IHRoaXMuZGVjb2Rlci5yZWFkQml0KHRoaXMuY29udGV4dHMsIGNvbnRleHRMYWJlbCkgXiAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWNvZGVkO1xuICAgICAgfSxcbiAgICAgIHJ1bk1hZ25pdHVkZVJlZmluZW1lbnRQYXNzOlxuICAgICAgICBmdW5jdGlvbiBCaXRNb2RlbF9ydW5NYWduaXR1ZGVSZWZpbmVtZW50UGFzcygpIHtcbiAgICAgICAgdmFyIGRlY29kZXIgPSB0aGlzLmRlY29kZXI7XG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsIGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB2YXIgY29lZmZpY2VudHNNYWduaXR1ZGUgPSB0aGlzLmNvZWZmaWNlbnRzTWFnbml0dWRlO1xuICAgICAgICB2YXIgbmVpZ2hib3JzU2lnbmlmaWNhbmNlID0gdGhpcy5uZWlnaGJvcnNTaWduaWZpY2FuY2U7XG4gICAgICAgIHZhciBjb250ZXh0cyA9IHRoaXMuY29udGV4dHM7XG4gICAgICAgIHZhciBiaXRzRGVjb2RlZCA9IHRoaXMuYml0c0RlY29kZWQ7XG4gICAgICAgIHZhciBwcm9jZXNzaW5nRmxhZ3MgPSB0aGlzLnByb2Nlc3NpbmdGbGFncztcbiAgICAgICAgdmFyIHByb2Nlc3NlZE1hc2sgPSAxO1xuICAgICAgICB2YXIgZmlyc3RNYWduaXR1ZGVCaXRNYXNrID0gMjtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHdpZHRoICogaGVpZ2h0O1xuICAgICAgICB2YXIgd2lkdGg0ID0gd2lkdGggKiA0O1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4MCA9IDAsIGluZGV4TmV4dDsgaW5kZXgwIDwgbGVuZ3RoOyBpbmRleDAgPSBpbmRleE5leHQpIHtcbiAgICAgICAgICBpbmRleE5leHQgPSBNYXRoLm1pbihsZW5ndGgsIGluZGV4MCArIHdpZHRoNCk7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IGluZGV4MCArIGo7IGluZGV4IDwgaW5kZXhOZXh0OyBpbmRleCArPSB3aWR0aCkge1xuXG4gICAgICAgICAgICAgIC8vIHNpZ25pZmljYW50IGJ1dCBub3QgdGhvc2UgdGhhdCBoYXZlIGp1c3QgYmVjb21lXG4gICAgICAgICAgICAgIGlmICghY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXhdIHx8XG4gICAgICAgICAgICAgICAgKHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gJiBwcm9jZXNzZWRNYXNrKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGNvbnRleHRMYWJlbCA9IDE2O1xuICAgICAgICAgICAgICBpZiAoKHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gJiBmaXJzdE1hZ25pdHVkZUJpdE1hc2spICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc2luZ0ZsYWdzW2luZGV4XSBePSBmaXJzdE1hZ25pdHVkZUJpdE1hc2s7XG4gICAgICAgICAgICAgICAgLy8gZmlyc3QgcmVmaW5lbWVudFxuICAgICAgICAgICAgICAgdmFyIHNpZ25pZmljYW5jZSA9IG5laWdoYm9yc1NpZ25pZmljYW5jZVtpbmRleF0gJiAxMjc7XG4gICAgICAgICAgICAgICBjb250ZXh0TGFiZWwgPSBzaWduaWZpY2FuY2UgPT09IDAgPyAxNSA6IDE0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGJpdCA9IGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgY29udGV4dExhYmVsKTtcbiAgICAgICAgICAgICAgY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXhdID1cbiAgICAgICAgICAgICAgICAoY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXhdIDw8IDEpIHwgYml0O1xuICAgICAgICAgICAgICBiaXRzRGVjb2RlZFtpbmRleF0rKztcbiAgICAgICAgICAgICAgcHJvY2Vzc2luZ0ZsYWdzW2luZGV4XSB8PSBwcm9jZXNzZWRNYXNrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJ1bkNsZWFudXBQYXNzOiBmdW5jdGlvbiBCaXRNb2RlbF9ydW5DbGVhbnVwUGFzcygpIHtcbiAgICAgICAgdmFyIGRlY29kZXIgPSB0aGlzLmRlY29kZXI7XG4gICAgICAgIHZhciB3aWR0aCA9IHRoaXMud2lkdGgsIGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB2YXIgbmVpZ2hib3JzU2lnbmlmaWNhbmNlID0gdGhpcy5uZWlnaGJvcnNTaWduaWZpY2FuY2U7XG4gICAgICAgIHZhciBjb2VmZmljZW50c01hZ25pdHVkZSA9IHRoaXMuY29lZmZpY2VudHNNYWduaXR1ZGU7XG4gICAgICAgIHZhciBjb2VmZmljZW50c1NpZ24gPSB0aGlzLmNvZWZmaWNlbnRzU2lnbjtcbiAgICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5jb250ZXh0cztcbiAgICAgICAgdmFyIGxhYmVscyA9IHRoaXMuY29udGV4dExhYmVsVGFibGU7XG4gICAgICAgIHZhciBiaXRzRGVjb2RlZCA9IHRoaXMuYml0c0RlY29kZWQ7XG4gICAgICAgIHZhciBwcm9jZXNzaW5nRmxhZ3MgPSB0aGlzLnByb2Nlc3NpbmdGbGFncztcbiAgICAgICAgdmFyIHByb2Nlc3NlZE1hc2sgPSAxO1xuICAgICAgICB2YXIgZmlyc3RNYWduaXR1ZGVCaXRNYXNrID0gMjtcbiAgICAgICAgdmFyIG9uZVJvd0Rvd24gPSB3aWR0aDtcbiAgICAgICAgdmFyIHR3b1Jvd3NEb3duID0gd2lkdGggKiAyO1xuICAgICAgICB2YXIgdGhyZWVSb3dzRG93biA9IHdpZHRoICogMztcbiAgICAgICAgdmFyIGlOZXh0O1xuICAgICAgICBmb3IgKHZhciBpMCA9IDA7IGkwIDwgaGVpZ2h0OyBpMCA9IGlOZXh0KSB7XG4gICAgICAgICAgaU5leHQgPSBNYXRoLm1pbihpMCArIDQsIGhlaWdodCk7XG4gICAgICAgICAgdmFyIGluZGV4QmFzZSA9IGkwICogd2lkdGg7XG4gICAgICAgICAgdmFyIGNoZWNrQWxsRW1wdHkgPSBpMCArIDMgPCBoZWlnaHQ7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB3aWR0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXgwID0gaW5kZXhCYXNlICsgajtcbiAgICAgICAgICAgIC8vIHVzaW5nIHRoZSBwcm9wZXJ0eTogbGFiZWxzW25laWdoYm9yc1NpZ25pZmljYW5jZVtpbmRleF1dID09PSAwXG4gICAgICAgICAgICAvLyB3aGVuIG5laWdoYm9yc1NpZ25pZmljYW5jZVtpbmRleF0gPT09IDBcbiAgICAgICAgICAgIHZhciBhbGxFbXB0eSA9IChjaGVja0FsbEVtcHR5ICYmXG4gICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleDBdID09PSAwICYmXG4gICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleDAgKyBvbmVSb3dEb3duXSA9PT0gMCAmJlxuICAgICAgICAgICAgICBwcm9jZXNzaW5nRmxhZ3NbaW5kZXgwICsgdHdvUm93c0Rvd25dID09PSAwICYmXG4gICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleDAgKyB0aHJlZVJvd3NEb3duXSA9PT0gMCAmJlxuICAgICAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaW5kZXgwXSA9PT0gMCAmJlxuICAgICAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaW5kZXgwICsgb25lUm93RG93bl0gPT09IDAgJiZcbiAgICAgICAgICAgICAgbmVpZ2hib3JzU2lnbmlmaWNhbmNlW2luZGV4MCArIHR3b1Jvd3NEb3duXSA9PT0gMCAmJlxuICAgICAgICAgICAgICBuZWlnaGJvcnNTaWduaWZpY2FuY2VbaW5kZXgwICsgdGhyZWVSb3dzRG93bl0gPT09IDApO1xuICAgICAgICAgICAgdmFyIGkxID0gMCwgaW5kZXggPSBpbmRleDA7XG4gICAgICAgICAgICB2YXIgaSA9IGkwLCBzaWduO1xuICAgICAgICAgICAgaWYgKGFsbEVtcHR5KSB7XG4gICAgICAgICAgICAgIHZhciBoYXNTaWduaWZpY2FudENvZWZmaWNlbnQgPVxuICAgICAgICAgICAgICAgIGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgUlVOTEVOR1RIX0NPTlRFWFQpO1xuICAgICAgICAgICAgICBpZiAoIWhhc1NpZ25pZmljYW50Q29lZmZpY2VudCkge1xuICAgICAgICAgICAgICAgIGJpdHNEZWNvZGVkW2luZGV4MF0rKztcbiAgICAgICAgICAgICAgICBiaXRzRGVjb2RlZFtpbmRleDAgKyBvbmVSb3dEb3duXSsrO1xuICAgICAgICAgICAgICAgIGJpdHNEZWNvZGVkW2luZGV4MCArIHR3b1Jvd3NEb3duXSsrO1xuICAgICAgICAgICAgICAgIGJpdHNEZWNvZGVkW2luZGV4MCArIHRocmVlUm93c0Rvd25dKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7IC8vIG5leHQgY29sdW1uXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaTEgPSAoZGVjb2Rlci5yZWFkQml0KGNvbnRleHRzLCBVTklGT1JNX0NPTlRFWFQpIDw8IDEpIHxcbiAgICAgICAgICAgICAgICAgICAgZGVjb2Rlci5yZWFkQml0KGNvbnRleHRzLCBVTklGT1JNX0NPTlRFWFQpO1xuICAgICAgICAgICAgICBpZiAoaTEgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpID0gaTAgKyBpMTtcbiAgICAgICAgICAgICAgICBpbmRleCArPSBpMSAqIHdpZHRoO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgc2lnbiA9IHRoaXMuZGVjb2RlU2lnbkJpdChpLCBqLCBpbmRleCk7XG4gICAgICAgICAgICAgIGNvZWZmaWNlbnRzU2lnbltpbmRleF0gPSBzaWduO1xuICAgICAgICAgICAgICBjb2VmZmljZW50c01hZ25pdHVkZVtpbmRleF0gPSAxO1xuICAgICAgICAgICAgICB0aGlzLnNldE5laWdoYm9yc1NpZ25pZmljYW5jZShpLCBqLCBpbmRleCk7XG4gICAgICAgICAgICAgIHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gfD0gZmlyc3RNYWduaXR1ZGVCaXRNYXNrO1xuXG4gICAgICAgICAgICAgIGluZGV4ID0gaW5kZXgwO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpMiA9IGkwOyBpMiA8PSBpOyBpMisrLCBpbmRleCArPSB3aWR0aCkge1xuICAgICAgICAgICAgICAgIGJpdHNEZWNvZGVkW2luZGV4XSsrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaTErKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoaSA9IGkwICsgaTE7IGkgPCBpTmV4dDsgaSsrLCBpbmRleCArPSB3aWR0aCkge1xuICAgICAgICAgICAgICBpZiAoY29lZmZpY2VudHNNYWduaXR1ZGVbaW5kZXhdIHx8XG4gICAgICAgICAgICAgICAgKHByb2Nlc3NpbmdGbGFnc1tpbmRleF0gJiBwcm9jZXNzZWRNYXNrKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdmFyIGNvbnRleHRMYWJlbCA9IGxhYmVsc1tuZWlnaGJvcnNTaWduaWZpY2FuY2VbaW5kZXhdXTtcbiAgICAgICAgICAgICAgdmFyIGRlY2lzaW9uID0gZGVjb2Rlci5yZWFkQml0KGNvbnRleHRzLCBjb250ZXh0TGFiZWwpO1xuICAgICAgICAgICAgICBpZiAoZGVjaXNpb24gPT09IDEpIHtcbiAgICAgICAgICAgICAgICBzaWduID0gdGhpcy5kZWNvZGVTaWduQml0KGksIGosIGluZGV4KTtcbiAgICAgICAgICAgICAgICBjb2VmZmljZW50c1NpZ25baW5kZXhdID0gc2lnbjtcbiAgICAgICAgICAgICAgICBjb2VmZmljZW50c01hZ25pdHVkZVtpbmRleF0gPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0TmVpZ2hib3JzU2lnbmlmaWNhbmNlKGksIGosIGluZGV4KTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzaW5nRmxhZ3NbaW5kZXhdIHw9IGZpcnN0TWFnbml0dWRlQml0TWFzaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBiaXRzRGVjb2RlZFtpbmRleF0rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGVja1NlZ21lbnRhdGlvblN5bWJvbDogZnVuY3Rpb24gQml0TW9kZWxfY2hlY2tTZWdtZW50YXRpb25TeW1ib2woKSB7XG4gICAgICAgIHZhciBkZWNvZGVyID0gdGhpcy5kZWNvZGVyO1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLmNvbnRleHRzO1xuICAgICAgICB2YXIgc3ltYm9sID0gKGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgVU5JRk9STV9DT05URVhUKSA8PCAzKSB8XG4gICAgICAgICAgICAgICAgICAgICAoZGVjb2Rlci5yZWFkQml0KGNvbnRleHRzLCBVTklGT1JNX0NPTlRFWFQpIDw8IDIpIHxcbiAgICAgICAgICAgICAgICAgICAgIChkZWNvZGVyLnJlYWRCaXQoY29udGV4dHMsIFVOSUZPUk1fQ09OVEVYVCkgPDwgMSkgfFxuICAgICAgICAgICAgICAgICAgICAgIGRlY29kZXIucmVhZEJpdChjb250ZXh0cywgVU5JRk9STV9DT05URVhUKTtcbiAgICAgICAgaWYgKHN5bWJvbCAhPT0gMHhBKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEpweEVycm9yKCdJbnZhbGlkIHNlZ21lbnRhdGlvbiBzeW1ib2wnKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJpdE1vZGVsO1xuICB9KSgpO1xuXG4gIC8vIFNlY3Rpb24gRiwgRGlzY3JldGUgd2F2ZWxldCB0cmFuc2Zvcm1hdGlvblxuICB2YXIgVHJhbnNmb3JtID0gKGZ1bmN0aW9uIFRyYW5zZm9ybUNsb3N1cmUoKSB7XG4gICAgZnVuY3Rpb24gVHJhbnNmb3JtKCkge31cblxuICAgIFRyYW5zZm9ybS5wcm90b3R5cGUuY2FsY3VsYXRlID1cbiAgICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUNhbGN1bGF0ZShzdWJiYW5kcywgdTAsIHYwKSB7XG4gICAgICB2YXIgbGwgPSBzdWJiYW5kc1swXTtcbiAgICAgIGZvciAodmFyIGkgPSAxLCBpaSA9IHN1YmJhbmRzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgbGwgPSB0aGlzLml0ZXJhdGUobGwsIHN1YmJhbmRzW2ldLCB1MCwgdjApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxsO1xuICAgIH07XG4gICAgVHJhbnNmb3JtLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQoYnVmZmVyLCBvZmZzZXQsIHNpemUpIHtcbiAgICAgIC8vIFNlY3Rpb24gRi4zLjcgZXh0ZW5kaW5nLi4uIHVzaW5nIG1heCBleHRlbnNpb24gb2YgNFxuICAgICAgdmFyIGkxID0gb2Zmc2V0IC0gMSwgajEgPSBvZmZzZXQgKyAxO1xuICAgICAgdmFyIGkyID0gb2Zmc2V0ICsgc2l6ZSAtIDIsIGoyID0gb2Zmc2V0ICsgc2l6ZTtcbiAgICAgIGJ1ZmZlcltpMS0tXSA9IGJ1ZmZlcltqMSsrXTtcbiAgICAgIGJ1ZmZlcltqMisrXSA9IGJ1ZmZlcltpMi0tXTtcbiAgICAgIGJ1ZmZlcltpMS0tXSA9IGJ1ZmZlcltqMSsrXTtcbiAgICAgIGJ1ZmZlcltqMisrXSA9IGJ1ZmZlcltpMi0tXTtcbiAgICAgIGJ1ZmZlcltpMS0tXSA9IGJ1ZmZlcltqMSsrXTtcbiAgICAgIGJ1ZmZlcltqMisrXSA9IGJ1ZmZlcltpMi0tXTtcbiAgICAgIGJ1ZmZlcltpMV0gPSBidWZmZXJbajFdO1xuICAgICAgYnVmZmVyW2oyXSA9IGJ1ZmZlcltpMl07XG4gICAgfTtcbiAgICBUcmFuc2Zvcm0ucHJvdG90eXBlLml0ZXJhdGUgPSBmdW5jdGlvbiBUcmFuc2Zvcm1faXRlcmF0ZShsbCwgaGxfbGhfaGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdTAsIHYwKSB7XG4gICAgICB2YXIgbGV2ZWxSZWdpb24gPSBobF9saF9oaC5yZWxhdGl2ZVJlZ2lvbkluTGV2ZWw7XG4gICAgICBpZiAobGwucmVsYXRpdmVSZWdpb25JbkxldmVsLngwICogMiA+IGxldmVsUmVnaW9uLngwIHx8XG4gICAgICAgICAgbGwucmVsYXRpdmVSZWdpb25JbkxldmVsLnkwICogMiA+IGxldmVsUmVnaW9uLnkwIHx8XG4gICAgICAgICAgbGwucmVsYXRpdmVSZWdpb25JbkxldmVsLngxICogMiA8IGxldmVsUmVnaW9uLngxIHx8XG4gICAgICAgICAgbGwucmVsYXRpdmVSZWdpb25JbkxldmVsLnkxICogMiA8IGxldmVsUmVnaW9uLnkxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSlBYIEVycm9yOiByZWdpb24gaW4gTEwgaXMgc21hbGxlciB0aGFuIHJlZ2lvbiBpbiAnICtcbiAgICAgICAgICAnaGlnaGVyIHJlc29sdXRpb24gbGV2ZWwnKTtcbiAgICAgIH1cbiAgICAgIGlmIChsZXZlbFJlZ2lvbi54MCAlIDIgIT09IDAgfHwgbGV2ZWxSZWdpb24ueTAgJSAyICE9PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSlBYIEVycm9yOiByZWdpb24gaW4gSEwvTEgvSEggc3ViYmFuZHMgYmVnaW5zIGluICcgK1xuICAgICAgICAgICdvZGQgY29lZmZpY2llbnRzJyk7XG4gICAgICB9XG4gICAgICB2YXIgbGxJdGVtcyA9IGxsLml0ZW1zO1xuICAgICAgdmFyIHdpZHRoID0gbGV2ZWxSZWdpb24ueDEgLSBsZXZlbFJlZ2lvbi54MDtcbiAgICAgIHZhciBoZWlnaHQgPSBsZXZlbFJlZ2lvbi55MSAtIGxldmVsUmVnaW9uLnkwO1xuICAgICAgdmFyIGxsV2lkdGggPSBsbC5yZWxhdGl2ZVJlZ2lvbkluTGV2ZWwueDEgLSBsbC5yZWxhdGl2ZVJlZ2lvbkluTGV2ZWwueDA7XG4gICAgICB2YXIgbGxPZmZzZXRYID0gbGV2ZWxSZWdpb24ueDAgLyAyIC0gbGwucmVsYXRpdmVSZWdpb25JbkxldmVsLngwO1xuICAgICAgdmFyIGxsT2Zmc2V0WSA9IGxldmVsUmVnaW9uLnkwIC8gMiAtIGxsLnJlbGF0aXZlUmVnaW9uSW5MZXZlbC55MDtcbiAgICAgIHZhciBsbE9mZnNldCA9IGxsT2Zmc2V0WCArIGxsT2Zmc2V0WSAqIGxsV2lkdGg7XG4gICAgICB2YXIgaXRlbXMgPSBobF9saF9oaC5pdGVtcztcbiAgICAgIHZhciBpLCBqLCBrLCBsLCB1LCB2O1xuXG4gICAgICAvLyBJbnRlcmxlYXZlIExMIGFjY29yZGluZyB0byBTZWN0aW9uIEYuMy4zXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaGVpZ2h0OyBpICs9IDIpIHtcbiAgICAgICAgbCA9IGkgKiB3aWR0aDtcbiAgICAgICAgayA9IGxsT2Zmc2V0ICsgKGxsV2lkdGggKiBpIC8gMik7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB3aWR0aDsgaiArPSAyLCBrKyssIGwgKz0gMikge1xuICAgICAgICAgIGl0ZW1zW2xdID0gbGxJdGVtc1trXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gVGhlIExMIGJhbmQgaXMgbm90IG5lZWRlZCBhbnltb3JlLlxuICAgICAgbGxJdGVtcyA9IGxsLml0ZW1zID0gbnVsbDtcblxuICAgICAgdmFyIGJ1ZmZlclBhZGRpbmcgPSA0O1xuICAgICAgdmFyIHJvd0J1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkod2lkdGggKyAyICogYnVmZmVyUGFkZGluZyk7XG5cbiAgICAgIC8vIFNlY3Rpb24gRi4zLjQgSE9SX1NSXG4gICAgICBpZiAod2lkdGggPT09IDEpIHtcbiAgICAgICAgLy8gaWYgd2lkdGggPSAxLCB3aGVuIHUwIGV2ZW4ga2VlcCBpdGVtcyBhcyBpcywgd2hlbiBvZGQgZGl2aWRlIGJ5IDJcbiAgICAgICAgaWYgKCh1MCAmIDEpICE9PSAwKSB7XG4gICAgICAgICAgZm9yICh2ID0gMCwgayA9IDA7IHYgPCBoZWlnaHQ7IHYrKywgayArPSB3aWR0aCkge1xuICAgICAgICAgICAgaXRlbXNba10gKj0gMC41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2ID0gMCwgayA9IDA7IHYgPCBoZWlnaHQ7IHYrKywgayArPSB3aWR0aCkge1xuICAgICAgICAgIHJvd0J1ZmZlci5zZXQoaXRlbXMuc3ViYXJyYXkoaywgayArIHdpZHRoKSwgYnVmZmVyUGFkZGluZyk7XG5cbiAgICAgICAgICB0aGlzLmV4dGVuZChyb3dCdWZmZXIsIGJ1ZmZlclBhZGRpbmcsIHdpZHRoKTtcbiAgICAgICAgICB0aGlzLmZpbHRlcihyb3dCdWZmZXIsIGJ1ZmZlclBhZGRpbmcsIHdpZHRoKTtcblxuICAgICAgICAgIGl0ZW1zLnNldChcbiAgICAgICAgICAgIHJvd0J1ZmZlci5zdWJhcnJheShidWZmZXJQYWRkaW5nLCBidWZmZXJQYWRkaW5nICsgd2lkdGgpLFxuICAgICAgICAgICAgayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWNjZXNzZXMgdG8gdGhlIGl0ZW1zIGFycmF5IGNhbiB0YWtlIGxvbmcsIGJlY2F1c2UgaXQgbWF5IG5vdCBmaXQgaW50b1xuICAgICAgLy8gQ1BVIGNhY2hlIGFuZCBoYXMgdG8gYmUgZmV0Y2hlZCBmcm9tIG1haW4gbWVtb3J5LiBTaW5jZSBzdWJzZXF1ZW50XG4gICAgICAvLyBhY2Nlc3NlcyB0byB0aGUgaXRlbXMgYXJyYXkgYXJlIG5vdCBsb2NhbCB3aGVuIHJlYWRpbmcgY29sdW1ucywgd2VcbiAgICAgIC8vIGhhdmUgYSBjYWNoZSBtaXNzIGV2ZXJ5IHRpbWUuIFRvIHJlZHVjZSBjYWNoZSBtaXNzZXMsIGdldCB1cCB0b1xuICAgICAgLy8gJ251bUJ1ZmZlcnMnIGl0ZW1zIGF0IGEgdGltZSBhbmQgc3RvcmUgdGhlbSBpbnRvIHRoZSBpbmRpdmlkdWFsXG4gICAgICAvLyBidWZmZXJzLiBUaGUgY29sQnVmZmVycyBzaG91bGQgYmUgc21hbGwgZW5vdWdoIHRvIGZpdCBpbnRvIENQVSBjYWNoZS5cbiAgICAgIHZhciBudW1CdWZmZXJzID0gMTY7XG4gICAgICB2YXIgY29sQnVmZmVycyA9IFtdO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG51bUJ1ZmZlcnM7IGkrKykge1xuICAgICAgICBjb2xCdWZmZXJzLnB1c2gobmV3IEZsb2F0MzJBcnJheShoZWlnaHQgKyAyICogYnVmZmVyUGFkZGluZykpO1xuICAgICAgfVxuICAgICAgdmFyIGIsIGN1cnJlbnRCdWZmZXIgPSAwO1xuICAgICAgbGwgPSBidWZmZXJQYWRkaW5nICsgaGVpZ2h0O1xuXG4gICAgICAvLyBTZWN0aW9uIEYuMy41IFZFUl9TUlxuICAgICAgaWYgKGhlaWdodCA9PT0gMSkge1xuICAgICAgICAgIC8vIGlmIGhlaWdodCA9IDEsIHdoZW4gdjAgZXZlbiBrZWVwIGl0ZW1zIGFzIGlzLCB3aGVuIG9kZCBkaXZpZGUgYnkgMlxuICAgICAgICBpZiAoKHYwICYgMSkgIT09IDApIHtcbiAgICAgICAgICBmb3IgKHUgPSAwOyB1IDwgd2lkdGg7IHUrKykge1xuICAgICAgICAgICAgaXRlbXNbdV0gKj0gMC41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh1ID0gMDsgdSA8IHdpZHRoOyB1KyspIHtcbiAgICAgICAgICAvLyBpZiB3ZSByYW4gb3V0IG9mIGJ1ZmZlcnMsIGNvcHkgc2V2ZXJhbCBpbWFnZSBjb2x1bW5zIGF0IG9uY2VcbiAgICAgICAgICBpZiAoY3VycmVudEJ1ZmZlciA9PT0gMCkge1xuICAgICAgICAgICAgbnVtQnVmZmVycyA9IE1hdGgubWluKHdpZHRoIC0gdSwgbnVtQnVmZmVycyk7XG4gICAgICAgICAgICBmb3IgKGsgPSB1LCBsID0gYnVmZmVyUGFkZGluZzsgbCA8IGxsOyBrICs9IHdpZHRoLCBsKyspIHtcbiAgICAgICAgICAgICAgZm9yIChiID0gMDsgYiA8IG51bUJ1ZmZlcnM7IGIrKykge1xuICAgICAgICAgICAgICAgIGNvbEJ1ZmZlcnNbYl1bbF0gPSBpdGVtc1trICsgYl07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnRCdWZmZXIgPSBudW1CdWZmZXJzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRCdWZmZXItLTtcbiAgICAgICAgICB2YXIgYnVmZmVyID0gY29sQnVmZmVyc1tjdXJyZW50QnVmZmVyXTtcbiAgICAgICAgICB0aGlzLmV4dGVuZChidWZmZXIsIGJ1ZmZlclBhZGRpbmcsIGhlaWdodCk7XG4gICAgICAgICAgdGhpcy5maWx0ZXIoYnVmZmVyLCBidWZmZXJQYWRkaW5nLCBoZWlnaHQpO1xuXG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyBsYXN0IGJ1ZmZlciBpbiB0aGlzIGdyb3VwIG9mIGJ1ZmZlcnMsIGZsdXNoIGFsbCBidWZmZXJzLlxuICAgICAgICAgIGlmIChjdXJyZW50QnVmZmVyID09PSAwKSB7XG4gICAgICAgICAgICBrID0gdSAtIG51bUJ1ZmZlcnMgKyAxO1xuICAgICAgICAgICAgZm9yIChsID0gYnVmZmVyUGFkZGluZzsgbCA8IGxsOyBrICs9IHdpZHRoLCBsKyspIHtcbiAgICAgICAgICAgICAgZm9yIChiID0gMDsgYiA8IG51bUJ1ZmZlcnM7IGIrKykge1xuICAgICAgICAgICAgICAgIGl0ZW1zW2sgKyBiXSA9IGNvbEJ1ZmZlcnNbYl1bbF07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVsYXRpdmVSZWdpb25JbkxldmVsOiBsZXZlbFJlZ2lvbixcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgaXRlbXMsXG4gICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIFRyYW5zZm9ybTtcbiAgfSkoKTtcblxuICAvLyBTZWN0aW9uIDMuOC4yIElycmV2ZXJzaWJsZSA5LTcgZmlsdGVyXG4gIHZhciBJcnJldmVyc2libGVUcmFuc2Zvcm0gPSAoZnVuY3Rpb24gSXJyZXZlcnNpYmxlVHJhbnNmb3JtQ2xvc3VyZSgpIHtcbiAgICBmdW5jdGlvbiBJcnJldmVyc2libGVUcmFuc2Zvcm0oKSB7XG4gICAgICBUcmFuc2Zvcm0uY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICBJcnJldmVyc2libGVUcmFuc2Zvcm0ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShUcmFuc2Zvcm0ucHJvdG90eXBlKTtcbiAgICBJcnJldmVyc2libGVUcmFuc2Zvcm0ucHJvdG90eXBlLmZpbHRlciA9XG4gICAgICBmdW5jdGlvbiBpcnJldmVyc2libGVUcmFuc2Zvcm1GaWx0ZXIoeCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgICAgIHZhciBsZW4gPSBsZW5ndGggPj4gMTtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8IDA7XG4gICAgICB2YXIgaiwgbiwgY3VycmVudCwgbmV4dDtcblxuICAgICAgdmFyIGFscGhhID0gLTEuNTg2MTM0MzQyMDU5OTI0O1xuICAgICAgdmFyIGJldGEgPSAtMC4wNTI5ODAxMTg1NzI5NjE7XG4gICAgICB2YXIgZ2FtbWEgPSAwLjg4MjkxMTA3NTUzMDkzNDtcbiAgICAgIHZhciBkZWx0YSA9IDAuNDQzNTA2ODUyMDQzOTcxO1xuICAgICAgdmFyIEsgPSAxLjIzMDE3NDEwNDkxNDAwMTtcbiAgICAgIHZhciBLXyA9IDEgLyBLO1xuXG4gICAgICAvLyBzdGVwIDEgaXMgY29tYmluZWQgd2l0aCBzdGVwIDNcblxuICAgICAgLy8gc3RlcCAyXG4gICAgICBqID0gb2Zmc2V0IC0gMztcbiAgICAgIGZvciAobiA9IGxlbiArIDQ7IG4tLTsgaiArPSAyKSB7XG4gICAgICAgIHhbal0gKj0gS187XG4gICAgICB9XG5cbiAgICAgIC8vIHN0ZXAgMSAmIDNcbiAgICAgIGogPSBvZmZzZXQgLSAyO1xuICAgICAgY3VycmVudCA9IGRlbHRhICogeFtqIC0gMV07XG4gICAgICBmb3IgKG4gPSBsZW4gKyAzOyBuLS07IGogKz0gMikge1xuICAgICAgICBuZXh0ID0gZGVsdGEgKiB4W2ogKyAxXTtcbiAgICAgICAgeFtqXSA9IEsgKiB4W2pdIC0gY3VycmVudCAtIG5leHQ7XG4gICAgICAgIGlmIChuLS0pIHtcbiAgICAgICAgICBqICs9IDI7XG4gICAgICAgICAgY3VycmVudCA9IGRlbHRhICogeFtqICsgMV07XG4gICAgICAgICAgeFtqXSA9IEsgKiB4W2pdIC0gY3VycmVudCAtIG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc3RlcCA0XG4gICAgICBqID0gb2Zmc2V0IC0gMTtcbiAgICAgIGN1cnJlbnQgPSBnYW1tYSAqIHhbaiAtIDFdO1xuICAgICAgZm9yIChuID0gbGVuICsgMjsgbi0tOyBqICs9IDIpIHtcbiAgICAgICAgbmV4dCA9IGdhbW1hICogeFtqICsgMV07XG4gICAgICAgIHhbal0gLT0gY3VycmVudCArIG5leHQ7XG4gICAgICAgIGlmIChuLS0pIHtcbiAgICAgICAgICBqICs9IDI7XG4gICAgICAgICAgY3VycmVudCA9IGdhbW1hICogeFtqICsgMV07XG4gICAgICAgICAgeFtqXSAtPSBjdXJyZW50ICsgbmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBzdGVwIDVcbiAgICAgIGogPSBvZmZzZXQ7XG4gICAgICBjdXJyZW50ID0gYmV0YSAqIHhbaiAtIDFdO1xuICAgICAgZm9yIChuID0gbGVuICsgMTsgbi0tOyBqICs9IDIpIHtcbiAgICAgICAgbmV4dCA9IGJldGEgKiB4W2ogKyAxXTtcbiAgICAgICAgeFtqXSAtPSBjdXJyZW50ICsgbmV4dDtcbiAgICAgICAgaWYgKG4tLSkge1xuICAgICAgICAgIGogKz0gMjtcbiAgICAgICAgICBjdXJyZW50ID0gYmV0YSAqIHhbaiArIDFdO1xuICAgICAgICAgIHhbal0gLT0gY3VycmVudCArIG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gc3RlcCA2XG4gICAgICBpZiAobGVuICE9PSAwKSB7XG4gICAgICAgIGogPSBvZmZzZXQgKyAxO1xuICAgICAgICBjdXJyZW50ID0gYWxwaGEgKiB4W2ogLSAxXTtcbiAgICAgICAgZm9yIChuID0gbGVuOyBuLS07IGogKz0gMikge1xuICAgICAgICAgIG5leHQgPSBhbHBoYSAqIHhbaiArIDFdO1xuICAgICAgICAgIHhbal0gLT0gY3VycmVudCArIG5leHQ7XG4gICAgICAgICAgaWYgKG4tLSkge1xuICAgICAgICAgICAgaiArPSAyO1xuICAgICAgICAgICAgY3VycmVudCA9IGFscGhhICogeFtqICsgMV07XG4gICAgICAgICAgICB4W2pdIC09IGN1cnJlbnQgKyBuZXh0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIElycmV2ZXJzaWJsZVRyYW5zZm9ybTtcbiAgfSkoKTtcblxuICAvLyBTZWN0aW9uIDMuOC4xIFJldmVyc2libGUgNS0zIGZpbHRlclxuICB2YXIgUmV2ZXJzaWJsZVRyYW5zZm9ybSA9IChmdW5jdGlvbiBSZXZlcnNpYmxlVHJhbnNmb3JtQ2xvc3VyZSgpIHtcbiAgICBmdW5jdGlvbiBSZXZlcnNpYmxlVHJhbnNmb3JtKCkge1xuICAgICAgVHJhbnNmb3JtLmNhbGwodGhpcyk7XG4gICAgfVxuXG4gICAgUmV2ZXJzaWJsZVRyYW5zZm9ybS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRyYW5zZm9ybS5wcm90b3R5cGUpO1xuICAgIFJldmVyc2libGVUcmFuc2Zvcm0ucHJvdG90eXBlLmZpbHRlciA9XG4gICAgICBmdW5jdGlvbiByZXZlcnNpYmxlVHJhbnNmb3JtRmlsdGVyKHgsIG9mZnNldCwgbGVuZ3RoKSB7XG4gICAgICB2YXIgbGVuID0gbGVuZ3RoID4+IDE7XG4gICAgICBvZmZzZXQgPSBvZmZzZXQgfCAwO1xuICAgICAgdmFyIGosIG47XG5cbiAgICAgIGZvciAoaiA9IG9mZnNldCwgbiA9IGxlbiArIDE7IG4tLTsgaiArPSAyKSB7XG4gICAgICAgIHhbal0gLT0gKHhbaiAtIDFdICsgeFtqICsgMV0gKyAyKSA+PiAyO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSBvZmZzZXQgKyAxLCBuID0gbGVuOyBuLS07IGogKz0gMikge1xuICAgICAgICB4W2pdICs9ICh4W2ogLSAxXSArIHhbaiArIDFdKSA+PiAxO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gUmV2ZXJzaWJsZVRyYW5zZm9ybTtcbiAgfSkoKTtcblxuICByZXR1cm4gSnB4SW1hZ2U7XG59KSgpO1xuXG5leHBvcnQge1xuICBKcHhJbWFnZSxcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi92ZW5kb3IvcGRmLmpzL2NvcmUvanB4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBkZmpzSnB4Q29udGV4dFBvb2w7XG5cbmltcG9ydCB7IEpweEltYWdlIH0gZnJvbSAnanB4LmpzJztcblxuZnVuY3Rpb24gUGRmanNKcHhDb250ZXh0UG9vbCgpIHtcbiAgICB0aGlzLl9pbWFnZSA9IG5ldyBKcHhJbWFnZSgpO1xuICAgIHRoaXMuX2NhY2hlZENvbnRleHRzID0gW107XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQZGZqc0pweENvbnRleHRQb29sLnByb3RvdHlwZSwgJ2ltYWdlJywgeyBnZXQgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5faW1hZ2U7XG59IH0pO1xuXG5QZGZqc0pweENvbnRleHRQb29sLnByb3RvdHlwZS5nZXRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q29udGV4dChoZWFkZXJzQ29kZXN0cmVhbSkge1xuICAgIHZhciBjb250ZXh0c09mU2FtZUxlbmd0aCA9IHRoaXMuX2NhY2hlZENvbnRleHRzW2hlYWRlcnNDb2Rlc3RyZWFtLmxlbmd0aF07XG4gICAgaWYgKCFjb250ZXh0c09mU2FtZUxlbmd0aCkge1xuICAgICAgICBjb250ZXh0c09mU2FtZUxlbmd0aCA9IFtdO1xuICAgICAgICB0aGlzLl9jYWNoZWRDb250ZXh0c1toZWFkZXJzQ29kZXN0cmVhbS5sZW5ndGhdID0gY29udGV4dHNPZlNhbWVMZW5ndGg7XG4gICAgfVxuICAgIFxuICAgIHZhciBjb250ZXh0SW5kZXggPSAwO1xuICAgIHZhciBpc01hdGNoaW5nQ29udGV4dCA9IGZhbHNlO1xuICAgIHdoaWxlIChjb250ZXh0SW5kZXggPCBjb250ZXh0c09mU2FtZUxlbmd0aC5sZW5ndGggJiYgIWlzTWF0Y2hpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBjb2Rlc3RyZWFtID0gY29udGV4dHNPZlNhbWVMZW5ndGhbY29udGV4dEluZGV4XS5jb2Rlc3RyZWFtO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgY29kZXN0cmVhbS5sZW5ndGggJiYgY29kZXN0cmVhbVtpXSA9PT0gaGVhZGVyc0NvZGVzdHJlYW1baV0pIHtcbiAgICAgICAgICAgICsraTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNNYXRjaGluZ0NvbnRleHQgPSBpID09PSBjb2Rlc3RyZWFtLmxlbmd0aDtcbiAgICAgICAgKytjb250ZXh0SW5kZXg7XG4gICAgfVxuICAgIFxuICAgIHZhciBjdXJyZW50Q29udGV4dDtcbiAgICBpZiAoaXNNYXRjaGluZ0NvbnRleHQpIHtcbiAgICAgICAgY3VycmVudENvbnRleHQgPSBjb250ZXh0c09mU2FtZUxlbmd0aFtjb250ZXh0SW5kZXggLSAxXS5jb250ZXh0O1xuICAgICAgICB0aGlzLl9pbWFnZS5pbnZhbGlkYXRlRGF0YShjdXJyZW50Q29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudENvbnRleHQgPSB0aGlzLl9pbWFnZS5wYXJzZUNvZGVzdHJlYW0oXG4gICAgICAgICAgICBoZWFkZXJzQ29kZXN0cmVhbSxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBoZWFkZXJzQ29kZXN0cmVhbS5sZW5ndGgsXG4gICAgICAgICAgICB7IGlzT25seVBhcnNlSGVhZGVyczogdHJ1ZSB9KTtcbiAgICAgICAgY29udGV4dHNPZlNhbWVMZW5ndGgucHVzaCh7XG4gICAgICAgICAgICBjb2Rlc3RyZWFtOiBoZWFkZXJzQ29kZXN0cmVhbSxcbiAgICAgICAgICAgIGNvbnRleHQ6IGN1cnJlbnRDb250ZXh0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gY3VycmVudENvbnRleHQ7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvcGRmanMtanB4LWNvbnRleHQtcG9vbC5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cy5KcGlwSW1hZ2UgPSByZXF1aXJlKCdqcGlwLWltYWdlLmpzJyk7XG5tb2R1bGUuZXhwb3J0cy5qMmtFeGNlcHRpb25zID0gakdsb2JhbHMuajJrRXhjZXB0aW9ucztcbm1vZHVsZS5leHBvcnRzLmpwaXBFeGNlcHRpb25zID0gakdsb2JhbHMuanBpcEV4Y2VwdGlvbnM7XG5tb2R1bGUuZXhwb3J0cy5JbnRlcm5hbHMgPSB7XG4gICAgUGRmanNKcHhEZWNvZGVyTGVnYWN5OiByZXF1aXJlKCdwZGZqcy1qcHgtZGVjb2Rlci1sZWdhY3kuanMnKSxcbiAgICBQZGZqc0pweFBpeGVsc0RlY29kZXI6IHJlcXVpcmUoJ3BkZmpzLWpweC1waXhlbHMtZGVjb2Rlci5qcycpLFxuICAgIFBkZmpzSnB4Q29lZmZpY2llbnRzRGVjb2RlcjogcmVxdWlyZSgncGRmanMtanB4LWNvZWZmaWNpZW50cy1kZWNvZGVyLmpzJyksXG4gICAganBpcFJ1bnRpbWVGYWN0b3J5OiByZXF1aXJlKCdqcGlwLXJ1bnRpbWUtZmFjdG9yeS5qcycpLFxuICAgIGpHbG9iYWxzOiBqR2xvYmFsc1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd2VianBpcC1leHBvcnRzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIganBpcEZhY3RvcnkgPSByZXF1aXJlKCdqcGlwLXJ1bnRpbWUtZmFjdG9yeS5qcycpOyBcbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBKcGlwSW1hZ2U7XG5cbi8vIFR5cGUgb2Ygd29ya2VyPz9cbnZhciBXT1JLRVJfVFlQRV9QSVhFTFMgPSAxO1xudmFyIFdPUktFUl9UWVBFX0NPRUZGUyA9IDI7XG5cbnZhciBUQVNLX0FCT1JURURfUkVTVUxUX1BMQUNFSE9MREVSID0gJ2Fib3J0ZWQnOyAvLyBSZWR1bmRhbnQ/XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qIEFOVEhPTlknUyBKU0RPQyBUWVBFREVGJ1MgKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0W119IFByb2dyZXNzaXZlbmVzc1xuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbk51bVF1YWxpdHlMYXllcnMgLSBUaGUgbnVtYmVyIG9mIHF1YWxpdHkgbGF5ZXJzLlxuICogQHByb3BlcnR5IHsnbm8nIHwgJ2ZvcmNlJyB8ICdmb3JjZUFsbCd9IFtmb3JjZU1heFF1YWxpdHk9J25vJ10gLVxuICogRm9yY2UgZGVsaXZlcmluZyBpbWFnZSBhdCBnaXZlbiBxdWFsaXR5IGxldmVsIHdoaWxlIGxhdGVyIGxldmVscyBhcmUgc3RpbGwgYmVpbmcgd29ya2VkIG9uLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRmV0Y2hlck9wdGlvbnMgT3B0aW9ucyB0byBiZSBzdXBwbGllZCB0byB0aGUgZmV0Y2hlci5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1cmxcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEpwaXBPYmplY3RzXG4gKiBAcHJvcGVydHkge09iamVjdH0gUmVjb25zdHJ1Y3RvclxuICogQHByb3BlcnR5IHtPYmplY3R9IFBhY2tldHNEYXRhQ29sbGVjdG9yXG4gKiBAcHJvcGVydHkge09iamVjdH0gUXVhbGl0eUxheWVyc0NhY2hlXG4gKiBAcHJvcGVydHkge09iamVjdH0gQ29kZXN0cmVhbVN0cnVjdHVyZVxuICogQHByb3BlcnR5IHtPYmplY3R9IERhdGFiaW5zU2F2ZXJcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBQYXJhbXNNb2RpZmllclxuICogQHByb3BlcnR5IHtPYmplY3R9IEZldGNoZXJTaGFyZWRPYmplY3RzXG4gKiBAcHJvcGVydHkge0ZldGNoZXJPcHRpb25zfSBGZXRjaGVyT3B0aW9uc1xuICogQHByb3BlcnR5IHtPYmplY3R9IEpwaXBGYWN0b3J5XG4gKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqID8/XG4gKiBAcGFyYW0ge0pwaXBPYmplY3RzIHwgRmV0Y2hlck9wdGlvbnN9IGFyZyAtIElmIGZpcnN0IGluc3RhbmNlIHNpbXBseSBmZXRjaGVyIG9wdGlvbnMgd2hpY2ggTVVTVCBoYXZlIGEgVVJMLCBvdGhlcndpc2UgYW4gYWxyZWFkeSBjcmVhdGVkIEpwaXBPYmplY3RzLlxuICogQHBhcmFtIHtPYmplY3RbXX0gcHJvZ3Jlc3NpdmVuZXNzXG4gKiBAcGFyYW0ge251bWJlcn0gcHJvZ3Jlc3NpdmVuZXNzLm1pbk51bVF1YWxpdHlMYXllcnMgLSBUaGUgbnVtYmVyIG9mIHF1YWxpdHkgbGF5ZXJzLlxuICogQHBhcmFtIHsnbm8nIHwgJ2ZvcmNlJyB8ICdmb3JjZUFsbCd9IFtwcm9ncmVzc2l2ZW5lc3MuZm9yY2VNYXhRdWFsaXR5PSdubyddIC1cbiAqIEZvcmNlIGRlbGl2ZXJpbmcgaW1hZ2UgYXQgZ2l2ZW4gcXVhbGl0eSBsZXZlbCB3aGlsZSBsYXRlciBsZXZlbHMgYXJlIHN0aWxsIGJlaW5nIHdvcmtlZCBvbi5cbiAqL1xuZnVuY3Rpb24gSnBpcEltYWdlKGFyZywgcHJvZ3Jlc3NpdmVuZXNzKSB7XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgYXJndW1lbnRzXG4gICAgdmFyIGpwaXBPYmplY3RzO1xuICAgIGlmIChhcmcgJiYgYXJnLmpwaXBGYWN0b3J5KSB7XG4gICAgICAgIGpwaXBPYmplY3RzID0gYXJnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghYXJnIHx8ICFhcmcudXJsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ29wdGlvbnMudXJsJywgdW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBqcGlwT2JqZWN0cyA9IGNyZWF0ZUpwaXBPYmplY3RzKC8qZmV0Y2hlck9wdGlvbnNBcmc9Ki9hcmcpO1xuICAgIH1cbiAgICBcbiAgICB2YXIgcHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQ7IC8vIFZhbGlkYXRlZCBhbmQgY29tcGxldGUgcHJvZ3Jlc3NpdmVuZXNzXG5cbiAgICB2YXIgaW1hZ2VQYXJhbXMgPSBudWxsOyAvLyA/P1xuICAgIHZhciBsZXZlbENhbGN1bGF0b3IgPSBudWxsOyAvLyA/P1xuICAgIFxuICAgIC8vIE5PVEU6IFByb3h5aW5nIGZldGNoZXIgdG8gd2ViIHdvcmtlciBtaWdodCBib29zdCBwZXJmb3JtYW5jZVxuICAgIHZhciBmZXRjaGVyID0ganBpcEZhY3RvcnkuY3JlYXRlRmV0Y2hlcihcbiAgICAgICAganBpcE9iamVjdHMuZGF0YWJpbnNTYXZlcixcbiAgICAgICAganBpcE9iamVjdHMuZmV0Y2hlclNoYXJlZE9iamVjdHMsXG4gICAgICAgIGpwaXBPYmplY3RzLmZldGNoZXJPcHRpb25zKTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbm9uLXByb2dyZXNzaXZlIGluc3RhbmNlIG9mIEpwaXBJbWFnZSBmb3IgYSBnaXZlbiBxdWFsaXR5LlxuICAgICAqIEBwYXJhbSB7aW50ZWdlciB8ICdtYXgnfSBbcXVhbGl0eT0nbWF4J10gQW1vdW50IG9mIHF1YWxpdHkgbGF5ZXJzIG9mIGZpbmFsIGltYWdlIGRlbGl2ZXJlZC5cbiAgICAgKiBAcmV0dXJucyB7SnBpcEltYWdlfVxuICAgICAqL1xuICAgIHRoaXMubm9uUHJvZ3Jlc3NpdmUgPSBmdW5jdGlvbiBub25Qcm9ncmVzc2l2ZShxdWFsaXR5KSB7XG4gICAgICAgIHZhciBxdWFsaXR5TW9kaWZpZWQgPSBxdWFsaXR5IHx8ICdtYXgnO1xuICAgICAgICByZXR1cm4gdGhpcy5jdXN0b21Qcm9ncmVzc2l2ZShbIHtcbiAgICAgICAgICAgIG1pbk51bVF1YWxpdHlMYXllcnM6IHF1YWxpdHlNb2RpZmllZCxcbiAgICAgICAgICAgIGZvcmNlTWF4UXVhbGl0eTogJ2ZvcmNlJ1xuICAgICAgICB9IF0pO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbnN0YW5jZSBvZiBKcGlwSW1hZ2Ugd2l0aCBwcm9ncmVzc2l2ZW5lc3MgWzEsIDIsIDMsIG1heFF1YWxpdHkvMiwgbWF4UXVhbGl0eV0uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFF1YWxpdHlcbiAgICAgKiBAcmV0dXJucyB7SnBpcEltYWdlfVxuICAgICAqL1xuICAgIHRoaXMuYXV0b1Byb2dyZXNzaXZlID0gZnVuY3Rpb24gYXV0b1Byb2dyZXNzaXZlKG1heFF1YWxpdHkpIHtcbiAgICAgICAgdmFyIGF1dG9Qcm9ncmVzc2l2ZW5lc3MgPSB0aGlzLmdldEF1dG9tYXRpY1Byb2dyZXNzaXZlbmVzcyhtYXhRdWFsaXR5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tUHJvZ3Jlc3NpdmUoYXV0b1Byb2dyZXNzaXZlbmVzcyk7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm4gbmV3IEpwaXBJbWFnZSB3aXRoIGN1c3RvbSBwcm9ncmVzc2l2ZW5lc3MuXG4gICAgICogQHBhcmFtIHtQcm9ncmVzc2l2ZW5lc3N9IGN1c3RvbVByb2dyZXNzaXZlbmVzc1xuICAgICAqIEByZXR1cm5zIHtKcGlwSW1hZ2V9XG4gICAgICovXG4gICAgdGhpcy5jdXN0b21Qcm9ncmVzc2l2ZSA9IGZ1bmN0aW9uIGN1c3RvbVByb2dyZXNzaXZlKGN1c3RvbVByb2dyZXNzaXZlbmVzcykge1xuICAgICAgICB2YXIgY3VzdG9tUHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQgPSBqcGlwT2JqZWN0cy5wYXJhbXNNb2RpZmllci5tb2RpZnlDdXN0b21Qcm9ncmVzc2l2ZW5lc3MoY3VzdG9tUHJvZ3Jlc3NpdmVuZXNzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBKcGlwSW1hZ2UoanBpcE9iamVjdHMsIGN1c3RvbVByb2dyZXNzaXZlbmVzc01vZGlmaWVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBJREYuIENhbGxlZCBhZnRlciBmZXRjaGVyIFxuICAgICAqIEBwYXJhbSB7SW1hZ2VEZWNvZGVyfSBpbWFnZURlY29kZXJcbiAgICAgKi9cbiAgICB0aGlzLm9wZW5lZCA9IGZ1bmN0aW9uIG9wZW5lZChpbWFnZURlY29kZXIpIHtcbiAgICAgICAgaW1hZ2VQYXJhbXMgPSBpbWFnZURlY29kZXIuZ2V0SW1hZ2VQYXJhbXMoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXRMZXZlbENhbGN1bGF0b3IgPSBnZXRMZXZlbENhbGN1bGF0b3I7XG5cbiAgICB0aGlzLmdldERlY29kZXJXb3JrZXJzSW5wdXRSZXRyZWl2ZXIgPSBmdW5jdGlvbiBnZXREZWNvZGVyV29ya2Vyc0lucHV0UmV0cmVpdmVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0RmV0Y2hlciA9IGZ1bmN0aW9uIGdldEZldGNoZXIoKSB7XG4gICAgICAgIHJldHVybiBmZXRjaGVyO1xuICAgIH07XG5cbiAgICB0aGlzLmdldFdvcmtlclR5cGVPcHRpb25zID0gZnVuY3Rpb24gZ2V0V29ya2VyVHlwZU9wdGlvbnMod29ya2VyVHlwZSkge1xuICAgICAgICBzd2l0Y2ggKHdvcmtlclR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgV09SS0VSX1RZUEVfUElYRUxTOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGN0b3JOYW1lOiAnd2VianBpcC5JbnRlcm5hbHMuUGRmanNKcHhQaXhlbHNEZWNvZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgY3RvckFyZ3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRzVG9JbXBvcnQ6IFtnZXRTY3JpcHROYW1lKG5ldyBFcnJvcigpKV0sXG4gICAgICAgICAgICAgICAgICAgIHBhdGhUb1RyYW5zZmVyYWJsZXNJblByb21pc2VSZXN1bHQ6IFtbMCwgJ2RhdGEnLCAnYnVmZmVyJ11dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgV09SS0VSX1RZUEVfQ09FRkZTOlxuICAgICAgICAgICAgICAgIHZhciBjb2Rlc3RyZWFtVHJhbnNmZXJhYmxlID0gWzAsICdoZWFkZXJzQ29kZXN0cmVhbScsICdidWZmZXInXTtcbiAgICAgICAgICAgICAgICB2YXIgY29kZWJsb2NrVHJhbnNmZXJhYmxlID0gWzAsICdjb2RlYmxvY2tzRGF0YScsICdkYXRhJywgJ2J1ZmZlciddO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIGN0b3JOYW1lOiAnd2VianBpcC5JbnRlcm5hbHMuUGRmanNKcHhDb2VmZmljaWVudHNEZWNvZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgY3RvckFyZ3M6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzY3JpcHRzVG9JbXBvcnQ6IFtnZXRTY3JpcHROYW1lKG5ldyBFcnJvcigpKV0sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZmVyYWJsZXM6IFtjb2Rlc3RyZWFtVHJhbnNmZXJhYmxlLCBjb2RlYmxvY2tUcmFuc2ZlcmFibGVdLFxuICAgICAgICAgICAgICAgICAgICBwYXRoVG9UcmFuc2ZlcmFibGVzSW5Qcm9taXNlUmVzdWx0OiBbWzAsICdjb2VmZmljaWVudHMnLCAnYnVmZmVyJ11dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICd3ZWJqcGlwIGVycm9yOiBVbmV4cGVjdGVkIHdvcmtlciB0eXBlIGluICcgK1xuICAgICAgICAgICAgICAgICAgICAnZ2V0V29ya2VyVHlwZU9wdGlvbnMgJyArIHdvcmtlclR5cGUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldEtleUFzU3RyaW5nID0gZnVuY3Rpb24gZ2V0S2V5QXNTdHJpbmcoa2V5KSB7XG4gICAgICAgIGlmIChrZXkudGFza1R5cGUgPT09ICdDT0VGRlMnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ0M6JyArIGtleS5pbkNsYXNzSW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcGFydFBhcmFtcyA9IGpwaXBPYmplY3RzLnBhcmFtc01vZGlmaWVyLm1vZGlmeUNvZGVzdHJlYW1QYXJ0UGFyYW1zKC8qY29kZXN0cmVhbVRhc2tQYXJhbXM9Ki9rZXkpO1xuICAgICAgICAgICAgcmV0dXJuICdQOnhtaW4nICsgcGFydFBhcmFtcy5taW5YICsgJ3ltaW4nICsgcGFydFBhcmFtcy5taW5ZICtcbiAgICAgICAgICAgICAgICAgICAneG1heCcgKyBwYXJ0UGFyYW1zLm1heFhFeGNsdXNpdmUgK1xuICAgICAgICAgICAgICAgICAgICd5bWF4JyArIHBhcnRQYXJhbXMubWF4WUV4Y2x1c2l2ZSArXG4gICAgICAgICAgICAgICAgICAgJ3InICsgcGFydFBhcmFtcy5sZXZlbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy50YXNrU3RhcnRlZCA9IGZ1bmN0aW9uIHRhc2tTdGFydGVkKHRhc2spIHtcbiAgICAgICAgdmFsaWRhdGVQcm9ncmVzc2l2ZW5lc3MoKTtcbiAgICAgICAgaWYgKHRhc2sua2V5LnRhc2tUeXBlID09PSAnQ09FRkZTJykge1xuICAgICAgICAgICAgc3RhcnRDb2VmZmljaWVudHNUYXNrKHRhc2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRQaXhlbHNUYXNrKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBjcmVhdGVKcGlwT2JqZWN0cyhmZXRjaGVyT3B0aW9uc0FyZykge1xuICAgICAgICB2YXIgZGF0YWJpbnNTYXZlciA9IGpwaXBGYWN0b3J5LmNyZWF0ZURhdGFiaW5zU2F2ZXIoLyppc0pwaXBUaWxlcGFydFN0cmVhbT0qL2ZhbHNlKTtcbiAgICAgICAgdmFyIG1haW5IZWFkZXJEYXRhYmluID0gZGF0YWJpbnNTYXZlci5nZXRNYWluSGVhZGVyRGF0YWJpbigpO1xuXG4gICAgICAgIHZhciBtYXJrZXJzUGFyc2VyID0ganBpcEZhY3RvcnkuY3JlYXRlTWFya2Vyc1BhcnNlcihtYWluSGVhZGVyRGF0YWJpbik7XG4gICAgICAgIHZhciBvZmZzZXRzQ2FsY3VsYXRvciA9IGpwaXBGYWN0b3J5LmNyZWF0ZU9mZnNldHNDYWxjdWxhdG9yKFxuICAgICAgICAgICAgbWFpbkhlYWRlckRhdGFiaW4sIG1hcmtlcnNQYXJzZXIpO1xuICAgICAgICB2YXIgc3RydWN0dXJlUGFyc2VyID0ganBpcEZhY3RvcnkuY3JlYXRlU3RydWN0dXJlUGFyc2VyKFxuICAgICAgICAgICAgZGF0YWJpbnNTYXZlciwgbWFya2Vyc1BhcnNlciwgb2Zmc2V0c0NhbGN1bGF0b3IpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHByb2dyZXNzaW9uT3JkZXIgPSAnUlBDTCc7XG4gICAgICAgIHZhciBjb2Rlc3RyZWFtU3RydWN0dXJlID0ganBpcEZhY3RvcnkuY3JlYXRlQ29kZXN0cmVhbVN0cnVjdHVyZShcbiAgICAgICAgICAgIHN0cnVjdHVyZVBhcnNlciwgcHJvZ3Jlc3Npb25PcmRlcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgcXVhbGl0eUxheWVyc0NhY2hlID0ganBpcEZhY3RvcnkuY3JlYXRlUXVhbGl0eUxheWVyc0NhY2hlKFxuICAgICAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgdmFyIGhlYWRlck1vZGlmaWVyID0ganBpcEZhY3RvcnkuY3JlYXRlSGVhZGVyTW9kaWZpZXIoXG4gICAgICAgICAgICBvZmZzZXRzQ2FsY3VsYXRvciwgcHJvZ3Jlc3Npb25PcmRlcik7XG4gICAgICAgIHZhciByZWNvbnN0cnVjdG9yID0ganBpcEZhY3RvcnkuY3JlYXRlQ29kZXN0cmVhbVJlY29uc3RydWN0b3IoXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLCBoZWFkZXJNb2RpZmllciwgcXVhbGl0eUxheWVyc0NhY2hlKTtcbiAgICAgICAgdmFyIHBhY2tldHNEYXRhQ29sbGVjdG9yID0ganBpcEZhY3RvcnkuY3JlYXRlUGFja2V0c0RhdGFDb2xsZWN0b3IoXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLCBxdWFsaXR5TGF5ZXJzQ2FjaGUpO1xuXG4gICAgICAgIHZhciBwYXJhbXNNb2RpZmllciA9IGpwaXBGYWN0b3J5LmNyZWF0ZVJlcXVlc3RQYXJhbXNNb2RpZmllcihjb2Rlc3RyZWFtU3RydWN0dXJlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZWNvbnN0cnVjdG9yOiByZWNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgcGFja2V0c0RhdGFDb2xsZWN0b3I6IHBhY2tldHNEYXRhQ29sbGVjdG9yLFxuICAgICAgICAgICAgcXVhbGl0eUxheWVyc0NhY2hlOiBxdWFsaXR5TGF5ZXJzQ2FjaGUsXG4gICAgICAgICAgICBjb2Rlc3RyZWFtU3RydWN0dXJlOiBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICAgICAgZGF0YWJpbnNTYXZlcjogZGF0YWJpbnNTYXZlcixcbiAgICAgICAgICAgIHBhcmFtc01vZGlmaWVyOiBwYXJhbXNNb2RpZmllcixcbiAgICAgICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzOiB7fSxcbiAgICAgICAgICAgIGZldGNoZXJPcHRpb25zOiBmZXRjaGVyT3B0aW9uc0FyZyxcbiAgICAgICAgICAgIGpwaXBGYWN0b3J5OiBqcGlwRmFjdG9yeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVByb2dyZXNzaXZlbmVzcygpIHtcbiAgICAgICAgaWYgKCFwcm9ncmVzc2l2ZW5lc3NNb2RpZmllZCkge1xuICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQgPSBwcm9ncmVzc2l2ZW5lc3MgP1xuICAgICAgICAgICAgICAgIGpwaXBPYmplY3RzLnBhcmFtc01vZGlmaWVyLm1vZGlmeUN1c3RvbVByb2dyZXNzaXZlbmVzcyhwcm9ncmVzc2l2ZW5lc3MpIDpcbiAgICAgICAgICAgICAgICBqcGlwT2JqZWN0cy5wYXJhbXNNb2RpZmllci5nZXRBdXRvbWF0aWNQcm9ncmVzc2l2ZW5lc3MoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmV0Y2hlci5zZXRQcm9ncmVzc2l2ZW5lc3MocHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHN0YXJ0UGl4ZWxzVGFzayh0YXNrKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBqcGlwT2JqZWN0cy5wYXJhbXNNb2RpZmllci5tb2RpZnlDb2Rlc3RyZWFtUGFydFBhcmFtcygvKmNvZGVzdHJlYW1UYXNrUGFyYW1zPSovdGFzay5rZXkpO1xuICAgICAgICB2YXIgY29kZXN0cmVhbVBhcnQgPSBqcGlwRmFjdG9yeS5jcmVhdGVQYXJhbXNDb2Rlc3RyZWFtUGFydChcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgIGpwaXBPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHF1YWxpdHlXYWl0ZXI7XG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSAwO1xuICAgICAgICB2YXIgZGVwZW5kZW5jeUluZGV4QnlJbkNsYXNzSW5kZXggPSBbXTtcbiAgICAgICAgXG4gICAgICAgIHRhc2sub24oJ2RlcGVuZGVuY3lUYXNrRGF0YScsIGZ1bmN0aW9uKGRhdGEsIGRlcGVuZGVuY3lLZXkpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGRlcGVuZGVuY3lJbmRleEJ5SW5DbGFzc0luZGV4W2RlcGVuZGVuY3lLZXkuaW5DbGFzc0luZGV4XTtcbiAgICAgICAgICAgIHF1YWxpdHlXYWl0ZXIucHJlY2luY3RRdWFsaXR5TGF5ZXJSZWFjaGVkKFxuICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lLZXkuaW5DbGFzc0luZGV4LCBkYXRhLm1pblF1YWxpdHkpO1xuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpc0VuZGVkID0gZmFsc2U7XG4gICAgICAgIHRhc2sub24oJ3N0YXR1c1VwZGF0ZWQnLCBmdW5jdGlvbihzdGF0dXMpIHtcbiAgICAgICAgICAgIGlmICghaXNFbmRlZCAmJlxuICAgICAgICAgICAgICAgICFzdGF0dXMuaXNXYWl0aW5nRm9yV29ya2VyUmVzdWx0ICYmXG4gICAgICAgICAgICAgICAgc3RhdHVzLnRlcm1pbmF0ZWREZXBlbmRzVGFza3MgPT09IHN0YXR1cy5kZXBlbmRzVGFza3MpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ2pwaXAgZXJyb3I6IFVuZXhwZWN0ZWQgdW5lbmRlZCB0YXNrIHdpdGhvdXQgcGVuZGluZyBkZXBlbmQgdGFza3MnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGFzay5vbignY3VzdG9tJywgZnVuY3Rpb24oY3VzdG9tRXZlbnROYW1lKSB7XG4gICAgICAgICAgICBpZiAoY3VzdG9tRXZlbnROYW1lID09PSAnYWJvcnRpbmcnKSB7XG4gICAgICAgICAgICAgICAgdGFza0VuZGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcXVhbGl0eVdhaXRlciA9IGpwaXBGYWN0b3J5LmNyZWF0ZVF1YWxpdHlXYWl0ZXIoXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydCxcbiAgICAgICAgICAgIHByb2dyZXNzaXZlbmVzc01vZGlmaWVkLFxuICAgICAgICAgICAgLyptYXhRdWFsaXR5PSovMCwgLy8gVE9ETzogRWxpbWluYXRlIHRoaXMgdW51c2VkIGFyZ3VtZW50XG4gICAgICAgICAgICBxdWFsaXR5TGF5ZXJSZWFjaGVkQ2FsbGJhY2ssXG4gICAgICAgICAgICBqcGlwT2JqZWN0cy5jb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICAgICAganBpcE9iamVjdHMuZGF0YWJpbnNTYXZlcixcbiAgICAgICAgICAgIHN0YXJ0VHJhY2tQcmVjaW5jdENhbGxiYWNrKTtcbiAgICAgICAgXG4gICAgICAgIHF1YWxpdHlXYWl0ZXIucmVnaXN0ZXIoKTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0VHJhY2tQcmVjaW5jdENhbGxiYWNrKFxuICAgICAgICAgICAgcHJlY2luY3REYXRhYmluLFxuICAgICAgICAgICAgcXVhbGl0eUluVGlsZSxcbiAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IsXG4gICAgICAgICAgICBpbkNsYXNzSW5kZXgsXG4gICAgICAgICAgICB0aWxlU3RydWN0dXJlKSB7XG5cbiAgICAgICAgICAgIGRlcGVuZGVuY3lJbmRleEJ5SW5DbGFzc0luZGV4W2luQ2xhc3NJbmRleF0gPSBkZXBlbmRlbmNpZXMrKztcblxuICAgICAgICAgICAgdmFyIHByZWNpbmN0SW5kZXggPVxuICAgICAgICAgICAgICAgIHRpbGVTdHJ1Y3R1cmUucHJlY2luY3RQb3NpdGlvblRvSW5kZXhJbkNvbXBvbmVudFJlc29sdXRpb24oXG4gICAgICAgICAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERlcGVuZHMgb24gcHJlY2luY3RzIHRhc2tzXG4gICAgICAgICAgICB0YXNrLnJlZ2lzdGVyVGFza0RlcGVuZGVuY3koe1xuICAgICAgICAgICAgICAgIHRhc2tUeXBlOiAnQ09FRkZTJyxcbiAgICAgICAgICAgICAgICB0aWxlSW5kZXg6IHByZWNpbmN0SXRlcmF0b3IudGlsZUluZGV4LFxuICAgICAgICAgICAgICAgIHJlc29sdXRpb25MZXZlbDogcHJlY2luY3RJdGVyYXRvci5yZXNvbHV0aW9uTGV2ZWwsXG4gICAgICAgICAgICAgICAgcHJlY2luY3RYOiBwcmVjaW5jdEl0ZXJhdG9yLnByZWNpbmN0WCxcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFk6IHByZWNpbmN0SXRlcmF0b3IucHJlY2luY3RZLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogcHJlY2luY3RJdGVyYXRvci5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgaW5DbGFzc0luZGV4OiBpbkNsYXNzSW5kZXgsXG4gICAgICAgICAgICAgICAgcHJlY2luY3RJbmRleEluQ29tcG9uZW50UmVzb2x1dGlvbjogcHJlY2luY3RJbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBoZWFkZXJzQ29kZXN0cmVhbSA9IG51bGw7XG4gICAgICAgIHZhciBvZmZzZXRJblJlZ2lvbiA9IG51bGw7XG4gICAgICAgIHZhciBpbWFnZVRpbGVzWDtcbiAgICAgICAgdmFyIHRpbGVzQm91bmRzO1xuICAgICAgICBcbiAgICAgICAgZnVuY3Rpb24gcXVhbGl0eUxheWVyUmVhY2hlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgaWYgKGhlYWRlcnNDb2Rlc3RyZWFtID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaGVhZGVyc0NvZGVzdHJlYW0gPSBqcGlwT2JqZWN0cy5yZWNvbnN0cnVjdG9yLmNyZWF0ZUhlYWRlcnNDb2Rlc3RyZWFtKGNvZGVzdHJlYW1QYXJ0KTtcbiAgICAgICAgICAgICAgICBvZmZzZXRJblJlZ2lvbiA9IGdldE9mZnNldEluUmVnaW9uKGNvZGVzdHJlYW1QYXJ0LCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGltYWdlVGlsZXNYID0ganBpcE9iamVjdHMuY29kZXN0cmVhbVN0cnVjdHVyZS5nZXROdW1UaWxlc1goKTtcbiAgICAgICAgICAgICAgICB0aWxlc0JvdW5kcyA9IGNvZGVzdHJlYW1QYXJ0LnRpbGVzQm91bmRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUT0RPOiBBZ2dyZWdhdGUgcmVzdWx0cyB0byBzdXBwb3J0ICdmb3JjZUFsbCdcbiAgICAgICAgICAgIHZhciBzdGFnZSA9IHF1YWxpdHlXYWl0ZXIuZ2V0UHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCgpO1xuICAgICAgICAgICAgdmFyIGNhblNraXAgPVxuICAgICAgICAgICAgICAgIHByb2dyZXNzaXZlbmVzc01vZGlmaWVkW3N0YWdlIC0gMV0uZm9yY2UgPT09ICdmb3JjZScgfHxcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2l2ZW5lc3NNb2RpZmllZFtzdGFnZSAtIDFdLmZvcmNlID09PSAnZm9yY2VBbGwnO1xuICAgICAgICAgICAgdGFzay5kYXRhUmVhZHkoe1xuICAgICAgICAgICAgICAgIGhlYWRlcnNDb2Rlc3RyZWFtOiBoZWFkZXJzQ29kZXN0cmVhbSxcbiAgICAgICAgICAgICAgICBvZmZzZXRJblJlZ2lvbjogb2Zmc2V0SW5SZWdpb24sXG4gICAgICAgICAgICAgICAgaW1hZ2VUaWxlc1g6IGltYWdlVGlsZXNYLFxuICAgICAgICAgICAgICAgIHRpbGVzQm91bmRzOiB0aWxlc0JvdW5kcyxcbiAgICAgICAgICAgICAgICBwcmVjaW5jdENvZWZmaWNpZW50czogdGFzay5kZXBlbmRUYXNrUmVzdWx0cyAvLyBOT1RFOiBkZXBlbmRUYXNrUmVzdWx0cyBtaWdodCBiZSBjaGFuZ2VkIHdoaWxlIHdvcmsgKHBhc3NlZCBieSByZWYpXG4gICAgICAgICAgICB9LCBXT1JLRVJfVFlQRV9QSVhFTFMsIGNhblNraXApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocXVhbGl0eVdhaXRlci5pc0RvbmUoKSkge1xuICAgICAgICAgICAgICAgIHRhc2tFbmRlZCgpO1xuICAgICAgICAgICAgICAgIHRhc2sudGVybWluYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRhc2tFbmRlZCgpIHtcbiAgICAgICAgICAgIGlmICghaXNFbmRlZCkge1xuICAgICAgICAgICAgICAgIGlzRW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHF1YWxpdHlXYWl0ZXIudW5yZWdpc3RlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHN0YXJ0Q29lZmZpY2llbnRzVGFzayh0YXNrKSB7XG4gICAgICAgIHZhciBjb2Rlc3RyZWFtUGFydCA9IGpwaXBGYWN0b3J5LmNyZWF0ZVByZWNpbmN0Q29kZXN0cmVhbVBhcnQoXG4gICAgICAgICAgICBnZXRMZXZlbENhbGN1bGF0b3IoKSxcbiAgICAgICAgICAgIGpwaXBPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZVN0cnVjdHVyZSh0YXNrLmtleS50aWxlSW5kZXgpLFxuICAgICAgICAgICAgdGFzay5rZXkudGlsZUluZGV4LFxuICAgICAgICAgICAgdGFzay5rZXkuY29tcG9uZW50LFxuICAgICAgICAgICAgdGFzay5rZXkucmVzb2x1dGlvbkxldmVsLFxuICAgICAgICAgICAgdGFzay5rZXkucHJlY2luY3RYLFxuICAgICAgICAgICAgdGFzay5rZXkucHJlY2luY3RZKTtcbiAgICAgICAgXG4gICAgICAgIHRhc2sub24oJ2N1c3RvbScsIGZ1bmN0aW9uKGN1c3RvbUV2ZW50TmFtZSkge1xuICAgICAgICAgICAgaWYgKGN1c3RvbUV2ZW50TmFtZSA9PT0gJ2Fib3J0aW5nJykge1xuICAgICAgICAgICAgICAgIHRhc2tFbmRlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgY29udGV4dCA9IGpwaXBGYWN0b3J5LmNyZWF0ZUltYWdlRGF0YUNvbnRleHQoXG4gICAgICAgICAgICBqcGlwT2JqZWN0cyxcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgdGFzay5rZXkubWF4UXVhbGl0eSwgLy8gVE9ETzogRWxpbWluYXRlIHRoaXMgdW51c2VkIGFyZ3VtZW50XG4gICAgICAgICAgICBwcm9ncmVzc2l2ZW5lc3NNb2RpZmllZCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaGFkRGF0YSA9IGZhbHNlO1xuICAgICAgICB2YXIgaXNUZXJtaW5hdGVkID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBjb250ZXh0Lm9uKCdkYXRhJywgb25EYXRhKTtcbiAgICAgICAgaWYgKGNvbnRleHQuZ2V0UHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCgpID4gMCkge1xuICAgICAgICAgICAgb25EYXRhKGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBvbkRhdGEoY29udGV4dF8pIHtcbiAgICAgICAgICAgIGlmIChjb250ZXh0ICE9PSBjb250ZXh0Xykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnd2VianBpcCBlcnJvcjogVW5leHBlY3RlZCBjb250ZXh0IGluIGRhdGEgZXZlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaGFkRGF0YSA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBxdWFsaXR5O1xuICAgICAgICAgICAgdmFyIHN0YWdlID0gY29udGV4dC5nZXRQcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkKCk7XG4gICAgICAgICAgICB2YXIgY2FuU2tpcCA9XG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWRbc3RhZ2UgLSAxXS5mb3JjZSAhPT0gJ2ZvcmNlJyAmJiBwcm9ncmVzc2l2ZW5lc3NNb2RpZmllZFtzdGFnZSAtIDFdLmZvcmNlICE9PSAnZm9yY2VBbGwnO1xuICAgICAgICAgICAgaWYgKCFjYW5Ta2lwKSB7XG4gICAgICAgICAgICAgICAgcXVhbGl0eSA9IHByb2dyZXNzaXZlbmVzc01vZGlmaWVkW3N0YWdlIC0gMV0ubWluTnVtUXVhbGl0eUxheWVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGRhdGEgPSBjb250ZXh0LmdldEZldGNoZWREYXRhKHF1YWxpdHkpO1xuICAgICAgICAgICAgdGFzay5kYXRhUmVhZHkoZGF0YSwgV09SS0VSX1RZUEVfQ09FRkZTLCBjYW5Ta2lwKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbnRleHQuaXNEb25lKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWhhZERhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnd2VianBpcCBlcnJvcjogQ29lZmZpY2llbnRzIHRhc2sgd2l0aG91dCBkYXRhJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhc2tFbmRlZCgpO1xuICAgICAgICAgICAgICAgIHRhc2sudGVybWluYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRhc2tFbmRlZCgpIHtcbiAgICAgICAgICAgIGlmICghaXNUZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICAgICAgaXNUZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBUT0RPOiBSZW1vdmVcbiAgICBpZiAoIUpwaXBJbWFnZS51c2VMZWdhY3kpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLypcbiAgICB0aGlzLmdldFdvcmtlclR5cGVPcHRpb25zID0gZnVuY3Rpb24gZ2V0V29ya2VyVHlwZU9wdGlvbnModGFza1R5cGUpIHtcbiAgICAgICAgdmFyIGNvZGVzdHJlYW1UcmFuc2ZlcmFibGUgPSBbMCwgJ2hlYWRlcnNDb2Rlc3RyZWFtJywgJ2J1ZmZlciddO1xuICAgICAgICB2YXIgY29kZWJsb2NrVHJhbnNmZXJhYmxlID0gWzAsICdjb2RlYmxvY2tzRGF0YScsICdkYXRhJywgJ2J1ZmZlciddO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY3Rvck5hbWU6ICd3ZWJqcGlwLkludGVybmFscy5QZGZqc0pweERlY29kZXJMZWdhY3knLFxuICAgICAgICAgICAgY3RvckFyZ3M6IFtdLFxuICAgICAgICAgICAgc2NyaXB0c1RvSW1wb3J0OiBbZ2V0U2NyaXB0TmFtZShuZXcgRXJyb3IoKSldLFxuICAgICAgICAgICAgdHJhbnNmZXJhYmxlczogW2NvZGVzdHJlYW1UcmFuc2ZlcmFibGUsIGNvZGVibG9ja1RyYW5zZmVyYWJsZV0sXG4gICAgICAgICAgICBwYXRoVG9UcmFuc2ZlcmFibGVzSW5Qcm9taXNlUmVzdWx0OiBbW11dXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldEtleUFzU3RyaW5nID0gZnVuY3Rpb24gZ2V0S2V5QXNTdHJpbmcoa2V5KSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShrZXkpO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy50YXNrU3RhcnRlZCA9IGZ1bmN0aW9uIHRhc2tTdGFydGVkKHRhc2spIHtcbiAgICAgICAgdmFsaWRhdGVQcm9ncmVzc2l2ZW5lc3MoKTtcbiAgICAgICAgdmFyIHBhcmFtcyA9IGpwaXBPYmplY3RzLnBhcmFtc01vZGlmaWVyLm1vZGlmeUNvZGVzdHJlYW1QYXJ0UGFyYW1zKC8qY29kZXN0cmVhbVRhc2tQYXJhbXM9Ki90YXNrLmtleSk7XG4gICAgICAgIHZhciBjb2Rlc3RyZWFtUGFydCA9IGpwaXBGYWN0b3J5LmNyZWF0ZVBhcmFtc0NvZGVzdHJlYW1QYXJ0KFxuICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAganBpcE9iamVjdHMuY29kZXN0cmVhbVN0cnVjdHVyZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgdmFyIGNvbnRleHQgPSBqcGlwRmFjdG9yeS5jcmVhdGVJbWFnZURhdGFDb250ZXh0KFxuICAgICAgICAgICAganBpcE9iamVjdHMsXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydCxcbiAgICAgICAgICAgIHBhcmFtcy5xdWFsaXR5LFxuICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG9mZnNldEluUmVnaW9uID0gZ2V0T2Zmc2V0SW5SZWdpb24oY29kZXN0cmVhbVBhcnQsIHBhcmFtcyk7XG4gICAgICAgIFxuICAgICAgICBjb250ZXh0Lm9uKCdkYXRhJywgb25EYXRhKTtcbiAgICAgICAgaWYgKGNvbnRleHQuaGFzRGF0YSgpKSB7XG4gICAgICAgICAgICBvbkRhdGEoY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIG9uRGF0YShjb250ZXh0Xykge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQgIT09IGNvbnRleHRfKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICd3ZWJqcGlwIGVycm9yOiBVbmV4cGVjdGVkIGNvbnRleHQgaW4gZGF0YSBldmVudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZGF0YSA9IGNvbnRleHQuZ2V0RmV0Y2hlZERhdGEoKTtcbiAgICAgICAgICAgIGRhdGEub2Zmc2V0SW5SZWdpb24gPSBvZmZzZXRJblJlZ2lvbjtcbiAgICAgICAgICAgIHRhc2suZGF0YVJlYWR5KGRhdGEsIC8qY2FuU2tpcD0qL3RydWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY29udGV4dC5pc0RvbmUoKSkge1xuICAgICAgICAgICAgICAgIHRhc2sudGVybWluYXRlKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5kaXNwb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vKi9cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRPZmZzZXRJblJlZ2lvbihjb2Rlc3RyZWFtUGFydCwgY29kZXN0cmVhbVBhcnRQYXJhbXMpIHtcbiAgICAgICAgaWYgKGNvZGVzdHJlYW1QYXJ0UGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgdGlsZUl0ZXJhdG9yID0gY29kZXN0cmVhbVBhcnQuZ2V0VGlsZUl0ZXJhdG9yKCk7XG4gICAgICAgICAgICBpZiAoIXRpbGVJdGVyYXRvci50cnlBZHZhbmNlKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0VtcHR5IGNvZGVzdHJlYW1QYXJ0IGluIEpwaXBJbWFnZURhdGFDb250ZXh0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZmlyc3RUaWxlSWQgPSB0aWxlSXRlcmF0b3IudGlsZUluZGV4O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZmlyc3RUaWxlTGVmdCA9IGpwaXBPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZUxlZnQoXG4gICAgICAgICAgICAgICAgZmlyc3RUaWxlSWQsIGNvZGVzdHJlYW1QYXJ0LmxldmVsKTtcbiAgICAgICAgICAgIHZhciBmaXJzdFRpbGVUb3AgPSBqcGlwT2JqZWN0cy5jb2Rlc3RyZWFtU3RydWN0dXJlLmdldFRpbGVUb3AoXG4gICAgICAgICAgICAgICAgZmlyc3RUaWxlSWQsIGNvZGVzdHJlYW1QYXJ0LmxldmVsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WDogY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWCAtIGZpcnN0VGlsZUxlZnQsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWSAtIGZpcnN0VGlsZVRvcCxcbiAgICAgICAgICAgICAgICB3aWR0aCA6IGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1heFhFeGNsdXNpdmUgLSBjb2Rlc3RyZWFtUGFydFBhcmFtcy5taW5YLFxuICAgICAgICAgICAgICAgIGhlaWdodDogY29kZXN0cmVhbVBhcnRQYXJhbXMubWF4WUV4Y2x1c2l2ZSAtIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pbllcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG9mZnNldFg6IDAsXG4gICAgICAgICAgICAgICAgb2Zmc2V0WTogMCxcbiAgICAgICAgICAgICAgICB3aWR0aCA6IGpwaXBPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0SW1hZ2VXaWR0aCgpLFxuICAgICAgICAgICAgICAgIGhlaWdodDoganBpcE9iamVjdHMuY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRJbWFnZUhlaWdodCgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TGV2ZWxDYWxjdWxhdG9yKCkge1xuICAgICAgICBpZiAobGV2ZWxDYWxjdWxhdG9yID09PSBudWxsKSB7XG4gICAgICAgICAgICBsZXZlbENhbGN1bGF0b3IgPSBqcGlwRmFjdG9yeS5jcmVhdGVMZXZlbENhbGN1bGF0b3IoaW1hZ2VQYXJhbXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsZXZlbENhbGN1bGF0b3I7XG4gICAgfVxufVxuXG5KcGlwSW1hZ2UudG9nZ2xlTGVnYWN5ID0gZnVuY3Rpb24oKSB7XG4gICAgSnBpcEltYWdlLnVzZUxlZ2FjeSA9ICFKcGlwSW1hZ2UudXNlTGVnYWN5O1xufTtcblxudmFyIGN1cnJlbnRTdGFja0ZyYW1lUmVnZXggPSAvYXQgKHxbXiBdKyBcXCgpKFteIF0rKTpcXGQrOlxcZCsvO1xudmFyIGxhc3RTdGFja0ZyYW1lUmVnZXhXaXRoU3RydWRlbCA9IG5ldyBSZWdFeHAoLy4rQCguKj8pOlxcZCs6XFxkKy8pO1xudmFyIGxhc3RTdGFja0ZyYW1lUmVnZXggPSBuZXcgUmVnRXhwKC8uK1xcLyguKj8pOlxcZCsoOlxcZCspKiQvKTtcblxuZnVuY3Rpb24gZ2V0U2NyaXB0TmFtZShlcnJvcldpdGhTdGFja1RyYWNlKSB7XG4gICAgdmFyIHN0YWNrID0gZXJyb3JXaXRoU3RhY2tUcmFjZS5zdGFjay50cmltKCk7XG4gICAgXG4gICAgdmFyIHNvdXJjZSA9IGN1cnJlbnRTdGFja0ZyYW1lUmVnZXguZXhlYyhzdGFjayk7XG4gICAgaWYgKHNvdXJjZSAmJiBzb3VyY2VbMl0gIT09IFwiXCIpIHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZVsyXTtcbiAgICB9XG5cbiAgICBzb3VyY2UgPSBsYXN0U3RhY2tGcmFtZVJlZ2V4V2l0aFN0cnVkZWwuZXhlYyhzdGFjayk7XG4gICAgaWYgKHNvdXJjZSAmJiAoc291cmNlWzFdICE9PSBcIlwiKSkge1xuICAgICAgICByZXR1cm4gc291cmNlWzFdO1xuICAgIH1cbiAgICBcbiAgICBzb3VyY2UgPSBsYXN0U3RhY2tGcmFtZVJlZ2V4LmV4ZWMoc3RhY2spO1xuICAgIGlmIChzb3VyY2UgJiYgc291cmNlWzFdICE9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2VbMV07XG4gICAgfVxuICAgIFxuICAgIGlmIChlcnJvcldpdGhTdGFja1RyYWNlLmZpbGVOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yV2l0aFN0YWNrVHJhY2UuZmlsZU5hbWU7XG4gICAgfVxuICAgIFxuICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKCd3ZWJqcGlwLmpzOiBDb3VsZCBub3QgZ2V0IGN1cnJlbnQgc2NyaXB0IFVSTCcpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvanBpcC1pbWFnZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvKipcbiAgICAgKiBTZW5kcyBBamF4IHJlcXVlc3QgYW5kIHJldHVybnMgQWpheCByZXNwb25zZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tGb3JBc3luY2hyb25vdXNSZXF1ZXN0IC0gc3VjY2Vzc2Z1bCBjYWxsYmFja1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZhaWx1cmVDYWxsYmFja0ZvckFzeW5jaHJvbm91c1JlcXVlc3QgLSBmYWlsdXJlIGNhbGxiYWNrXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHByb2dyZXNzaXZlUmVxdWVzdFF1YW50Qnl0ZXMgLSBxdWFudGl0eSBvZiBieXRlcyBpbiBwcm9ncmVzc2l2ZSByZXNwb25zZVxuICAgICAqL1xuICAgIHJlcXVlc3Q6IGZ1bmN0aW9uIHJlcXVlc3QoXG4gICAgICAgIHVybCxcbiAgICAgICAgY2FsbGJhY2tGb3JBc3luY2hyb25vdXNSZXF1ZXN0LFxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2tGb3JBc3luY2hyb25vdXNSZXF1ZXN0LFxuICAgICAgICBwcm9ncmVzc2l2ZVJlcXVlc3RRdWFudEJ5dGVzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgYWpheFJlc3BvbnNlID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7IC8vIENyZWF0ZSBYTUxIdHRwIHJlcXVlc3RcbiAgICAgICAgdmFyIGlzU3luY2hyb25vdXMgPSBjYWxsYmFja0ZvckFzeW5jaHJvbm91c1JlcXVlc3QgPT09IHVuZGVmaW5lZDsgLy8gSXMgc3luY2hyb25vdXNcblxuICAgICAgICB2YXIgaXNGaW5pc2hlZFJlcXVlc3QgPSBmYWxzZTsgLy8gSXMgdGhlIHJlcXVlc3QgZmluaXNoZWQ/XG4gICAgICAgIHZhciBieXRlc1JlY2lldmVkT25MYXN0UXVhbnQgPSAwOyAvLyBCeXRlcyByZWNlaXZlZCBvbiBsYXN0IHF1YW50Pz9cbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGludGVybmFsQWpheENhbGxiYWNrKGUpIHtcbiAgICAgICAgICAgIGlmIChpc0ZpbmlzaGVkUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGFqYXhSZXNwb25zZS5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzaXZlUmVxdWVzdFF1YW50Qnl0ZXMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICAgICAgICAgICBhamF4UmVzcG9uc2UucmVzcG9uc2UgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgYWpheFJlc3BvbnNlLnJlYWR5U3RhdGUgPCAzKSB7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBieXRlc1JlY2lldmVkID0gYWpheFJlc3BvbnNlLnJlc3BvbnNlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVzVGlsbExhc3RRdWFudCA9IGJ5dGVzUmVjaWV2ZWQgLSBieXRlc1JlY2lldmVkT25MYXN0UXVhbnQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGVzVGlsbExhc3RRdWFudCA8IHByb2dyZXNzaXZlUmVxdWVzdFF1YW50Qnl0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBieXRlc1JlY2lldmVkT25MYXN0UXVhbnQgPSBieXRlc1JlY2lldmVkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc0ZpbmlzaGVkUmVxdWVzdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGFqYXhSZXNwb25zZS5zdGF0dXMgIT09IDIwMCB8fFxuICAgICAgICAgICAgICAgICAgICBhamF4UmVzcG9uc2UucmVzcG9uc2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFja0ZvckFzeW5jaHJvbm91c1JlcXVlc3QoYWpheFJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFpc1N5bmNocm9ub3VzKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tGb3JBc3luY2hyb25vdXNSZXF1ZXN0KGFqYXhSZXNwb25zZSwgaXNGaW5pc2hlZFJlcXVlc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBhamF4UmVzcG9uc2Uub3BlbignR0VUJywgdXJsLCAhaXNTeW5jaHJvbm91cyk7XG4gICAgICAgIGFqYXhSZXNwb25zZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBpbnRlcm5hbEFqYXhDYWxsYmFjaztcbiAgICAgICAgXG4gICAgICAgIGlmICghaXNTeW5jaHJvbm91cykge1xuICAgICAgICAgICAgLy8gTm90IHN1cHBvcnRlZCBmb3Igc3luY2hyb25vdXMgcmVxdWVzdHNcbiAgICAgICAgICAgIGFqYXhSZXNwb25zZS5tb3pSZXNwb25zZVR5cGUgPSBhamF4UmVzcG9uc2UucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9ncmVzc2l2ZVJlcXVlc3RRdWFudEJ5dGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGFqYXhSZXNwb25zZS5zZXRSZXF1ZXN0SGVhZGVyKCdYLUNvbnRlbnQtVHlwZS1PcHRpb25zJywgJ25vc25pZmYnKTtcbiAgICAgICAgICAgIGFqYXhSZXNwb25zZS5vbnByb2dyZXNzID0gaW50ZXJuYWxBamF4Q2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGFqYXhSZXNwb25zZS5zZW5kKG51bGwpO1xuXG4gICAgICAgIGlmIChpc1N5bmNocm9ub3VzICYmICFpc0ZpbmlzaGVkUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ3N5bmNocm9ub3VzIGFqYXggY2FsbCB3YXMgbm90IGZpbmlzaGVkIHN5bmNocm9ub3VzbHknKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFqYXhSZXNwb25zZTtcbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9taXNjL3NpbXBsZS1hamF4LWhlbHBlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG4vLyBIYW5kbGUgdHJhbnNhY3Rpb25zIG9mIGluZm8/XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBjcmVhdGVUcmFuc2FjdGlvbjogZnVuY3Rpb24gY3JlYXRlVHJhbnNhY3Rpb24oKSB7XG4gICAgICAgIC8vIFRoaXMgY29kZSBpcyBleGVjdXRlZCBhIExPVC4gRm9yIG9wdGltaXphdGlvbiwgc3RhdGUgaXMgcmVwcmVzZW50ZWRcbiAgICAgICAgLy8gZGlyZWN0bHkgYXMgbnVtYmVycyAoSSBjb3VsZG4ndCB0aGluayBhYm91dCBtb3JlIHJlYWRhYmxlIHdheSB3aGljaFxuICAgICAgICAvLyBpcyBwZXJmb3JtYW5jZS1lcXVpdmFsZW50KS5cbiAgICAgICAgXG4gICAgICAgIC8vIHN0YXRlID0gMSA9PT4gVHJhbnNhY3Rpb24gaXMgYWN0aXZlXG4gICAgICAgIC8vIHN0YXRlID0gMiA9PT4gVHJhbnNhY3Rpb24gaGFzIGNvbW1pdHRlZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgLy8gc3RhdGUgPSAzID09PiBUcmFuc2FjdGlvbiBoYXMgYmVlbiBhYm9ydGVkXG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhdGUgPSAxO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0ge1xuICAgICAgICAgICAgZ2V0IGlzQWJvcnRlZCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUgPT09IDM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZXQgaXNBY3RpdmUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlID09PSAxO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29tbWl0OiBmdW5jdGlvbiBjb21taXQoKSB7XG4gICAgICAgICAgICAgICAgdGVybWluYXRlKHRydWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXG4gICAgICAgICAgICBhYm9ydDogZnVuY3Rpb24gYWJvcnQoKSB7XG4gICAgICAgICAgICAgICAgdGVybWluYXRlKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIHRlcm1pbmF0ZShpc1N1Y2Nlc3NmdWxfKSB7XG4gICAgICAgICAgICBpZiAoIXRyYW5zYWN0aW9uLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdDYW5ub3QgdGVybWluYXRlIGFuIGFscmVhZHkgdGVybWluYXRlZCB0cmFuc2FjdGlvbicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhdGUgPSBpc1N1Y2Nlc3NmdWxfID8gMiA6IDM7XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb247XG4gICAgfSxcbiAgICBcbiAgICBjcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0OiBmdW5jdGlvbiBjcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0KFxuICAgICAgICBpbml0aWFsVmFsdWUsIGNsb25lKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgdmFsdWUgPSBudWxsO1xuICAgICAgICB2YXIgcHJldlZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICB2YXIgbGFzdEFjY2Vzc2VkVHJhbnNhY3Rpb24gPSB7XG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBpc0Fib3J0ZWQ6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgdHJhbnNhY3Rpb25hbE9iamVjdCA9IHtcbiAgICAgICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZShhY3RpdmVUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgIGVuc3VyZUFsbG93ZWRBY2Nlc3MoYWN0aXZlVHJhbnNhY3Rpb24pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBY2Nlc3NlZFRyYW5zYWN0aW9uID09PSBhY3RpdmVUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChsYXN0QWNjZXNzZWRUcmFuc2FjdGlvbi5pc0Fib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBjbG9uZShwcmV2VmFsdWUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZWYWx1ZSA9IGNsb25lKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsYXN0QWNjZXNzZWRUcmFuc2FjdGlvbiA9IGFjdGl2ZVRyYW5zYWN0aW9uO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiBzZXRWYWx1ZShhY3RpdmVUcmFuc2FjdGlvbiwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBlbnN1cmVBbGxvd2VkQWNjZXNzKGFjdGl2ZVRyYW5zYWN0aW9uKTtcblxuICAgICAgICAgICAgICAgIGlmIChsYXN0QWNjZXNzZWRUcmFuc2FjdGlvbiA9PT0gYWN0aXZlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIWxhc3RBY2Nlc3NlZFRyYW5zYWN0aW9uLmlzQWJvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICBwcmV2VmFsdWUgPSBjbG9uZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGxhc3RBY2Nlc3NlZFRyYW5zYWN0aW9uID0gYWN0aXZlVHJhbnNhY3Rpb247XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGVuc3VyZUFsbG93ZWRBY2Nlc3MoYWN0aXZlVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICghYWN0aXZlVHJhbnNhY3Rpb24uaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCB1c2UgdGVybWluYXRlZCB0cmFuc2FjdGlvbiB0byBhY2Nlc3Mgb2JqZWN0cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYWN0aXZlVHJhbnNhY3Rpb24gIT09IGxhc3RBY2Nlc3NlZFRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAgICAgbGFzdEFjY2Vzc2VkVHJhbnNhY3Rpb24uaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBzaW11bHRhbm91c2x5IGFjY2VzcyB0cmFuc2FjdGlvbmFsIG9iamVjdCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2Zyb20gdHdvIGFjdGl2ZSB0cmFuc2FjdGlvbnMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uYWxPYmplY3Q7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcXVhbGl0eS1sYXllcnMvbXV0dWFsLWV4Y2x1c2l2ZS10cmFuc2FjdGlvbi1oZWxwZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbi8vIERlYWxzIHdpdGggc29tZSBiaXRzdHJlYW0gY29kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBKcGlwQ29kaW5nUGFzc2VzTnVtYmVyUGFyc2VyQ2xvc3VyZSgpIHtcbiAgICAvLyBUYWJsZSBCLjQgaW4gcGFydCAxIG9mIHRoZSBKcGVnMjAwMCBzdGFuZGFyZCBzaG93cyA3IGNhc2VzXG4gICAgLy8gb2YgdmFsdWVzLiBUaGUgYWxnb3JpdGhtIHNob3duIGhlcmUgc2VwYXJhdGVzIHRob3NlIGNhc2VzXG4gICAgLy8gaW50byAxNiBjYXNlcywgZGVwZW5kcyBvbiB0aGUgbnVtYmVyIG9mIG9uZXMgaW4gdGhlIHByZWZpeFxuICAgIC8vIG9mIHRoZSBjb2RlZCBudW1iZXIgdW50aWwgdGhlIGZpcnN0IHplcm8uXG4gICAgLy8gVGhlIHBhcnNpbmcgaXMgZG9uZSBpbiB0d28gc3RhZ2VzOiBmaXJzdCB3ZSBjb3VudCB0aGUgb25lcyB1bnRpbFxuICAgIC8vIHRoZSBmaXJzdCB6ZXJvLCBsYXRlciB3ZSBwYXJzZSB0aGUgb3RoZXIgYml0cy5cbiAgICBcbiAgICAvLyBGb3IgZXhhbXBsZSwgdGhlIGNhc2Ugb2YgMTEwMSAod2hpY2ggcmVwcmVzZW50cyA0IGFjY29yZGluZyB0b1xuICAgIC8vIHRhYmxlIEIuNCkgaXMgcGFyc2VkIGluIHR3byBzdGFnZXMuIEZpcnN0IHdlIGNvdW50IHRoZSBvbmVzIGluXG4gICAgLy8gdGhlIGJlZ2lubmluZyB1bnRpbCB0aGUgZmlyc3QgemVybywgdGhlIHJlc3VsdCBpcyAyICgnMTEwJykuIFRoZW4gd2VcbiAgICAvLyBwYXJzZSB0aGUgb3RoZXIgYml0cyAoJzEnKS5cbiAgICBcbiAgICAvLyBBZnRlciB0aGUgZmlyc3QgcGFyc2luZyBzdGFnZSAoY291bnQgb2Ygb25lcyksIHdlIGtub3cgdHdvIHRoaW5nczpcbiAgICAvLyAtIEhvdyBtYW55IGJpdHMgd2UgbmVlZCB0byB0YWtlIGFmdGVyIHRoZSBmaXJzdCB6ZXJvIChzaW5nbGUgYml0IGluXG4gICAgLy8gICB0aGUgYWJvdmUgY2FzZSBvZiAnMTEwJyBwcmVmaXgpLlxuICAgIC8vIC0gSG93IG11Y2ggd2UgbmVlZCB0byBhZGQgdG8gdGhlIHJlc3VsdCBvZiBwYXJzaW5nIHRoZSBvdGhlciBiaXRzICgzXG4gICAgLy8gICAgIGluIHRoZSBhYm92ZSBjYXNlIG9mICcxMTAnIHByZWZpeCkuXG4gICAgXG4gICAgLy8gQWN0dWFsbHkgdGhlIDE2IGNhc2VzIHdlcmUgZXh0cmFjdGVkIGZyb20gdGhlIHRhYmxlIHdpdGhvdXQgYW55IGZvcm11bGEsXG4gICAgLy8gc28gd2UgY2FuIHJlZmVyIHRoZSBudW1iZXIgb2Ygb25lcyBhcyAna2V5d29yZHMnIG9ubHkuXG5cbiAgICB2YXIgYml0c05lZWRlZEFmdGVyQ291bnRPZk9uZXMgPSBjcmVhdGVCaXRzTmVlZGVkQWZ0ZXJDb3VudE9mT25lc01hcCgpO1xuICAgIHZhciBhZGRUb1Jlc3VsdEFmdGVyQ291bnRPZk9uZXMgPSBjcmVhdGVBZGRUb1Jlc3VsdEFmdGVyQ291bnRPZk9uZXNNYXAoKTtcblxuICAgIHZhciBqcGlwQ29kaW5nUGFzc2VzTnVtYmVyUGFyc2VyID0ge1xuICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UoYml0c3RyZWFtUmVhZGVyKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBvbmVzQ291bnQgPSBiaXRzdHJlYW1SZWFkZXIuY291bnRPbmVzQW5kU2hpZnRVbnRpbEZpcnN0WmVyb0JpdChcbiAgICAgICAgICAgICAgICAvKm1heEJpdHNUb1NoaWZ0PSovMTYpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob25lc0NvdW50ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBtb3JlQml0c05lZWRlZCA9IGJpdHNOZWVkZWRBZnRlckNvdW50T2ZPbmVzW29uZXNDb3VudF07XG4gICAgICAgICAgICB2YXIgbW9yZUJpdHMgPSBiaXRzdHJlYW1SZWFkZXIuc2hpZnRCaXRzKG1vcmVCaXRzTmVlZGVkKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1vcmVCaXRzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBhZGRUb1Jlc3VsdCA9IGFkZFRvUmVzdWx0QWZ0ZXJDb3VudE9mT25lc1tvbmVzQ291bnRdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG1vcmVCaXRzICsgYWRkVG9SZXN1bHQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUJpdHNOZWVkZWRBZnRlckNvdW50T2ZPbmVzTWFwKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KDE3KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSBjYXNlIG9mICcwJzogQWZ0ZXIgMCBvbmVzIGFuZCBzaW5nbGUgemVybywgbmVlZHMgbm8gbW9yZSBiaXRzXG4gICAgICAgIHJlc3VsdFswXSA9IDA7XG5cbiAgICAgICAgLy8gVGhlIGNhc2Ugb2YgJzEwJzogQWZ0ZXIgMSBvbmVzIGFuZCBzaW5nbGUgemVybywgbmVlZHMgbm8gbW9yZSBiaXRzXG4gICAgICAgIHJlc3VsdFsxXSA9IDA7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGUgY2FzZXMgb2YgJzExMHgnOiBBZnRlciAyIG9uZXMgYW5kIHNpbmdsZSB6ZXJvLCBuZWVkcyBhbm90aGVyIGJpdFxuICAgICAgICByZXN1bHRbMl0gPSAxO1xuICAgICAgICBcbiAgICAgICAgLy8gVGhlIGNhc2Ugb2YgJzExMTAnOiBBZnRlciAzIG9uZXMgYW5kIHNpbmdsZSB6ZXJvLCBuZWVkcyBubyBtb3JlIGJpdHNcbiAgICAgICAgcmVzdWx0WzNdID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSBjYXNlcyBvZiAnMTExMSAwMDAwIDAnIHRvICcxMTExIDExMTEgMCc6XG4gICAgICAgIC8vIEFmdGVyIDQgdG8gOCBvbmVzIGFuZCBzaW5nbGUgemVybywgbmVlZHMgYml0cyB0byBjb21wbGV0ZSB0byA5IGJpdHNcbiAgICAgICAgcmVzdWx0WzRdID0gNDtcbiAgICAgICAgcmVzdWx0WzVdID0gMztcbiAgICAgICAgcmVzdWx0WzZdID0gMjtcbiAgICAgICAgcmVzdWx0WzddID0gMTtcbiAgICAgICAgcmVzdWx0WzhdID0gMDtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSBjYXNlcyBvZiAnMTExMSAxMTExMSAuLi4nXG4gICAgICAgIC8vIEFmdGVyIGF0IGxlYXN0IDkgb25lcyBhbmQgc2luZ2xlIHplcm8sIG5lZWRzIGJpdHMgdG8gY29tcGxldGUgdG8gMTYgYml0c1xuICAgICAgICByZXN1bHRbOV0gPSA2O1xuICAgICAgICByZXN1bHRbMTBdID0gNTtcbiAgICAgICAgcmVzdWx0WzExXSA9IDQ7XG4gICAgICAgIHJlc3VsdFsxMl0gPSAzO1xuICAgICAgICByZXN1bHRbMTNdID0gMjtcbiAgICAgICAgcmVzdWx0WzE0XSA9IDE7XG4gICAgICAgIHJlc3VsdFsxNV0gPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gVGhlIGNhc2Ugb2YgJzExMTEgMTExMTEgMTExMSAxMTEnXG4gICAgICAgIHJlc3VsdFsxNl0gPSAwO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlQWRkVG9SZXN1bHRBZnRlckNvdW50T2ZPbmVzTWFwKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KDE3KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSBjYXNlIG9mICcwJyAoY29kZXdvcmQgZm9yIDEpOlxuICAgICAgICAvLyBBZnRlciAwIG9uZXMgYW5kIHNpbmdsZSB6ZXJvLCBhZGQgMSB0byBvdGhlciAwIGJpdHMgdmFsdWVcbiAgICAgICAgcmVzdWx0WzBdID0gMTtcblxuICAgICAgICAvLyBUaGUgY2FzZSBvZiAnMTAnIChjb2Rld29yZCBmb3IgMik6XG4gICAgICAgIC8vIEFmdGVyIDEgb25lcyBhbmQgc2luZ2xlIHplcm8sIGFkZCAyIHRvIG90aGVyIDAgYml0cyB2YWx1ZVxuICAgICAgICByZXN1bHRbMV0gPSAyO1xuICAgICAgICBcbiAgICAgICAgLy8gVGhlIGNhc2VzIG9mICcxMTB4JyAoY29kZXdvcmRzIGZvciAzIGFuZCA0KTpcbiAgICAgICAgLy8gQWZ0ZXIgMiBvbmVzIGFuZCBzaW5nbGUgemVybywgYWRkIDMgdG8gb3RoZXIgc2luZ2xlIGJpdCB2YWx1ZVxuICAgICAgICByZXN1bHRbMl0gPSAzO1xuICAgICAgICBcbiAgICAgICAgLy8gVGhlIGNhc2Ugb2YgJzExMTAnIChjb2Rld29yZCBmb3IgNSk6XG4gICAgICAgIC8vIEFmdGVyIDMgb25lcyBhbmQgc2luZ2xlIHplcm8sIGFkZCA1IHRvIG90aGVyIDAgYml0cyB2YWx1ZVxuICAgICAgICByZXN1bHRbM10gPSA1O1xuICAgICAgICBcbiAgICAgICAgLy8gVGhlIGNhc2VzIG9mICcxMTExIDAwMDAgMCcgdG8gJzExMTEgMTExMSAwJyAoY29kZXdvcmRzIGZvciA2IHRvIDM2KTpcbiAgICAgICAgLy8gQWZ0ZXIgNCBvbmVzIGFuZCBzaW5nbGUgemVybywgYWRkIDYgdG8gb3RoZXIgMC8xLzIvMy80IGJpdHMgdmFsdWVcbiAgICAgICAgcmVzdWx0WzRdID0gNiArIDB4MDA7IC8vIGIwMDAwMFxuICAgICAgICByZXN1bHRbNV0gPSA2ICsgMHgxMDsgLy8gYjEwMDAwXG4gICAgICAgIHJlc3VsdFs2XSA9IDYgKyAweDE4OyAvLyBiMTEwMDBcbiAgICAgICAgcmVzdWx0WzddID0gNiArIDB4MUM7IC8vIGIxMTEwMFxuICAgICAgICByZXN1bHRbOF0gPSA2ICsgMHgxRTsgLy8gYjExMTEwXG4gICAgICAgIFxuICAgICAgICAvLyBUaGUgY2FzZXMgb2YgJzExMTEgMTExMTEgLi4uJyAoY29kZXdvcmRzIGZvciAzNyB0byAxNjQpOlxuICAgICAgICAvLyBBZnRlciA5IG9uZXMgYW5kIHNpbmdsZSB6ZXJvLCBhZGQgMzcgdG8gb3RoZXIgMC8xLzIvMy80LzUvNiBiaXRzIHZhbHVlXG4gICAgICAgIHJlc3VsdFsgOV0gPSAzNyArIDB4MDA7IC8vIGIwMDAwMDBcbiAgICAgICAgcmVzdWx0WzEwXSA9IDM3ICsgMHg0MDsgLy8gYjEwMDAwMFxuICAgICAgICByZXN1bHRbMTFdID0gMzcgKyAweDYwOyAvLyBiMTEwMDAwXG4gICAgICAgIHJlc3VsdFsxMl0gPSAzNyArIDB4NzA7IC8vIGIxMTEwMDBcbiAgICAgICAgcmVzdWx0WzEzXSA9IDM3ICsgMHg3ODsgLy8gYjExMTEwMFxuICAgICAgICByZXN1bHRbMTRdID0gMzcgKyAweDdDOyAvLyBiMTExMTEwXG4gICAgICAgIHJlc3VsdFsxNV0gPSAzNyArIDB4N0U7IC8vIGIxMTExMTFcbiAgICAgICAgcmVzdWx0WzE2XSA9IDM3ICsgMHg3RjsgLy8gYjExMTExMVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGpwaXBDb2RpbmdQYXNzZXNOdW1iZXJQYXJzZXI7XG59KSgpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9xdWFsaXR5LWxheWVycy9qcGlwLWNvZGluZy1wYXNzZXMtbnVtYmVyLXBhcnNlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG4vLyBQYXJzZSAobWFrZSBzZW5zZSBvZikgSlBJUCBtZXNzYWdlIGhlYWRlclxudmFyIGpwaXBNZXNzYWdlSGVhZGVyUGFyc2VyID0ge1xuICAgICAgICBcbiAgICBMU0JfTUFTSzogMHgxLFxuICAgIEJJVF80X01BU0s6IDB4MTAsXG4gICAgQklUU181Nl9NQVNLOiAweDYwLFxuICAgIE1TQl9NQVNLOiAweDgwLFxuXG4gICAgTFNCXzdfTUFTSzogMHg3RixcblxuICAgIC8vIEEuMi4xXG4gICAgcGFyc2VOdW1iZXJJblZiYXM6IGZ1bmN0aW9uIHBhcnNlTnVtYmVySW5WYmFzQ2xvc3VyZShcbiAgICAgICAgbWVzc2FnZSwgc3RhcnRPZmZzZXQsIGJpdHNUb1Rha2VJbkZpcnN0Qnl0ZSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHNlbGYgPSBqcGlwTWVzc2FnZUhlYWRlclBhcnNlcjtcbiAgICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBzdGFydE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIGlmIChiaXRzVG9UYWtlSW5GaXJzdEJ5dGUpIHtcbiAgICAgICAgICAgIHZhciBtYXNrRmlyc3RCeXRlID0gKDEgPDwgYml0c1RvVGFrZUluRmlyc3RCeXRlKSAtIDE7XG4gICAgICAgICAgICByZXN1bHQgPSBtZXNzYWdlW2N1cnJlbnRPZmZzZXRdICYgbWFza0ZpcnN0Qnl0ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG1lc3NhZ2VbY3VycmVudE9mZnNldF0gJiBzZWxmLkxTQl83X01BU0s7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHdoaWxlICggISEobWVzc2FnZVtjdXJyZW50T2Zmc2V0XSAmIHNlbGYuTVNCX01BU0spICkge1xuICAgICAgICAgICAgKytjdXJyZW50T2Zmc2V0O1xuXG4gICAgICAgICAgICByZXN1bHQgPDw9IDc7XG4gICAgICAgICAgICByZXN1bHQgfD0gbWVzc2FnZVtjdXJyZW50T2Zmc2V0XSAmIHNlbGYuTFNCXzdfTUFTSztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVuZE9mZnNldDogY3VycmVudE9mZnNldCArIDEsXG4gICAgICAgICAgICBudW1iZXI6IHJlc3VsdFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgXG4gICAgLy8gQS4yXG4gICAgcGFyc2VNZXNzYWdlSGVhZGVyOiBmdW5jdGlvbiBwYXJzZU1lc3NhZ2VIZWFkZXJDbG9zdXJlKFxuICAgICAgICBtZXNzYWdlLCBzdGFydE9mZnNldCwgcHJldmlvdXNNZXNzYWdlSGVhZGVyKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgc2VsZiA9IGpwaXBNZXNzYWdlSGVhZGVyUGFyc2VyO1xuICAgICAgICBcbiAgICAgICAgLy8gQS4yLjFcbiAgICAgICAgXG4gICAgICAgIC8vIEZpcnN0IFZiYXM6IEJpbi1JRFxuICAgICAgICBcbiAgICAgICAgdmFyIGNsYXNzQW5kQ3NuUHJlY2Vuc2UgPSAobWVzc2FnZVtzdGFydE9mZnNldF0gJiBzZWxmLkJJVFNfNTZfTUFTSykgPj4+IDU7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2xhc3NBbmRDc25QcmVjZW5zZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLlBhcnNlRXhjZXB0aW9uKCdGYWlsZWQgcGFyc2luZyBtZXNzYWdlIGhlYWRlciAnICtcbiAgICAgICAgICAgICAgICAnKEEuMi4xKTogcHJvaGliaXRlZCBleGlzdGFuY2UgY2xhc3MgYW5kIGNzbiBiaXRzIDAwJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBoYXNDbGFzc1ZiYXMgPSAhIShjbGFzc0FuZENzblByZWNlbnNlICYgMHgyKTtcbiAgICAgICAgdmFyIGhhc0NvZGVTdHJlYW1JbmRleFZiYXMgPSBjbGFzc0FuZENzblByZWNlbnNlID09PSAzO1xuICAgICAgICBcbiAgICAgICAgdmFyIGlzTGFzdEJ5dGVJbkRhdGFiaW4gPSAhIShtZXNzYWdlW3N0YXJ0T2Zmc2V0XSAmIHNlbGYuQklUXzRfTUFTSyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBLjIuM1xuICAgICAgICB2YXIgcGFyc2VkSW5DbGFzc0lkID0gc2VsZi5wYXJzZU51bWJlckluVmJhcyhcbiAgICAgICAgICAgIG1lc3NhZ2UsIHN0YXJ0T2Zmc2V0LCAvKmJpdHNUb1Rha2VJbkZpcnN0Qnl0ZT0qLzQpO1xuICAgICAgICB2YXIgaW5DbGFzc0lkID0gcGFyc2VkSW5DbGFzc0lkLm51bWJlcjtcbiAgICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBwYXJzZWRJbkNsYXNzSWQuZW5kT2Zmc2V0O1xuICAgICAgICBcbiAgICAgICAgLy8gU2Vjb25kIG9wdGlvbmFsIFZiYXM6IENsYXNzIElEXG4gICAgICAgIFxuICAgICAgICB2YXIgY2xhc3NJZCA9IDA7XG4gICAgICAgIGlmIChoYXNDbGFzc1ZiYXMpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRDbGFzc0lkID0gc2VsZi5wYXJzZU51bWJlckluVmJhcyhtZXNzYWdlLCBjdXJyZW50T2Zmc2V0KTtcbiAgICAgICAgICAgIGNsYXNzSWQgPSBwYXJzZWRDbGFzc0lkLm51bWJlcjtcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQgPSBwYXJzZWRDbGFzc0lkLmVuZE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2aW91c01lc3NhZ2VIZWFkZXIpIHtcbiAgICAgICAgICAgIGNsYXNzSWQgPSBwcmV2aW91c01lc3NhZ2VIZWFkZXIuY2xhc3NJZDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGhpcmQgb3B0aW9uYWwgVmJhczogQ29kZSBTdHJlYW0gSW5kZXggKENzbilcbiAgICAgICAgXG4gICAgICAgIHZhciBjb2Rlc3RyZWFtSW5kZXggPSAwO1xuICAgICAgICBpZiAoaGFzQ29kZVN0cmVhbUluZGV4VmJhcykge1xuICAgICAgICAgICAgdmFyIHBhcnNlZENzbiA9IHNlbGYucGFyc2VOdW1iZXJJblZiYXMobWVzc2FnZSwgY3VycmVudE9mZnNldCk7XG4gICAgICAgICAgICBjb2Rlc3RyZWFtSW5kZXggPSBwYXJzZWRDc24ubnVtYmVyO1xuICAgICAgICAgICAgY3VycmVudE9mZnNldCA9IHBhcnNlZENzbi5lbmRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocHJldmlvdXNNZXNzYWdlSGVhZGVyKSB7XG4gICAgICAgICAgICBjb2Rlc3RyZWFtSW5kZXggPSBwcmV2aW91c01lc3NhZ2VIZWFkZXIuY29kZXN0cmVhbUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyA0dGggVmJhczogTWVzc2FnZSBvZmZzZXRcbiAgICAgICAgXG4gICAgICAgIHZhciBwYXJzZWRPZmZzZXQgPSBzZWxmLnBhcnNlTnVtYmVySW5WYmFzKG1lc3NhZ2UsIGN1cnJlbnRPZmZzZXQpO1xuICAgICAgICB2YXIgbWVzc2FnZU9mZnNldEZyb21EYXRhYmluU3RhcnQgPSBwYXJzZWRPZmZzZXQubnVtYmVyO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ID0gcGFyc2VkT2Zmc2V0LmVuZE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIC8vIDV0aCBWYmFzOiBNZXNzYWdlIGxlbmd0aFxuXG4gICAgICAgIHZhciBwYXJzZWRMZW5ndGggPSBzZWxmLnBhcnNlTnVtYmVySW5WYmFzKG1lc3NhZ2UsIGN1cnJlbnRPZmZzZXQpO1xuICAgICAgICB2YXIgbWVzc2FnZUJvZHlMZW5ndGggPSBwYXJzZWRMZW5ndGgubnVtYmVyO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ID0gcGFyc2VkTGVuZ3RoLmVuZE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIC8vIDZ0aCBvcHRpb25hbCBWYmFzOiBBdXhcbiAgICAgICAgXG4gICAgICAgIC8vIEEuMi4yXG4gICAgICAgIHZhciBoYXNBdXhWYmFzID0gISEoY2xhc3NJZCAmIHNlbGYuTFNCX01BU0spO1xuICAgICAgICBcbiAgICAgICAgdmFyIGF1eDtcbiAgICAgICAgaWYgKGhhc0F1eFZiYXMpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRBdXggPSBzZWxmLnBhcnNlTnVtYmVySW5WYmFzKG1lc3NhZ2UsIGN1cnJlbnRPZmZzZXQpO1xuICAgICAgICAgICAgYXV4ID0gcGFyc2VkQXV4Lm51bWJlcjtcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQgPSBwYXJzZWRBdXguZW5kT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBSZXR1cm5cbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgICBpc0xhc3RCeXRlSW5EYXRhYmluOiBpc0xhc3RCeXRlSW5EYXRhYmluLFxuICAgICAgICAgICAgaW5DbGFzc0lkOiBpbkNsYXNzSWQsXG4gICAgICAgICAgICBib2R5U3RhcnQ6IGN1cnJlbnRPZmZzZXQsXG4gICAgICAgICAgICBjbGFzc0lkOiBjbGFzc0lkLFxuICAgICAgICAgICAgY29kZXN0cmVhbUluZGV4OiBjb2Rlc3RyZWFtSW5kZXgsXG4gICAgICAgICAgICBtZXNzYWdlT2Zmc2V0RnJvbURhdGFiaW5TdGFydDogbWVzc2FnZU9mZnNldEZyb21EYXRhYmluU3RhcnQsXG4gICAgICAgICAgICBtZXNzYWdlQm9keUxlbmd0aDogbWVzc2FnZUJvZHlMZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGlmIChoYXNBdXhWYmFzKSB7XG4gICAgICAgICAgICByZXN1bHQuYXV4ID0gYXV4O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyQ2xvc3VyZShkYXRhLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIG1zYiA9IGRhdGFbb2Zmc2V0XSAqIE1hdGgucG93KDIsIDI0KTsgLy8gQXZvaWQgbmVnYXRpdmUgcmVzdWx0IGR1ZSB0byBzaWduZWQgY2FsY3VsYXRpb25cbiAgICAgICAgdmFyIGJ5dGUyID0gZGF0YVtvZmZzZXQgKyAxXSA8PCAxNjtcbiAgICAgICAgdmFyIGJ5dGUxID0gZGF0YVtvZmZzZXQgKyAyXSA8PCA4O1xuICAgICAgICB2YXIgbHNiID0gZGF0YVtvZmZzZXQgKyAzXTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBtc2IgKyBieXRlMiArIGJ5dGUxICsgbHNiO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2Q2xvc3VyZShkYXRhLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIG1zYiA9IGRhdGFbb2Zmc2V0XSA8PCA4O1xuICAgICAgICB2YXIgbHNiID0gZGF0YVtvZmZzZXQgKyAxXTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBtc2IgKyBsc2I7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBqcGlwTWVzc2FnZUhlYWRlclBhcnNlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJvdG9jb2wvanBpcC1tZXNzYWdlLWhlYWRlci1wYXJzZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxuLy8gQ29udGFpbnMgZnVuY3Rpb25zIHRvIGRvIHdpdGggSlBJUCBjaGFubmVsXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBDaGFubmVsKFxuICAgIG1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsLCBzZXNzaW9uSGVscGVyLCBqcGlwRmFjdG9yeSkge1xuICAgIFxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgY2hhbm5lbElkID0gbnVsbDsgLy8gQ2hhbm5lbCBJRFxuICAgIHZhciByZXF1ZXN0SWQgPSAwOyAvLyBSZXF1ZXN0IElEXG4gICAgdmFyIHJlcXVlc3RzV2FpdGluZ0ZvckNoYW5uZWxDcmVhdGlvbiA9IFtdOyAvLyBSZXF1ZXN0cyB3YWl0aW5nIGZvciBjaGFubmVsIGNyZWF0aW9uXG4gICAgdmFyIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlID0gW107IC8vIFJlcXVlc3RzIHdhaXRpbmcgZm9yIHJlc3BvbnNlXG4gICAgdmFyIGlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QgPSBmYWxzZTsgLy8gSXMgaXQgZGVkaWNhdGVkIGZvciBhIG1vdmFibGUgcmVxdWVzdFxuICAgIFxuICAgIC8vIFJlcXVlc3QgZGF0YVxuICAgIHRoaXMucmVxdWVzdERhdGEgPSBmdW5jdGlvbiByZXF1ZXN0RGF0YShcbiAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgICBmYWlsdXJlQ2FsbGJhY2ssXG4gICAgICAgIG51bVF1YWxpdHlMYXllcnMpIHtcbiAgICAgICAgXG4gICAgICAgIC8vIFRocm93IGV4Y2VwdGlvbiBpZiB0b28gY2hhbm5lbCBoYXMgdG9vIG1hbnkgY3VycmVudCByZXF1ZXN0c1xuICAgICAgICBpZiAoIWlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gY2hlY2sgaWYgdGhlcmUgYXJlIHRvbyBtYW55IGNvbmN1cnJlbnQgcmVxdWVzdHNcbiAgICAgICAgICAgIC8vIGlmIGNoYW5uZWwgd2FzIGRlZGljYXRlZCBmb3IgbW92YWJsZSByZXF1ZXN0LiBUaGUgcmVhc29uIGlzXG4gICAgICAgICAgICAvLyB0aGF0IGFueSByZXF1ZXN0IGluIGRlZGljYXRlZCBjaGFubmVsIGNhbmNlbCB0aGUgcHJldmlvdXMgb25lLlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYWxsV2FpdGluZ1JlcXVlc3RzID0gZ2V0QWxsUXVldWVkUmVxdWVzdENvdW50KCk7IC8vIEdldCBudW1iZXIgb2Ygd2FpdGluZyByZXF1ZXN0cywgYm90aCBmb3IgcmVzcG9uc2UgYW5kIGNoYW5uZWwgY3JlYXRpb25cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGFsbFdhaXRpbmdSZXF1ZXN0cyA+PSBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnQ2hhbm5lbCBoYXMgdG9vIG1hbnkgcmVxdWVzdHMgbm90IHJlc3BvbmRlZCB5ZXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE90aGVyd2lzZSBjcmVhdGUgdGhlIHJlcXVlc3RcbiAgICAgICAgdmFyIHVybCA9IGNyZWF0ZVJlcXVlc3RVcmwoY29kZXN0cmVhbVBhcnRQYXJhbXMsIG51bVF1YWxpdHlMYXllcnMpO1xuICAgICAgICB2YXIgcmVxdWVzdCA9IGpwaXBGYWN0b3J5LmNyZWF0ZVJlcXVlc3QoXG4gICAgICAgICAgICBzZXNzaW9uSGVscGVyLFxuICAgICAgICAgICAgc2VsZixcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFN0YXJ0IHJlcXVlc3QgaWYgb25seSBvbmVcbiAgICAgICAgLy8gZWxzZSBpZiBwcmlvcml0eSByZWxlYXNlIGFsbCByZXF1ZXN0c1xuICAgICAgICAvLyBlbHNlIHB1c2ggdG8gcXVldWVcbiAgICAgICAgaWYgKGNoYW5uZWxJZCAhPT0gbnVsbCB8fCByZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlLnB1c2gocmVxdWVzdCk7XG4gICAgICAgICAgICByZXF1ZXN0LnN0YXJ0UmVxdWVzdCgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIC8vIFRob3NlIHJlcXVlc3RzIGNhbmNlbCBhbGwgcHJldmlvdXMgcmVxdWVzdHMgaW4gY2hhbm5lbCwgc28gbm9cbiAgICAgICAgICAgIC8vIG5lZWQgdG8gbG9nIG9sZCByZXF1ZXN0c1xuICAgICAgICAgICAgcmVxdWVzdHNXYWl0aW5nRm9yQ2hhbm5lbENyZWF0aW9uID0gW3JlcXVlc3RdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVxdWVzdHNXYWl0aW5nRm9yQ2hhbm5lbENyZWF0aW9uLnB1c2gocmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXF1ZXN0O1xuICAgIH07XG4gICAgXG4gICAgLy8gU2VuZCBtaW5pbWFsIHJlcXVlc3QgZm9yIGZpcnN0IHJlcXVlc3Qgb3Iga2VlcCBhbGl2ZVxuICAgIHRoaXMuc2VuZE1pbmltYWxSZXF1ZXN0ID0gZnVuY3Rpb24gc2VuZE1pbmltYWxSZXF1ZXN0KGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIElmIG5vIGNoYW5uZWwgYW5kIHJlcXVlc3RzIHdhaXRpbmcgdGhyb3cgZXhjZXB0aW9uXG4gICAgICAgIGlmIChjaGFubmVsSWQgPT09IG51bGwgJiYgcmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ01pbmltYWwgcmVxdWVzdHMgc2hvdWxkIGJlIHVzZWQgZm9yIGZpcnN0IHJlcXVlc3Qgb3Iga2VlcCAnICtcbiAgICAgICAgICAgICAgICAnYWxpdmUgbWVzc2FnZS4gS2VlcCBhbGl2ZSByZXF1aXJlcyBhbiBhbHJlYWR5IGluaXRpYWxpemVkICcgK1xuICAgICAgICAgICAgICAgICdjaGFubmVsLCBhbmQgZmlyc3QgcmVxdWVzdCByZXF1aXJlcyB0byBub3QgaGF2ZSBhbnkgJyArXG4gICAgICAgICAgICAgICAgJ3ByZXZpb3VzIHJlcXVlc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gT3RoZXJ3aXNlIGNyZWF0ZSBhbmQgc3RhcnQgbWluaW1hbCByZXF1ZXN0XG4gICAgICAgIHZhciB1cmwgPSBjcmVhdGVNaW5pbWFsUmVxdWVzdFVybCgpO1xuICAgICAgICB2YXIgcmVxdWVzdCA9IGpwaXBGYWN0b3J5LmNyZWF0ZVJlcXVlc3QoXG4gICAgICAgICAgICBzZXNzaW9uSGVscGVyLCBzZWxmLCB1cmwsIGNhbGxiYWNrKTtcbiAgICAgICAgXG4gICAgICAgIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlLnB1c2gocmVxdWVzdCk7XG4gICAgICAgIHJlcXVlc3Quc3RhcnRSZXF1ZXN0KCk7XG4gICAgfTtcbiAgICBcbiAgICAvLyBJcyBkZWRpY2F0ZWQgZm9yIG1vdmFibGUgcmVxdWVzdD9cbiAgICB0aGlzLmdldElzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QgPVxuICAgICAgICBmdW5jdGlvbiBnZXRJc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0KCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3Q7XG4gICAgfTtcbiAgICBcbiAgICAvLyBEZWRpY2F0ZSBmb3IgbW92YWJsZSByZXF1ZXN0XG4gICAgdGhpcy5kZWRpY2F0ZUZvck1vdmFibGVSZXF1ZXN0ID0gZnVuY3Rpb24gZGVkaWNhdGVGb3JNb3ZhYmxlUmVxdWVzdCgpIHtcbiAgICAgICAgaWYgKGlzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDaGFubmVsIGFscmVhZHkgZGVkaWNhdGVkIGZvciBtb3ZhYmxlIHJlcXVlc3QnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNEZWRpY2F0ZWRGb3JNb3ZhYmxlUmVxdWVzdCA9IHRydWU7XG4gICAgfTtcbiAgICBcbiAgICAvLyBHZXQgY2hhbm5lbCBJRFxuICAgIHRoaXMuZ2V0Q2hhbm5lbElkID0gZnVuY3Rpb24gZ2V0Q2hhbm5lbElkKCkge1xuICAgICAgICByZXR1cm4gY2hhbm5lbElkO1xuICAgIH07XG4gICAgXG4gICAgLy8gU2V0IG5ldyBjaGFubmVsIElEXG4gICAgdGhpcy5zZXRDaGFubmVsSWQgPSBmdW5jdGlvbiBzZXRDaGFubmVsSWQobmV3Q2hhbm5lbElkKSB7XG4gICAgICAgIGlmIChuZXdDaGFubmVsSWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY2hhbm5lbElkID0gbmV3Q2hhbm5lbElkO1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlcXVlc3RzVG9TZW5kID0gcmVxdWVzdHNXYWl0aW5nRm9yQ2hhbm5lbENyZWF0aW9uO1xuICAgICAgICByZXF1ZXN0c1dhaXRpbmdGb3JDaGFubmVsQ3JlYXRpb24gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWVzdHNUb1NlbmQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlLnB1c2gocmVxdWVzdHNUb1NlbmRbaV0pO1xuICAgICAgICAgICAgcmVxdWVzdHNUb1NlbmRbaV0uc3RhcnRSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIFdoYXQncyB0aGUgbmV4dCByZXF1ZXN0IElEXG4gICAgdGhpcy5uZXh0UmVxdWVzdElkID0gZnVuY3Rpb24gbmV4dFJlcXVlc3RJZCgpIHtcbiAgICAgICAgcmV0dXJuICsrcmVxdWVzdElkO1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IHJlcXVlc3RzIHdhaXRpbmcgZm9yIHJlc3BvbnNlXG4gICAgdGhpcy5nZXRSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZSA9XG4gICAgICAgIGZ1bmN0aW9uIGdldFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlKCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlO1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IGNvdW50IG9mIGFsbCBxdWV1ZWQgcmVxdWVzdHNcbiAgICB0aGlzLmdldEFsbFF1ZXVlZFJlcXVlc3RDb3VudCA9IGdldEFsbFF1ZXVlZFJlcXVlc3RDb3VudDtcbiAgICBcbiAgICAvLyBFbmQgcmVxdWVzdFxuICAgIHRoaXMucmVxdWVzdEVuZGVkID0gZnVuY3Rpb24gcmVxdWVzdEVuZGVkKGFqYXhSZXNwb25zZSwgcmVxdWVzdCkge1xuICAgICAgICB2YXIgcmVxdWVzdHMgPSByZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZTtcbiAgICAgICAgdmFyIGlzRm91bmQgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXF1ZXN0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHJlcXVlc3RzW2ldID09PSByZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdHNbaV0gPSByZXF1ZXN0c1tyZXF1ZXN0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0cy5sZW5ndGggLT0gMTtcbiAgICAgICAgICAgICAgICBpc0ZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFpc0ZvdW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnY2hhbm5lbC5yZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZSBpbmNvbnNpc3RlbmN5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHNlc3Npb25IZWxwZXIucmVxdWVzdEVuZGVkKGFqYXhSZXNwb25zZSwgc2VsZik7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2hhbm5lbElkID09PSBudWxsICYmIHJlcXVlc3RzV2FpdGluZ0ZvckNoYW5uZWxDcmVhdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBJZiBub3Qgc3VjY2VlZGVkIHRvIGNyZWF0ZSBhIGNoYW5uZWwgSUQgeWV0LFxuICAgICAgICAgICAgLy8gcGVyZm9ybSBhbiBhZGRpdGlvbmFsIHJlcXVlc3RcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG5leHRSZXF1ZXN0ID0gcmVxdWVzdHNXYWl0aW5nRm9yQ2hhbm5lbENyZWF0aW9uLnNoaWZ0KCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlLnB1c2gobmV4dFJlcXVlc3QpO1xuICAgICAgICAgICAgbmV4dFJlcXVlc3Quc3RhcnRSZXF1ZXN0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIEFyZSBhbGwgdGhlIHJlcXVlc3RzIGRvbmU/XG4gICAgdGhpcy5pc0FsbE9sZFJlcXVlc3RzRW5kZWQgPSBmdW5jdGlvbiBpc0FsbE9sZFJlcXVlc3RzRW5kZWQocHJpb3JUb0lkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChyZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZVtpXS5sYXN0UmVxdWVzdElkIDw9IHByaW9yVG9JZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBcbiAgICAvLyBIb3cgbWFueSByZXF1ZXN0cyBhcmUgaW4gcXVldWVkXG4gICAgZnVuY3Rpb24gZ2V0QWxsUXVldWVkUmVxdWVzdENvdW50KCkge1xuICAgICAgICB2YXIgYWxsV2FpdGluZ1JlcXVlc3RzID1cbiAgICAgICAgICAgIHJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlLmxlbmd0aCArXG4gICAgICAgICAgICByZXF1ZXN0c1dhaXRpbmdGb3JDaGFubmVsQ3JlYXRpb24ubGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFsbFdhaXRpbmdSZXF1ZXN0cztcbiAgICB9XG4gICAgXG4gICAgLy8gQ3JlYXRlIG1pbmltYWwgcmVxdWVzdFxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1pbmltYWxSZXF1ZXN0VXJsKGFsbG93U3RvcFByZXZpb3VzUmVxdWVzdHNJbkNoYW5uZWwpIHtcbiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBzZXNzaW9uSGVscGVyLmdldERhdGFSZXF1ZXN0VXJsKCk7XG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHNlc3Npb25IZWxwZXIuZ2V0VGFyZ2V0SWQoKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0YXJnZXRJZCAhPT0gJzAnKSB7XG4gICAgICAgICAgICByZXF1ZXN0VXJsICs9ICcmdGlkPScgKyB0YXJnZXRJZDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGFscmVhZHlTZW50TWVzc2FnZXNPbkNoYW5uZWwgPSBjaGFubmVsSWQgIT09IG51bGw7XG4gICAgICAgIFxuICAgICAgICBpZiAoYWxyZWFkeVNlbnRNZXNzYWdlc09uQ2hhbm5lbCkge1xuICAgICAgICAgICAgdmFyIGlzU3RvcFByZXZpb3VzID1cbiAgICAgICAgICAgICAgICBpc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0ICYmXG4gICAgICAgICAgICAgICAgYWxsb3dTdG9wUHJldmlvdXNSZXF1ZXN0c0luQ2hhbm5lbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGlzU3RvcFByZXZpb3VzKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdFVybCArPSAnJndhaXQ9bm8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0VXJsICs9ICcmd2FpdD15ZXMnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVxdWVzdFVybDtcbiAgICB9XG4gICAgICAgIFxuICAgIC8vIENyZWF0ZSByZXF1ZXN0IFVSTCBnaXZlbiBwYXJhbWV0ZXJzXG4gICAgZnVuY3Rpb24gY3JlYXRlUmVxdWVzdFVybChjb2Rlc3RyZWFtUGFydFBhcmFtcywgbnVtUXVhbGl0eUxheWVycykge1xuICAgICAgICB2YXIgcmVxdWVzdFVybCA9IGNyZWF0ZU1pbmltYWxSZXF1ZXN0VXJsKFxuICAgICAgICAgICAgLyphbGxvd1N0b3BQcmV2aW91c1JlcXVlc3RzSW5DaGFubmVsPSovdHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgY29kZXN0cmVhbVN0cnVjdHVyZSA9IHNlc3Npb25IZWxwZXIuZ2V0Q29kZXN0cmVhbVN0cnVjdHVyZSgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGZyYW1lV2lkdGggPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldExldmVsV2lkdGgoXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5sZXZlbCk7XG4gICAgICAgIHZhciBmcmFtZUhlaWdodCA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TGV2ZWxIZWlnaHQoXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5sZXZlbCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVnaW9uV2lkdGggPVxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubWF4WEV4Y2x1c2l2ZSAtIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pblg7XG4gICAgICAgIHZhciByZWdpb25IZWlnaHQgPVxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubWF4WUV4Y2x1c2l2ZSAtIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pblk7XG4gICAgICAgIFxuICAgICAgICByZXF1ZXN0VXJsICs9XG4gICAgICAgICAgICAnJmZzaXo9JyArIGZyYW1lV2lkdGggKyAnLCcgKyBmcmFtZUhlaWdodCArICcsY2xvc2VzdCcgK1xuICAgICAgICAgICAgJyZyc2l6PScgKyByZWdpb25XaWR0aCArICcsJyArIHJlZ2lvbkhlaWdodCArXG4gICAgICAgICAgICAnJnJvZmY9JyArIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pblggKyAnLCcgKyBjb2Rlc3RyZWFtUGFydFBhcmFtcy5taW5ZO1xuICAgICAgICAgICAgXG4gICAgICAgIGlmIChudW1RdWFsaXR5TGF5ZXJzICE9PSAnbWF4Jykge1xuICAgICAgICAgICAgcmVxdWVzdFVybCArPSAnJmxheWVycz0nICsgbnVtUXVhbGl0eUxheWVycztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RVcmw7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJvdG9jb2wvanBpcC1jaGFubmVsLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbi8vIENyZWF0ZSBjb2Rlc3RyZWFtIG9yIGhlYWRlciBjb2Rlc3RyZWFtXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBDb2Rlc3RyZWFtUmVjb25zdHJ1Y3RvcihcbiAgICBkYXRhYmluc1NhdmVyLFxuICAgIGhlYWRlck1vZGlmaWVyLFxuICAgIHF1YWxpdHlMYXllcnNDYWNoZSkge1xuICAgICAgICBcbiAgICB2YXIgZHVtbXlCdWZmZXJGb3JMZW5ndGhDYWxjdWxhdGlvbiA9IHsgaXNEdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uOiB0cnVlIH07IC8vIFdoYXQgaXMgdGhpcz9cbiAgICBcbiAgICAvLyBDcmVhdGUgY29kZXN0cmVhbVxuICAgIHRoaXMuY3JlYXRlQ29kZXN0cmVhbSA9IGZ1bmN0aW9uIGNyZWF0ZUNvZGVzdHJlYW0oXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICBtaW5RdWFsaXR5LFxuICAgICAgICBtYXhRdWFsaXR5KSB7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY3JlYXRlQ29kZXN0cmVhbUludGVybmFsKGNvZGVzdHJlYW1QYXJ0LCBtaW5RdWFsaXR5LCBtYXhRdWFsaXR5KTtcbiAgICB9O1xuICAgIFxuICAgIC8vIENyZWF0ZSBoZWFkZXJzIGNvZGVzdHJlYW1cbiAgICB0aGlzLmNyZWF0ZUhlYWRlcnNDb2Rlc3RyZWFtID0gZnVuY3Rpb24gY3JlYXRlSGVhZGVyc0NvZGVzdHJlYW0oY29kZXN0cmVhbVBhcnQpIHtcbiAgICAgICAgdmFyIGR1bW15UXVhbGl0eSA9IDE7IC8vIFdoYXQgaXMgdGhpcz9cbiAgICAgICAgdmFyIGlzT25seUhlYWRlcnMgPSB0cnVlO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ29kZXN0cmVhbUludGVybmFsKFxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnQsIGR1bW15UXVhbGl0eSwgZHVtbXlRdWFsaXR5LCBpc09ubHlIZWFkZXJzKTtcbiAgICB9O1xuICAgIFxuICAgIC8vIENyZWF0ZSBjb2Rlc3RyZWFtIHNrZWxldG9uXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29kZXN0cmVhbUludGVybmFsKFxuICAgICAgICBjb2Rlc3RyZWFtUGFydCxcbiAgICAgICAgbWluUXVhbGl0eSxcbiAgICAgICAgbWF4UXVhbGl0eSxcbiAgICAgICAgaXNPbmx5SGVhZGVyc1dpdGhvdXRCaXRzdHJlYW0pIHtcblxuICAgICAgICAvLyBIb3cgbG9uZyBzaG91bGQgdGhlIGNvZGVzdHJlYW0gYmVcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRMZW5ndGggPSBjcmVhdGVDb2Rlc3RyZWFtT3JDYWxjdWxhdGVMZW5ndGgoXG4gICAgICAgICAgICBkdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uLFxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnQsXG4gICAgICAgICAgICBtaW5RdWFsaXR5LFxuICAgICAgICAgICAgbWF4UXVhbGl0eSxcbiAgICAgICAgICAgIGlzT25seUhlYWRlcnNXaXRob3V0Qml0c3RyZWFtKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjYWxjdWxhdGVkTGVuZ3RoID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTWFrZSBhcnJheSBvZiA4MGJpdCB1bnNpZ25lZCBpbnRlZ2VycywgY2hlY2sgYWN0dWFsIGFuZCBjYWxjdWxhdGVkIGFyZSBzYW1lXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgVWludDhBcnJheShjYWxjdWxhdGVkTGVuZ3RoKTtcbiAgICAgICAgdmFyIGFjdHVhbExlbmd0aCA9IGNyZWF0ZUNvZGVzdHJlYW1PckNhbGN1bGF0ZUxlbmd0aChcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgbWluUXVhbGl0eSxcbiAgICAgICAgICAgIG1heFF1YWxpdHksXG4gICAgICAgICAgICBpc09ubHlIZWFkZXJzV2l0aG91dEJpdHN0cmVhbSk7XG5cbiAgICAgICAgaWYgKGFjdHVhbExlbmd0aCA9PT0gY2FsY3VsYXRlZExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIGlmIChhY3R1YWxMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGFjdHVhbCAhPSBjYWxjdWFsYXRlZCB0aHJvdyBleGNlcHRpb25cbiAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAnSnBpcENvZGVzdHJlYW1SZWNvbnN0cnVjdG9yOiBVbm1hdGNoZWQgYWN0dWFsTGVuZ3RoICcgKyBhY3R1YWxMZW5ndGggK1xuICAgICAgICAgICAgJyBhbmQgY2FsY3VsYXRlZExlbmd0aCAnICsgY2FsY3VsYXRlZExlbmd0aCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29kZXN0cmVhbU9yQ2FsY3VsYXRlTGVuZ3RoKFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICBtaW5RdWFsaXR5LFxuICAgICAgICBtYXhRdWFsaXR5LFxuICAgICAgICBpc09ubHlIZWFkZXJzV2l0aG91dEJpdHN0cmVhbSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBjcmVhdGVNYWluSGVhZGVyKHJlc3VsdCwgY29kZXN0cmVhbVBhcnQubGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGN1cnJlbnRPZmZzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZUlkVG9Xcml0ZSA9IDA7XG4gICAgICAgIHZhciB0aWxlSXRlcmF0b3IgPSBjb2Rlc3RyZWFtUGFydC5nZXRUaWxlSXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKHRpbGVJdGVyYXRvci50cnlBZHZhbmNlKCkpIHtcbiAgICAgICAgICAgIHZhciB0aWxlSWRPcmlnaW5hbCA9IHRpbGVJdGVyYXRvci50aWxlSW5kZXg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0aWxlQnl0ZXNDb3BpZWQgPSBjcmVhdGVUaWxlKFxuICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0LFxuICAgICAgICAgICAgICAgIHRpbGVJZFRvV3JpdGUrKyxcbiAgICAgICAgICAgICAgICB0aWxlSXRlcmF0b3IsXG4gICAgICAgICAgICAgICAgY29kZXN0cmVhbVBhcnQubGV2ZWwsXG4gICAgICAgICAgICAgICAgbWluUXVhbGl0eSxcbiAgICAgICAgICAgICAgICBtYXhRdWFsaXR5LFxuICAgICAgICAgICAgICAgIGlzT25seUhlYWRlcnNXaXRob3V0Qml0c3RyZWFtKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQgKz0gdGlsZUJ5dGVzQ29waWVkO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aWxlQnl0ZXNDb3BpZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIG1hcmtlckJ5dGVzQ29waWVkID0gY29weUJ5dGVzKFxuICAgICAgICAgICAgcmVzdWx0LCBjdXJyZW50T2Zmc2V0LCBqR2xvYmFscy5qMmtNYXJrZXJzLkVuZE9mQ29kZXN0cmVhbSk7XG4gICAgICAgIGN1cnJlbnRPZmZzZXQgKz0gbWFya2VyQnl0ZXNDb3BpZWQ7XG5cbiAgICAgICAgaGVhZGVyTW9kaWZpZXIubW9kaWZ5SW1hZ2VTaXplKHJlc3VsdCwgY29kZXN0cmVhbVBhcnQuZnVsbFRpbGVzU2l6ZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRPZmZzZXQ7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1haW5IZWFkZXIocmVzdWx0LCBsZXZlbCkge1xuICAgICAgICBpZiAoZGF0YWJpbnNTYXZlci5nZXRJc0pwaXBUaWxlUGFydFN0cmVhbSgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdyZWNvbnN0cnVjdGlvbiBvZiBjb2Rlc3RyZWFtIGZyb20gSlBUIChKcGlwIFRpbGUtcGFydCkgc3RyZWFtJywgJ0EuMy40Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBtYWluSGVhZGVyID0gZGF0YWJpbnNTYXZlci5nZXRNYWluSGVhZGVyRGF0YWJpbigpO1xuICAgICAgICB2YXIgY3VycmVudE9mZnNldCA9IG1haW5IZWFkZXIuY29weUJ5dGVzKHJlc3VsdCwgLypzdGFydE9mZnNldD0qLzAsIHtcbiAgICAgICAgICAgIGZvcmNlQ29weUFsbFJhbmdlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjdXJyZW50T2Zmc2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGJ5dGVzQWRkZWQgPSBoZWFkZXJNb2RpZmllci5tb2RpZnlNYWluT3JUaWxlSGVhZGVyKFxuICAgICAgICAgICAgcmVzdWx0LCBtYWluSGVhZGVyLCAvKm9mZnNldD0qLzAsIGxldmVsKTtcbiAgICAgICAgXG4gICAgICAgIGN1cnJlbnRPZmZzZXQgKz0gYnl0ZXNBZGRlZDtcbiAgICAgICAgXG4gICAgICAgIGJ5dGVzQWRkZWQgPSBhZGRNYW1hemF2Q29tbWVudChyZXN1bHQsIGN1cnJlbnRPZmZzZXQpO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQWRkZWQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY3VycmVudE9mZnNldDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlVGlsZShcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBjdXJyZW50T2Zmc2V0LFxuICAgICAgICB0aWxlSWRUb1dyaXRlLFxuICAgICAgICB0aWxlSXRlcmF0b3IsXG4gICAgICAgIGxldmVsLFxuICAgICAgICBtaW5OdW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICBtYXhOdW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICBpc09ubHlIZWFkZXJzV2l0aG91dEJpdHN0cmVhbSkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVJZE9yaWdpbmFsID0gdGlsZUl0ZXJhdG9yLnRpbGVJbmRleDtcblxuICAgICAgICB2YXIgc3RhcnRUaWxlT2Zmc2V0ID0gY3VycmVudE9mZnNldDtcbiAgICAgICAgdmFyIHRpbGVIZWFkZXJEYXRhYmluID0gZGF0YWJpbnNTYXZlci5nZXRUaWxlSGVhZGVyRGF0YWJpbihcbiAgICAgICAgICAgIHRpbGVJZE9yaWdpbmFsKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlSGVhZGVyT2Zmc2V0cyA9IGNyZWF0ZVRpbGVIZWFkZXJBbmRHZXRPZmZzZXRzKFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgY3VycmVudE9mZnNldCxcbiAgICAgICAgICAgIHRpbGVIZWFkZXJEYXRhYmluLFxuICAgICAgICAgICAgdGlsZUlkVG9Xcml0ZSxcbiAgICAgICAgICAgIGxldmVsKTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aWxlSGVhZGVyT2Zmc2V0cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICBjdXJyZW50T2Zmc2V0ID0gdGlsZUhlYWRlck9mZnNldHMuZW5kVGlsZUhlYWRlck9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIGlmICghaXNPbmx5SGVhZGVyc1dpdGhvdXRCaXRzdHJlYW0pIHtcbiAgICAgICAgICAgIHZhciB0aWxlQnl0ZXNDb3BpZWQgPSBjcmVhdGVUaWxlQml0c3RyZWFtKFxuICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0LFxuICAgICAgICAgICAgICAgIHRpbGVJdGVyYXRvcixcbiAgICAgICAgICAgICAgICBtaW5OdW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICAgICAgICAgIG1heE51bVF1YWxpdHlMYXllcnMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY3VycmVudE9mZnNldCArPSB0aWxlQnl0ZXNDb3BpZWQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0aWxlQnl0ZXNDb3BpZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbmRUaWxlT2Zmc2V0ID0gY3VycmVudE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIHZhciBoZWFkZXJBbmREYXRhTGVuZ3RoID1cbiAgICAgICAgICAgIGVuZFRpbGVPZmZzZXQgLSB0aWxlSGVhZGVyT2Zmc2V0cy5zdGFydE9mVGlsZUhlYWRlck9mZnNldDtcblxuICAgICAgICBoZWFkZXJNb2RpZmllci5tb2RpZnlJbnQzMihcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIHRpbGVIZWFkZXJPZmZzZXRzLmhlYWRlckFuZERhdGFMZW5ndGhQbGFjZWhvbGRlck9mZnNldCxcbiAgICAgICAgICAgIGhlYWRlckFuZERhdGFMZW5ndGgpO1xuXG4gICAgICAgIHZhciBieXRlc0NvcGllZCA9IGVuZFRpbGVPZmZzZXQgLSBzdGFydFRpbGVPZmZzZXQ7XG4gICAgICAgIHJldHVybiBieXRlc0NvcGllZDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlVGlsZUhlYWRlckFuZEdldE9mZnNldHMoXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgY3VycmVudE9mZnNldCxcbiAgICAgICAgdGlsZUhlYWRlckRhdGFiaW4sXG4gICAgICAgIHRpbGVJZFRvV3JpdGUsXG4gICAgICAgIGxldmVsKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgc3RhcnRPZlRpbGVIZWFkZXJPZmZzZXQgPSBjdXJyZW50T2Zmc2V0O1xuICAgIFxuICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBjb3B5Qnl0ZXMoXG4gICAgICAgICAgICByZXN1bHQsIGN1cnJlbnRPZmZzZXQsIGpHbG9iYWxzLmoya01hcmtlcnMuU3RhcnRPZlRpbGUpO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQ29waWVkO1xuICAgICAgICBcbiAgICAgICAgLy8gQS40LjJcbiAgICAgICAgXG4gICAgICAgIHZhciBzdGFydE9mVGlsZVNlZ21lbnRMZW5ndGggPSBbMCwgMTBdOyAvLyBMc290XG4gICAgICAgIGJ5dGVzQ29waWVkID0gY29weUJ5dGVzKHJlc3VsdCwgY3VycmVudE9mZnNldCwgc3RhcnRPZlRpbGVTZWdtZW50TGVuZ3RoKTtcbiAgICAgICAgY3VycmVudE9mZnNldCArPSBieXRlc0NvcGllZDtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlSW5kZXggPSBbdGlsZUlkVG9Xcml0ZSA+Pj4gOCwgdGlsZUlkVG9Xcml0ZSAmIDB4RkZdOyAvLyBJc290XG4gICAgICAgIGJ5dGVzQ29waWVkID0gY29weUJ5dGVzKHJlc3VsdCwgY3VycmVudE9mZnNldCwgdGlsZUluZGV4KTtcbiAgICAgICAgY3VycmVudE9mZnNldCArPSBieXRlc0NvcGllZDtcbiAgICAgICAgXG4gICAgICAgIHZhciBoZWFkZXJBbmREYXRhTGVuZ3RoUGxhY2Vob2xkZXJPZmZzZXQgPSBjdXJyZW50T2Zmc2V0O1xuICAgICAgICB2YXIgaGVhZGVyQW5kRGF0YUxlbmd0aFBsYWNlaG9sZGVyID0gWzAsIDAsIDAsIDBdOyAvLyBQc290XG4gICAgICAgIGJ5dGVzQ29waWVkID0gY29weUJ5dGVzKHJlc3VsdCwgY3VycmVudE9mZnNldCwgaGVhZGVyQW5kRGF0YUxlbmd0aFBsYWNlaG9sZGVyKTtcbiAgICAgICAgY3VycmVudE9mZnNldCArPSBieXRlc0NvcGllZDtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlUGFydEluZGV4ID0gWzBdOyAvLyBUUHNvdFxuICAgICAgICBieXRlc0NvcGllZCA9IGNvcHlCeXRlcyhyZXN1bHQsIGN1cnJlbnRPZmZzZXQsIHRpbGVQYXJ0SW5kZXgpO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQ29waWVkO1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bWJlck9mVGlsZXBhcnRzID0gWzFdOyAvLyBUTnNvdFxuICAgICAgICBieXRlc0NvcGllZCA9IGNvcHlCeXRlcyhyZXN1bHQsIGN1cnJlbnRPZmZzZXQsIG51bWJlck9mVGlsZXBhcnRzKTtcbiAgICAgICAgY3VycmVudE9mZnNldCArPSBieXRlc0NvcGllZDtcbiAgICAgICAgXG4gICAgICAgIHZhciBhZnRlclN0YXJ0T2ZUaWxlU2VnbWVudE9mZnNldCA9IGN1cnJlbnRPZmZzZXQ7XG4gICAgICAgIGJ5dGVzQ29waWVkID0gdGlsZUhlYWRlckRhdGFiaW4uY29weUJ5dGVzKHJlc3VsdCwgY3VycmVudE9mZnNldCwge1xuICAgICAgICAgICAgZm9yY2VDb3B5QWxsUmFuZ2U6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQ29waWVkO1xuICAgICAgICBcbiAgICAgICAgaWYgKGJ5dGVzQ29waWVkID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBDYW4gY3JlYXRlIGVtcHR5IHRpbGVcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgb3B0aW9uYWxNYXJrZXIgPSBuZXcgQXJyYXkoMik7XG4gICAgICAgIHZhciBkYXRhYmluTGVuZ3RoID0gdGlsZUhlYWRlckRhdGFiaW4uZ2V0RGF0YWJpbkxlbmd0aElmS25vd24oKTtcbiAgICAgICAgdGlsZUhlYWRlckRhdGFiaW4uY29weUJ5dGVzKG9wdGlvbmFsTWFya2VyLCAwLCB7XG4gICAgICAgICAgICBkYXRhYmluU3RhcnRPZmZzZXQ6IGRhdGFiaW5MZW5ndGggLSAyXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdmFyIGlzRW5kZWRXaXRoU3RhcnRPZkRhdGFNYXJrZXIgPVxuICAgICAgICAgICAgb3B0aW9uYWxNYXJrZXJbMF0gPT09IGpHbG9iYWxzLmoya01hcmtlcnMuU3RhcnRPZkRhdGFbMF0gJiZcbiAgICAgICAgICAgIG9wdGlvbmFsTWFya2VyWzFdID09PSBqR2xvYmFscy5qMmtNYXJrZXJzLlN0YXJ0T2ZEYXRhWzFdO1xuICAgICAgICAgICAgXG4gICAgICAgIGlmICghaXNFbmRlZFdpdGhTdGFydE9mRGF0YU1hcmtlcikge1xuICAgICAgICAgICAgYnl0ZXNDb3BpZWQgPSBjb3B5Qnl0ZXMoXG4gICAgICAgICAgICAgICAgcmVzdWx0LCBjdXJyZW50T2Zmc2V0LCBqR2xvYmFscy5qMmtNYXJrZXJzLlN0YXJ0T2ZEYXRhKTtcbiAgICAgICAgICAgIGN1cnJlbnRPZmZzZXQgKz0gYnl0ZXNDb3BpZWQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlc0FkZGVkID0gaGVhZGVyTW9kaWZpZXIubW9kaWZ5TWFpbk9yVGlsZUhlYWRlcihcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIHRpbGVIZWFkZXJEYXRhYmluLFxuICAgICAgICAgICAgYWZ0ZXJTdGFydE9mVGlsZVNlZ21lbnRPZmZzZXQsXG4gICAgICAgICAgICBsZXZlbCk7XG4gICAgICAgIFxuICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQWRkZWQ7XG5cbiAgICAgICAgdmFyIG9mZnNldHMgPSB7XG4gICAgICAgICAgICBzdGFydE9mVGlsZUhlYWRlck9mZnNldDogc3RhcnRPZlRpbGVIZWFkZXJPZmZzZXQsXG4gICAgICAgICAgICBoZWFkZXJBbmREYXRhTGVuZ3RoUGxhY2Vob2xkZXJPZmZzZXQ6IGhlYWRlckFuZERhdGFMZW5ndGhQbGFjZWhvbGRlck9mZnNldCxcbiAgICAgICAgICAgIGVuZFRpbGVIZWFkZXJPZmZzZXQ6IGN1cnJlbnRPZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gb2Zmc2V0cztcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlVGlsZUJpdHN0cmVhbShcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBjdXJyZW50T2Zmc2V0LFxuICAgICAgICB0aWxlSXRlcmF0b3IsXG4gICAgICAgIG1pbk51bVF1YWxpdHlMYXllcnMsXG4gICAgICAgIG1heE51bVF1YWxpdHlMYXllcnMpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBudW1RdWFsaXR5TGF5ZXJzSW5UaWxlID1cbiAgICAgICAgICAgIHRpbGVJdGVyYXRvci50aWxlU3RydWN0dXJlLmdldE51bVF1YWxpdHlMYXllcnMoKTtcblxuICAgICAgICB2YXIgYWxsQnl0ZXNDb3BpZWQgPSAwO1xuICAgICAgICB2YXIgaGFzTW9yZVBhY2tldHM7XG4gICAgICAgIFxuICAgICAgICBpZiAobWluTnVtUXVhbGl0eUxheWVycyA9PT0gJ21heCcpIHtcbiAgICAgICAgICAgIG1pbk51bVF1YWxpdHlMYXllcnMgPSBudW1RdWFsaXR5TGF5ZXJzSW5UaWxlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcHJlY2luY3RJdGVyYXRvciA9IHRpbGVJdGVyYXRvci5jcmVhdGVQcmVjaW5jdEl0ZXJhdG9yKFxuICAgICAgICAgICAgLyppc0l0ZXJhdGVQcmVjaW5jdHNOb3RJbkNvZGVzdHJlYW1QYXJ0PSovdHJ1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgd2hpbGUgKHByZWNpbmN0SXRlcmF0b3IudHJ5QWR2YW5jZSgpKSB7XG4gICAgICAgICAgICB2YXIgZW1wdHlQYWNrZXRzVG9QdXNoID0gbnVtUXVhbGl0eUxheWVyc0luVGlsZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHByZWNpbmN0SXRlcmF0b3IuaXNJbkNvZGVzdHJlYW1QYXJ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluQ2xhc3NJbmRleCA9XG4gICAgICAgICAgICAgICAgICAgIHRpbGVJdGVyYXRvci50aWxlU3RydWN0dXJlLnByZWNpbmN0UG9zaXRpb25Ub0luQ2xhc3NJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVjaW5jdERhdGFiaW4gPSBkYXRhYmluc1NhdmVyLmdldFByZWNpbmN0RGF0YWJpbihcbiAgICAgICAgICAgICAgICAgICAgaW5DbGFzc0luZGV4KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcXVhbGl0eUxheWVyT2Zmc2V0ID0gcXVhbGl0eUxheWVyc0NhY2hlLmdldFF1YWxpdHlMYXllck9mZnNldChcbiAgICAgICAgICAgICAgICAgICAgcHJlY2luY3REYXRhYmluLFxuICAgICAgICAgICAgICAgICAgICBtYXhOdW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICBwcmVjaW5jdEl0ZXJhdG9yKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZXNUb0NvcHkgPSBxdWFsaXR5TGF5ZXJPZmZzZXQuZW5kT2Zmc2V0O1xuICAgICAgICAgICAgICAgIGVtcHR5UGFja2V0c1RvUHVzaCA9XG4gICAgICAgICAgICAgICAgICAgIG51bVF1YWxpdHlMYXllcnNJblRpbGUgLSBxdWFsaXR5TGF5ZXJPZmZzZXQubnVtUXVhbGl0eUxheWVycztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocXVhbGl0eUxheWVyT2Zmc2V0Lm51bVF1YWxpdHlMYXllcnMgPCBtaW5OdW1RdWFsaXR5TGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBwcmVjaW5jdERhdGFiaW4uY29weUJ5dGVzKHJlc3VsdCwgY3VycmVudE9mZnNldCwge1xuICAgICAgICAgICAgICAgICAgICBmb3JjZUNvcHlBbGxSYW5nZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoVG9Db3B5OiBieXRlc1RvQ29weVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXNDb3BpZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXNDb3BpZWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBlbXB0eVBhY2tldHNUb1B1c2ggPSBudW1RdWFsaXR5TGF5ZXJzSW5UaWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhbGxCeXRlc0NvcGllZCArPSBieXRlc0NvcGllZDtcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0ICs9IGJ5dGVzQ29waWVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5pc0R1bW15QnVmZmVyRm9yTGVuZ3RoQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVtcHR5UGFja2V0c1RvUHVzaDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtjdXJyZW50T2Zmc2V0KytdID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGxCeXRlc0NvcGllZCArPSBlbXB0eVBhY2tldHNUb1B1c2g7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhbGxCeXRlc0NvcGllZDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gYWRkTWFtYXphdkNvbW1lbnQocmVzdWx0LCBjdXJyZW50T2Zmc2V0KSB7XG4gICAgICAgIHZhciBzdGFydE9mZnNldCA9IGN1cnJlbnRPZmZzZXQ7XG4gICAgXG4gICAgICAgIHB1dEJ5dGUocmVzdWx0LCBjdXJyZW50T2Zmc2V0KyssIDB4RkYpO1xuICAgICAgICBwdXRCeXRlKHJlc3VsdCwgY3VycmVudE9mZnNldCsrLCAweDY0KTtcbiAgICAgICAgcHV0Qnl0ZShyZXN1bHQsIGN1cnJlbnRPZmZzZXQrKywgMHgwMCk7XG4gICAgICAgIHB1dEJ5dGUocmVzdWx0LCBjdXJyZW50T2Zmc2V0KyssIDB4MDkpO1xuICAgICAgICBwdXRCeXRlKHJlc3VsdCwgY3VycmVudE9mZnNldCsrLCA3NyAgKTtcbiAgICAgICAgcHV0Qnl0ZShyZXN1bHQsIGN1cnJlbnRPZmZzZXQrKywgOTcgICk7XG4gICAgICAgIHB1dEJ5dGUocmVzdWx0LCBjdXJyZW50T2Zmc2V0KyssIDEwOSApO1xuICAgICAgICBwdXRCeXRlKHJlc3VsdCwgY3VycmVudE9mZnNldCsrLCA5NyAgKTtcbiAgICAgICAgcHV0Qnl0ZShyZXN1bHQsIGN1cnJlbnRPZmZzZXQrKywgMTIyICk7XG4gICAgICAgIHB1dEJ5dGUocmVzdWx0LCBjdXJyZW50T2Zmc2V0KyssIDk3ICApO1xuICAgICAgICBwdXRCeXRlKHJlc3VsdCwgY3VycmVudE9mZnNldCsrLCAxMTggKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlc0FkZGVkID0gY3VycmVudE9mZnNldCAtIHN0YXJ0T2Zmc2V0O1xuICAgICAgICByZXR1cm4gYnl0ZXNBZGRlZDtcbiAgICB9XG4gICAgICAgIFxuICAgIGZ1bmN0aW9uIGNvcHlCeXRlcyhyZXN1bHQsIHJlc3VsdFN0YXJ0T2Zmc2V0LCBieXRlc1RvQ29weSkge1xuICAgICAgICBpZiAoIXJlc3VsdC5pc0R1bW15QnVmZmVyRm9yTGVuZ3RoQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXNUb0NvcHkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaSArIHJlc3VsdFN0YXJ0T2Zmc2V0XSA9IGJ5dGVzVG9Db3B5W2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYnl0ZXNUb0NvcHkubGVuZ3RoO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBwdXRCeXRlKHJlc3VsdCwgb2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXJlc3VsdC5pc0R1bW15QnVmZmVyRm9yTGVuZ3RoQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgIHJlc3VsdFtvZmZzZXRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy93cml0ZXJzL2pwaXAtY29kZXN0cmVhbS1yZWNvbnN0cnVjdG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbi8vIFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwQ29kZXN0cmVhbVN0cnVjdHVyZShcbiAgICBqcGlwU3RydWN0dXJlUGFyc2VyLFxuICAgIGpwaXBGYWN0b3J5LFxuICAgIHByb2dyZXNzaW9uT3JkZXIpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB2YXIgcGFyYW1zO1xuICAgIHZhciBzaXplc0NhbGN1bGF0b3I7XG4gICAgXG4gICAgdmFyIGRlZmF1bHRUaWxlU3RydWN0dXJlQnlFZGdlVHlwZTtcblxuICAgIHZhciBjYWNoZWRUaWxlU3RydWN0dXJlcyA9IFtdO1xuICAgIFxuICAgIC8vIEdldCBzaXplcyBwYXJhbWV0ZXJzXG4gICAgdGhpcy5nZXRTaXplc1BhcmFtcyA9IGZ1bmN0aW9uIGdldFNpemVzUGFyYW1zKCkge1xuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgIH07XG5cbiAgICAvLyBHZXQgbnVtYmVyIG9mIFggYW5kIFkgdGlsZXNcbiAgICB0aGlzLmdldE51bVRpbGVzWCA9IGZ1bmN0aW9uIGdldE51bVRpbGVzWCgpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBudW1UaWxlcyA9IHNpemVzQ2FsY3VsYXRvci5nZXROdW1UaWxlc1goKTtcbiAgICAgICAgcmV0dXJuIG51bVRpbGVzO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXROdW1UaWxlc1kgPSBmdW5jdGlvbiBnZXROdW1UaWxlc1koKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbnVtVGlsZXMgPSBzaXplc0NhbGN1bGF0b3IuZ2V0TnVtVGlsZXNZKCk7XG4gICAgICAgIHJldHVybiBudW1UaWxlcztcbiAgICB9O1xuXG4gICAgLy8gR2V0IG51bWJlciBvZiBjb21wb25lbnRzXG4gICAgdGhpcy5nZXROdW1Db21wb25lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIHJldHVybiBwYXJhbXMubnVtQ29tcG9uZW50cztcbiAgICB9O1xuICAgIFxuICAgIC8vIEdldCBpbWFnZSB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgdGhpcy5nZXRJbWFnZVdpZHRoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG5cbiAgICAgICAgdmFyIHNpemUgPSBzaXplc0NhbGN1bGF0b3IuZ2V0TGV2ZWxXaWR0aCgpO1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0SW1hZ2VIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcblxuICAgICAgICB2YXIgc2l6ZSA9IHNpemVzQ2FsY3VsYXRvci5nZXRMZXZlbEhlaWdodCgpO1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFxuICAgIC8vIEdldCBsZXZlbCB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgdGhpcy5nZXRMZXZlbFdpZHRoID0gZnVuY3Rpb24obGV2ZWwpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcblxuICAgICAgICB2YXIgc2l6ZSA9IHNpemVzQ2FsY3VsYXRvci5nZXRMZXZlbFdpZHRoKGxldmVsKTtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldExldmVsSGVpZ2h0ID0gZnVuY3Rpb24obGV2ZWwpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcblxuICAgICAgICB2YXIgc2l6ZSA9IHNpemVzQ2FsY3VsYXRvci5nZXRMZXZlbEhlaWdodChsZXZlbCk7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IHRpbGUgd2lkdGggYW5kIGhlaWdodFxuICAgIHRoaXMuZ2V0VGlsZVdpZHRoID0gZnVuY3Rpb24obGV2ZWwpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcblxuICAgICAgICB2YXIgc2l6ZSA9IHNpemVzQ2FsY3VsYXRvci5nZXRUaWxlV2lkdGgobGV2ZWwpO1xuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0VGlsZUhlaWdodCA9IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG5cbiAgICAgICAgdmFyIHNpemUgPSBzaXplc0NhbGN1bGF0b3IuZ2V0VGlsZUhlaWdodChsZXZlbCk7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IGZpcnN0IHRpbGUgb2Zmc2V0IFggYW5kIFlcbiAgICB0aGlzLmdldEZpcnN0VGlsZU9mZnNldFggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcblxuICAgICAgICB2YXIgb2Zmc2V0ID0gc2l6ZXNDYWxjdWxhdG9yLmdldEZpcnN0VGlsZU9mZnNldFgoKTtcbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0Rmlyc3RUaWxlT2Zmc2V0WSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuXG4gICAgICAgIHZhciBvZmZzZXQgPSBzaXplc0NhbGN1bGF0b3IuZ2V0Rmlyc3RUaWxlT2Zmc2V0WSgpO1xuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IGxlZnQgb3IgdG9wIHRpbGU/XG4gICAgdGhpcy5nZXRUaWxlTGVmdCA9IGZ1bmN0aW9uIGdldFRpbGVMZWZ0KFxuICAgICAgICB0aWxlSW5kZXgsIGxldmVsKSB7XG4gICAgICAgIFxuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVYID0gdGlsZUluZGV4ICUgc2l6ZXNDYWxjdWxhdG9yLmdldE51bVRpbGVzWCgpO1xuICAgICAgICBpZiAodGlsZVggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZUxlZnQgPVxuICAgICAgICAgICAgKHRpbGVYIC0gMSkgKiBzaXplc0NhbGN1bGF0b3IuZ2V0VGlsZVdpZHRoKGxldmVsKSArXG4gICAgICAgICAgICBzaXplc0NhbGN1bGF0b3IuZ2V0Rmlyc3RUaWxlV2lkdGgobGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRpbGVMZWZ0O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRUaWxlVG9wID0gZnVuY3Rpb24gZ2V0VGlsZVRvcCh0aWxlSW5kZXgsIGxldmVsKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZVkgPSBNYXRoLmZsb29yKHRpbGVJbmRleCAvIHNpemVzQ2FsY3VsYXRvci5nZXROdW1UaWxlc1goKSk7XG4gICAgICAgIGlmICh0aWxlWSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlVG9wID1cbiAgICAgICAgICAgICh0aWxlWSAtIDEpICogc2l6ZXNDYWxjdWxhdG9yLmdldFRpbGVIZWlnaHQobGV2ZWwpICtcbiAgICAgICAgICAgIHNpemVzQ2FsY3VsYXRvci5nZXRGaXJzdFRpbGVIZWlnaHQobGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRpbGVUb3A7XG4gICAgfTtcbiAgICBcbiAgICAvLyBHZXQgZGVmYXVsdCB0aWxlIHN0cnVjdHVyZT9cbiAgICB0aGlzLmdldERlZmF1bHRUaWxlU3RydWN0dXJlID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFRpbGVTdHJ1Y3R1cmUoKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBnZXREZWZhdWx0VGlsZVN0cnVjdHVyZUludGVybmFsKHtcbiAgICAgICAgICAgIGhvcml6b250YWxFZGdlVHlwZTogc2l6ZXNDYWxjdWxhdG9yLkVER0VfVFlQRV9OT19FREdFLFxuICAgICAgICAgICAgdmVydGljYWxFZGdlVHlwZTogc2l6ZXNDYWxjdWxhdG9yLkVER0VfVFlQRV9OT19FREdFXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IHRpbGUgc3RydWN0dXJlXG4gICAgdGhpcy5nZXRUaWxlU3RydWN0dXJlID0gZ2V0VGlsZVN0cnVjdHVyZTtcblxuICAgIC8vIFRpbGUgcG9zaXRpb24gdG8gaW4gY2xhc3MgaW5kZXg/XG4gICAgdGhpcy50aWxlUG9zaXRpb25Ub0luQ2xhc3NJbmRleCA9IGZ1bmN0aW9uKHRpbGVQb3NpdGlvbikge1xuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuICAgICAgICB2YXIgdGlsZXNYID0gc2l6ZXNDYWxjdWxhdG9yLmdldE51bVRpbGVzWCgpO1xuICAgICAgICB2YXIgdGlsZXNZID0gc2l6ZXNDYWxjdWxhdG9yLmdldE51bVRpbGVzWSgpO1xuICAgICAgICBcbiAgICAgICAgdmFsaWRhdGVBcmd1bWVudEluUmFuZ2UoJ3RpbGVQb3NpdGlvbi50aWxlWCcsIHRpbGVQb3NpdGlvbi50aWxlWCwgdGlsZXNYKTtcbiAgICAgICAgdmFsaWRhdGVBcmd1bWVudEluUmFuZ2UoJ3RpbGVQb3NpdGlvbi50aWxlWScsIHRpbGVQb3NpdGlvbi50aWxlWSwgdGlsZXNZKTtcblxuICAgICAgICB2YXIgaW5DbGFzc0luZGV4ID0gdGlsZVBvc2l0aW9uLnRpbGVYICsgdGlsZVBvc2l0aW9uLnRpbGVZICogdGlsZXNYO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGluQ2xhc3NJbmRleDtcbiAgICB9O1xuXG4gICAgLy8gVGlsZSBpbiBjbGFzcyBpbmRleCB0byBwb3NpdGlvbj9cbiAgICB0aGlzLnRpbGVJbkNsYXNzSW5kZXhUb1Bvc2l0aW9uID0gZnVuY3Rpb24oaW5DbGFzc0luZGV4KSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIHZhciB0aWxlc1ggPSBzaXplc0NhbGN1bGF0b3IuZ2V0TnVtVGlsZXNYKCk7XG4gICAgICAgIHZhciB0aWxlc1kgPSBzaXplc0NhbGN1bGF0b3IuZ2V0TnVtVGlsZXNZKCk7XG4gICAgICAgIHZhciBudW1UaWxlcyA9IHRpbGVzWCAqIHRpbGVzWTtcblxuICAgICAgICB2YWxpZGF0ZUFyZ3VtZW50SW5SYW5nZSgnaW5DbGFzc0luZGV4JywgaW5DbGFzc0luZGV4LCB0aWxlc1ggKiB0aWxlc1kpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVYID0gaW5DbGFzc0luZGV4ICUgdGlsZXNYO1xuICAgICAgICB2YXIgdGlsZVkgPSAoaW5DbGFzc0luZGV4IC0gdGlsZVgpIC8gdGlsZXNYO1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHRpbGVYOiB0aWxlWCxcbiAgICAgICAgICAgIHRpbGVZOiB0aWxlWVxuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBcbiAgICAvLyBHZXQgdGlsZXMgZnJvbSBwaXhlbHM/XG4gICAgdGhpcy5nZXRUaWxlc0Zyb21QaXhlbHMgPSBmdW5jdGlvbiBnZXRUaWxlc0Zyb21QaXhlbHMoXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zKSB7XG4gICAgICAgIFxuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuXG4gICAgICAgIHJldHVybiBzaXplc0NhbGN1bGF0b3IuZ2V0VGlsZXNGcm9tUGl4ZWxzKGNvZGVzdHJlYW1QYXJ0UGFyYW1zKTtcbiAgICB9O1xuXG4gICAgLy8gR2V0IHNpemUgb2YgdGlsZXNcbiAgICB0aGlzLmdldFNpemVPZlRpbGVzID0gZnVuY3Rpb24gZ2V0U2l6ZU9mVGlsZXModGlsZUJvdW5kcykge1xuICAgICAgICB2YWxpZGF0ZVBhcmFtcygpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHNpemUgPSBzaXplc0NhbGN1bGF0b3IuZ2V0U2l6ZU9mVGlsZXModGlsZUJvdW5kcyk7XG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gZ2V0VGlsZVN0cnVjdHVyZSh0aWxlSWQpIHtcbiAgICAgICAgdmFsaWRhdGVQYXJhbXMoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBtYXhUaWxlSWQgPVxuICAgICAgICAgICAgc2l6ZXNDYWxjdWxhdG9yLmdldE51bVRpbGVzWCgpICogc2l6ZXNDYWxjdWxhdG9yLmdldE51bVRpbGVzWSgpLSAxO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRpbGVJZCA8IDAgfHwgdGlsZUlkID4gbWF4VGlsZUlkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ3RpbGVJZCcsXG4gICAgICAgICAgICAgICAgdGlsZUlkLFxuICAgICAgICAgICAgICAgICdFeHBlY3RlZCB2YWx1ZSBiZXR3ZWVuIDAgYW5kICcgKyBtYXhUaWxlSWQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaXNFZGdlID0gc2l6ZXNDYWxjdWxhdG9yLmlzRWRnZVRpbGVJZCh0aWxlSWQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNhY2hlZFRpbGVTdHJ1Y3R1cmVzW3RpbGVJZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdmFyIHRpbGVQYXJhbXMgPSBqcGlwU3RydWN0dXJlUGFyc2VyLnBhcnNlT3ZlcnJpZGVuVGlsZVBhcmFtcyh0aWxlSWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoISF0aWxlUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgY2FjaGVkVGlsZVN0cnVjdHVyZXNbdGlsZUlkXSA9IGNyZWF0ZVRpbGVTdHJ1Y3R1cmUodGlsZVBhcmFtcywgaXNFZGdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhY2hlZFRpbGVTdHJ1Y3R1cmVzW3RpbGVJZF0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY2FjaGVkVGlsZVN0cnVjdHVyZXNbdGlsZUlkXSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFRpbGVTdHJ1Y3R1cmVzW3RpbGVJZF07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBnZXREZWZhdWx0VGlsZVN0cnVjdHVyZUludGVybmFsKGlzRWRnZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBcmd1bWVudEluUmFuZ2UocGFyYW1OYW1lLCBwYXJhbVZhbHVlLCBzdXByaW11bVBhcmFtVmFsdWUpIHtcbiAgICAgICAgaWYgKHBhcmFtVmFsdWUgPCAwIHx8IHBhcmFtVmFsdWUgPj0gc3VwcmltdW1QYXJhbVZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lLFxuICAgICAgICAgICAgICAgIHBhcmFtVmFsdWUsXG4gICAgICAgICAgICAgICAgcGFyYW1OYW1lICsgJyBpcyBleHBlY3RlZCB0byBiZSBiZXR3ZWVuIDAgYW5kICcgKyBzdXByaW11bVBhcmFtVmFsdWUgLSAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXREZWZhdWx0VGlsZVN0cnVjdHVyZUludGVybmFsKGVkZ2VUeXBlKSB7XG4gICAgICAgIGlmICghZGVmYXVsdFRpbGVTdHJ1Y3R1cmVCeUVkZ2VUeXBlKSB7XG4gICAgICAgICAgICB2YXIgZGVmYXVsdFRpbGVQYXJhbXMgPSBqcGlwU3RydWN0dXJlUGFyc2VyLnBhcnNlRGVmYXVsdFRpbGVQYXJhbXMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdFRpbGVTdHJ1Y3R1cmVCeUVkZ2VUeXBlID0gbmV3IEFycmF5KDMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBob3Jpem9udGFsRWRnZSA9IDA7IGhvcml6b250YWxFZGdlIDwgMzsgKytob3Jpem9udGFsRWRnZSkge1xuICAgICAgICAgICAgICAgIGRlZmF1bHRUaWxlU3RydWN0dXJlQnlFZGdlVHlwZVtob3Jpem9udGFsRWRnZV0gPSBuZXcgQXJyYXkoMyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdmVydGljYWxFZGdlID0gMDsgdmVydGljYWxFZGdlIDwgMzsgKyt2ZXJ0aWNhbEVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVkZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBob3Jpem9udGFsRWRnZVR5cGU6IGhvcml6b250YWxFZGdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxFZGdlVHlwZTogdmVydGljYWxFZGdlXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFRpbGVTdHJ1Y3R1cmVCeUVkZ2VUeXBlW2hvcml6b250YWxFZGdlXVt2ZXJ0aWNhbEVkZ2VdID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVRpbGVTdHJ1Y3R1cmUoZGVmYXVsdFRpbGVQYXJhbXMsIGVkZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHN0cnVjdHVyZUJ5VmVydGljYWxUeXBlID1cbiAgICAgICAgICAgIGRlZmF1bHRUaWxlU3RydWN0dXJlQnlFZGdlVHlwZVtlZGdlVHlwZS5ob3Jpem9udGFsRWRnZVR5cGVdO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVTdHJ1Y3R1cmUgPSBzdHJ1Y3R1cmVCeVZlcnRpY2FsVHlwZVtlZGdlVHlwZS52ZXJ0aWNhbEVkZ2VUeXBlXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aWxlU3RydWN0dXJlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjcmVhdGVUaWxlU3RydWN0dXJlKHRpbGVQYXJhbXMsIGVkZ2VUeXBlKSB7XG4gICAgICAgIHZhbGlkYXRlUGFyYW1zKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgc2l6ZVBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGlsZVBhcmFtcykpO1xuICAgICAgICBcbiAgICAgICAgc2l6ZVBhcmFtcy50aWxlU2l6ZSA9IHNpemVzQ2FsY3VsYXRvci5nZXRUaWxlU2l6ZShlZGdlVHlwZSk7XG4gICAgICAgIFxuICAgICAgICBzaXplUGFyYW1zLmRlZmF1bHRDb21wb25lbnRQYXJhbXMuc2NhbGVYID0gMTtcbiAgICAgICAgc2l6ZVBhcmFtcy5kZWZhdWx0Q29tcG9uZW50UGFyYW1zLnNjYWxlWSA9IDE7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemVQYXJhbXMucGFyYW1zUGVyQ29tcG9uZW50Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBzaXplUGFyYW1zLnBhcmFtc1BlckNvbXBvbmVudFtpXS5zY2FsZVggPSBwYXJhbXMuY29tcG9uZW50c1NjYWxlWFtpXTtcbiAgICAgICAgICAgIHNpemVQYXJhbXMucGFyYW1zUGVyQ29tcG9uZW50W2ldLnNjYWxlWSA9IHBhcmFtcy5jb21wb25lbnRzU2NhbGVZW2ldO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZVN0cnVjdHVyZSA9IGpwaXBGYWN0b3J5LmNyZWF0ZVRpbGVTdHJ1Y3R1cmUoc2l6ZVBhcmFtcywgc2VsZiwgcHJvZ3Jlc3Npb25PcmRlcik7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGlsZVN0cnVjdHVyZTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVQYXJhbXMoc2VsZikge1xuICAgICAgICBpZiAoIXBhcmFtcykge1xuICAgICAgICAgICAgcGFyYW1zID0ganBpcFN0cnVjdHVyZVBhcnNlci5wYXJzZUNvZGVzdHJlYW1TdHJ1Y3R1cmUoKTtcbiAgICAgICAgICAgIHNpemVzQ2FsY3VsYXRvciA9IGpwaXBGYWN0b3J5LmNyZWF0ZUxldmVsQ2FsY3VsYXRvcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLWNvZGVzdHJlYW0tc3RydWN0dXJlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSnBpcENvbXBvbmVudFN0cnVjdHVyZShcbiAgICBwYXJhbXMsIHRpbGVTdHJ1Y3R1cmUpIHtcbiAgICBcbiAgICB2YXIgdGlsZVdpZHRoTGV2ZWwwO1xuICAgIHZhciB0aWxlSGVpZ2h0TGV2ZWwwO1xuICAgIFxuICAgIGluaXRpYWxpemUoKTtcbiAgICBcbiAgICB0aGlzLmdldENvbXBvbmVudFNjYWxlWCA9IGZ1bmN0aW9uIGdldENvbXBvbmVudFNjYWxlWCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5zY2FsZVg7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldENvbXBvbmVudFNjYWxlWSA9IGZ1bmN0aW9uIGdldENvbXBvbmVudFNjYWxlWSgpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5zY2FsZVk7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldE51bVJlc29sdXRpb25MZXZlbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5udW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRQcmVjaW5jdFdpZHRoID0gZnVuY3Rpb24ocmVzb2x1dGlvbkxldmVsKSB7XG4gICAgICAgIHZhciB3aWR0aCA9IHBhcmFtcy5wcmVjaW5jdFdpZHRoUGVyTGV2ZWxbcmVzb2x1dGlvbkxldmVsXTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB3aWR0aDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0UHJlY2luY3RIZWlnaHQgPSBmdW5jdGlvbihyZXNvbHV0aW9uTGV2ZWwpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcmFtcy5wcmVjaW5jdEhlaWdodFBlckxldmVsW3Jlc29sdXRpb25MZXZlbF07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRNYXhDb2RlYmxvY2tXaWR0aCA9IGZ1bmN0aW9uIGdldE1heENvZGVibG9ja1dpZHRoKCkge1xuICAgICAgICB2YXIgd2lkdGggPSBwYXJhbXMubWF4Q29kZWJsb2NrV2lkdGg7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gd2lkdGg7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldE1heENvZGVibG9ja0hlaWdodCA9IGZ1bmN0aW9uIGdldE1heENvZGVibG9ja0hlaWdodCgpIHtcbiAgICAgICAgdmFyIGhlaWdodCA9IHBhcmFtcy5tYXhDb2RlYmxvY2tIZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaGVpZ2h0O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXROdW1Db2RlYmxvY2tzWEluUHJlY2luY3QgPVxuICAgICAgICBmdW5jdGlvbiBnZXROdW1Db2RlYmxvY2tzWChwcmVjaW5jdCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bUNvZGVibG9ja3NYID0gY2FsY3VsYXRlTnVtQ29kZWJsb2NrcyhcbiAgICAgICAgICAgIHByZWNpbmN0LFxuICAgICAgICAgICAgcHJlY2luY3QucHJlY2luY3RYLFxuICAgICAgICAgICAgcGFyYW1zLm1heENvZGVibG9ja1dpZHRoLFxuICAgICAgICAgICAgcGFyYW1zLnByZWNpbmN0V2lkdGhQZXJMZXZlbCxcbiAgICAgICAgICAgIHRpbGVXaWR0aExldmVsMCk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbnVtQ29kZWJsb2Nrc1g7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldE51bUNvZGVibG9ja3NZSW5QcmVjaW5jdCA9XG4gICAgICAgIGZ1bmN0aW9uIGdldE51bUNvZGVibG9ja3NZKHByZWNpbmN0KSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgbnVtQ29kZWJsb2Nrc1kgPSBjYWxjdWxhdGVOdW1Db2RlYmxvY2tzKFxuICAgICAgICAgICAgcHJlY2luY3QsXG4gICAgICAgICAgICBwcmVjaW5jdC5wcmVjaW5jdFksXG4gICAgICAgICAgICBwYXJhbXMubWF4Q29kZWJsb2NrSGVpZ2h0LFxuICAgICAgICAgICAgcGFyYW1zLnByZWNpbmN0SGVpZ2h0UGVyTGV2ZWwsXG4gICAgICAgICAgICB0aWxlSGVpZ2h0TGV2ZWwwKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudW1Db2RlYmxvY2tzWTtcbiAgICB9O1xuXG4gICAgdGhpcy5nZXROdW1QcmVjaW5jdHNYID0gZnVuY3Rpb24ocmVzb2x1dGlvbkxldmVsKSB7XG4gICAgICAgIHZhciBwcmVjaW5jdHNYID0gY2FsY3VsYXRlTnVtUHJlY2luY3RzKFxuICAgICAgICAgICAgdGlsZVdpZHRoTGV2ZWwwLCBwYXJhbXMucHJlY2luY3RXaWR0aFBlckxldmVsLCByZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBwcmVjaW5jdHNYO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXROdW1QcmVjaW5jdHNZID0gZnVuY3Rpb24ocmVzb2x1dGlvbkxldmVsKSB7XG4gICAgICAgIHZhciBwcmVjaW5jdHNZID0gY2FsY3VsYXRlTnVtUHJlY2luY3RzKFxuICAgICAgICAgICAgdGlsZUhlaWdodExldmVsMCwgcGFyYW1zLnByZWNpbmN0SGVpZ2h0UGVyTGV2ZWwsIHJlc29sdXRpb25MZXZlbCk7XG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIHByZWNpbmN0c1k7XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVOdW1QcmVjaW5jdHMoXG4gICAgICAgIHRpbGVTaXplTGV2ZWwwLCBwcmVjaW5jdFNpemVQZXJMZXZlbCwgcmVzb2x1dGlvbkxldmVsKSB7XG4gICAgXG4gICAgICAgIHZhciByZXNvbHV0aW9uRmFjdG9yID0gZ2V0UmVzb2x1dGlvbkZhY3RvcihyZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICB2YXIgdGlsZVNpemVJbkxldmVsID0gdGlsZVNpemVMZXZlbDAgLyByZXNvbHV0aW9uRmFjdG9yO1xuICAgICAgICBcbiAgICAgICAgdmFyIHByZWNpbmN0U2l6ZUluTGV2ZWwgPSBwcmVjaW5jdFNpemVQZXJMZXZlbFtyZXNvbHV0aW9uTGV2ZWxdO1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bVByZWNpbmN0cyA9IE1hdGguY2VpbCh0aWxlU2l6ZUluTGV2ZWwgLyBwcmVjaW5jdFNpemVJbkxldmVsKTtcbiAgICAgICAgcmV0dXJuIG51bVByZWNpbmN0cztcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlTnVtQ29kZWJsb2NrcyhcbiAgICAgICAgcHJlY2luY3QsXG4gICAgICAgIHByZWNpbmN0SW5kZXgsXG4gICAgICAgIG1heENvZGVibG9ja1NpemUsXG4gICAgICAgIHByZWNpbmN0U2l6ZVBlckxldmVsLFxuICAgICAgICB0aWxlU2l6ZUxldmVsMCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc29sdXRpb25GYWN0b3IgPSBnZXRSZXNvbHV0aW9uRmFjdG9yKHByZWNpbmN0LnJlc29sdXRpb25MZXZlbCk7XG4gICAgICAgIHZhciB0aWxlU2l6ZUluTGV2ZWwgPSBNYXRoLmNlaWwodGlsZVNpemVMZXZlbDAgLyByZXNvbHV0aW9uRmFjdG9yKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBwcmVjaW5jdEJlZ2luUGl4ZWwgPVxuICAgICAgICAgICAgcHJlY2luY3RJbmRleCAqIHByZWNpbmN0U2l6ZVBlckxldmVsW3ByZWNpbmN0LnJlc29sdXRpb25MZXZlbF07XG4gICAgICAgIFxuICAgICAgICB2YXIgcHJlY2luY3RTaXplID0gTWF0aC5taW4oXG4gICAgICAgICAgICBwcmVjaW5jdFNpemVQZXJMZXZlbFtwcmVjaW5jdC5yZXNvbHV0aW9uTGV2ZWxdLFxuICAgICAgICAgICAgdGlsZVNpemVJbkxldmVsIC0gcHJlY2luY3RCZWdpblBpeGVsKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBzdWJiYW5kVHlwZUZhY3RvciA9IHByZWNpbmN0LnJlc29sdXRpb25MZXZlbCA9PT0gMCA/IDEgOiAyO1xuICAgICAgICB2YXIgc3ViYmFuZE9mUHJlY2luY3RTaXplID0gTWF0aC5jZWlsKHByZWNpbmN0U2l6ZSAvIHN1YmJhbmRUeXBlRmFjdG9yKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBudW1Db2RlYmxvY2tzID0gc3ViYmFuZFR5cGVGYWN0b3IgKiBNYXRoLmNlaWwoXG4gICAgICAgICAgICBzdWJiYW5kT2ZQcmVjaW5jdFNpemUgLyBtYXhDb2RlYmxvY2tTaXplKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwcmVjaW5jdFNpemUgJSBtYXhDb2RlYmxvY2tTaXplID09PSAxICYmXG4gICAgICAgICAgICBwcmVjaW5jdC5yZXNvbHV0aW9uTGV2ZWwgPiAwKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC0tbnVtQ29kZWJsb2NrcztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bUNvZGVibG9ja3M7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldFJlc29sdXRpb25GYWN0b3IocmVzb2x1dGlvbkxldmVsKSB7XG4gICAgICAgIHZhciBkaWZmZXJlbmNlRnJvbUJlc3RMZXZlbCA9IHBhcmFtcy5udW1SZXNvbHV0aW9uTGV2ZWxzIC0gcmVzb2x1dGlvbkxldmVsIC0gMTtcbiAgICAgICAgXG4gICAgICAgIHZhciBmYWN0b3IgPSAxIDw8IGRpZmZlcmVuY2VGcm9tQmVzdExldmVsO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZhY3RvcjtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zY2FsZVggIT09IDEgfHwgcGFyYW1zLnNjYWxlWSAhPT0gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdOb24gMSBjb21wb25lbnQgc2NhbGUnLCAnQS41LjEnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGlsZVdpZHRoTGV2ZWwwID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgIHRpbGVTdHJ1Y3R1cmUuZ2V0VGlsZVdpZHRoKCkgLyBwYXJhbXMuc2NhbGVYKTtcbiAgICAgICAgdGlsZUhlaWdodExldmVsMCA9IE1hdGguZmxvb3IoXG4gICAgICAgICAgICB0aWxlU3RydWN0dXJlLmdldFRpbGVIZWlnaHQoKSAvIHBhcmFtcy5zY2FsZVkpO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ltYWdlLXN0cnVjdHVyZXMvanBpcC1jb21wb25lbnQtc3RydWN0dXJlLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbi8vICdDb21wb3NpdGUnIGFycmF5IHRvb2xzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIENvbXBvc2l0ZUFycmF5KG9mZnNldCkge1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIHZhciBpbnRlcm5hbFBhcnRzID0gW107XG4gICAgXG4gICAgLy8gR2V0IGxlbmd0aFxuICAgIHRoaXMuZ2V0TGVuZ3RoID0gZnVuY3Rpb24gZ2V0TGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH07XG5cbiAgICAvLyBHZXQgb2Zmc2V0XG4gICAgdGhpcy5nZXRPZmZzZXQgPSBmdW5jdGlvbiBnZXRPZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfTtcbiAgICAgICAgXG4gICAgLy8gUHVzaCBzdWItYXJyYXkgb250byBpbnRlcm5hbFBhcnRzIGFycmF5IGFuZCBjb3JyZWN0IGxlbmd0aFxuICAgIHRoaXMucHVzaFN1YkFycmF5ID0gZnVuY3Rpb24gcHVzaFN1YkFycmF5KHN1YkFycmF5KSB7XG4gICAgICAgIGludGVybmFsUGFydHMucHVzaChzdWJBcnJheSk7XG4gICAgICAgIGxlbmd0aCArPSBzdWJBcnJheS5sZW5ndGg7XG4gICAgfTtcbiAgICBcbiAgICAvLyA/P1xuICAgIHRoaXMuY29weVRvT3RoZXJBdFRoZUVuZCA9IGZ1bmN0aW9uIGNvcHlUb090aGVyQXRUaGVFbmQocmVzdWx0LCBtaW5PZmZzZXQsIG1heE9mZnNldCkge1xuICAgICAgICBjaGVja09mZnNldHNUb0NvcHkobWluT2Zmc2V0LCBtYXhPZmZzZXQpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gZ2V0SW50ZXJuYWxQYXJ0c0l0ZXJhdG9yKG1pbk9mZnNldCwgbWF4T2Zmc2V0KTtcbiAgICAgICAgXG4gICAgICAgIC8vIE5PVEU6IFdoYXQgaWYgZGF0YSBub3QgaW4gZmlyc3QgcGFydD9cbiAgICAgICAgXG4gICAgICAgIHdoaWxlICh0cnlBZHZhbmNlSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaFN1YkFycmF5KGl0ZXJhdG9yLnN1YkFycmF5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyA/P1xuICAgIHRoaXMuY29weVRvVHlwZWRBcnJheSA9IGZ1bmN0aW9uIGNvcHlUb1R5cGVkQXJyYXkoXG4gICAgICAgIHJlc3VsdEFycmF5LCByZXN1bHRBcnJheU9mZnNldCwgbWluT2Zmc2V0LCBtYXhPZmZzZXQpIHtcbiAgICAgICAgXG4gICAgICAgIGNoZWNrT2Zmc2V0c1RvQ29weShtaW5PZmZzZXQsIG1heE9mZnNldCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaXRlcmF0b3IgPSBnZXRJbnRlcm5hbFBhcnRzSXRlcmF0b3IobWluT2Zmc2V0LCBtYXhPZmZzZXQpO1xuICAgICAgICBcbiAgICAgICAgLy8gTk9URTogV2hhdCBpZiBkYXRhIG5vdCBpbiBmaXJzdCBwYXJ0P1xuICAgICAgICBcbiAgICAgICAgd2hpbGUgKHRyeUFkdmFuY2VJdGVyYXRvcihpdGVyYXRvcikpIHtcbiAgICAgICAgICAgIHZhciBvZmZzZXRJblJlc3VsdCA9XG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iub2Zmc2V0IC0gcmVzdWx0QXJyYXlPZmZzZXQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdEFycmF5LnNldChpdGVyYXRvci5zdWJBcnJheSwgb2Zmc2V0SW5SZXN1bHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuY29weVRvQXJyYXkgPSBmdW5jdGlvbiBjb3B5VG9BcnJheShcbiAgICAgICAgcmVzdWx0QXJyYXksIHJlc3VsdEFycmF5T2Zmc2V0LCBtaW5PZmZzZXQsIG1heE9mZnNldCkge1xuICAgICAgICBcbiAgICAgICAgY2hlY2tPZmZzZXRzVG9Db3B5KG1pbk9mZnNldCwgbWF4T2Zmc2V0KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpdGVyYXRvciA9IGdldEludGVybmFsUGFydHNJdGVyYXRvcihtaW5PZmZzZXQsIG1heE9mZnNldCk7XG4gICAgICAgIFxuICAgICAgICAvLyBOT1RFOiBXaGF0IGlmIGRhdGEgbm90IGluIGZpcnN0IHBhcnQ/XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAodHJ5QWR2YW5jZUl0ZXJhdG9yKGl0ZXJhdG9yKSkge1xuICAgICAgICAgICAgdmFyIG9mZnNldEluUmVzdWx0ID1cbiAgICAgICAgICAgICAgICBpdGVyYXRvci5vZmZzZXQgLSByZXN1bHRBcnJheU9mZnNldDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVyYXRvci5zdWJBcnJheS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgIHJlc3VsdEFycmF5W29mZnNldEluUmVzdWx0KytdID0gaXRlcmF0b3Iuc3ViQXJyYXlbal07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHRoaXMuY29weVRvT3RoZXIgPSBmdW5jdGlvbiBjb3B5VG9PdGhlcihvdGhlcikge1xuICAgICAgICBpZiAob3RoZXIuZ2V0T2Zmc2V0KCkgPiBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDb21wb3NpdGVBcnJheTogVHJ5aW5nIHRvIGNvcHkgcGFydCBpbnRvIGEgbGF0dGVyIHBhcnQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIG90aGVyRW5kT2Zmc2V0ID0gb3RoZXIuZ2V0T2Zmc2V0KCkgKyBvdGhlci5nZXRMZW5ndGgoKTtcbiAgICAgICAgdmFyIGlzT3RoZXJDb250YWluc1RoaXMgPSBvZmZzZXQgKyBsZW5ndGggPD0gb3RoZXJFbmRPZmZzZXQ7XG4gICAgICAgIGlmIChpc090aGVyQ29udGFpbnNUaGlzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gRG8gbm90IG92ZXJyaWRlIGFscmVhZHkgZXhpc3QgZGF0YSAoZm9yIGVmZmljaWVuY3kpXG4gICAgICAgIHZhciBtaW5PZmZzZXQgPSBvdGhlckVuZE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIHZhciBpdGVyYXRvciA9IGdldEludGVybmFsUGFydHNJdGVyYXRvcihtaW5PZmZzZXQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCF0cnlBZHZhbmNlSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnQ29tcG9zaXRlQXJyYXk6IENvdWxkIG5vdCBtZXJnZSBwYXJ0cycpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZXhwZWN0ZWRPZmZzZXRWYWx1ZSA9IG1pbk9mZnNldDtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3Iub2Zmc2V0ICE9PSBleHBlY3RlZE9mZnNldFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdDb21wb3NpdGVBcnJheTogTm9uLWNvbnRpbnVvdXMgdmFsdWUgb2YgJyArXG4gICAgICAgICAgICAgICAgICAgICdyYW5nZVRvQ29weS5vZmZzZXQuIEV4cGVjdGVkOiAnICsgZXhwZWN0ZWRPZmZzZXRWYWx1ZSArXG4gICAgICAgICAgICAgICAgICAgICAnLCBBY3R1YWw6ICcgKyBpdGVyYXRvci5vZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBvdGhlci5wdXNoU3ViQXJyYXkoaXRlcmF0b3Iuc3ViQXJyYXkpO1xuICAgICAgICAgICAgZXhwZWN0ZWRPZmZzZXRWYWx1ZSArPSBpdGVyYXRvci5zdWJBcnJheS5sZW5ndGg7XG4gICAgICAgIH0gd2hpbGUgKHRyeUFkdmFuY2VJdGVyYXRvcihpdGVyYXRvcikpO1xuICAgIH07XG4gICAgXG4gICAgLy8gVmVyaWZ5IHZhbGlkIG1pbiBhbmQgbWF4IG9mZnNldHNcbiAgICBmdW5jdGlvbiBjaGVja09mZnNldHNUb0NvcHkobWluT2Zmc2V0LCBtYXhPZmZzZXQpIHtcbiAgICAgICAgaWYgKG1pbk9mZnNldCA9PT0gdW5kZWZpbmVkIHx8IG1heE9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnbWluT2Zmc2V0IG9yIG1heE9mZnNldCBpcyB1bmRlZmluZWQgZm9yIENvbXBvc2l0ZUFycmF5LmNvcHlUb0FycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChtaW5PZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdtaW5PZmZzZXQgKCcgKyBtaW5PZmZzZXQgKyAnKSBtdXN0IGJlIHNtYWxsZXIgdGhhbiAnICtcbiAgICAgICAgICAgICAgICAnQ29tcG9zaXRlQXJyYXkgb2Zmc2V0ICgnICsgb2Zmc2V0ICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKG1heE9mZnNldCA+IG9mZnNldCArIGxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ21heE9mZnNldCAoJyArIG1heE9mZnNldCArICcpIG11c3QgYmUgbGFyZ2VyIHRoYW4gJyArXG4gICAgICAgICAgICAgICAgJ0NvbXBvc2l0ZUFycmF5IGVuZCBvZmZzZXQgKCcgKyBvZmZzZXQgKyBsZW5ndGggKyAnKScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIEdldCBpbnRlcm5hbFBhcnRzIGFycmF5IGl0ZXJhdG9yXG4gICAgZnVuY3Rpb24gZ2V0SW50ZXJuYWxQYXJ0c0l0ZXJhdG9yKG1pbk9mZnNldCwgbWF4T2Zmc2V0KSB7XG4gICAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KG9mZnNldCwgbWluT2Zmc2V0KTtcblxuICAgICAgICB2YXIgZW5kID0gb2Zmc2V0ICsgbGVuZ3RoO1xuICAgICAgICBpZiAobWF4T2Zmc2V0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGVuZCA9IE1hdGgubWluKGVuZCwgbWF4T2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgICAgICAgICAgdmFyIGVtcHR5SXRlcmF0b3IgPSB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWxJdGVyYXRvckRhdGE6IHsgaXNFbmRPZlJhbmdlOiB0cnVlIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBlbXB0eUl0ZXJhdG9yO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaXRlcmF0b3IgPSB7XG4gICAgICAgICAgICBzdWJBcnJheTogbnVsbCxcbiAgICAgICAgICAgIG9mZnNldDogLTEsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGludGVybmFsSXRlcmF0b3JEYXRhOiB7XG4gICAgICAgICAgICAgICAgZW5kOiBlbmQsXG4gICAgICAgICAgICAgICAgY3VycmVudFN1YkFycmF5OiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnRlcm5hbFBhcnRPZmZzZXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgbmV4dEludGVybmFsUGFydE9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgICAgICAgIGN1cnJlbnRJbnRlcm5hbFBhcnRJbmRleDogLTEsXG4gICAgICAgICAgICAgICAgaXNFbmRPZlJhbmdlOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdmFyIGFscmVhZHlSZWFjaGVkVG9UaGVFbmQgPSBmYWxzZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKGFscmVhZHlSZWFjaGVkVG9UaGVFbmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbignSXRlcmF0b3IgcmVhY2hlZCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3RvIHRoZSBlbmQgYWx0aG91Z2ggbm8gZGF0YSBoYXMgYmVlbiBpdGVyYXRlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBhbHJlYWR5UmVhY2hlZFRvVGhlRW5kID0gIXRyeUFkdmFuY2VJdGVyYXRvcihpdGVyYXRvcik7XG4gICAgICAgIH0gd2hpbGUgKHN0YXJ0ID49IGl0ZXJhdG9yLmludGVybmFsSXRlcmF0b3JEYXRhLm5leHRJbnRlcm5hbFBhcnRPZmZzZXQpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGN1dEZpcnN0U3ViQXJyYXkgPVxuICAgICAgICAgICAgc3RhcnQgLSBpdGVyYXRvci5pbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50SW50ZXJuYWxQYXJ0T2Zmc2V0O1xuICAgICAgICBpdGVyYXRvci5pbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50U3ViQXJyYXkgPVxuICAgICAgICAgICAgaXRlcmF0b3IuaW50ZXJuYWxJdGVyYXRvckRhdGEuY3VycmVudFN1YkFycmF5LnN1YmFycmF5KGN1dEZpcnN0U3ViQXJyYXkpO1xuICAgICAgICBpdGVyYXRvci5pbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50SW50ZXJuYWxQYXJ0T2Zmc2V0ID0gc3RhcnQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gaXRlcmF0b3I7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHRyeUFkdmFuY2VJdGVyYXRvcihpdGVyYXRvcikge1xuICAgICAgICB2YXIgaW50ZXJuYWxJdGVyYXRvckRhdGEgPSBpdGVyYXRvci5pbnRlcm5hbEl0ZXJhdG9yRGF0YTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpbnRlcm5hbEl0ZXJhdG9yRGF0YS5pc0VuZE9mUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXRlcmF0b3Iuc3ViQXJyYXkgPSBpbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50U3ViQXJyYXk7XG4gICAgICAgIGl0ZXJhdG9yLm9mZnNldCA9IGludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRJbnRlcm5hbFBhcnRPZmZzZXQ7XG4gICAgICAgIFxuICAgICAgICArK2ludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRJbnRlcm5hbFBhcnRJbmRleDtcbiAgICAgICAgXG4gICAgICAgIGlmIChpbnRlcm5hbEl0ZXJhdG9yRGF0YS5uZXh0SW50ZXJuYWxQYXJ0T2Zmc2V0ID49IGludGVybmFsSXRlcmF0b3JEYXRhLmVuZCkge1xuICAgICAgICAgICAgaW50ZXJuYWxJdGVyYXRvckRhdGEuaXNFbmRPZlJhbmdlID0gdHJ1ZTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVuc3VyZU5vRW5kT2ZBcnJheVJlYWNoZWQoaW50ZXJuYWxJdGVyYXRvckRhdGEuY3VycmVudEludGVybmFsUGFydEluZGV4KTtcbiAgICAgICAgXG4gICAgICAgIGludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRTdWJBcnJheSA9IGludGVybmFsUGFydHNbXG4gICAgICAgICAgICBpbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50SW50ZXJuYWxQYXJ0SW5kZXhdO1xuICAgICAgICBpbnRlcm5hbEl0ZXJhdG9yRGF0YS5jdXJyZW50SW50ZXJuYWxQYXJ0T2Zmc2V0ID1cbiAgICAgICAgICAgIGludGVybmFsSXRlcmF0b3JEYXRhLm5leHRJbnRlcm5hbFBhcnRPZmZzZXQ7XG4gICAgICAgIHZhciBjdXJyZW50SW50ZXJuYWxQYXJ0TGVuZ3RoID1cbiAgICAgICAgICAgIGludGVybmFsUGFydHNbaW50ZXJuYWxJdGVyYXRvckRhdGEuY3VycmVudEludGVybmFsUGFydEluZGV4XS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBpbnRlcm5hbEl0ZXJhdG9yRGF0YS5uZXh0SW50ZXJuYWxQYXJ0T2Zmc2V0ID1cbiAgICAgICAgICAgIGludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRJbnRlcm5hbFBhcnRPZmZzZXQgKyBjdXJyZW50SW50ZXJuYWxQYXJ0TGVuZ3RoO1xuXG4gICAgICAgIHZhciBjdXRMYXN0U3ViQXJyYXkgPVxuICAgICAgICAgICAgaW50ZXJuYWxJdGVyYXRvckRhdGEuZW5kIC0gaW50ZXJuYWxJdGVyYXRvckRhdGEuY3VycmVudEludGVybmFsUGFydE9mZnNldDtcbiAgICAgICAgdmFyIGlzTGFzdFN1YkFycmF5ID1cbiAgICAgICAgICAgIGN1dExhc3RTdWJBcnJheSA8IGludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRTdWJBcnJheS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNMYXN0U3ViQXJyYXkpIHtcbiAgICAgICAgICAgIGludGVybmFsSXRlcmF0b3JEYXRhLmN1cnJlbnRTdWJBcnJheSA9IGludGVybmFsSXRlcmF0b3JEYXRhXG4gICAgICAgICAgICAgICAgLmN1cnJlbnRTdWJBcnJheS5zdWJhcnJheSgwLCBjdXRMYXN0U3ViQXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgLy8gSWYgZW5kIG9mIGFycmF5IGlzIHJlYWNoZWQgdGhyb3cgZXhjZXB0aW9uXG4gICAgZnVuY3Rpb24gZW5zdXJlTm9FbmRPZkFycmF5UmVhY2hlZChjdXJyZW50SW50ZXJuYWxQYXJ0SW5kZXgpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRJbnRlcm5hbFBhcnRJbmRleCA+PSBpbnRlcm5hbFBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0NvbXBvc2l0ZUFycmF5OiBlbmQgb2YgcGFydCBoYXMgcmVhY2hlZC4gQ2hlY2sgZW5kIGNhbGN1bGF0aW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9kYXRhYmlucy9jb21wb3NpdGUtYXJyYXkuanMiLCIndXNlIHN0cmljdCc7XG5cbi8vIEEuMi4xLlxuXG4vKipcbiAqIEZ1bmN0aW9ucyB0byBoZWxwIHdpdGggY2hlY2tpbmcgYW5kIGFkZGluZyBkYXRhIHRvIGRhdGFiaW5zXG4gKiBAcGFyYW0ge251bWJlcn0gY2xhc3NJZCAtIHR5cGUgb2YgZGF0YWJpbiBpdCBpcyAod2hhdCBudW1iZXI/KVxuICogQHBhcmFtIHtudW1iZXJ9IGluQ2xhc3NJZCAtIHR5cGUgb2YgZGF0YWJpbi4uLj9cbiAqIEBwYXJhbSB7b2JqZWN0fSBqcGlwRmFjdG9yeVxuICogQHJldHVybnMge29iamVjdH1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwRGF0YWJpblBhcnRzKFxuICAgIGNsYXNzSWQsIGluQ2xhc3NJZCwganBpcEZhY3RvcnkpIHtcblxuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHZhciBwYXJ0cyA9IFtdOyAvLyA/P1xuICAgIHZhciBkYXRhYmluTGVuZ3RoSWZLbm93biA9IG51bGw7IC8vIExlbmd0aCBvZiBkYXRhYmluXG4gICAgdmFyIGxvYWRlZEJ5dGVzID0gMDsgLy8gTG9hZGVkIGJ5dGVzXG4gICAgXG4gICAgdmFyIGNhY2hlZERhdGEgPSBbXTsgLy8gV2hhdCBkYXRhIGlzIGNhY2hlZFxuICAgIFxuICAgIHRoaXMuZ2V0RGF0YWJpbkxlbmd0aElmS25vd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFiaW5MZW5ndGhJZktub3duO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRMb2FkZWRCeXRlcyA9IGZ1bmN0aW9uIGdldExvYWRlZEJ5dGVzKCkge1xuICAgICAgICByZXR1cm4gbG9hZGVkQnl0ZXM7XG4gICAgfTtcbiAgICBcbiAgICAvLyBSZXR1cm5zIHRydWUgaWYgYWxsIGRhdGFiaW5zIGFyZSBsb2FkZWQgLSB0byB3aGF0IHRob3VnaD8/XG4gICAgdGhpcy5pc0FsbERhdGFiaW5Mb2FkZWQgPSBmdW5jdGlvbiBpc0FsbERhdGFiaW5Mb2FkZWQoKSB7XG4gICAgICAgIHZhciByZXN1bHQ7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGRhdGFiaW5MZW5ndGhJZktub3duID09PSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzWzBdLmdldE9mZnNldCgpID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzWzBdLmdldExlbmd0aCgpID09PSBkYXRhYmluTGVuZ3RoSWZLbm93bjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFxuICAgIC8vIFJldHVybiBjYWNoZWQgZGF0YSBhcyBvYmplY3RcbiAgICB0aGlzLmdldENhY2hlZERhdGEgPSBmdW5jdGlvbiBnZXRDYWNoZWREYXRhKGtleSkge1xuICAgICAgICB2YXIgb2JqID0gY2FjaGVkRGF0YVtrZXldO1xuICAgICAgICBpZiAob2JqID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG9iaiA9IHt9O1xuICAgICAgICAgICAgY2FjaGVkRGF0YVtrZXldID0gb2JqO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRDbGFzc0lkID0gZnVuY3Rpb24gZ2V0Q2xhc3NJZCgpIHtcbiAgICAgICAgcmV0dXJuIGNsYXNzSWQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldEluQ2xhc3NJZCA9IGZ1bmN0aW9uIGdldEluQ2xhc3NJZCgpIHtcbiAgICAgICAgcmV0dXJuIGluQ2xhc3NJZDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuY29weVRvQ29tcG9zaXRlQXJyYXkgPSBmdW5jdGlvbiBjb3B5VG9Db21wb3NpdGVBcnJheShyZXN1bHQsIHJhbmdlT3B0aW9ucykge1xuICAgICAgICB2YXIgZHVtbXlSZXN1bHRTdGFydE9mZnNldCA9IDA7XG4gICAgICAgIHZhciBwYXJhbXMgPSBnZXRQYXJhbXNGb3JDb3B5Qnl0ZXMoZHVtbXlSZXN1bHRTdGFydE9mZnNldCwgcmFuZ2VPcHRpb25zKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwYXJhbXMucmVzdWx0V2l0aG91dENvcHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5yZXN1bHRXaXRob3V0Q29weTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIG1heExlbmd0aENvcGllZCA9IGl0ZXJhdGVSYW5nZShcbiAgICAgICAgICAgIHBhcmFtcy5kYXRhYmluU3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBwYXJhbXMubWF4TGVuZ3RoVG9Db3B5LFxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkUGFydFRvUmVzdWx0SW5Db3B5VG9Db21wb3NpdGVBcnJheShwYXJ0LCBtaW5PZmZzZXRJblBhcnQsIG1heE9mZnNldEluUGFydCkge1xuICAgICAgICAgICAgICAgIHBhcnQuY29weVRvT3RoZXJBdFRoZUVuZChcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICBtaW5PZmZzZXRJblBhcnQsXG4gICAgICAgICAgICAgICAgICAgIG1heE9mZnNldEluUGFydCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBtYXhMZW5ndGhDb3BpZWQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmNvcHlCeXRlcyA9IGZ1bmN0aW9uKHJlc3VsdEFycmF5LCByZXN1bHRTdGFydE9mZnNldCwgcmFuZ2VPcHRpb25zKSB7XG4gICAgICAgIHZhciBwYXJhbXMgPSBnZXRQYXJhbXNGb3JDb3B5Qnl0ZXMocmVzdWx0U3RhcnRPZmZzZXQsIHJhbmdlT3B0aW9ucyk7XG4gICAgICAgIFxuICAgICAgICBpZiAocGFyYW1zLnJlc3VsdFdpdGhvdXRDb3B5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXMucmVzdWx0V2l0aG91dENvcHk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHRBcnJheU9mZnNldEluRGF0YWJpbiA9IHBhcmFtcy5kYXRhYmluU3RhcnRPZmZzZXQgLSBwYXJhbXMucmVzdWx0U3RhcnRPZmZzZXQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgYWN0dWFsQ29weUJ5dGVzID0gcmVzdWx0QXJyYXkuaXNEdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uID9cbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyB9IDpcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFBhcnRUb1Jlc3VsdEluQ29weUJ5dGVzKHBhcnQsIG1pbk9mZnNldEluUGFydCwgbWF4T2Zmc2V0SW5QYXJ0KSB7XG4gICAgICAgICAgICAgICAgcGFydC5jb3B5VG9BcnJheShcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEFycmF5T2Zmc2V0SW5EYXRhYmluLFxuICAgICAgICAgICAgICAgICAgICBtaW5PZmZzZXRJblBhcnQsXG4gICAgICAgICAgICAgICAgICAgIG1heE9mZnNldEluUGFydCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciBtYXhMZW5ndGhDb3BpZWQgPSBpdGVyYXRlUmFuZ2UoXG4gICAgICAgICAgICBwYXJhbXMuZGF0YWJpblN0YXJ0T2Zmc2V0LFxuICAgICAgICAgICAgcGFyYW1zLm1heExlbmd0aFRvQ29weSxcbiAgICAgICAgICAgIGFjdHVhbENvcHlCeXRlcyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbWF4TGVuZ3RoQ29waWVkO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRFeGlzdGluZ1JhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHBhcnRzLmxlbmd0aCk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXN1bHRbaV0gPSB7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHBhcnRzW2ldLmdldE9mZnNldCgpLFxuICAgICAgICAgICAgICAgIGxlbmd0aDogcGFydHNbaV0uZ2V0TGVuZ3RoKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgXG4gICAgLy8gQWRkIGRhdGEgdG8gZGF0YWJpblxuICAgIHRoaXMuYWRkRGF0YSA9IGZ1bmN0aW9uKGhlYWRlciwgbWVzc2FnZSkge1xuICAgICAgICBpZiAoaGVhZGVyLmlzTGFzdEJ5dGVJbkRhdGFiaW4pIHtcbiAgICAgICAgICAgIGRhdGFiaW5MZW5ndGhJZktub3duID0gaGVhZGVyLm1lc3NhZ2VPZmZzZXRGcm9tRGF0YWJpblN0YXJ0ICsgaGVhZGVyLm1lc3NhZ2VCb2R5TGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaGVhZGVyLm1lc3NhZ2VCb2R5TGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV3UGFydCA9IGpwaXBGYWN0b3J5LmNyZWF0ZUNvbXBvc2l0ZUFycmF5KFxuICAgICAgICAgICAgaGVhZGVyLm1lc3NhZ2VPZmZzZXRGcm9tRGF0YWJpblN0YXJ0KTtcblxuICAgICAgICB2YXIgZW5kT2Zmc2V0SW5NZXNzYWdlID0gaGVhZGVyLmJvZHlTdGFydCArIGhlYWRlci5tZXNzYWdlQm9keUxlbmd0aDtcbiAgICAgICAgbmV3UGFydC5wdXNoU3ViQXJyYXkobWVzc2FnZS5zdWJhcnJheShoZWFkZXIuYm9keVN0YXJ0LCBlbmRPZmZzZXRJbk1lc3NhZ2UpKTtcblxuICAgICAgICAvLyBGaW5kIHdoZXJlIHRvIHB1c2ggdGhlIG5ldyBtZXNzYWdlXG4gICAgICAgIFxuICAgICAgICB2YXIgaW5kZXhGaXJzdFBhcnRBZnRlciA9IGZpbmRGaXJzdFBhcnRBZnRlck9mZnNldChoZWFkZXIubWVzc2FnZU9mZnNldEZyb21EYXRhYmluU3RhcnQpO1xuICAgICAgICB2YXIgaW5kZXhGaXJzdFBhcnROZWFyT3JBZnRlciA9IGluZGV4Rmlyc3RQYXJ0QWZ0ZXI7XG5cbiAgICAgICAgaWYgKGluZGV4Rmlyc3RQYXJ0QWZ0ZXIgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNQYXJ0ID0gcGFydHNbaW5kZXhGaXJzdFBhcnRBZnRlciAtIDFdO1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzUGFydEVuZE9mZnNldCA9XG4gICAgICAgICAgICAgICAgcHJldmlvdXNQYXJ0LmdldE9mZnNldCgpICsgcHJldmlvdXNQYXJ0LmdldExlbmd0aCgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocHJldmlvdXNQYXJ0RW5kT2Zmc2V0ID09PSBoZWFkZXIubWVzc2FnZU9mZnNldEZyb21EYXRhYmluU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBDYW4gbWVyZ2UgYWxzbyBwcmV2aW91cyBwYXJ0XG4gICAgICAgICAgICAgICAgLS1pbmRleEZpcnN0UGFydE5lYXJPckFmdGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXIgPj0gcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKG5ld1BhcnQpO1xuICAgICAgICAgICAgbG9hZGVkQnl0ZXMgKz0gaGVhZGVyLm1lc3NhZ2VCb2R5TGVuZ3RoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBmaXJzdFBhcnROZWFyT3JBZnRlciA9IHBhcnRzW2luZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXJdO1xuICAgICAgICB2YXIgZW5kT2Zmc2V0SW5EYXRhYmluID1cbiAgICAgICAgICAgIGhlYWRlci5tZXNzYWdlT2Zmc2V0RnJvbURhdGFiaW5TdGFydCArIGhlYWRlci5tZXNzYWdlQm9keUxlbmd0aDtcbiAgICAgICAgaWYgKGZpcnN0UGFydE5lYXJPckFmdGVyLmdldE9mZnNldCgpID4gZW5kT2Zmc2V0SW5EYXRhYmluKSB7XG4gICAgICAgICAgICAvLyBOb3QgZm91bmQgYW4gb3ZlcmxhcHBpbmcgcGFydCwgcHVzaCBhIG5ld1xuICAgICAgICAgICAgLy8gcGFydCBpbiB0aGUgbWlkZGxlIG9mIHRoZSBwYXJ0cyBhcnJheVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aDsgaSA+IGluZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXI7IC0taSkge1xuICAgICAgICAgICAgICAgIHBhcnRzW2ldID0gcGFydHNbaSAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYXJ0c1tpbmRleEZpcnN0UGFydE5lYXJPckFmdGVyXSA9IG5ld1BhcnQ7XG4gICAgICAgICAgICBsb2FkZWRCeXRlcyArPSBoZWFkZXIubWVzc2FnZUJvZHlMZW5ndGg7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTWVyZ2UgZmlyc3QgYW5kIGxhc3Qgb3ZlcmxhcHBpbmcgcGFydHMgLSBhbGwgdGhlIHJlc3QgKGlmIGFueSkgYXJlIGluIHRoZSBtaWRkbGUgb2YgdGhlIG5ldyBwYXJ0XG4gICAgICAgIFxuICAgICAgICB2YXIgYnl0ZXNBbHJlYWR5U2F2ZWQgPSBmaXJzdFBhcnROZWFyT3JBZnRlci5nZXRMZW5ndGgoKTtcblxuICAgICAgICB2YXIgc2hvdWxkU3dhcCA9XG4gICAgICAgICAgICBmaXJzdFBhcnROZWFyT3JBZnRlci5nZXRPZmZzZXQoKSA+IGhlYWRlci5tZXNzYWdlT2Zmc2V0RnJvbURhdGFiaW5TdGFydDtcbiAgICAgICAgaWYgKHNob3VsZFN3YXApIHtcbiAgICAgICAgICAgIHBhcnRzW2luZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXJdID0gbmV3UGFydDtcbiAgICAgICAgICAgIG5ld1BhcnQgPSBmaXJzdFBhcnROZWFyT3JBZnRlcjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZmlyc3RQYXJ0TmVhck9yQWZ0ZXIgPSBwYXJ0c1tpbmRleEZpcnN0UGFydE5lYXJPckFmdGVyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1BhcnQuY29weVRvT3RoZXIoZmlyc3RQYXJ0TmVhck9yQWZ0ZXIpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGVuZE9mZnNldCA9XG4gICAgICAgICAgICBmaXJzdFBhcnROZWFyT3JBZnRlci5nZXRPZmZzZXQoKSArIGZpcnN0UGFydE5lYXJPckFmdGVyLmdldExlbmd0aCgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHBhcnRUb01lcmdlSW5kZXg7XG4gICAgICAgIGZvciAocGFydFRvTWVyZ2VJbmRleCA9IGluZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXI7XG4gICAgICAgICAgICBwYXJ0VG9NZXJnZUluZGV4IDwgcGFydHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICsrcGFydFRvTWVyZ2VJbmRleCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZW5kT2Zmc2V0IDwgcGFydHNbcGFydFRvTWVyZ2VJbmRleCArIDFdLmdldE9mZnNldCgpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGJ5dGVzQWxyZWFkeVNhdmVkICs9IHBhcnRzW3BhcnRUb01lcmdlSW5kZXggKyAxXS5nZXRMZW5ndGgoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHBhcnRzVG9EZWxldGUgPSBwYXJ0VG9NZXJnZUluZGV4IC0gaW5kZXhGaXJzdFBhcnROZWFyT3JBZnRlcjtcbiAgICAgICAgaWYgKHBhcnRzVG9EZWxldGUgPiAwKSB7XG4gICAgICAgICAgICBwYXJ0c1twYXJ0VG9NZXJnZUluZGV4XS5jb3B5VG9PdGhlcihmaXJzdFBhcnROZWFyT3JBZnRlcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIERlbGV0ZSBhbGwgbWlkZGxlIGFuZCBtZXJnZWQgcGFydHMgZXhjZXB0IDFcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGluZGV4Rmlyc3RQYXJ0TmVhck9yQWZ0ZXIgKyAxOyBqIDwgcGFydHMubGVuZ3RoIC0gcGFydHNUb0RlbGV0ZTsgKytqKSB7XG4gICAgICAgICAgICAgICAgcGFydHNbal0gPSBwYXJ0c1tqICsgcGFydHNUb0RlbGV0ZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBhcnRzLmxlbmd0aCAtPSBwYXJ0c1RvRGVsZXRlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBsb2FkZWRCeXRlcyArPSBmaXJzdFBhcnROZWFyT3JBZnRlci5nZXRMZW5ndGgoKSAtIGJ5dGVzQWxyZWFkeVNhdmVkO1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gZ2V0UGFyYW1zRm9yQ29weUJ5dGVzKHJlc3VsdFN0YXJ0T2Zmc2V0LCByYW5nZU9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGZvcmNlQ29weUFsbFJhbmdlID0gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhYmluU3RhcnRPZmZzZXQgPSAwO1xuICAgICAgICB2YXIgbWF4TGVuZ3RoVG9Db3B5O1xuICAgICAgICBcbiAgICAgICAgaWYgKHJhbmdlT3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmb3JjZUNvcHlBbGxSYW5nZSA9ICEhcmFuZ2VPcHRpb25zLmZvcmNlQ29weUFsbFJhbmdlO1xuICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0ID0gcmFuZ2VPcHRpb25zLmRhdGFiaW5TdGFydE9mZnNldDtcbiAgICAgICAgICAgIG1heExlbmd0aFRvQ29weSA9IHJhbmdlT3B0aW9ucy5tYXhMZW5ndGhUb0NvcHk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChkYXRhYmluU3RhcnRPZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRhdGFiaW5TdGFydE9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChyZXN1bHRTdGFydE9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXN1bHRTdGFydE9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChtYXhMZW5ndGhUb0NvcHkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdFdpdGhvdXRDb3B5OiAwIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICgoZGF0YWJpbkxlbmd0aElmS25vd24gIT09IG51bGwpICYmIChkYXRhYmluU3RhcnRPZmZzZXQgPj0gZGF0YWJpbkxlbmd0aElmS25vd24pKSB7XG4gICAgICAgICAgICByZXR1cm4geyByZXN1bHRXaXRob3V0Q29weTogKCEhbWF4TGVuZ3RoVG9Db3B5ICYmIGZvcmNlQ29weUFsbFJhbmdlID8gbnVsbCA6IDApIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBmaXJzdFJlbGV2YW50UGFydEluZGV4ID0gZmluZEZpcnN0UGFydEFmdGVyT2Zmc2V0KGRhdGFiaW5TdGFydE9mZnNldCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZmlyc3RSZWxldmFudFBhcnRJbmRleCA9PT0gcGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4geyByZXN1bHRXaXRob3V0Q29weTogKGZvcmNlQ29weUFsbFJhbmdlID8gbnVsbCA6IDApIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChmb3JjZUNvcHlBbGxSYW5nZSkge1xuICAgICAgICAgICAgdmFyIGlzQWxsUmVxdWVzdGVkUmFuZ2VFeGlzdCA9XG4gICAgICAgICAgICAgICAgaXNBbGxSYW5nZUV4aXN0KGRhdGFiaW5TdGFydE9mZnNldCwgbWF4TGVuZ3RoVG9Db3B5LCBmaXJzdFJlbGV2YW50UGFydEluZGV4KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFpc0FsbFJlcXVlc3RlZFJhbmdlRXhpc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyByZXN1bHRXaXRob3V0Q29weTogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBkYXRhYmluU3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IG1heExlbmd0aFRvQ29weSxcbiAgICAgICAgICAgIHJlc3VsdFN0YXJ0T2Zmc2V0OiByZXN1bHRTdGFydE9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBwYXJhbXM7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGlzQWxsUmFuZ2VFeGlzdChcbiAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0LCBtYXhMZW5ndGhUb0NvcHksIGZpcnN0UmVsZXZhbnRQYXJ0SW5kZXgpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChwYXJ0c1tmaXJzdFJlbGV2YW50UGFydEluZGV4XS5nZXRPZmZzZXQoKSA+IGRhdGFiaW5TdGFydE9mZnNldCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAobWF4TGVuZ3RoVG9Db3B5KSB7XG4gICAgICAgICAgICB2YXIgdW51c2VkRWxlbWVudHMgPVxuICAgICAgICAgICAgICAgIGRhdGFiaW5TdGFydE9mZnNldCAtIHBhcnRzW2ZpcnN0UmVsZXZhbnRQYXJ0SW5kZXhdLmdldE9mZnNldCgpO1xuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZUxlbmd0aCA9XG4gICAgICAgICAgICAgICAgcGFydHNbZmlyc3RSZWxldmFudFBhcnRJbmRleF0uZ2V0TGVuZ3RoKCkgLSB1bnVzZWRFbGVtZW50cztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGlzVW50aWxNYXhMZW5ndGhFeGlzdCA9IGF2YWlsYWJsZUxlbmd0aCA+PSBtYXhMZW5ndGhUb0NvcHk7XG4gICAgICAgICAgICByZXR1cm4gaXNVbnRpbE1heExlbmd0aEV4aXN0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YWJpbkxlbmd0aElmS25vd24gPT09IG51bGwgfHxcbiAgICAgICAgICAgIGZpcnN0UmVsZXZhbnRQYXJ0SW5kZXggPCBwYXJ0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGxhc3RQYXJ0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciBlbmRPZmZzZXRSZWNpZXZlZCA9IGxhc3RQYXJ0LmdldE9mZnNldCgpICsgbGFzdFBhcnQuZ2V0TGVuZ3RoKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaXNVbnRpbEVuZE9mRGF0YWJpbkV4aXN0ID0gZW5kT2Zmc2V0UmVjaWV2ZWQgPT09IGRhdGFiaW5MZW5ndGhJZktub3duO1xuICAgICAgICByZXR1cm4gaXNVbnRpbEVuZE9mRGF0YWJpbkV4aXN0O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBpdGVyYXRlUmFuZ2UoXG4gICAgICAgICAgICBkYXRhYmluU3RhcnRPZmZzZXQsXG4gICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHksXG4gICAgICAgIGFkZFN1YlBhcnRUb1Jlc3VsdCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIG1pbk9mZnNldEluRGF0YWJpblRvQ29weSA9IGRhdGFiaW5TdGFydE9mZnNldDtcbiAgICAgICAgXG4gICAgICAgIHZhciBtYXhPZmZzZXRJbkRhdGFiaW5Ub0NvcHk7XG4gICAgICAgIGlmIChtYXhMZW5ndGhUb0NvcHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbWF4T2Zmc2V0SW5EYXRhYmluVG9Db3B5ID0gZGF0YWJpblN0YXJ0T2Zmc2V0ICsgbWF4TGVuZ3RoVG9Db3B5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGxhc3RQYXJ0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBtYXhPZmZzZXRJbkRhdGFiaW5Ub0NvcHkgPSBsYXN0UGFydC5nZXRPZmZzZXQoKSArIGxhc3RQYXJ0LmdldExlbmd0aCgpO1xuICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBsYXN0Q29waWVkUGFydCA9IG51bGw7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAocGFydHNbaV0uZ2V0T2Zmc2V0KCkgPj0gbWF4T2Zmc2V0SW5EYXRhYmluVG9Db3B5KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjdXJyZW50TWluT2Zmc2V0SW5EYXRhYmluVG9Db3B5ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgbWluT2Zmc2V0SW5EYXRhYmluVG9Db3B5LCBwYXJ0c1tpXS5nZXRPZmZzZXQoKSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudE1heE9mZnNldEluRGF0YWJpblRvQ29weSA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIG1heE9mZnNldEluRGF0YWJpblRvQ29weSwgcGFydHNbaV0uZ2V0T2Zmc2V0KCkgKyBwYXJ0c1tpXS5nZXRMZW5ndGgoKSk7XG4gICAgICAgIFxuICAgICAgICAgICAgYWRkU3ViUGFydFRvUmVzdWx0KFxuICAgICAgICAgICAgICAgIHBhcnRzW2ldLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRNaW5PZmZzZXRJbkRhdGFiaW5Ub0NvcHksXG4gICAgICAgICAgICAgICAgY3VycmVudE1heE9mZnNldEluRGF0YWJpblRvQ29weSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxhc3RDb3BpZWRQYXJ0ID0gcGFydHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChsYXN0Q29waWVkUGFydCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsYXN0T2Zmc2V0Q29waWVkID0gTWF0aC5taW4oXG4gICAgICAgICAgICBsYXN0Q29waWVkUGFydC5nZXRPZmZzZXQoKSArIGxhc3RDb3BpZWRQYXJ0LmdldExlbmd0aCgpLFxuICAgICAgICAgICAgbWF4T2Zmc2V0SW5EYXRhYmluVG9Db3B5KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBtYXhMZW5ndGhDb3BpZWQgPSBsYXN0T2Zmc2V0Q29waWVkIC0gZGF0YWJpblN0YXJ0T2Zmc2V0O1xuICAgICAgICByZXR1cm4gbWF4TGVuZ3RoQ29waWVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpbmRGaXJzdFBhcnRBZnRlck9mZnNldChvZmZzZXQpIHtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0cy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpbmRleF0uZ2V0T2Zmc2V0KCkgKyBwYXJ0c1tpbmRleF0uZ2V0TGVuZ3RoKCkgPiBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2RhdGFiaW5zL2pwaXAtZGF0YWJpbi1wYXJ0cy5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBEYXRhYmluc1NhdmVyKGlzSnBpcFRpbGVQYXJ0U3RyZWFtLCBqcGlwRmFjdG9yeSkge1xuICAgIC8vIERhdGFiaW4gY2xhc3MgY29uc3RhbnRzXG4gICAgdmFyIFBSRUNJTkNUX05PX0FVWF9DTEFTUyA9IDA7XG4gICAgdmFyIFBSRUNJTkNUX1dJVEhfQVVYX0NMQVNTID0gMTtcbiAgICB2YXIgVElMRV9IRUFERVJfQ0xBU1MgPSAyO1xuICAgIHZhciBUSUxFX05PX0FVWF9DTEFTUyA9IDQ7XG4gICAgdmFyIFRJTEVfV0lUSF9BVVhfQ0xBU1MgPSA1O1xuXG4gICAgdmFyIGRhdGFiaW5zQnlDbGFzcyA9IFtdOyAvLyBEYXRhYmlucyBieSBjbGFzc1xuICAgIHZhciBmb3JiaWRkZW5JbkpwcCA9IFtdO1xuICAgIHZhciBmb3JiaWRkZW5JbkpwdCA9IFtdO1xuICAgIFxuICAgIHZhciBsb2FkZWRCeXRlcyA9IDA7XG4gICAgdmFyIGxvYWRlZEJ5dGVzSW5SZWdpc3RlcmVkRGF0YWJpbnMgPSAwO1xuXG4gICAgLy8gVmFsaWQgb25seSBpZiBpc0pwaXBUaWxlUGFydFN0cmVhbSA9IGZhbHNlXG4gICAgXG4gICAgZGF0YWJpbnNCeUNsYXNzW1RJTEVfSEVBREVSX0NMQVNTXSA9IGNyZWF0ZURhdGFiaW5zQXJyYXkoKTtcbiAgICBkYXRhYmluc0J5Q2xhc3NbUFJFQ0lOQ1RfTk9fQVVYX0NMQVNTXSA9IGNyZWF0ZURhdGFiaW5zQXJyYXkoKTtcbiAgICBkYXRhYmluc0J5Q2xhc3NbUFJFQ0lOQ1RfV0lUSF9BVVhfQ0xBU1NdID0gZGF0YWJpbnNCeUNsYXNzW1xuICAgICAgICBQUkVDSU5DVF9OT19BVVhfQ0xBU1NdO1xuICAgIFxuICAgIGZvcmJpZGRlbkluSnB0W1RJTEVfSEVBREVSX0NMQVNTXSA9IHRydWU7XG4gICAgZm9yYmlkZGVuSW5KcHRbUFJFQ0lOQ1RfTk9fQVVYX0NMQVNTXSA9IHRydWU7XG4gICAgZm9yYmlkZGVuSW5KcHRbUFJFQ0lOQ1RfV0lUSF9BVVhfQ0xBU1NdID0gdHJ1ZTtcbiAgICBcbiAgICAvLyBWYWxpZCBvbmx5IGlmIGlzSnBpcFRpbGVQYXJ0U3RyZWFtID0gdHJ1ZVxuXG4gICAgZGF0YWJpbnNCeUNsYXNzW1RJTEVfTk9fQVVYX0NMQVNTXSA9IGNyZWF0ZURhdGFiaW5zQXJyYXkoKTtcbiAgICBkYXRhYmluc0J5Q2xhc3NbVElMRV9XSVRIX0FVWF9DTEFTU10gPSBkYXRhYmluc0J5Q2xhc3NbXG4gICAgICAgIFRJTEVfTk9fQVVYX0NMQVNTXTtcbiAgICBcbiAgICBmb3JiaWRkZW5JbkpwcFtUSUxFX05PX0FVWF9DTEFTU10gPSB0cnVlO1xuICAgIGZvcmJpZGRlbkluSnBwW1RJTEVfV0lUSF9BVVhfQ0xBU1NdID0gdHJ1ZTtcbiAgICBcbiAgICB2YXIgbWFpbkhlYWRlckRhdGFiaW4gPSBqcGlwRmFjdG9yeS5jcmVhdGVEYXRhYmluUGFydHMoNiwgMCk7IC8vIE1haW4gaGVhZGVyIGRhdGFiaW5cbiAgICBcbiAgICB0aGlzLmdldElzSnBpcFRpbGVQYXJ0U3RyZWFtID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBpc0pwaXBUaWxlUGFydFN0cmVhbTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TG9hZGVkQnl0ZXMgPSBmdW5jdGlvbiBnZXRMb2FkZWRCeXRlcygpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRlZEJ5dGVzO1xuICAgIH07XG5cbiAgICB0aGlzLmdldE1haW5IZWFkZXJEYXRhYmluID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbWFpbkhlYWRlckRhdGFiaW47XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVIZWFkZXJEYXRhYmluID0gZnVuY3Rpb24oaW5DbGFzc0luZGV4KSB7XG4gICAgICAgIHZhciBkYXRhYmluID0gZ2V0RGF0YWJpbkZyb21BcnJheShcbiAgICAgICAgICAgIGRhdGFiaW5zQnlDbGFzc1tUSUxFX0hFQURFUl9DTEFTU10sXG4gICAgICAgICAgICBUSUxFX0hFQURFUl9DTEFTUyxcbiAgICAgICAgICAgIGluQ2xhc3NJbmRleCxcbiAgICAgICAgICAgIC8qaXNKcGlwVGlsZVBhcnRTdHJlYW1FeHBlY3RlZD0qL2ZhbHNlLFxuICAgICAgICAgICAgJ3RpbGVIZWFkZXInKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkYXRhYmluO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRQcmVjaW5jdERhdGFiaW4gPSBmdW5jdGlvbihpbkNsYXNzSW5kZXgpIHtcbiAgICAgICAgdmFyIGRhdGFiaW4gPSBnZXREYXRhYmluRnJvbUFycmF5KFxuICAgICAgICAgICAgZGF0YWJpbnNCeUNsYXNzW1BSRUNJTkNUX05PX0FVWF9DTEFTU10sXG4gICAgICAgICAgICBQUkVDSU5DVF9OT19BVVhfQ0xBU1MsXG4gICAgICAgICAgICBpbkNsYXNzSW5kZXgsXG4gICAgICAgICAgICAvKmlzSnBpcFRpbGVQYXJ0U3RyZWFtRXhwZWN0ZWQ9Ki9mYWxzZSxcbiAgICAgICAgICAgICdwcmVjaW5jdCcpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGRhdGFiaW47XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVEYXRhYmluID0gZnVuY3Rpb24oaW5DbGFzc0luZGV4KSB7XG4gICAgICAgIHZhciBkYXRhYmluID0gZ2V0RGF0YWJpbkZyb21BcnJheShcbiAgICAgICAgICAgIGRhdGFiaW5zQnlDbGFzc1tUSUxFX05PX0FVWF9DTEFTU10sXG4gICAgICAgICAgICBUSUxFX05PX0FVWF9DTEFTUyxcbiAgICAgICAgICAgIGluQ2xhc3NJbmRleCxcbiAgICAgICAgICAgIC8qaXNKcGlwVGlsZVBhcnRTdHJlYW1FeHBlY3RlZD0qL3RydWUsXG4gICAgICAgICAgICAndGlsZVBhcnQnKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkYXRhYmluO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZGF0YWJpbiwgZXZlbnQsIGxpc3RlbmVyLCBsaXN0ZW5lclRoaXMpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChldmVudCAhPT0gJ2RhdGFBcnJpdmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oJ1Vuc3VwcG9ydGVkIGV2ZW50OiAnICtcbiAgICAgICAgICAgICAgICBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBjbGFzc0lkID0gZGF0YWJpbi5nZXRDbGFzc0lkKCk7XG4gICAgICAgIHZhciBpbkNsYXNzSWQgPSBkYXRhYmluLmdldEluQ2xhc3NJZCgpO1xuICAgICAgICB2YXIgZGF0YWJpbnNBcnJheSA9IGRhdGFiaW5zQnlDbGFzc1tjbGFzc0lkXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhYmluICE9PSBkYXRhYmluc0FycmF5LmRhdGFiaW5zW2luQ2xhc3NJZF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKCdVbm1hdGNoZWQgZGF0YWJpbiAnICtcbiAgICAgICAgICAgICAgICAnd2l0aCBjbGFzcy1JRD0nICsgY2xhc3NJZCArICcgYW5kIGluLWNsYXNzLUlEPScgKyBpbkNsYXNzSWQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YWJpbnNBcnJheS5saXN0ZW5lcnNbaW5DbGFzc0lkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhYmluc0FycmF5Lmxpc3RlbmVyc1tpbkNsYXNzSWRdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhYmluc0FycmF5Lmxpc3RlbmVyc1tpbkNsYXNzSWRdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgbG9hZGVkQnl0ZXNJblJlZ2lzdGVyZWREYXRhYmlucyArPSBkYXRhYmluLmdldExvYWRlZEJ5dGVzKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBoYW5kbGUgPSB7XG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICBsaXN0ZW5lclRoaXM6IGxpc3RlbmVyVGhpcyxcbiAgICAgICAgICAgIGRhdGFiaW46IGRhdGFiaW4sXG4gICAgICAgICAgICBpc1JlZ2lzdGVyZWQ6IHRydWUsXG4gICAgICAgICAgICBpbmRleDogZGF0YWJpbnNBcnJheS5saXN0ZW5lcnNbaW5DbGFzc0lkXS5sZW5ndGhcbiAgICAgICAgfTtcbiAgICAgICAgZGF0YWJpbnNBcnJheS5saXN0ZW5lcnNbaW5DbGFzc0lkXS5wdXNoKGhhbmRsZSk7XG4gICAgICAgIFxuICAgICAgICBkYXRhYmluc0FycmF5LmRhdGFiaW5zV2l0aExpc3RlbmVyc1tpbkNsYXNzSWRdID0gZGF0YWJpbjtcbiAgICAgICAgcmV0dXJuIGhhbmRsZTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoaGFuZGxlKSB7XG4gICAgICAgIHZhciBjbGFzc0lkID0gaGFuZGxlLmRhdGFiaW4uZ2V0Q2xhc3NJZCgpO1xuICAgICAgICB2YXIgaW5DbGFzc0lkID0gaGFuZGxlLmRhdGFiaW4uZ2V0SW5DbGFzc0lkKCk7XG4gICAgICAgIHZhciBkYXRhYmluc0FycmF5ID0gZGF0YWJpbnNCeUNsYXNzW2NsYXNzSWRdO1xuICAgICAgICB2YXIgbGlzdGVuZXJzID0gZGF0YWJpbnNBcnJheS5saXN0ZW5lcnNbaW5DbGFzc0lkXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChoYW5kbGUuZGF0YWJpbiAhPT0gZGF0YWJpbnNBcnJheS5kYXRhYmluc1tpbkNsYXNzSWRdIHx8XG4gICAgICAgICAgICBoYW5kbGUuZGF0YWJpbiAhPT0gZGF0YWJpbnNBcnJheS5kYXRhYmluc1dpdGhMaXN0ZW5lcnNbaW5DbGFzc0lkXSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbignVW5tYXRjaGVkIGRhdGFiaW4gJyArXG4gICAgICAgICAgICAgICAgJ3dpdGggY2xhc3MtSUQ9JyArIGNsYXNzSWQgKyAnIGFuZCBpbi1jbGFzcy1JRD0nICsgaW5DbGFzc0lkKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGhhbmRsZSAhPT0gbGlzdGVuZXJzW2hhbmRsZS5pbmRleF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKCdJbmNvc25zaXRlbmN5IGluICcgK1xuICAgICAgICAgICAgICAgICdkYXRhYmluIGxpc3RlbmVycyBpbmRpY2VzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxpc3RlbmVyc1toYW5kbGUuaW5kZXhdLmlzUmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgICAgICBsaXN0ZW5lcnNbaGFuZGxlLmluZGV4XSA9IGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV07XG4gICAgICAgIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0uaW5kZXggPSBoYW5kbGUuaW5kZXg7XG4gICAgICAgIGxpc3RlbmVycy5sZW5ndGggLT0gMTtcbiAgICAgICAgXG4gICAgICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgZGF0YWJpbnNBcnJheS5kYXRhYmluc1dpdGhMaXN0ZW5lcnNbaW5DbGFzc0lkXTtcbiAgICAgICAgICAgIGxvYWRlZEJ5dGVzSW5SZWdpc3RlcmVkRGF0YWJpbnMgLT0gaGFuZGxlLmRhdGFiaW4uZ2V0TG9hZGVkQnl0ZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5jbGVhbnVwVW5yZWdpc3RlcmVkRGF0YWJpbnMgPSBmdW5jdGlvbiBjbGVhbnVwVW5yZWdpc3RlcmVkRGF0YWJpbnMoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YWJpbnNCeUNsYXNzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoZGF0YWJpbnNCeUNsYXNzW2ldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGRhdGFiaW5zID0gZGF0YWJpbnNCeUNsYXNzW2ldLmRhdGFiaW5zV2l0aExpc3RlbmVycztcbiAgICAgICAgICAgIGRhdGFiaW5zQnlDbGFzc1tpXS5kYXRhYmlucyA9IGRhdGFiaW5zLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxvYWRlZEJ5dGVzID0gbG9hZGVkQnl0ZXNJblJlZ2lzdGVyZWREYXRhYmlucztcbiAgICB9O1xuXG4gICAgdGhpcy5zYXZlRGF0YSA9IGZ1bmN0aW9uIChoZWFkZXIsIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gQS4yLjJcbiAgICAgICAgXG4gICAgICAgIGlmIChoZWFkZXIuY29kZXN0cmVhbUluZGV4ICE9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdOb24gemVybyBDc24gKENvZGUgU3RyZWFtIEluZGV4KScsICdBLjIuMicpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGhlYWRlci5jbGFzc0lkKSB7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgc2F2ZU1haW5IZWFkZXIoaGVhZGVyLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBzYXZlTWV0YWRhdGEoaGVhZGVyLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBBLjMuMiwgQS4zLjMsIEEuMy40XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFiaW5zQXJyYXkgPSBkYXRhYmluc0J5Q2xhc3NbaGVhZGVyLmNsYXNzSWRdO1xuICAgICAgICAgICAgICAgIGlmIChkYXRhYmluc0FycmF5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIEEuMi4yXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBpc0pwdEV4cGVjdGVkID0gISFmb3JiaWRkZW5JbkpwcFtoZWFkZXIuY2xhc3NJZF07XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFiaW4gPSBnZXREYXRhYmluRnJvbUFycmF5KFxuICAgICAgICAgICAgICAgICAgICBkYXRhYmluc0FycmF5LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NJZCxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyLmluQ2xhc3NJZCxcbiAgICAgICAgICAgICAgICAgICAgaXNKcHRFeHBlY3RlZCxcbiAgICAgICAgICAgICAgICAgICAgJzxjbGFzcyBJRCAnICsgaGVhZGVyLmNsYXNzSWQgKyAnPicpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBieXRlc0JlZm9yZSA9IGRhdGFiaW4uZ2V0TG9hZGVkQnl0ZXMoKTtcbiAgICAgICAgICAgICAgICBkYXRhYmluLmFkZERhdGEoaGVhZGVyLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB2YXIgYnl0ZXNEaWZmZXJlbmNlID0gZGF0YWJpbi5nZXRMb2FkZWRCeXRlcygpIC0gYnl0ZXNCZWZvcmU7XG4gICAgICAgICAgICAgICAgbG9hZGVkQnl0ZXMgKz0gYnl0ZXNEaWZmZXJlbmNlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBkYXRhYmluc0FycmF5Lmxpc3RlbmVycztcbiAgICAgICAgICAgICAgICB2YXIgZGF0YWJpbkxpc3RlbmVycyA9IGxpc3RlbmVyc1toZWFkZXIuaW5DbGFzc0lkXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoZGF0YWJpbkxpc3RlbmVycyAhPT0gdW5kZWZpbmVkICYmIGRhdGFiaW5MaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBsb2FkZWRCeXRlc0luUmVnaXN0ZXJlZERhdGFiaW5zICs9IGJ5dGVzRGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbExpc3RlbmVycyA9IGRhdGFiaW5MaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYWxMaXN0ZW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGxvY2FsTGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyLmlzUmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyLmNhbGwobGlzdGVuZXIubGlzdGVuZXJUaGlzLCBkYXRhYmluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gc2F2ZU1haW5IZWFkZXIoaGVhZGVyLCBtZXNzYWdlKSB7XG4gICAgICAgIC8vIEEuMy41XG4gICAgICAgIFxuICAgICAgICBpZiAoaGVhZGVyLmluQ2xhc3NJZCAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxEYXRhRXhjZXB0aW9uKCdNYWluIGhlYWRlciBkYXRhLWJpbiB3aXRoICcgK1xuICAgICAgICAgICAgICAgICdpbi1jbGFzcyBpbmRleCBvdGhlciB0aGFuIHplcm8gaXMgbm90IHZhbGlkJywgJ0EuMy41Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlc0JlZm9yZSA9IG1haW5IZWFkZXJEYXRhYmluLmdldExvYWRlZEJ5dGVzKCk7XG4gICAgICAgIG1haW5IZWFkZXJEYXRhYmluLmFkZERhdGEoaGVhZGVyLCBtZXNzYWdlKTtcbiAgICAgICAgdmFyIGJ5dGVzRGlmZmVyZW5jZSA9IG1haW5IZWFkZXJEYXRhYmluLmdldExvYWRlZEJ5dGVzKCkgLSBieXRlc0JlZm9yZTtcbiAgICAgICAgXG4gICAgICAgIGxvYWRlZEJ5dGVzICs9IGJ5dGVzRGlmZmVyZW5jZTtcbiAgICAgICAgbG9hZGVkQnl0ZXNJblJlZ2lzdGVyZWREYXRhYmlucyArPSBieXRlc0RpZmZlcmVuY2U7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHNhdmVNZXRhZGF0YShoZWFkZXIsIG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gQS4zLjZcbiAgICAgICAgXG4gICAgICAgIC8vIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5VbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24oJ3JlY2lldmUgbWV0YWRhdGEtYmluJywgJ0EuMy42Jyk7XG4gICAgICAgIFxuICAgICAgICAvLyBpZ25vcmUgdW51c2VkIG1ldGFkYXRhIChsZWdhbCBhY2NvcmRpbmcgdG8gQS4yLjIpLlxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXREYXRhYmluRnJvbUFycmF5KFxuICAgICAgICBkYXRhYmluc0FycmF5LFxuICAgICAgICBjbGFzc0lkLFxuICAgICAgICBpbkNsYXNzSWQsXG4gICAgICAgIGlzSnBpcFRpbGVQYXJ0U3RyZWFtRXhwZWN0ZWQsXG4gICAgICAgIGRhdGFiaW5UeXBlRGVzY3JpcHRpb24pIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChpc0pwaXBUaWxlUGFydFN0cmVhbUV4cGVjdGVkICE9PSBpc0pwaXBUaWxlUGFydFN0cmVhbSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLldyb25nU3RyZWFtRXhjZXB0aW9uKCdkYXRhYmluIG9mIHR5cGUgJyArXG4gICAgICAgICAgICAgICAgZGF0YWJpblR5cGVEZXNjcmlwdGlvbiwgaXNKcGlwVGlsZVBhcnRTdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YWJpbiA9IGRhdGFiaW5zQXJyYXkuZGF0YWJpbnNbaW5DbGFzc0lkXTtcbiAgICAgICAgaWYgKCFkYXRhYmluKSB7XG4gICAgICAgICAgICBkYXRhYmluID0ganBpcEZhY3RvcnkuY3JlYXRlRGF0YWJpblBhcnRzKGNsYXNzSWQsIGluQ2xhc3NJZCk7XG4gICAgICAgICAgICBkYXRhYmluc0FycmF5LmRhdGFiaW5zW2luQ2xhc3NJZF0gPSBkYXRhYmluO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZGF0YWJpbjtcbiAgICB9XG4gICAgXG4gICAgLy8gUmV0dXJucyB7ZGF0YWJpbnM6IFtdLCBsaXN0ZW5lcnM6IFtdLCBkYXRhYmluc1dpdGhMaXN0ZW5lcnM6IFtdfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGFiaW5zQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhYmluczogW10sXG4gICAgICAgICAgICBsaXN0ZW5lcnM6IFtdLFxuICAgICAgICAgICAgZGF0YWJpbnNXaXRoTGlzdGVuZXJzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9kYXRhYmlucy9qcGlwLWRhdGFiaW5zLXNhdmVyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpwaXBGZXRjaDtcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5mdW5jdGlvbiBKcGlwRmV0Y2goZmV0Y2hDb250ZXh0LCByZXF1ZXN0ZXIsIHByb2dyZXNzaXZlbmVzcykge1xuICAgIHZhciBjb2Rlc3RyZWFtUGFydFBhcmFtcyA9IG51bGw7XG4gICAgdmFyIGRlZGljYXRlZENoYW5uZWxIYW5kbGUgPSBudWxsO1xuICAgIHZhciBzZXJ2ZXJSZXF1ZXN0ID0gbnVsbDtcbiAgICB2YXIgaXNGYWlsdXJlID0gZmFsc2U7XG4gICAgdmFyIGlzVGVybWluYXRlZCA9IGZhbHNlO1xuICAgIHZhciBpc1Byb2dyZXNzaXZlID0gZmFsc2U7XG4gICAgLy92YXIgaXNEb25lID0gZmFsc2U7XG4gICAgdmFyIHJlcXVlc3RlZFByb2dyZXNzaXZlU3RhZ2UgPSAwO1xuICAgIC8vdmFyIHJlYWNoZWRRdWFsaXR5TGF5ZXIgPSAwO1xuICAgIHZhciBuZXh0UHJvZ3Jlc3NpdmVTdGFnZSA9IDA7XG4gICAgXG4gICAgdGhpcy5zZXREZWRpY2F0ZWRDaGFubmVsSGFuZGxlID0gZnVuY3Rpb24gc2V0RGVkaWNhdGVkQ2hhbm5lbEhhbmRsZShcbiAgICAgICAgZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZV8pIHtcbiAgICAgICAgXG4gICAgICAgIGRlZGljYXRlZENoYW5uZWxIYW5kbGUgPSBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlXztcbiAgICB9O1xuICAgIFxuICAgIHRoaXMubW92ZSA9IGZ1bmN0aW9uIG1vdmUoY29kZXN0cmVhbVBhcnRQYXJhbXNfKSB7XG4gICAgICAgIGlmIChkZWRpY2F0ZWRDaGFubmVsSGFuZGxlID09PSBudWxsICYmIGNvZGVzdHJlYW1QYXJ0UGFyYW1zICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnQ2Fubm90IG1vdmUgbm9uIG1vdmFibGUgZmV0Y2gnKTtcbiAgICAgICAgfVxuICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyA9IGNvZGVzdHJlYW1QYXJ0UGFyYW1zXztcbiAgICAgICAgcmVxdWVzdERhdGEoKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMucmVzdW1lID0gZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgICByZXF1ZXN0RGF0YSgpO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5zdG9wID0gZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKHNlcnZlclJlcXVlc3QgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChpc1Rlcm1pbmF0ZWQvKiB8fCBpc0RvbmUqLykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBzdG9wIGFscmVhZHkgdGVybWluYXRlZCBmZXRjaCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBzdG9wIGFscmVhZHkgc3RvcHBlZCBmZXRjaCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIWRlZGljYXRlZENoYW5uZWxIYW5kbGUpIHtcbiAgICAgICAgICAgIHJlcXVlc3Rlci5zdG9wUmVxdWVzdEFzeW5jKHNlcnZlclJlcXVlc3QpO1xuICAgICAgICAgICAgc2VydmVyUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIE5PVEU6IFNlbmQgYSBzdG9wIHJlcXVlc3Qgd2l0aGluIEpwaXBSZXF1ZXN0IGFuZCByZXNvbHZlIHRoZSBQcm9taXNlXG4gICAgICAgIC8vIG9ubHkgYWZ0ZXIgc2VydmVyIHJlc3BvbnNlIChUaGlzIGlzIG9ubHkgcGVyZm9ybWFuY2UgaXNzdWUsIG5vXG4gICAgICAgIC8vIGZ1bmN0aW9uYWwgcHJvYmxlbTogYSBuZXcgZmV0Y2ggd2lsbCB0cmlnZ2VyIGEgSlBJUCByZXF1ZXN0IHdpdGhcbiAgICAgICAgLy8gd2FpdD1ubywgYW5kIHRoZSBvbGQgcmVxdWVzdCB3aWxsIGJlIGFjdHVhbGx5IHN0b3BwZWQpLlxuICAgICAgICByZXR1cm4gZmV0Y2hDb250ZXh0LnN0b3BwZWQoKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMudGVybWluYXRlID0gZnVuY3Rpb24gdGVybWluYXRlKCkge1xuICAgICAgICBpZiAoZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ1VuZXhwZWN0ZWQgdGVybWluYXRlIGV2ZW50IG9uIG1vdmFibGUgZmV0Y2gnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNUZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnRG91YmxlIHRlcm1pbmF0ZSBldmVudCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZXJ2ZXJSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgaXNUZXJtaW5hdGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuaXNQcm9ncmVzc2l2ZUNoYW5nZWQgPSBmdW5jdGlvbiBpc1Byb2dyZXNzaXZlQ2hhbmdlZChpc1Byb2dyZXNzaXZlXykge1xuICAgICAgICBpc1Byb2dyZXNzaXZlID0gaXNQcm9ncmVzc2l2ZV87XG4gICAgICAgIGlmIChkZWRpY2F0ZWRDaGFubmVsSGFuZGxlICYmIHNlcnZlclJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlcnZlclJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgcmVxdWVzdERhdGEoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gcmVxdWVzdERhdGEoKSB7XG4gICAgICAgIGlmIChuZXh0UHJvZ3Jlc3NpdmVTdGFnZSA+PSBwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnVW5leHBlY3RlZCByZXF1ZXN0RGF0YSgpIGFmdGVyIGZldGNoIGRvbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VydmVyUmVxdWVzdCAhPT0gbnVsbCAmJiBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnQ2Fubm90IHJlc3VtZSBhbHJlYWR5LWFjdGl2ZS1mZXRjaCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNUZXJtaW5hdGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnQ2Fubm90IHJlc3VtZSBhbHJlYWR5LXRlcm1pbmF0ZWQtZmV0Y2gnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb2dyZXNzaXZlU3RhZ2UgPj0gcHJvZ3Jlc3NpdmVuZXNzLmxlbmd0aCB8fFxuICAgICAgICAgICAgICAgIHNlcnZlclJlcXVlc3QgIT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICBpc1Rlcm1pbmF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvL2lmIChpc0RvbmUpIHtcbiAgICAgICAgICAgIC8vICAgIHJldHVybjtcbiAgICAgICAgICAgIC8vfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXF1ZXN0ZWRQcm9ncmVzc2l2ZVN0YWdlID1cbiAgICAgICAgICAgICAgICBpc1Byb2dyZXNzaXZlID8gbmV4dFByb2dyZXNzaXZlU3RhZ2UgOiBwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIHNlcnZlclJlcXVlc3QgPSByZXF1ZXN0ZXIucmVxdWVzdERhdGEoXG4gICAgICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMsXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVyQ2FsbGJhY2tPbkFsbERhdGFSZWNpZXZlZCxcbiAgICAgICAgICAgICAgICByZXF1ZXN0ZXJDYWxsYmFja09uRmFpbHVyZSxcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2l2ZW5lc3NbcmVxdWVzdGVkUHJvZ3Jlc3NpdmVTdGFnZV0ubWluTnVtUXVhbGl0eUxheWVycyxcbiAgICAgICAgICAgICAgICBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVxdWVzdGVyQ2FsbGJhY2tPbkFsbERhdGFSZWNpZXZlZChyZXF1ZXN0LCBpc1Jlc3BvbnNlRG9uZSkge1xuICAgICAgICBzZXJ2ZXJSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFpc1Jlc3BvbnNlRG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvL2lmIChpc1Rlcm1pbmF0ZWQgJiYgcmVxdWVzdGVkUXVhbGl0eUxheWVyID4gcmVhY2hlZFF1YWxpdHlMYXllcikge1xuICAgICAgICAvLyAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgIC8vICAgICAgICAnSlBJUCBzZXJ2ZXIgbm90IHJldHVybmVkIGFsbCBkYXRhJywgJ0QuMycpO1xuICAgICAgICAvL31cbiAgICAgICAgbmV4dFByb2dyZXNzaXZlU3RhZ2UgPSByZXF1ZXN0ZWRQcm9ncmVzc2l2ZVN0YWdlO1xuICAgICAgICBpZiAobmV4dFByb2dyZXNzaXZlU3RhZ2UgPj0gcHJvZ3Jlc3NpdmVuZXNzLmxlbmd0aCkge1xuICAgICAgICAgICAgZmV0Y2hDb250ZXh0LmRvbmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlcXVlc3RlckNhbGxiYWNrT25GYWlsdXJlKCkge1xuICAgICAgICAvL3VwZGF0ZVN0YXR1cyhTVEFUVVNfRU5ERUQsICdlbmRBc3luYygpJyk7XG4gICAgICAgIFxuICAgICAgICAvL2lmIChmYWlsdXJlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyAgICBmYWlsdXJlQ2FsbGJhY2soc2VsZiwgdXNlckNvbnRleHRWYXJzKTtcbiAgICAgICAgLy99IGVsc2Uge1xuICAgICAgICAvLyAgICBpc0ZhaWx1cmUgPSB0cnVlO1xuICAgICAgICAvL31cbiAgICAgICAgaXNGYWlsdXJlID0gdHJ1ZTtcblxuICAgICAgICAvL2lmIChpc01vdmVkKSB7XG4gICAgICAgIC8vICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAvLyAgICAgICAgJ0ZhaWx1cmUgY2FsbGJhY2sgdG8gYW4gb2xkIGZldGNoIHdoaWNoIGhhcyBiZWVuIGFscmVhZHkgbW92ZWQnKTtcbiAgICAgICAgLy99XG4gICAgfVxufVxuXG4vL2Z1bmN0aW9uIEpwaXBGZXRjaEhhbmRsZShyZXF1ZXN0ZXIsIGltYWdlRGF0YUNvbnRleHQsIGRlZGljYXRlZENoYW5uZWxIYW5kbGUpIHtcbi8vICAgIHRoaXMuX3JlcXVlc3RlciA9IHJlcXVlc3Rlcjtcbi8vICAgIHRoaXMuX2ltYWdlRGF0YUNvbnRleHQgPSBpbWFnZURhdGFDb250ZXh0O1xuLy8gICAgdGhpcy5fc2VydmVyUmVxdWVzdCA9IG51bGw7XG4vLyAgICB0aGlzLl9kZWRpY2F0ZWRDaGFubmVsSGFuZGxlID0gZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZTtcbi8vICAgIHRoaXMuX2lzRmFpbHVyZSA9IGZhbHNlO1xuLy8gICAgdGhpcy5faXNNb3ZlZCA9IGZhbHNlO1xuLy8gICAgdGhpcy5fcmVxdWVzdGVkUXVhbGl0eUxheWVyID0gMDtcbi8vICAgIHRoaXMuX3JlYWNoZWRRdWFsaXR5TGF5ZXIgPSAwO1xuLy8gICAgdGhpcy5fcmVxdWVzdGVyQ2FsbGJhY2tPbkZhaWx1cmVCb3VuZCA9IHRoaXMuX3JlcXVlc3RlckNhbGxiYWNrT25GYWlsdXJlLmJpbmQodGhpcyk7XG4vLyAgICBcbi8vICAgIGlmIChpbWFnZURhdGFDb250ZXh0LmlzRGlzcG9zZWQoKSkge1xuLy8gICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuLy8gICAgICAgICAgICAnQ2Fubm90IGluaXRpYWxpemUgSnBpcEZldGNoSGFuZGxlIHdpdGggZGlzcG9zZWQgSW1hZ2VEYXRhQ29udGV4dCcpO1xuLy8gICAgfVxuLy8gICAgaW1hZ2VEYXRhQ29udGV4dC5vbignZGF0YScsIHRoaXMuX29uRGF0YS5iaW5kKHRoaXMpKTtcbi8vfVxuLy9cbi8vSnBpcEZldGNoSGFuZGxlLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiByZXN1bWUoKSB7XG4vLyAgICBpZiAodGhpcy5fc2VydmVyUmVxdWVzdCAhPT0gbnVsbCkge1xuLy8gICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuLy8gICAgICAgICAgICAnQ2Fubm90IHJlc3VtZSBhbHJlYWR5LWFjdGl2ZS1mZXRjaCcpO1xuLy8gICAgfVxuLy8gICAgXG4vLyAgICBpZiAodGhpcy5faW1hZ2VEYXRhQ29udGV4dC5pc0Rpc3Bvc2VkKCkpIHtcbi8vICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbihcbi8vICAgICAgICAgICAgJ0Nhbm5vdCBmZXRjaCBkYXRhIHdpdGggZGlzcG9zZWQgaW1hZ2VEYXRhQ29udGV4dCcpO1xuLy8gICAgfVxuLy8gICAgXG4vLyAgICBpZiAodGhpcy5faXNNb3ZlZCkge1xuLy8gICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuLy8gICAgICAgICAgICAnQ2Fubm90IHJlc3VtZSBtb3ZhYmxlIGZldGNoIHdoaWNoIGhhcyBiZWVuIGFscmVhZHkgbW92ZWQ7IFNob3VsZCcgK1xuLy8gICAgICAgICAgICAnIHN0YXJ0IGEgbmV3IGZldGNoIHdpdGggc2FtZSBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlIGluc3RlYWQnKTtcbi8vICAgIH1cbi8vICAgIFxuLy8gICAgdGhpcy5fcmVxdWVzdERhdGEoKTtcbi8vfTtcbi8vXG4vL0pwaXBGZXRjaEhhbmRsZS5wcm90b3R5cGUuc3RvcEFzeW5jID0gZnVuY3Rpb24gc3RvcEFzeW5jKCkge1xuLy8gICAgaWYgKHRoaXMuX3NlcnZlclJlcXVlc3QgPT09IG51bGwpIHtcbi8vICAgICAgICBpZiAodGhpcy5faW1hZ2VEYXRhQ29udGV4dC5pc0Rpc3Bvc2VkKCkgfHwgdGhpcy5faW1hZ2VEYXRhQ29udGV4dC5pc0RvbmUoKSkge1xuLy8gICAgICAgICAgICByZXR1cm47XG4vLyAgICAgICAgfVxuLy8gICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuLy8gICAgICAgICAgICAnQ2Fubm90IHN0b3AgYWxyZWFkeSBzdG9wcGVkIGZldGNoJyk7XG4vLyAgICB9XG4vLyAgICBcbi8vICAgIGlmICh0aGlzLl9kZWRpY2F0ZWRDaGFubmVsSGFuZGxlKSB7XG4vLyAgICAgICAgdGhpcy5faXNNb3ZlZCA9IHRydWU7XG4vLyAgICB9IGVsc2Uge1xuLy8gICAgICAgIHRoaXMuX3JlcXVlc3Rlci5zdG9wUmVxdWVzdEFzeW5jKHRoaXMuX3NlcnZlclJlcXVlc3QpO1xuLy8gICAgICAgIHRoaXMuX3NlcnZlclJlcXVlc3QgPSBudWxsO1xuLy8gICAgfVxuLy8gICAgXG4vLyAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4vLyAgICAgICAgLy8gTk9URTogU2VuZCBhIHN0b3AgcmVxdWVzdCB3aXRoaW4gSnBpcFJlcXVlc3QgYW5kIHJlc29sdmUgdGhlIFByb21pc2Vcbi8vICAgICAgICAvLyBvbmx5IGFmdGVyIHNlcnZlciByZXNwb25zZSAoVGhpcyBpcyBvbmx5IHBlcmZvcm1hbmNlIGlzc3VlLCBub1xuLy8gICAgICAgIC8vIGZ1bmN0aW9uYWwgcHJvYmxlbTogYSBuZXcgZmV0Y2ggd2lsbCB0cmlnZ2VyIGEgSlBJUCByZXF1ZXN0IHdpdGhcbi8vICAgICAgICAvLyB3YWl0PW5vLCBhbmQgdGhlIG9sZCByZXF1ZXN0IHdpbGwgYmUgYWN0dWFsbHkgc3RvcHBlZCkuXG4vLyAgICAgICAgcmVzb2x2ZSgpO1xuLy8gICAgfSk7XG4vL307XG4vL1xuLy9KcGlwRmV0Y2hIYW5kbGUucHJvdG90eXBlLl9yZXF1ZXN0ZXJDYWxsYmFja09uQWxsRGF0YVJlY2lldmVkID1cbi8vICAgIGZ1bmN0aW9uIChyZXF1ZXN0LCBpc1Jlc3BvbnNlRG9uZSwgcmVxdWVzdGVkUXVhbGl0eUxheWVyKSB7XG4vLyAgICBcbi8vICAgIGlmIChpc1Jlc3BvbnNlRG9uZSAmJlxuLy8gICAgICAgICF0aGlzLl9pc01vdmVkICYmXG4vLyAgICAgICAgIXRoaXMuX2ltYWdlRGF0YUNvbnRleHQuaXNEaXNwb3NlZCgpICYmXG4vLyAgICAgICAgcmVxdWVzdGVkUXVhbGl0eUxheWVyID4gdGhpcy5fcmVhY2hlZFF1YWxpdHlMYXllcikge1xuLy8gICAgICAgICAgICBcbi8vICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4vLyAgICAgICAgICAgICdKUElQIHNlcnZlciBub3QgcmV0dXJuZWQgYWxsIGRhdGEnLCAnRC4zJyk7XG4vLyAgICB9XG4vL307XG4vL1xuLy9KcGlwRmV0Y2hIYW5kbGUucHJvdG90eXBlLl9yZXF1ZXN0ZXJDYWxsYmFja09uRmFpbHVyZSA9XG4vLyAgICBmdW5jdGlvbiByZXF1ZXN0ZXJDYWxsYmFja09uRmFpbHVyZSgpIHtcbi8vICAgICAgICBcbi8vICAgIC8vdXBkYXRlU3RhdHVzKFNUQVRVU19FTkRFRCwgJ2VuZEFzeW5jKCknKTtcbi8vICAgIFxuLy8gICAgLy9pZiAoZmFpbHVyZUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbi8vICAgIC8vICAgIGZhaWx1cmVDYWxsYmFjayhzZWxmLCB1c2VyQ29udGV4dFZhcnMpO1xuLy8gICAgLy99IGVsc2Uge1xuLy8gICAgLy8gICAgaXNGYWlsdXJlID0gdHJ1ZTtcbi8vICAgIC8vfVxuLy8gICAgdGhpcy5faXNGYWlsdXJlID0gdHJ1ZTtcbi8vXG4vLyAgICBpZiAodGhpcy5faXNNb3ZlZCkge1xuLy8gICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuLy8gICAgICAgICAgICAnRmFpbHVyZSBjYWxsYmFjayB0byBhbiBvbGQgZmV0Y2ggd2hpY2ggaGFzIGJlZW4gYWxyZWFkeSBtb3ZlZCcpO1xuLy8gICAgfVxuLy99O1xuLy9cbi8vSnBpcEZldGNoSGFuZGxlLnByb3RvdHlwZS5fb25EYXRhID0gZnVuY3Rpb24gb25EYXRhKGltYWdlRGF0YUNvbnRleHQpIHtcbi8vICAgIHRoaXMuX3JlYWNoZWRRdWFsaXR5TGF5ZXIgPSB0aGlzLl9yZXF1ZXN0ZWRRdWFsaXR5TGF5ZXI7XG4vLyAgICBcbi8vICAgIGlmIChpbWFnZURhdGFDb250ZXh0ICE9PSB0aGlzLl9pbWFnZURhdGFDb250ZXh0KSB7XG4vLyAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4vLyAgICAgICAgICAgICdVbmV4cGVjdGVkIEltYWdlRGF0YUNvbnRleHQgaW4gRmV0Y2hIYW5kbGUgZXZlbnQnKTtcbi8vICAgIH1cbi8vICAgIFxuLy8gICAgaWYgKCF0aGlzLl9pc01vdmVkICYmXG4vLyAgICAgICAgIXRoaXMuX2ltYWdlRGF0YUNvbnRleHQuaXNEaXNwb3NlZCgpICYmXG4vLyAgICAgICAgdGhpcy5fc2VydmVyUmVxdWVzdCAhPT0gbnVsbCkge1xuLy8gICAgICAgIFxuLy8gICAgICAgIHRoaXMuX3JlcXVlc3REYXRhKCk7XG4vLyAgICB9XG4vL307XG4vL1xuLy9KcGlwRmV0Y2hIYW5kbGUucHJvdG90eXBlLl9yZXF1ZXN0RGF0YSA9IGZ1bmN0aW9uIHJlcXVlc3REYXRhKCkge1xuLy8gICAgaWYgKHRoaXMuX2ltYWdlRGF0YUNvbnRleHQuaXNEb25lKCkpIHtcbi8vICAgICAgICByZXR1cm47XG4vLyAgICB9XG4vLyAgICBcbi8vICAgIHZhciBzZWxmID0gdGhpcztcbi8vICAgIHZhciBudW1RdWFsaXR5TGF5ZXJzVG9XYWl0ID0gdGhpcy5faW1hZ2VEYXRhQ29udGV4dC5nZXROZXh0UXVhbGl0eUxheWVyKCk7XG4vLyAgICB0aGlzLl9yZXF1ZXN0ZWRRdWFsaXR5TGF5ZXIgPSBudW1RdWFsaXR5TGF5ZXJzVG9XYWl0O1xuLy8gICAgICAgIFxuLy8gICAgdGhpcy5fc2VydmVyUmVxdWVzdCA9IHRoaXMuX3JlcXVlc3Rlci5yZXF1ZXN0RGF0YShcbi8vICAgICAgICB0aGlzLl9pbWFnZURhdGFDb250ZXh0LmdldENvZGVzdHJlYW1QYXJ0UGFyYW1zKCksXG4vLyAgICAgICAgZnVuY3Rpb24gYWxsRGF0YVJlY2lldmVkKHJlcXVlc3QsIGlzUmVzcG9uc2VEb25lKSB7XG4vLyAgICAgICAgICAgIHNlbGYuX3JlcXVlc3RlckNhbGxiYWNrT25BbGxEYXRhUmVjaWV2ZWQoXG4vLyAgICAgICAgICAgICAgICByZXF1ZXN0LCBpc1Jlc3BvbnNlRG9uZSwgbnVtUXVhbGl0eUxheWVyc1RvV2FpdCk7XG4vLyAgICAgICAgfSxcbi8vICAgICAgICB0aGlzLl9yZXF1ZXN0ZXJDYWxsYmFja09uRmFpbHVyZUJvdW5kLFxuLy8gICAgICAgIG51bVF1YWxpdHlMYXllcnNUb1dhaXQsXG4vLyAgICAgICAgdGhpcy5fZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSk7XG4vL307XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2FwaS9qcGlwLWZldGNoLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gSnBpcEZldGNoZXI7XG5cbi8qIGdsb2JhbCBjb25zb2xlOiBmYWxzZSAqL1xuXG4vKipcbiAqIFxuICogQHBhcmFtIHtEYXRhYmluc1NhdmVyfSBkYXRhYmluc1NhdmVyIFxuICogQHBhcmFtIHtGZXRjaGVyU2hhcmVkT2JqZWN0c30gZmV0Y2hlclNoYXJlZE9iamVjdHMgXG4gKiBAcGFyYW0ge0ZldGNoZXJPcHRpb25zfSBvcHRpb25zIFxuICogQHBhcmFtIHsqfSBqcGlwRmFjdG9yeSBcbiAqL1xuZnVuY3Rpb24gSnBpcEZldGNoZXIoZGF0YWJpbnNTYXZlciwgZmV0Y2hlclNoYXJlZE9iamVjdHMsIG9wdGlvbnMsIGpwaXBGYWN0b3J5KSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICB2YXIgaXNPcGVuQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIGlzQ2xvc2VDYWxsZWQgPSBmYWxzZTtcbiAgICBcbiAgICB2YXIgcmVzb2x2ZU9wZW4gPSBudWxsO1xuICAgIHZhciByZWplY3RPcGVuID0gbnVsbDtcblxuICAgIHZhciB1cmwgPSBvcHRpb25zLnVybDtcbiAgICB2YXIgcHJvZ3Jlc3NpdmVuZXNzO1xuICAgIFxuICAgIHRoaXMuc2V0UHJvZ3Jlc3NpdmVuZXNzID0gZnVuY3Rpb24gc2V0UHJvZ3Jlc3NpdmVuZXNzKHByb2dyZXNzaXZlbmVzc18pIHtcbiAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzID0gcHJvZ3Jlc3NpdmVuZXNzXztcbiAgICB9O1xuICAgIFxuICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgICAgIGlmIChpc09wZW5DYWxsZWQpIHtcbiAgICAgICAgICAgIHRocm93ICd3ZWJKcGlwIGVycm9yOiBDYW5ub3QgY2FsbCBKcGlwRmV0Y2hlci5vcGVuKCkgdHdpY2UnO1xuICAgICAgICB9XG4gICAgICAgIGlzT3BlbkNhbGxlZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICBpZiAoZmV0Y2hlclNoYXJlZE9iamVjdHMub3BlbmVkQ291bnQpIHtcbiAgICAgICAgICAgICsrZmV0Y2hlclNoYXJlZE9iamVjdHMub3BlbmVkQ291bnQ7XG4gICAgICAgICAgICByZXR1cm4gZmV0Y2hlclNoYXJlZE9iamVjdHMub3BlblByb21pc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBwcm9ncmVzc2lvbk9yZGVyID0gJ1JQQ0wnO1xuICAgICAgICB2YXIgbWF4Q2hhbm5lbHNJblNlc3Npb24gPSBvcHRpb25zLm1heENoYW5uZWxzSW5TZXNzaW9uIHx8IDE7XG4gICAgICAgIHZhciBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCA9XG4gICAgICAgICAgICBvcHRpb25zLm1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsIHx8IDE7XG5cbiAgICAgICAgdmFyIG1haW5IZWFkZXJEYXRhYmluID0gZGF0YWJpbnNTYXZlci5nZXRNYWluSGVhZGVyRGF0YWJpbigpO1xuXG4gICAgICAgIHZhciBtYXJrZXJzUGFyc2VyID0ganBpcEZhY3RvcnkuY3JlYXRlTWFya2Vyc1BhcnNlcihtYWluSGVhZGVyRGF0YWJpbik7XG4gICAgICAgIHZhciBvZmZzZXRzQ2FsY3VsYXRvciA9IGpwaXBGYWN0b3J5LmNyZWF0ZU9mZnNldHNDYWxjdWxhdG9yKFxuICAgICAgICAgICAgbWFpbkhlYWRlckRhdGFiaW4sIG1hcmtlcnNQYXJzZXIpO1xuICAgICAgICB2YXIgc3RydWN0dXJlUGFyc2VyID0ganBpcEZhY3RvcnkuY3JlYXRlU3RydWN0dXJlUGFyc2VyKFxuICAgICAgICAgICAgZGF0YWJpbnNTYXZlciwgbWFya2Vyc1BhcnNlciwgb2Zmc2V0c0NhbGN1bGF0b3IpO1xuICAgICAgICBcbiAgICAgICAgZmV0Y2hlclNoYXJlZE9iamVjdHMuY29kZXN0cmVhbVN0cnVjdHVyZSA9IGpwaXBGYWN0b3J5LmNyZWF0ZUNvZGVzdHJlYW1TdHJ1Y3R1cmUoXG4gICAgICAgICAgICBzdHJ1Y3R1cmVQYXJzZXIsIHByb2dyZXNzaW9uT3JkZXIpO1xuICAgICAgICBmZXRjaGVyU2hhcmVkT2JqZWN0cy5wYXJhbXNNb2RpZmllciA9IGpwaXBGYWN0b3J5LmNyZWF0ZVJlcXVlc3RQYXJhbXNNb2RpZmllcihcbiAgICAgICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUpO1xuXG4gICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzLnJlcXVlc3RlciA9IGpwaXBGYWN0b3J5LmNyZWF0ZVJlY29ubmVjdGFibGVSZXF1ZXN0ZXIoXG4gICAgICAgICAgICBtYXhDaGFubmVsc0luU2Vzc2lvbixcbiAgICAgICAgICAgIG1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsLFxuICAgICAgICAgICAgZmV0Y2hlclNoYXJlZE9iamVjdHMuY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgICAgIGRhdGFiaW5zU2F2ZXIpO1xuICAgICAgICBcbiAgICAgICAgZmV0Y2hlclNoYXJlZE9iamVjdHMucmVxdWVzdGVyLnNldFN0YXR1c0NhbGxiYWNrKHJlcXVlc3RlclN0YXR1c0NhbGxiYWNrKTtcbiAgICAgICAgXG4gICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzLmlzT3BlbkNhbGxlZEJlZm9yZVByb21pc2VJbml0aWFsaXplZCA9IGZhbHNlO1xuICAgICAgICBmZXRjaGVyU2hhcmVkT2JqZWN0cy5vcGVuZWRDb3VudCA9IDE7XG4gICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzLm9wZW5Qcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICByZXNvbHZlT3BlbiA9IHJlc29sdmU7XG4gICAgICAgICAgICByZWplY3RPcGVuID0gcmVqZWN0O1xuICAgICAgICAgICAgZmV0Y2hlclNoYXJlZE9iamVjdHMucmVxdWVzdGVyLm9wZW4odXJsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZmV0Y2hlclNoYXJlZE9iamVjdHMub3BlblByb21pc2U7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChpc0Nsb3NlQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdBbHJlYWR5IGNsb3NlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNPcGVuQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdOb3Qgb3BlbmVkJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNDbG9zZUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBvcGVuZWQgPSAtLWZldGNoZXJTaGFyZWRPYmplY3RzLm9wZW5lZENvdW50O1xuICAgICAgICAgICAgaWYgKG9wZW5lZCA8IDApIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ0luY29uc2lzdGVuY3kgaW4gb3BlbmVkQ291bnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcGVuZWQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBmZXRjaGVyU2hhcmVkT2JqZWN0cy5yZXF1ZXN0ZXIuY2xvc2UocmVzb2x2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5vbiA9IGZ1bmN0aW9uIG9uKCkge1xuICAgICAgICAvLyBSZXF1aXJlZCBmb3IgYWxsIGltYWdlRGVjb2RlckZyYW1ld29yayBmZXRjaGVyIGluc3RhbmNlc1xuICAgIH07XG5cbiAgICB0aGlzLnN0YXJ0RmV0Y2ggPSBmdW5jdGlvbiBzdGFydEZldGNoKGZldGNoQ29udGV4dCwgY29kZXN0cmVhbVBhcnRQYXJhbXMpIHtcbiAgICAgICAgdmFyIHBhcmFtc01vZGlmaWVkID0gZmV0Y2hlclNoYXJlZE9iamVjdHMucGFyYW1zTW9kaWZpZXIubW9kaWZ5Q29kZXN0cmVhbVBhcnRQYXJhbXMoY29kZXN0cmVhbVBhcnRQYXJhbXMpO1xuICAgICAgICB2YXIgZmV0Y2ggPSBjcmVhdGVGZXRjaChmZXRjaENvbnRleHQpO1xuICAgICAgICBcbiAgICAgICAgZmV0Y2gubW92ZShwYXJhbXNNb2RpZmllZCk7XG4gICAgfTtcblxuICAgIHRoaXMuc3RhcnRNb3ZhYmxlRmV0Y2ggPSBmdW5jdGlvbiBzdGFydE1vdmFibGVGZXRjaChmZXRjaENvbnRleHQsIGNvZGVzdHJlYW1QYXJ0UGFyYW1zKSB7XG4gICAgICAgIHZhciBwYXJhbXNNb2RpZmllZCA9IGZldGNoZXJTaGFyZWRPYmplY3RzLnBhcmFtc01vZGlmaWVyLm1vZGlmeUNvZGVzdHJlYW1QYXJ0UGFyYW1zKGNvZGVzdHJlYW1QYXJ0UGFyYW1zKTtcbiAgICAgICAgdmFyIGZldGNoID0gY3JlYXRlRmV0Y2goZmV0Y2hDb250ZXh0KTtcblxuICAgICAgICB2YXIgZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSA9IGZldGNoZXJTaGFyZWRPYmplY3RzLnJlcXVlc3Rlci5kZWRpY2F0ZUNoYW5uZWxGb3JNb3ZhYmxlUmVxdWVzdCgpO1xuICAgICAgICBmZXRjaC5zZXREZWRpY2F0ZWRDaGFubmVsSGFuZGxlKGRlZGljYXRlZENoYW5uZWxIYW5kbGUpO1xuICAgICAgICBmZXRjaENvbnRleHQub24oJ21vdmUnLCBmZXRjaC5tb3ZlKTtcblxuICAgICAgICBmZXRjaC5tb3ZlKHBhcmFtc01vZGlmaWVkKTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZldGNoKGZldGNoQ29udGV4dCkge1xuICAgICAgICAvL3ZhciBpbWFnZURhdGFDb250ZXh0ID0ganBpcEZhY3RvcnkuY3JlYXRlSW1hZ2VEYXRhQ29udGV4dChcbiAgICAgICAgLy8gICAganBpcE9iamVjdHNGb3JSZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgLy8gICAgY29kZXN0cmVhbVBhcnRQYXJhbXNNb2RpZmllZCxcbiAgICAgICAgLy8gICAgcHJvZ3Jlc3NpdmVuZXNzTW9kaWZpZWQpO1xuICAgICAgICAvLyAgICAvL3tcbiAgICAgICAgLy8gICAgLy8gICAgZGlzYWJsZVNlcnZlclJlcXVlc3RzOiAhIW9wdGlvbnMuaXNPbmx5V2FpdEZvckRhdGEsXG4gICAgICAgIC8vICAgIC8vICAgIGlzTW92YWJsZTogZmFsc2UsXG4gICAgICAgIC8vICAgIC8vICAgIHVzZXJDb250ZXh0VmFyczogdXNlckNvbnRleHRWYXJzLFxuICAgICAgICAvLyAgICAvLyAgICBmYWlsdXJlQ2FsbGJhY2s6IG9wdGlvbnMuZmFpbHVyZUNhbGxiYWNrXG4gICAgICAgIC8vICAgIC8vfSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZmV0Y2ggPSBqcGlwRmFjdG9yeS5jcmVhdGVGZXRjaChmZXRjaENvbnRleHQsIGZldGNoZXJTaGFyZWRPYmplY3RzLnJlcXVlc3RlciwgcHJvZ3Jlc3NpdmVuZXNzKTtcblxuICAgICAgICBmZXRjaENvbnRleHQub24oJ2lzUHJvZ3Jlc3NpdmVDaGFuZ2VkJywgZmV0Y2guaXNQcm9ncmVzc2l2ZUNoYW5nZWQpO1xuICAgICAgICBmZXRjaENvbnRleHQub24oJ3Rlcm1pbmF0ZScsIGZldGNoLnRlcm1pbmF0ZSk7XG4gICAgICAgIGZldGNoQ29udGV4dC5vbignc3RvcCcsIGZldGNoLnN0b3ApO1xuICAgICAgICBmZXRjaENvbnRleHQub24oJ3Jlc3VtZScsIGZldGNoLnJlc3VtKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmZXRjaDtcbiAgICB9XG4gICAgXG4gICAgLy90aGlzLnN0YXJ0TW92YWJsZUZldGNoID0gZnVuY3Rpb24gc3RhcnRNb3ZhYmxlRmV0Y2goaW1hZ2VEYXRhQ29udGV4dCwgbW92YWJsZUZldGNoU3RhdGUpIHtcbiAgICAvLyAgICBtb3ZhYmxlRmV0Y2hTdGF0ZS5kZWRpY2F0ZWRDaGFubmVsSGFuZGxlID1cbiAgICAvLyAgICAgICAgcmVxdWVzdGVyLmRlZGljYXRlQ2hhbm5lbEZvck1vdmFibGVSZXF1ZXN0KCk7XG4gICAgLy8gICAgbW92YWJsZUZldGNoU3RhdGUuZmV0Y2hIYW5kbGUgPSBqcGlwRmFjdG9yeS5jcmVhdGVGZXRjaEhhbmRsZShcbiAgICAvLyAgICAgICAgcmVxdWVzdGVyLCBpbWFnZURhdGFDb250ZXh0LCBtb3ZhYmxlRmV0Y2hTdGF0ZS5kZWRpY2F0ZWRDaGFubmVsSGFuZGxlKTtcbiAgICAvLyAgICBtb3ZhYmxlRmV0Y2hTdGF0ZS5mZXRjaEhhbmRsZS5yZXN1bWUoKTtcbiAgICAvL307XG4gICAgLy9cbiAgICAvL3RoaXMubW92ZUZldGNoID0gZnVuY3Rpb24gbW92ZUZldGNoKGltYWdlRGF0YUNvbnRleHQsIG1vdmFibGVGZXRjaFN0YXRlKSB7XG4gICAgLy8gICAgbW92YWJsZUZldGNoU3RhdGUuZmV0Y2hIYW5kbGUuc3RvcEFzeW5jKCk7XG4gICAgLy8gICAgbW92YWJsZUZldGNoU3RhdGUuZmV0Y2hIYW5kbGUgPSBqcGlwRmFjdG9yeS5jcmVhdGVGZXRjaEhhbmRsZShcbiAgICAvLyAgICAgICAgcmVxdWVzdGVyLCBpbWFnZURhdGFDb250ZXh0LCBtb3ZhYmxlRmV0Y2hTdGF0ZS5kZWRpY2F0ZWRDaGFubmVsSGFuZGxlKTtcbiAgICAvLyAgICBtb3ZhYmxlRmV0Y2hTdGF0ZS5mZXRjaEhhbmRsZS5yZXN1bWUoKTtcbiAgICAvL307XG4gICAgXG4gICAgdGhpcy5yZWNvbm5lY3QgPSBmdW5jdGlvbiByZWNvbm5lY3QoKSB7XG4gICAgICAgIGZldGNoZXJTaGFyZWRPYmplY3RzLnJlcXVlc3Rlci5yZWNvbm5lY3QoKTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIHJlcXVlc3RlclN0YXR1c0NhbGxiYWNrKHJlcXVlc3RlclN0YXR1cykge1xuICAgICAgICB2YXIgc2VyaWFsaXphYmxlRXhjZXB0aW9uID0gbnVsbDtcbiAgICAgICAgaWYgKHJlcXVlc3RlclN0YXR1cy5leGNlcHRpb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZUV4Y2VwdGlvbiA9IHJlcXVlc3RlclN0YXR1cy5leGNlcHRpb24udG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHN0YXR1cyA9IHtcbiAgICAgICAgICAgIGlzUmVhZHk6IHJlcXVlc3RlclN0YXR1cy5pc1JlYWR5LFxuICAgICAgICAgICAgZXhjZXB0aW9uOiBzZXJpYWxpemFibGVFeGNlcHRpb25cbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBpZiAoIXJlc29sdmVPcGVuIHx8ICghc3RhdHVzLmlzUmVhZHkgJiYgIXN0YXR1cy5leGNlcHRpb24pKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzLmV4Y2VwdGlvbikge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IE5pY2VyIHdheSB0byBwcm9wYWdhdGUgZXJyb3JzIGZyb20gaGVyZSBpcyByZXF1aXJlZFxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdKcGlwRmV0Y2hlci5yZXF1ZXN0ZXJTdGF0dXNDYWxsYmFjayBnb3QgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAndW5leHBlY3RlZCBleGNlcHRpb246ICcgKyBzdGF0dXMuZXhjZXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT2xkIElFIG5vdCBzdXBwb3J0IGNvbnNvbGUubG9nXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsb2NhbFJlc29sdmUgPSByZXNvbHZlT3BlbjtcbiAgICAgICAgdmFyIGxvY2FsUmVqZWN0ID0gcmVqZWN0T3BlbjtcbiAgICAgICAgcmVzb2x2ZU9wZW4gPSBudWxsO1xuICAgICAgICByZWplY3RPcGVuID0gbnVsbDtcblxuICAgICAgICBpZiAoIXN0YXR1cy5pc1JlYWR5KSB7XG4gICAgICAgICAgICBsb2NhbFJlamVjdChzdGF0dXMuZXhjZXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHBhcmFtcyA9IGZldGNoZXJTaGFyZWRPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0U2l6ZXNQYXJhbXMoKTtcbiAgICAgICAgdmFyIGNsb25lZFBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZSA9IGZldGNoZXJTaGFyZWRPYmplY3RzLmNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0RGVmYXVsdFRpbGVTdHJ1Y3R1cmUoKTtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IHRpbGUuZ2V0RGVmYXVsdENvbXBvbmVudFN0cnVjdHVyZSgpO1xuXG4gICAgICAgIGNsb25lZFBhcmFtcy5pbWFnZUxldmVsID0gMDtcbiAgICAgICAgY2xvbmVkUGFyYW1zLmxvd2VzdFF1YWxpdHkgPSAxO1xuICAgICAgICBjbG9uZWRQYXJhbXMuaGlnaGVzdFF1YWxpdHkgPSB0aWxlLmdldE51bVF1YWxpdHlMYXllcnMoKTtcbiAgICAgICAgY2xvbmVkUGFyYW1zLm51bVJlc29sdXRpb25MZXZlbHNGb3JMaW1pdHRlZFZpZXdlciA9XG4gICAgICAgICAgICBjb21wb25lbnQuZ2V0TnVtUmVzb2x1dGlvbkxldmVscygpO1xuICAgICAgICBcbiAgICAgICAgbG9jYWxSZXNvbHZlKGNsb25lZFBhcmFtcyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvanBpcC1mZXRjaGVyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSnBpcEhlYWRlck1vZGlmaWVyKFxuICAgIG9mZnNldHNDYWxjdWxhdG9yLCBwcm9ncmVzc2lvbk9yZGVyKSB7XG5cbiAgICB2YXIgZW5jb2RlZFByb2dyZXNzaW9uT3JkZXIgPSBlbmNvZGVQcm9ncmVzc2lvbk9yZGVyKHByb2dyZXNzaW9uT3JkZXIpO1xuICAgICAgICBcbiAgICB0aGlzLm1vZGlmeU1haW5PclRpbGVIZWFkZXIgPSBmdW5jdGlvbiBtb2RpZnlNYWluT3JUaWxlSGVhZGVyKFxuICAgICAgICByZXN1bHQsIG9yaWdpbmFsRGF0YWJpbiwgZGF0YWJpbk9mZnNldEluUmVzdWx0LCBsZXZlbCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKCFyZXN1bHQuaXNEdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uKSB7XG4gICAgICAgICAgICBtb2RpZnlQcm9ncmVzc2lvbk9yZGVyKHJlc3VsdCwgb3JpZ2luYWxEYXRhYmluLCBkYXRhYmluT2Zmc2V0SW5SZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAobGV2ZWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBiZXN0UmVzb2x1dGlvbkxldmVsc1JhbmdlcyA9XG4gICAgICAgICAgICBvZmZzZXRzQ2FsY3VsYXRvci5nZXRSYW5nZXNPZkJlc3RSZXNvbHV0aW9uTGV2ZWxzRGF0YShcbiAgICAgICAgICAgICAgICBvcmlnaW5hbERhdGFiaW4sIGxldmVsKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChiZXN0UmVzb2x1dGlvbkxldmVsc1Jhbmdlcy5udW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0ICE9PSBudWxsICYmICFyZXN1bHQuaXNEdW1teUJ1ZmZlckZvckxlbmd0aENhbGN1bGF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID1cbiAgICAgICAgICAgICAgICBkYXRhYmluT2Zmc2V0SW5SZXN1bHQgK1xuICAgICAgICAgICAgICAgIGJlc3RSZXNvbHV0aW9uTGV2ZWxzUmFuZ2VzLm51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICByZXN1bHRbb2Zmc2V0XSAtPSBsZXZlbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGJ5dGVzUmVtb3ZlZCA9IHJlbW92ZVJhbmdlcyhcbiAgICAgICAgICAgIHJlc3VsdCwgYmVzdFJlc29sdXRpb25MZXZlbHNSYW5nZXMucmFuZ2VzLCBkYXRhYmluT2Zmc2V0SW5SZXN1bHQpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGJ5dGVzQWRkZWQgPSAtYnl0ZXNSZW1vdmVkO1xuICAgICAgICByZXR1cm4gYnl0ZXNBZGRlZDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMubW9kaWZ5SW1hZ2VTaXplID0gZnVuY3Rpb24gbW9kaWZ5SW1hZ2VTaXplKFxuICAgICAgICByZXN1bHQsIG5ld1JlZmVyZW5jZUdyaWRTaXplKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzdWx0LmlzRHVtbXlCdWZmZXJGb3JMZW5ndGhDYWxjdWxhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgc2l6TWFya2VyT2Zmc2V0ID0gb2Zmc2V0c0NhbGN1bGF0b3IuZ2V0SW1hZ2VBbmRUaWxlU2l6ZU9mZnNldCgpO1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciByZWZlcmVuY2VHcmlkU2l6ZU9mZnNldCA9XG4gICAgICAgICAgICBzaXpNYXJrZXJPZmZzZXQgKyBqR2xvYmFscy5qMmtPZmZzZXRzLlJFRkVSRU5DRV9HUklEX1NJWkVfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVI7XG5cbiAgICAgICAgdmFyIGltYWdlT2Zmc2V0Qnl0ZXNPZmZzZXQgPSByZWZlcmVuY2VHcmlkU2l6ZU9mZnNldCArIDg7XG4gICAgICAgIHZhciB0aWxlU2l6ZUJ5dGVzT2Zmc2V0ID0gcmVmZXJlbmNlR3JpZFNpemVPZmZzZXQgKyAxNjtcbiAgICAgICAgdmFyIGZpcnN0VGlsZU9mZnNldEJ5dGVzT2Zmc2V0ID0gcmVmZXJlbmNlR3JpZFNpemVPZmZzZXQgKyAyNDtcbiAgICAgICAgXG4gICAgICAgIG1vZGlmeUludDMyKHJlc3VsdCwgcmVmZXJlbmNlR3JpZFNpemVPZmZzZXQsIG5ld1JlZmVyZW5jZUdyaWRTaXplLnJlZ2lvbldpZHRoKTtcbiAgICAgICAgbW9kaWZ5SW50MzIocmVzdWx0LCByZWZlcmVuY2VHcmlkU2l6ZU9mZnNldCArIDQsIG5ld1JlZmVyZW5jZUdyaWRTaXplLnJlZ2lvbkhlaWdodCk7XG4gICAgICAgIFxuICAgICAgICBtb2RpZnlJbnQzMihyZXN1bHQsIHRpbGVTaXplQnl0ZXNPZmZzZXQsIG5ld1JlZmVyZW5jZUdyaWRTaXplLnRpbGVXaWR0aCk7XG4gICAgICAgIG1vZGlmeUludDMyKHJlc3VsdCwgdGlsZVNpemVCeXRlc09mZnNldCArIDQsIG5ld1JlZmVyZW5jZUdyaWRTaXplLnRpbGVIZWlnaHQpO1xuICAgICAgICBcbiAgICAgICAgbW9kaWZ5SW50MzIocmVzdWx0LCBpbWFnZU9mZnNldEJ5dGVzT2Zmc2V0LCAwKTtcbiAgICAgICAgbW9kaWZ5SW50MzIocmVzdWx0LCBpbWFnZU9mZnNldEJ5dGVzT2Zmc2V0ICsgNCwgMCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgIG1vZGlmeUludDMyKHJlc3VsdCwgZmlyc3RUaWxlT2Zmc2V0Qnl0ZXNPZmZzZXQsIDApO1xuICAgICAgICBtb2RpZnlJbnQzMihyZXN1bHQsIGZpcnN0VGlsZU9mZnNldEJ5dGVzT2Zmc2V0ICsgNCwgMCk7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLm1vZGlmeUludDMyID0gbW9kaWZ5SW50MzI7XG4gICAgXG4gICAgZnVuY3Rpb24gbW9kaWZ5UHJvZ3Jlc3Npb25PcmRlcihyZXN1bHQsIG9yaWdpbmFsRGF0YWJpbiwgZGF0YWJpbk9mZnNldEluUmVzdWx0KSB7XG4gICAgICAgIHZhciBjb2RpbmdTdHlsZU9mZnNldCA9IG9mZnNldHNDYWxjdWxhdG9yLmdldENvZGluZ1N0eWxlT2Zmc2V0KG9yaWdpbmFsRGF0YWJpbik7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29kaW5nU3R5bGVPZmZzZXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBwcm9ncmVzc2lvbk9yZGVyT2Zmc2V0ID1cbiAgICAgICAgICAgICAgICBkYXRhYmluT2Zmc2V0SW5SZXN1bHQgKyBjb2RpbmdTdHlsZU9mZnNldCArIDU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc3VsdFtwcm9ncmVzc2lvbk9yZGVyT2Zmc2V0XSA9IGVuY29kZWRQcm9ncmVzc2lvbk9yZGVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHJlbW92ZVJhbmdlcyhyZXN1bHQsIHJhbmdlc1RvUmVtb3ZlLCBhZGRPZmZzZXQpIHtcbiAgICAgICAgaWYgKHJhbmdlc1RvUmVtb3ZlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDA7IC8vIHplcm8gYnl0ZXMgcmVtb3ZlZFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIXJlc3VsdC5pc0R1bW15QnVmZmVyRm9yTGVuZ3RoQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzVG9SZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID1cbiAgICAgICAgICAgICAgICAgICAgYWRkT2Zmc2V0ICtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VzVG9SZW1vdmVbaV0ubWFya2VyU2VnbWVudExlbmd0aE9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTWFya2VyU2VnbWVudExlbmd0aCA9XG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHRbb2Zmc2V0XSA8PCA4KSArIHJlc3VsdFtvZmZzZXQgKyAxXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbmV3TWFya2VyU2VnbWVudExlbmd0aCA9XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsTWFya2VyU2VnbWVudExlbmd0aCAtIHJhbmdlc1RvUmVtb3ZlW2ldLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXN1bHRbb2Zmc2V0XSA9IG5ld01hcmtlclNlZ21lbnRMZW5ndGggPj4+IDg7XG4gICAgICAgICAgICAgICAgcmVzdWx0W29mZnNldCArIDFdID0gbmV3TWFya2VyU2VnbWVudExlbmd0aCAmIDB4RkY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBvZmZzZXRUYXJnZXQgPSBhZGRPZmZzZXQgKyByYW5nZXNUb1JlbW92ZVswXS5zdGFydDtcbiAgICAgICAgdmFyIG9mZnNldFNvdXJjZSA9IG9mZnNldFRhcmdldDtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByYW5nZXNUb1JlbW92ZS5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgb2Zmc2V0U291cmNlICs9IHJhbmdlc1RvUmVtb3ZlW2pdLmxlbmd0aDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG5leHRSYW5nZU9mZnNldCA9XG4gICAgICAgICAgICAgICAgaiArIDEgPCByYW5nZXNUb1JlbW92ZS5sZW5ndGggP1xuICAgICAgICAgICAgICAgICAgICBhZGRPZmZzZXQgKyByYW5nZXNUb1JlbW92ZVtqICsgMV0uc3RhcnQgOlxuICAgICAgICAgICAgICAgICAgICByZXN1bHQubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKDsgb2Zmc2V0U291cmNlIDwgbmV4dFJhbmdlT2Zmc2V0OyArK29mZnNldFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFtvZmZzZXRUYXJnZXRdID0gcmVzdWx0W29mZnNldFNvdXJjZV07XG4gICAgICAgICAgICAgICAgKytvZmZzZXRUYXJnZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlc1JlbW92ZWQgPSBvZmZzZXRTb3VyY2UgLSBvZmZzZXRUYXJnZXQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYnl0ZXNSZW1vdmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZGlmeUludDMyKGJ5dGVzLCBvZmZzZXQsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChieXRlcy5pc0R1bW15QnVmZmVyRm9yTGVuZ3RoQ2FsY3VsYXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgYnl0ZXNbb2Zmc2V0KytdID0gbmV3VmFsdWUgPj4+IDI0O1xuICAgICAgICBieXRlc1tvZmZzZXQrK10gPSAobmV3VmFsdWUgPj4+IDE2KSAmIDB4RkY7XG4gICAgICAgIGJ5dGVzW29mZnNldCsrXSA9IChuZXdWYWx1ZSA+Pj4gOCkgJiAweEZGO1xuICAgICAgICBieXRlc1tvZmZzZXQrK10gPSBuZXdWYWx1ZSAmIDB4RkY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5jb2RlUHJvZ3Jlc3Npb25PcmRlcihwcm9ncmVzc2lvbk9yZGVyKSB7XG4gICAgICAgIC8vIEEuNi4xXG4gICAgICAgIFxuICAgICAgICAvLyBUYWJsZSBBLjE2XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHByb2dyZXNzaW9uT3JkZXIpIHtcbiAgICAgICAgICAgIGNhc2UgJ0xSQ1AnOlxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnUkxDUCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdSUENMJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gMjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSAnUENSTCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDM7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdDUFJMJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gNDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbignUHJvZ3Jlc3Npb24gb3JkZXIgb2YgJyArIHByb2dyZXNzaW9uT3JkZXIsICdBLjYuMSwgdGFibGUgQS4xNicpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd3JpdGVycy9qcGlwLWhlYWRlci1tb2RpZmllci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpwaXBJbWFnZURhdGFDb250ZXh0O1xuXG5mdW5jdGlvbiBKcGlwSW1hZ2VEYXRhQ29udGV4dChqcGlwT2JqZWN0cywgY29kZXN0cmVhbVBhcnQsIG1heFF1YWxpdHksIHByb2dyZXNzaXZlbmVzcykge1xuICAgIHRoaXMuX2NvZGVzdHJlYW1QYXJ0ICAgICAgID0gY29kZXN0cmVhbVBhcnQ7XG4gICAgdGhpcy5fcmVjb25zdHJ1Y3RvciAgICAgICAgPSBqcGlwT2JqZWN0cy5yZWNvbnN0cnVjdG9yO1xuICAgIHRoaXMuX3BhY2tldHNEYXRhQ29sbGVjdG9yID0ganBpcE9iamVjdHMucGFja2V0c0RhdGFDb2xsZWN0b3I7XG4gICAgdGhpcy5fcXVhbGl0eUxheWVyc0NhY2hlICAgPSBqcGlwT2JqZWN0cy5xdWFsaXR5TGF5ZXJzQ2FjaGU7XG4gICAgdGhpcy5fY29kZXN0cmVhbVN0cnVjdHVyZSAgPSBqcGlwT2JqZWN0cy5jb2Rlc3RyZWFtU3RydWN0dXJlO1xuICAgIHRoaXMuX2RhdGFiaW5zU2F2ZXIgICAgICAgID0ganBpcE9iamVjdHMuZGF0YWJpbnNTYXZlcjtcbiAgICB0aGlzLl9qcGlwRmFjdG9yeSAgICAgICAgICA9IGpwaXBPYmplY3RzLmpwaXBGYWN0b3J5O1xuXG4gICAgdGhpcy5fbWF4UXVhbGl0eVBlclByZWNpbmN0ID0gW107XG4gICAgdGhpcy5fcmVnaXN0ZXJlZFByZWNpbmN0RGF0YWJpbnMgPSBbXTtcbiAgICB0aGlzLl9kYXRhTGlzdGVuZXJzID0gW107XG4gICAgdGhpcy5faXNEaXNwb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuX2lzUHJvZ3Jlc3NpdmUgPSB0cnVlO1xuICAgIFxuICAgIHRoaXMuX2xpc3RlbmVyID0gdGhpcy5fanBpcEZhY3RvcnkuY3JlYXRlUXVhbGl0eVdhaXRlcihcbiAgICAgICAgdGhpcy5fY29kZXN0cmVhbVBhcnQsXG4gICAgICAgIHByb2dyZXNzaXZlbmVzcyxcbiAgICAgICAgbWF4UXVhbGl0eSxcbiAgICAgICAgdGhpcy5fcXVhbGl0eUxheWVyUmVhY2hlZENhbGxiYWNrLFxuICAgICAgICB0aGlzLl9jb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICB0aGlzLl9kYXRhYmluc1NhdmVyLFxuICAgICAgICB0aGlzLl9zdGFydFRyYWNrUHJlY2luY3QsXG4gICAgICAgIHRoaXMpO1xuICAgIFxuICAgIHRoaXMuX2xpc3RlbmVyLnJlZ2lzdGVyKCk7XG59XG5cbkpwaXBJbWFnZURhdGFDb250ZXh0LnByb3RvdHlwZS5nZXRQcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkID0gZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCgpIHtcbiAgICAvL2Vuc3VyZU5vRmFpbHVyZSgpO1xuICAgIHRoaXMuX2Vuc3VyZU5vdERpc3Bvc2VkKCk7XG4gICAgcmV0dXJuIHRoaXMuX2xpc3RlbmVyLmdldFByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQoKTtcbn07XG5cbkpwaXBJbWFnZURhdGFDb250ZXh0LnByb3RvdHlwZS5nZXRGZXRjaGVkRGF0YSA9IGZ1bmN0aW9uIGdldEZldGNoZWREYXRhKHF1YWxpdHkpIHtcbiAgICB0aGlzLl9lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgIGlmICh0aGlzLmdldFByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQoKSA9PT0gMCkge1xuICAgICAgICB0aHJvdyAnSnBpcEltYWdlRGF0YUNvbnRleHQgZXJyb3I6IGNhbm5vdCBjYWxsIGdldEZldGNoZWREYXRhIGJlZm9yZSBnZXRQcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkKCkgPiAwJztcbiAgICB9XG4gICAgXG4gICAgLy9lbnN1cmVOb0ZhaWx1cmUoKTtcbiAgICB2YXIgbWluUXVhbGl0eSA9IHRoaXMuX2xpc3RlbmVyLmdldFF1YWxpdHlSZWFjaGVkKCk7XG4gICAgaWYgKHF1YWxpdHkpIHtcbiAgICAgICAgaWYgKHF1YWxpdHkgPiBtaW5RdWFsaXR5KSB7XG4gICAgICAgICAgICB0aHJvdyAnSnBpcEltYWdlRGF0YUNvbnRleHQgZXJyb3I6IGdldEZldGNoZWREYXRhIGNhbGxlZCAnICtcbiAgICAgICAgICAgICAgICAnd2l0aCBxdWFsaXR5IGhpZ2hlciB0aGFuIGFscmVhZHkgcmVhY2hlZCc7XG4gICAgICAgIH1cbiAgICAgICAgbWluUXVhbGl0eSA9IHF1YWxpdHk7XG4gICAgfVxuICAgIHZhciBjb2RlYmxvY2tzID0gdGhpcy5fcGFja2V0c0RhdGFDb2xsZWN0b3IuZ2V0QWxsQ29kZWJsb2Nrc0RhdGEoXG4gICAgICAgIHRoaXMuX2NvZGVzdHJlYW1QYXJ0LCBtaW5RdWFsaXR5LCBxdWFsaXR5KTtcbiAgICBcbiAgICB2YXIgaGVhZGVyc0NvZGVzdHJlYW0gPVxuICAgICAgICB0aGlzLl9nZXRDb2Rlc3RyZWFtKC8qaXNPbmx5SGVhZGVyc1dpdGhvdXRCaXRzdHJlYW09Ki90cnVlKTtcbiAgICBcbiAgICBpZiAoY29kZWJsb2Nrcy5jb2RlYmxvY2tzRGF0YSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICdDb3VsZCBub3QgY29sbGVjdCBjb2RlYmxvY2tzIGFsdGhvdWdoIHByb2dyZXNzaXZlbmVzcyAnICtcbiAgICAgICAgICAgICdzdGFnZSBoYXMgYmVlbiByZWFjaGVkJyk7XG4gICAgfVxuICAgIFxuICAgIGlmIChoZWFkZXJzQ29kZXN0cmVhbSA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICdDb3VsZCBub3QgcmVjb25zdHJ1Y3QgY29kZXN0cmVhbSBhbHRob3VnaCAnICtcbiAgICAgICAgICAgICdwcm9ncmVzc2l2ZW5lc3Mgc3RhZ2UgaGFzIGJlZW4gcmVhY2hlZCcpO1xuICAgIH1cbiAgICBcbiAgICAvL2FscmVhZHlSZXR1cm5lZENvZGVibG9ja3MgPSBjb2RlYmxvY2tzLmFscmVhZHlSZXR1cm5lZENvZGVibG9ja3M7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaGVhZGVyc0NvZGVzdHJlYW06IGhlYWRlcnNDb2Rlc3RyZWFtLFxuICAgICAgICBjb2RlYmxvY2tzRGF0YTogY29kZWJsb2Nrcy5jb2RlYmxvY2tzRGF0YSxcbiAgICAgICAgbWluUXVhbGl0eTogbWluUXVhbGl0eVxuICAgIH07XG59O1xuXG5KcGlwSW1hZ2VEYXRhQ29udGV4dC5wcm90b3R5cGUuZ2V0RmV0Y2hlZERhdGFBc0NvZGVzdHJlYW0gPSBmdW5jdGlvbiBnZXRGZXRjaGVkRGF0YUFzQ29kZXN0cmVhbSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2V0Q29kZXN0cmVhbSgvKmlzT25seUhlYWRlcnNXaXRob3V0Qml0c3RyZWFtPSovZmFsc2UpO1xufTtcblxuSnBpcEltYWdlRGF0YUNvbnRleHQucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgdGhpcy5fZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICBpZiAoZXZlbnQgIT09ICdkYXRhJykge1xuICAgICAgICB0aHJvdyAnSnBpcEltYWdlRGF0YUNvbnRleHQgZXJyb3I6IFVuZXhwZWN0ZWQgZXZlbnQgJyArIGV2ZW50O1xuICAgIH1cbiAgICBcbiAgICB0aGlzLl9kYXRhTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xufTtcblxuSnBpcEltYWdlRGF0YUNvbnRleHQucHJvdG90eXBlLmlzRG9uZSA9IGZ1bmN0aW9uIGlzRG9uZSgpIHtcbiAgICB0aGlzLl9lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgIHJldHVybiB0aGlzLl9saXN0ZW5lci5pc0RvbmUoKTtcbn07XG5cbkpwaXBJbWFnZURhdGFDb250ZXh0LnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9lbnN1cmVOb3REaXNwb3NlZCgpO1xuICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuX2xpc3RlbmVyLnVucmVnaXN0ZXIoKTtcbiAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9yZWdpc3RlcmVkUHJlY2luY3REYXRhYmlucy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgZGF0YWJpbkxpc3RlbmVySGFuZGxlID0gdGhpcy5fcmVnaXN0ZXJlZFByZWNpbmN0RGF0YWJpbnNbaV07XG4gICAgICAgIHRoaXMuX2RhdGFiaW5zU2F2ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihkYXRhYmluTGlzdGVuZXJIYW5kbGUpO1xuICAgIH1cbn07XG5cbkpwaXBJbWFnZURhdGFDb250ZXh0LnByb3RvdHlwZS5zZXRJc1Byb2dyZXNzaXZlID0gZnVuY3Rpb24gc2V0SXNQcm9ncmVzc2l2ZShpc1Byb2dyZXNzaXZlKSB7XG4gICAgdGhpcy5fZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICB2YXIgb2xkSXNQcm9ncmVzc2l2ZSA9IHRoaXMuX2lzUHJvZ3Jlc3NpdmU7XG4gICAgdGhpcy5faXNQcm9ncmVzc2l2ZSA9IGlzUHJvZ3Jlc3NpdmU7XG4gICAgaWYgKCFvbGRJc1Byb2dyZXNzaXZlICYmIGlzUHJvZ3Jlc3NpdmUgJiYgdGhpcy5nZXRQcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkKCkgPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZGF0YUxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YUxpc3RlbmVyc1tpXSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIFByaXZhdGUgbWV0aG9kc1xuXG5KcGlwSW1hZ2VEYXRhQ29udGV4dC5wcm90b3R5cGUuX2dldENvZGVzdHJlYW0gPSBmdW5jdGlvbiBnZXRDb2Rlc3RyZWFtKFxuICAgIGlzT25seUhlYWRlcnNXaXRob3V0Qml0c3RyZWFtKSB7XG4gICAgXG4gICAgdGhpcy5fZW5zdXJlTm90RGlzcG9zZWQoKTtcbiAgICAvL2Vuc3VyZU5vRmFpbHVyZSgpO1xuICAgIFxuICAgIHZhciBxdWFsaXR5UmVhY2hlZCA9IHRoaXMuX2xpc3RlbmVyLmdldFF1YWxpdHlSZWFjaGVkKCk7XG4gICAgXG4gICAgdmFyIGNvZGVzdHJlYW07XG4gICAgaWYgKGlzT25seUhlYWRlcnNXaXRob3V0Qml0c3RyZWFtKSB7XG4gICAgICAgIGNvZGVzdHJlYW0gPSB0aGlzLl9yZWNvbnN0cnVjdG9yLmNyZWF0ZUhlYWRlcnNDb2Rlc3RyZWFtKHRoaXMuX2NvZGVzdHJlYW1QYXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb2Rlc3RyZWFtID0gdGhpcy5fcmVjb25zdHJ1Y3Rvci5jcmVhdGVDb2Rlc3RyZWFtKFxuICAgICAgICAgICAgdGhpcy5fY29kZXN0cmVhbVBhcnQsIHF1YWxpdHlSZWFjaGVkKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKGNvZGVzdHJlYW0gPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAnQ291bGQgbm90IHJlY29uc3RydWN0IGNvZGVzdHJlYW0gYWx0aG91Z2ggJyArXG4gICAgICAgICAgICAncHJvZ3Jlc3NpdmVuZXNzIHN0YWdlIGhhcyBiZWVuIHJlYWNoZWQnKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIGNvZGVzdHJlYW07XG59O1xuXG5KcGlwSW1hZ2VEYXRhQ29udGV4dC5wcm90b3R5cGUuX3N0YXJ0VHJhY2tQcmVjaW5jdCA9IGZ1bmN0aW9uIHN0YXJ0VHJhY2tQcmVjaW5jdChcbiAgICBwcmVjaW5jdERhdGFiaW4sIG1heFF1YWxpdHksIHByZWNpbmN0SXRlcmF0b3IsIHByZWNpbmN0SGFuZGxlKSB7XG4gICAgXG4gICAgdmFyIGluQ2xhc3NJbmRleCA9IHByZWNpbmN0RGF0YWJpbi5nZXRJbkNsYXNzSWQoKTtcbiAgICB0aGlzLl9tYXhRdWFsaXR5UGVyUHJlY2luY3RbaW5DbGFzc0luZGV4XSA9IG1heFF1YWxpdHk7XG4gICAgdmFyIGhhbmRsZSA9IHRoaXMuX2RhdGFiaW5zU2F2ZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgcHJlY2luY3REYXRhYmluLCAnZGF0YUFycml2ZWQnLCB0aGlzLl9wcmVjaW5jdERhdGFBcnJpdmVkLCB0aGlzKTtcbiAgICB0aGlzLl9yZWdpc3RlcmVkUHJlY2luY3REYXRhYmlucy5wdXNoKGhhbmRsZSk7XG4gICAgXG4gICAgdGhpcy5fcHJlY2luY3REYXRhQXJyaXZlZChwcmVjaW5jdERhdGFiaW4sIHByZWNpbmN0SXRlcmF0b3IpO1xufTtcblxuSnBpcEltYWdlRGF0YUNvbnRleHQucHJvdG90eXBlLl9wcmVjaW5jdERhdGFBcnJpdmVkID0gZnVuY3Rpb24gcHJlY2luY3REYXRhQXJyaXZlZChwcmVjaW5jdERhdGFiaW4sIHByZWNpbmN0SXRlcmF0b3JPcHRpb25hbCkge1xuICAgIHZhciBpbkNsYXNzSW5kZXggPSBwcmVjaW5jdERhdGFiaW4uZ2V0SW5DbGFzc0lkKCk7XG4gICAgdmFyIG1heFF1YWxpdHkgPSB0aGlzLl9tYXhRdWFsaXR5UGVyUHJlY2luY3RbaW5DbGFzc0luZGV4XTtcbiAgICB2YXIgcXVhbGl0eUxheWVycyA9IHRoaXMuX3F1YWxpdHlMYXllcnNDYWNoZS5nZXRRdWFsaXR5TGF5ZXJPZmZzZXQoXG4gICAgICAgIHByZWNpbmN0RGF0YWJpbixcbiAgICAgICAgbWF4UXVhbGl0eSxcbiAgICAgICAgcHJlY2luY3RJdGVyYXRvck9wdGlvbmFsKTtcbiAgICBcbiAgICB0aGlzLl9saXN0ZW5lci5wcmVjaW5jdFF1YWxpdHlMYXllclJlYWNoZWQoaW5DbGFzc0luZGV4LCBxdWFsaXR5TGF5ZXJzLm51bVF1YWxpdHlMYXllcnMpO1xufTtcblxuSnBpcEltYWdlRGF0YUNvbnRleHQucHJvdG90eXBlLl9xdWFsaXR5TGF5ZXJSZWFjaGVkQ2FsbGJhY2sgPSBmdW5jdGlvbiBxdWFsaXR5TGF5ZXJSZWFjaGVkQ2FsbGJhY2soKSB7XG4gICAgaWYgKCF0aGlzLl9pc1Byb2dyZXNzaXZlICYmICF0aGlzLl9saXN0ZW5lci5pc0RvbmUoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fZGF0YUxpc3RlbmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLl9kYXRhTGlzdGVuZXJzW2ldKHRoaXMpO1xuICAgIH1cbn07XG5cbkpwaXBJbWFnZURhdGFDb250ZXh0LnByb3RvdHlwZS5fZW5zdXJlTm90RGlzcG9zZWQgPSBmdW5jdGlvbiBlbnN1cmVOb3REaXNwb3NlZCgpIHtcbiAgICBpZiAodGhpcy5faXNEaXNwb3NlZCkge1xuICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbignQ2Fubm90IHVzZSBJbWFnZURhdGFDb250ZXh0IGFmdGVyIGRpc3Bvc2VkJyk7XG4gICAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9hcGkvanBpcC1pbWFnZS1kYXRhLWNvbnRleHQuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcbnZhciBMT0cyID0gTWF0aC5sb2coMik7XG5cbi8qIFRPRE86IE5lZWQgdG8gc2VwYXJhdGUgdGhpcyBjbGFzcyBpbnRvIHR3byBmdW5jdGlvbmFsaXRpZXM6XG4gKiAtIEludGVybmFsIHNpemVzIGNhbGN1bGF0b3IgaW4ganBpcCBzdHJ1Y3R1cmUgKHJlZmVyZWQgYXMgc2l6ZXNDYWxjdWxhdG9yKVxuICogLSBJbnRlcmZhY2UgZm9yIGltYWdlLWRlY29kZXItZnJhbWV3b3JrLmpzIChpbXBsZW1lbnRzIExldmVsQ2FsY3VsYXRvcilcbiAqIEFsc28sIHNvbWUgb2YgdGhlIG1ldGhvZHMgaGVyZSBhcmUgYWN0dWFsbHkgYWNjZXNzZWQgZnJvbVxuICogY29kZXN0cmVhbVN0cnVjdHVyZSwgd2hpY2ggb25seSBkZWxlZ2F0ZXMgdGhlIGNhbGwgdG8gaGVyZS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBMZXZlbENhbGN1bGF0b3IoXG4gICAgcGFyYW1zKSB7XG4gICAgXG4gICAgdmFyIEVER0VfVFlQRV9OT19FREdFID0gMDtcbiAgICB2YXIgRURHRV9UWVBFX0ZJUlNUID0gMTtcbiAgICB2YXIgRURHRV9UWVBFX0xBU1QgPSAyO1xuXG4gICAgdGhpcy5FREdFX1RZUEVfTk9fRURHRSA9IEVER0VfVFlQRV9OT19FREdFO1xuICAgIHRoaXMuRURHRV9UWVBFX0ZJUlNUID0gRURHRV9UWVBFX0ZJUlNUO1xuICAgIHRoaXMuRURHRV9UWVBFX0xBU1QgPSBFREdFX1RZUEVfTEFTVDtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVzRnJvbVBpeGVscyA9IGdldFRpbGVzRnJvbVBpeGVscztcbiAgICBcbiAgICB0aGlzLmdldE51bVRpbGVzWCA9IGdldE51bVRpbGVzWDtcbiAgICBcbiAgICB0aGlzLmdldE51bVRpbGVzWSA9IGdldE51bVRpbGVzWTtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVXaWR0aCA9IGdldFRpbGVXaWR0aDtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVIZWlnaHQgPSBnZXRUaWxlSGVpZ2h0O1xuICAgIFxuICAgIHRoaXMuZ2V0Rmlyc3RUaWxlT2Zmc2V0WCA9IGdldEZpcnN0VGlsZU9mZnNldFg7XG4gICAgXG4gICAgdGhpcy5nZXRGaXJzdFRpbGVPZmZzZXRZID0gZ2V0Rmlyc3RUaWxlT2Zmc2V0WTtcbiAgICBcbiAgICB0aGlzLmdldEZpcnN0VGlsZVdpZHRoID0gZ2V0Rmlyc3RUaWxlV2lkdGg7XG4gICAgXG4gICAgdGhpcy5nZXRGaXJzdFRpbGVIZWlnaHQgPSBnZXRGaXJzdFRpbGVIZWlnaHQ7XG4gICAgXG4gICAgdGhpcy5pc0VkZ2VUaWxlSWQgPSBpc0VkZ2VUaWxlSWQ7XG4gICAgXG4gICAgdGhpcy5nZXRUaWxlU2l6ZSA9IGdldFRpbGVTaXplO1xuICAgIFxuICAgIC8vIFB1YmxpYyBtZXRob2RzIGZvciBpbWFnZURlY29kZXJGcmFtZXdvcmsuanNcbiAgICBcbiAgICB0aGlzLmdldExldmVsV2lkdGggPSBnZXRMZXZlbFdpZHRoO1xuICAgIFxuICAgIHRoaXMuZ2V0TGV2ZWxIZWlnaHQgPSBnZXRMZXZlbEhlaWdodDtcbiAgICBcbiAgICB0aGlzLmdldEltYWdlTGV2ZWwgPSBmdW5jdGlvbiBnZXRJbWFnZUxldmVsKCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TGV2ZWwgPSBmdW5jdGlvbiBnZXRMZXZlbChyZWdpb25JbWFnZUxldmVsKSB7XG4gICAgICAgIGlmIChwYXJhbXMubnVtUmVzb2x1dGlvbkxldmVsc0ZvckxpbWl0dGVkVmlld2VyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93ICdUaGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSB3aGVuIGpwaXBTaXplc0NhbGN1bGF0b3IgJyArXG4gICAgICAgICAgICAgICAgJ2lzIGNyZWF0ZWQgZnJvbSBwYXJhbXMgcmV0dXJuZWQgYnkganBpcENvZGVzdHJlYW1DbGllbnQuICcgK1xuICAgICAgICAgICAgICAgICdJdCBzaGFsbCBiZSB1c2VkIGZvciBKUElQIEFQSSBwdXJwb3NlcyBvbmx5JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGxldmVsWCA9IE1hdGgubG9nKChyZWdpb25JbWFnZUxldmVsLm1heFhFeGNsdXNpdmUgLSByZWdpb25JbWFnZUxldmVsLm1pblgpIC8gcmVnaW9uSW1hZ2VMZXZlbC5zY3JlZW5XaWR0aCApIC8gTE9HMjtcbiAgICAgICAgdmFyIGxldmVsWSA9IE1hdGgubG9nKChyZWdpb25JbWFnZUxldmVsLm1heFlFeGNsdXNpdmUgLSByZWdpb25JbWFnZUxldmVsLm1pblkpIC8gcmVnaW9uSW1hZ2VMZXZlbC5zY3JlZW5IZWlnaHQpIC8gTE9HMjtcbiAgICAgICAgdmFyIGxldmVsID0gTWF0aC5jZWlsKE1hdGgubWF4KGxldmVsWCwgbGV2ZWxZKSk7XG4gICAgICAgIGxldmVsID0gTWF0aC5tYXgoMCwgTWF0aC5taW4ocGFyYW1zLm51bVJlc29sdXRpb25MZXZlbHNGb3JMaW1pdHRlZFZpZXdlciAtIDEsIGxldmVsKSk7XG4gICAgICAgIHJldHVybiBsZXZlbDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TnVtUmVzb2x1dGlvbkxldmVsc0ZvckxpbWl0dGVkVmlld2VyID1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TnVtUmVzb2x1dGlvbkxldmVsc0ZvckxpbWl0dGVkVmlld2VyKCkge1xuICAgICAgICBcbiAgICAgICAgaWYgKHBhcmFtcy5udW1SZXNvbHV0aW9uTGV2ZWxzRm9yTGltaXR0ZWRWaWV3ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgJ1RoaXMgbWV0aG9kIGlzIGF2YWlsYWJsZSBvbmx5IHdoZW4ganBpcFNpemVzQ2FsY3VsYXRvciAnICtcbiAgICAgICAgICAgICAgICAnaXMgY3JlYXRlZCBmcm9tIHBhcmFtcyByZXR1cm5lZCBieSBqcGlwQ29kZXN0cmVhbUNsaWVudC4gJyArXG4gICAgICAgICAgICAgICAgJ0l0IHNoYWxsIGJlIHVzZWQgZm9yIEpQSVAgQVBJIHB1cnBvc2VzIG9ubHknO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcGFyYW1zLm51bVJlc29sdXRpb25MZXZlbHNGb3JMaW1pdHRlZFZpZXdlcjtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TG93ZXN0UXVhbGl0eSA9IGZ1bmN0aW9uIGdldExvd2VzdFF1YWxpdHkoKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRIaWdoZXN0UXVhbGl0eSA9IGZ1bmN0aW9uIGdldEhpZ2hlc3RRdWFsaXR5KCkge1xuICAgICAgICBpZiAocGFyYW1zLmhpZ2hlc3RRdWFsaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93ICdUaGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSB3aGVuIGpwaXBTaXplc0NhbGN1bGF0b3IgJyArXG4gICAgICAgICAgICAgICAgJ2lzIGNyZWF0ZWQgZnJvbSBwYXJhbXMgcmV0dXJuZWQgYnkganBpcENvZGVzdHJlYW1DbGllbnQuICcgK1xuICAgICAgICAgICAgICAgICdJdCBzaGFsbCBiZSB1c2VkIGZvciBKUElQIEFQSSBwdXJwb3NlcyBvbmx5JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5oaWdoZXN0UXVhbGl0eTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0U2l6ZU9mVGlsZXMgPSBnZXRTaXplT2ZUaWxlcztcbiAgICBcbiAgICAvLyBQcml2YXRlIG1ldGhvZHNcbiAgICBcbiAgICBmdW5jdGlvbiBnZXRTaXplT2ZUaWxlcyh0aWxlQm91bmRzKSB7XG4gICAgICAgIHZhciBsZXZlbCA9IHRpbGVCb3VuZHMubGV2ZWw7XG4gICAgICAgIHZhciB0aWxlV2lkdGggPSBnZXRUaWxlV2lkdGgobGV2ZWwpO1xuICAgICAgICB2YXIgdGlsZUhlaWdodCA9IGdldFRpbGVIZWlnaHQobGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGZpcnN0VGlsZUluZGV4ID1cbiAgICAgICAgICAgIHRpbGVCb3VuZHMubWluVGlsZVggKyB0aWxlQm91bmRzLm1pblRpbGVZICogZ2V0TnVtVGlsZXNYKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgdmFyIGxhc3RUaWxlSW5kZXggPVxuICAgICAgICAgICAgKHRpbGVCb3VuZHMubWF4VGlsZVhFeGNsdXNpdmUgLSAxKSArXG4gICAgICAgICAgICAodGlsZUJvdW5kcy5tYXhUaWxlWUV4Y2x1c2l2ZSAtIDEpICogZ2V0TnVtVGlsZXNYKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZmlyc3RFZGdlVHlwZSA9IGlzRWRnZVRpbGVJZChmaXJzdFRpbGVJbmRleCk7XG4gICAgICAgIHZhciBsYXN0RWRnZVR5cGUgPSBpc0VkZ2VUaWxlSWQobGFzdFRpbGVJbmRleCk7XG4gICAgICAgIHZhciBmaXJzdFNpemUgPSBnZXRUaWxlU2l6ZShmaXJzdEVkZ2VUeXBlLCBsZXZlbCk7XG4gICAgICAgIHZhciBsYXN0U2l6ZSA9IGdldFRpbGVTaXplKGxhc3RFZGdlVHlwZSwgbGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHdpZHRoID0gZmlyc3RTaXplLndpZHRoO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gZmlyc3RTaXplLmhlaWdodDtcblxuICAgICAgICB2YXIgdGlsZXNYID0gdGlsZUJvdW5kcy5tYXhUaWxlWEV4Y2x1c2l2ZSAtIHRpbGVCb3VuZHMubWluVGlsZVg7XG4gICAgICAgIHZhciB0aWxlc1kgPSB0aWxlQm91bmRzLm1heFRpbGVZRXhjbHVzaXZlIC0gdGlsZUJvdW5kcy5taW5UaWxlWTtcbiAgICAgICAgXG4gICAgICAgIGlmICh0aWxlc1ggPiAxKSB7XG4gICAgICAgICAgICB3aWR0aCArPSBsYXN0U2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHdpZHRoICs9IHRpbGVXaWR0aCAqICh0aWxlc1ggLSAyKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRpbGVzWSA+IDEpIHtcbiAgICAgICAgICAgIGhlaWdodCArPSBsYXN0U2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICBoZWlnaHQgKz0gdGlsZUhlaWdodCAqICh0aWxlc1kgLSAyKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlZ2lvbldpZHRoOiB3aWR0aCxcbiAgICAgICAgICAgIHJlZ2lvbkhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgdGlsZVdpZHRoOiB0aWxlV2lkdGgsXG4gICAgICAgICAgICB0aWxlSGVpZ2h0OiB0aWxlSGVpZ2h0XG4gICAgICAgIH07XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldFRpbGVzRnJvbVBpeGVscyhjb2Rlc3RyZWFtUGFydFBhcmFtcykge1xuICAgICAgICB2YXIgbGV2ZWwgPSBjb2Rlc3RyZWFtUGFydFBhcmFtcy5sZXZlbDtcblxuICAgICAgICB2YXIgdGlsZVdpZHRoID0gZ2V0VGlsZVdpZHRoKGxldmVsKTtcbiAgICAgICAgdmFyIHRpbGVIZWlnaHQgPSBnZXRUaWxlSGVpZ2h0KGxldmVsKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBmaXJzdFRpbGVXaWR0aCA9IGdldEZpcnN0VGlsZVdpZHRoKGxldmVsKTtcbiAgICAgICAgdmFyIGZpcnN0VGlsZUhlaWdodCA9IGdldEZpcnN0VGlsZUhlaWdodChsZXZlbCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbWluWCA9IGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWTtcbiAgICAgICAgdmFyIG1heFggPSBjb2Rlc3RyZWFtUGFydFBhcmFtcy5tYXhYRXhjbHVzaXZlO1xuICAgICAgICB2YXIgbWF4WSA9IGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1heFlFeGNsdXNpdmU7XG4gICAgICAgIHZhciBzdGFydFhOb0ZpcnN0ID0gKG1pblggLSBmaXJzdFRpbGVXaWR0aCkgLyB0aWxlV2lkdGg7XG4gICAgICAgIHZhciBzdGFydFlOb0ZpcnN0ID0gKG1pblkgLSBmaXJzdFRpbGVIZWlnaHQpIC8gdGlsZUhlaWdodDtcbiAgICAgICAgdmFyIGVuZFhOb0ZpcnN0ID0gKG1heFggLSBmaXJzdFRpbGVXaWR0aCkgLyB0aWxlV2lkdGg7XG4gICAgICAgIHZhciBlbmRZTm9GaXJzdCA9IChtYXhZIC0gZmlyc3RUaWxlSGVpZ2h0KSAvIHRpbGVIZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgbWluVGlsZVggPSBNYXRoLm1heCgwLCAxICsgc3RhcnRYTm9GaXJzdCk7XG4gICAgICAgIHZhciBtaW5UaWxlWSA9IE1hdGgubWF4KDAsIDEgKyBzdGFydFlOb0ZpcnN0KTtcbiAgICAgICAgdmFyIG1heFRpbGVYID0gTWF0aC5taW4oZ2V0TnVtVGlsZXNYKCksIDEgKyBlbmRYTm9GaXJzdCk7XG4gICAgICAgIHZhciBtYXhUaWxlWSA9IE1hdGgubWluKGdldE51bVRpbGVzWSgpLCAxICsgZW5kWU5vRmlyc3QpO1xuXG4gICAgICAgIHZhciBib3VuZHMgPSB7XG4gICAgICAgICAgICBsZXZlbDogbGV2ZWwsXG4gICAgICAgICAgICBtaW5UaWxlWDogTWF0aC5mbG9vcihtaW5UaWxlWCksXG4gICAgICAgICAgICBtaW5UaWxlWTogTWF0aC5mbG9vcihtaW5UaWxlWSksXG4gICAgICAgICAgICBtYXhUaWxlWEV4Y2x1c2l2ZTogTWF0aC5jZWlsKG1heFRpbGVYKSxcbiAgICAgICAgICAgIG1heFRpbGVZRXhjbHVzaXZlOiBNYXRoLmNlaWwobWF4VGlsZVkpXG4gICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGJvdW5kcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUaWxlU2l6ZShlZGdlVHlwZSwgbGV2ZWwpIHtcbiAgICAgICAgdmFyIHRpbGVXaWR0aCA9IGdldFRpbGVEaW1lbnNpb25TaXplKFxuICAgICAgICAgICAgZWRnZVR5cGUuaG9yaXpvbnRhbEVkZ2VUeXBlLFxuICAgICAgICAgICAgZ2V0Rmlyc3RUaWxlV2lkdGgsXG4gICAgICAgICAgICBnZXRMZXZlbFdpZHRoLFxuICAgICAgICAgICAgZ2V0VGlsZVdpZHRoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlSGVpZ2h0ID0gZ2V0VGlsZURpbWVuc2lvblNpemUoXG4gICAgICAgICAgICBlZGdlVHlwZS52ZXJ0aWNhbEVkZ2VUeXBlLFxuICAgICAgICAgICAgZ2V0Rmlyc3RUaWxlSGVpZ2h0LFxuICAgICAgICAgICAgZ2V0TGV2ZWxIZWlnaHQsXG4gICAgICAgICAgICBnZXRUaWxlSGVpZ2h0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChsZXZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc2NhbGUgPSAxIDw8IGxldmVsO1xuICAgICAgICAgICAgdGlsZVdpZHRoID0gTWF0aC5jZWlsKHRpbGVXaWR0aCAvIHNjYWxlKTtcbiAgICAgICAgICAgIHRpbGVIZWlnaHQgPSBNYXRoLmNlaWwodGlsZUhlaWdodCAvIHNjYWxlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiB0aWxlV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRpbGVIZWlnaHRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUaWxlRGltZW5zaW9uU2l6ZShcbiAgICAgICAgZWRnZVR5cGUsIGdldEZpcnN0VGlsZVNpemUsIGdldExldmVsU2l6ZSwgZ2V0Tm9uRWRnZVRpbGVTaXplKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0O1xuICAgICAgICBcbiAgICAgICAgc3dpdGNoIChlZGdlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBFREdFX1RZUEVfRklSU1Q6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2V0Rmlyc3RUaWxlU2l6ZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIEVER0VfVFlQRV9MQVNUOlxuICAgICAgICAgICAgICAgIHZhciBub25FZGdlVGlsZVNpemUgPSBnZXROb25FZGdlVGlsZVNpemUoKTtcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGhXaXRob3V0Rmlyc3QgPSBnZXRMZXZlbFNpemUoKSAtIGdldEZpcnN0VGlsZVNpemUoKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSB3aWR0aFdpdGhvdXRGaXJzdCAlIG5vbkVkZ2VUaWxlU2l6ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5vbkVkZ2VUaWxlU2l6ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgRURHRV9UWVBFX05PX0VER0U6XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2V0Tm9uRWRnZVRpbGVTaXplKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIGVkZ2UgdHlwZTogJyArIGVkZ2VUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNFZGdlVGlsZUlkKHRpbGVJZCkge1xuICAgICAgICB2YXIgbnVtVGlsZXNYID0gZ2V0TnVtVGlsZXNYKCk7XG4gICAgICAgIHZhciBudW1UaWxlc1kgPSBnZXROdW1UaWxlc1koKTtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlWCA9IHRpbGVJZCAlIG51bVRpbGVzWDtcbiAgICAgICAgdmFyIHRpbGVZID0gTWF0aC5mbG9vcih0aWxlSWQgLyBudW1UaWxlc1gpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHRpbGVZID4gbnVtVGlsZXNZIHx8IHRpbGVYIDwgMCB8fCB0aWxlWSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdUaWxlIGluZGV4ICcgKyB0aWxlSWQgKyAnIGlzIG5vdCBpbiByYW5nZScpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaG9yaXpvbnRhbEVkZ2UgPVxuICAgICAgICAgICAgdGlsZVggPT09IDAgPyBFREdFX1RZUEVfRklSU1QgOlxuICAgICAgICAgICAgdGlsZVggPT09IChudW1UaWxlc1ggLSAxKSA/IEVER0VfVFlQRV9MQVNUIDpcbiAgICAgICAgICAgIEVER0VfVFlQRV9OT19FREdFO1xuICAgICAgICBcbiAgICAgICAgdmFyIHZlcnRpY2FsRWRnZSA9XG4gICAgICAgICAgICB0aWxlWSA9PT0gMCA/IEVER0VfVFlQRV9GSVJTVCA6XG4gICAgICAgICAgICB0aWxlWSA9PT0gKG51bVRpbGVzWSAtIDEpID8gRURHRV9UWVBFX0xBU1QgOlxuICAgICAgICAgICAgRURHRV9UWVBFX05PX0VER0U7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgaG9yaXpvbnRhbEVkZ2VUeXBlOiBob3Jpem9udGFsRWRnZSxcbiAgICAgICAgICAgIHZlcnRpY2FsRWRnZVR5cGU6IHZlcnRpY2FsRWRnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TnVtVGlsZXNYKCkge1xuICAgICAgICB2YXIgbnVtVGlsZXNYID0gTWF0aC5jZWlsKHBhcmFtcy5pbWFnZVdpZHRoIC8gcGFyYW1zLnRpbGVXaWR0aCk7XG4gICAgICAgIHJldHVybiBudW1UaWxlc1g7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldE51bVRpbGVzWSgpIHtcbiAgICAgICAgdmFyIG51bVRpbGVzWSA9IE1hdGguY2VpbChwYXJhbXMuaW1hZ2VIZWlnaHQgLyBwYXJhbXMudGlsZUhlaWdodCk7XG4gICAgICAgIHJldHVybiBudW1UaWxlc1k7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldExldmVsV2lkdGgobGV2ZWwpIHtcbiAgICAgICAgaWYgKGxldmVsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbXMuaW1hZ2VXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHNpemUgPSBnZXRTaXplT2ZUaWxlcyh7XG4gICAgICAgICAgICBtaW5UaWxlWDogMCxcbiAgICAgICAgICAgIG1heFRpbGVYRXhjbHVzaXZlOiBnZXROdW1UaWxlc1goKSxcbiAgICAgICAgICAgIG1pblRpbGVZOiAwLFxuICAgICAgICAgICAgbWF4VGlsZVlFeGNsdXNpdmU6IDEsXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHNpemUucmVnaW9uV2lkdGg7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldExldmVsSGVpZ2h0KGxldmVsKSB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLmltYWdlSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgc2l6ZSA9IGdldFNpemVPZlRpbGVzKHtcbiAgICAgICAgICAgIG1pblRpbGVYOiAwLFxuICAgICAgICAgICAgbWF4VGlsZVhFeGNsdXNpdmU6IDEsXG4gICAgICAgICAgICBtaW5UaWxlWTogMCxcbiAgICAgICAgICAgIG1heFRpbGVZRXhjbHVzaXZlOiBnZXROdW1UaWxlc1koKSxcbiAgICAgICAgICAgIGxldmVsOiBsZXZlbFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc2l6ZS5yZWdpb25IZWlnaHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VGlsZVdpZHRoKGxldmVsKSB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLnRpbGVXaWR0aDtcbiAgICAgICAgfVxuICAgIFxuICAgICAgICB2YXIgc2NhbGUgPSAxIDw8IGxldmVsO1xuICAgICAgICB2YXIgd2lkdGggPSBNYXRoLmNlaWwocGFyYW1zLnRpbGVXaWR0aCAvIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHdpZHRoO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRUaWxlSGVpZ2h0KGxldmVsKSB7XG4gICAgICAgIGlmIChsZXZlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zLnRpbGVIZWlnaHQ7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgdmFyIHNjYWxlID0gMSA8PCBsZXZlbDtcbiAgICAgICAgdmFyIGhlaWdodCA9IE1hdGguY2VpbChwYXJhbXMudGlsZUhlaWdodCAvIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIGhlaWdodDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RUaWxlT2Zmc2V0WCgpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtcy5maXJzdFRpbGVPZmZzZXRYO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRGaXJzdFRpbGVPZmZzZXRZKCkge1xuICAgICAgICByZXR1cm4gcGFyYW1zLmZpcnN0VGlsZU9mZnNldFk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RUaWxlV2lkdGgobGV2ZWwpIHtcbiAgICAgICAgdmFyIGZpcnN0VGlsZVdpZHRoQmVzdExldmVsID1cbiAgICAgICAgICAgIGdldFRpbGVXaWR0aCgpIC0gZ2V0Rmlyc3RUaWxlT2Zmc2V0WCgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGltYWdlV2lkdGggPSBnZXRMZXZlbFdpZHRoKCk7XG4gICAgICAgIGlmIChmaXJzdFRpbGVXaWR0aEJlc3RMZXZlbCA+IGltYWdlV2lkdGgpIHtcbiAgICAgICAgICAgIGZpcnN0VGlsZVdpZHRoQmVzdExldmVsID0gaW1hZ2VXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHNjYWxlID0gMSA8PCBsZXZlbDtcbiAgICAgICAgdmFyIGZpcnN0VGlsZVdpZHRoID0gTWF0aC5jZWlsKGZpcnN0VGlsZVdpZHRoQmVzdExldmVsIC8gc2NhbGUpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZpcnN0VGlsZVdpZHRoO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRGaXJzdFRpbGVIZWlnaHQobGV2ZWwpIHtcbiAgICAgICAgdmFyIGZpcnN0VGlsZUhlaWdodEJlc3RMZXZlbCA9XG4gICAgICAgICAgICBnZXRUaWxlSGVpZ2h0KCkgLSBnZXRGaXJzdFRpbGVPZmZzZXRZKCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW1hZ2VIZWlnaHQgPSBnZXRMZXZlbEhlaWdodCgpO1xuICAgICAgICBpZiAoZmlyc3RUaWxlSGVpZ2h0QmVzdExldmVsID4gaW1hZ2VIZWlnaHQpIHtcbiAgICAgICAgICAgIGZpcnN0VGlsZUhlaWdodEJlc3RMZXZlbCA9IGltYWdlSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgc2NhbGUgPSAxIDw8IGxldmVsO1xuICAgICAgICB2YXIgZmlyc3RUaWxlSGVpZ2h0ID0gTWF0aC5jZWlsKGZpcnN0VGlsZUhlaWdodEJlc3RMZXZlbCAvIHNjYWxlKTtcblxuICAgICAgICByZXR1cm4gZmlyc3RUaWxlSGVpZ2h0O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYXBpL2pwaXAtbGV2ZWwtY2FsY3VsYXRvci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBNYXJrZXJzUGFyc2VyKFxuICAgIG1haW5IZWFkZXJEYXRhYmluLCBtZXNzYWdlSGVhZGVyUGFyc2VyLCBqcGlwRmFjdG9yeSkge1xuICAgIFxuICAgIHZhciBDQUNIRV9LRVkgPSAnbWFya2Vycyc7XG4gICAgXG4gICAgdGhpcy5nZXRNYW5kYXRvcnlNYXJrZXJPZmZzZXRJbkRhdGFiaW4gPVxuICAgICAgICBmdW5jdGlvbiBnZXRNYW5kYXRvcnlNYXJrZXJPZmZzZXRJbkRhdGFiaW5DbG9zdXJlKFxuICAgICAgICAgICAgZGF0YWJpbiwgbWFya2VyLCBtYXJrZXJOYW1lLCBzdGFuZGFyZFNlY3Rpb24pIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBvZmZzZXQgPSBnZXRNYXJrZXJPZmZzZXRJbkRhdGFiaW4oZGF0YWJpbiwgbWFya2VyKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChvZmZzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qMmtFeGNlcHRpb25zLklsbGVnYWxEYXRhRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIG1hcmtlck5hbWUgKyAnIGlzIG5vdCBmb3VuZCB3aGVyZSBleHBlY3RlZCB0byBiZScsXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRTZWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuY2hlY2tTdXBwb3J0ZWRNYXJrZXJzID0gZnVuY3Rpb24gY2hlY2tTdXBwb3J0ZWRNYXJrZXJzQ2xvc3VyZShcbiAgICAgICAgZGF0YWJpbiwgbWFya2VycywgaXNNYXJrZXJzU3VwcG9ydGVkKSB7XG4gICAgICAgIFxuICAgICAgICBpc01hcmtlcnNTdXBwb3J0ZWQgPSAhIWlzTWFya2Vyc1N1cHBvcnRlZDtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhYmluTWFya2VycyA9IGdldERhdGFiaW5NYXJrZXJzKFxuICAgICAgICAgICAgZGF0YWJpbiwgLypmb3JjZUFsbE1hcmtlcnNQYXJzZWQ9Ki90cnVlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBtYXJrZXJzQXNQcm9wZXJ0aWVzID0ge307XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya2Vycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IGdldE1hcmtlckFzUHJvcGVydHlOYW1lKFxuICAgICAgICAgICAgICAgIG1hcmtlcnNbaV0sICdqcGlwTWFya2Vyc1BhcnNlci5zdXBwb3J0ZWRNYXJrZXJzWycgKyBpICsgJ10nKTtcbiAgICAgICAgICAgIG1hcmtlcnNBc1Byb3BlcnRpZXNbbWFya2VyXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGV4aXN0aW5nTWFya2VyIGluIGRhdGFiaW5NYXJrZXJzLm1hcmtlclRvT2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgaXNNYXJrZXJJbkxpc3QgPSAhIW1hcmtlcnNBc1Byb3BlcnRpZXNbZXhpc3RpbmdNYXJrZXJdO1xuICAgICAgICAgICAgaWYgKGlzTWFya2VySW5MaXN0ICE9PSBpc01hcmtlcnNTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5VbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbnN1cHBvcnRlZCBtYXJrZXIgZm91bmQ6ICcgKyBleGlzdGluZ01hcmtlciwgJ3Vua25vd24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRNYXJrZXJPZmZzZXRJbkRhdGFiaW4gPSBnZXRNYXJrZXJPZmZzZXRJbkRhdGFiaW47XG4gICAgXG4gICAgdGhpcy5pc01hcmtlciA9IGlzTWFya2VyO1xuICAgIFxuICAgIGZ1bmN0aW9uIGlzTWFya2VyKGRhdGEsIG1hcmtlciwgb2Zmc2V0KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAoZGF0YVtvZmZzZXRdID09PSBtYXJrZXJbMF0pICYmIChkYXRhW29mZnNldCArIDFdID09PSBtYXJrZXJbMV0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXJrZXJPZmZzZXRJbkRhdGFiaW4oZGF0YWJpbiwgbWFya2VyKSB7XG4gICAgICAgIHZhciBkYXRhYmluTWFya2VycyA9IGdldERhdGFiaW5NYXJrZXJzKFxuICAgICAgICAgICAgZGF0YWJpbiwgLypmb3JjZUFsbE1hcmtlcnNQYXJzZWQ9Ki90cnVlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBzdHJNYXJrZXIgPSBnZXRNYXJrZXJBc1Byb3BlcnR5TmFtZShcbiAgICAgICAgICAgIG1hcmtlciwgJ1ByZWRlZmluZWQgbWFya2VyIGluIGpHbG9iYWxzLmoya01hcmtlcnMnKTtcbiAgICAgICAgdmFyIG9mZnNldCA9IGRhdGFiaW5NYXJrZXJzLm1hcmtlclRvT2Zmc2V0W3N0ck1hcmtlcl07XG4gICAgICAgIFxuICAgICAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldERhdGFiaW5NYXJrZXJzKGRhdGFiaW4sIGZvcmNlQWxsTWFya2Vyc1BhcnNlZCkge1xuICAgICAgICB2YXIgZGF0YWJpbk1hcmtlcnMgPSBkYXRhYmluLmdldENhY2hlZERhdGEoQ0FDSEVfS0VZKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChkYXRhYmluTWFya2Vycy5tYXJrZXJUb09mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhYmluTWFya2Vycy5pc1BhcnNlZEFsbE1hcmtlcnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGRhdGFiaW5NYXJrZXJzLmxhc3RPZmZzZXRQYXJzZWQgPSAwO1xuICAgICAgICAgICAgZGF0YWJpbk1hcmtlcnMubWFya2VyVG9PZmZzZXQgPSB7fTtcbiAgICAgICAgICAgIGRhdGFiaW5NYXJrZXJzLmRhdGFiaW4gPSBkYXRhYmluO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YWJpbk1hcmtlcnMuaXNQYXJzZWRBbGxNYXJrZXJzKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YWJpbk1hcmtlcnM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBzdGFydE9mZnNldCA9IDA7XG4gICAgICAgIHZhciBieXRlcyA9IFtdO1xuICAgICAgICB2YXIgY2FuUGFyc2UgPSB0cnVlO1xuXG4gICAgICAgIGlmIChkYXRhYmluID09PSBtYWluSGVhZGVyRGF0YWJpbiAmJiBkYXRhYmluTWFya2Vycy5sYXN0T2Zmc2V0UGFyc2VkID09PSAwKSB7XG4gICAgICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBkYXRhYmluLmNvcHlCeXRlcyhieXRlcywgLypzdGFydE9mZnNldD0qLzAsIHtcbiAgICAgICAgICAgICAgICBmb3JjZUNvcHlBbGxSYW5nZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGJ5dGVzQ29waWVkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY2FuUGFyc2UgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzTWFya2VyKGJ5dGVzLCBqR2xvYmFscy5qMmtNYXJrZXJzLlN0YXJ0T2ZDb2Rlc3RyZWFtLCAvKm9mZnNldD0qLzApKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdTT0MgKFN0YXJ0IE9mIENvZGVzdHJlYW0pICcgK1xuICAgICAgICAgICAgICAgICAgICAnaXMgbm90IGZvdW5kIHdoZXJlIGV4cGVjdGVkIHRvIGJlJyxcbiAgICAgICAgICAgICAgICAgICAgJ0EuNC4xJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGRhdGFiaW5NYXJrZXJzLmxhc3RPZmZzZXRQYXJzZWQgPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhblBhcnNlKSB7XG4gICAgICAgICAgICBhY3R1YWxQYXJzZU1hcmtlcnMoZGF0YWJpbk1hcmtlcnMpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBhZnRlclBhcnNlTWFya2VycyhkYXRhYmluTWFya2VycywgZm9yY2VBbGxNYXJrZXJzUGFyc2VkKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkYXRhYmluTWFya2VycztcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gYWN0dWFsUGFyc2VNYXJrZXJzKGRhdGFiaW5NYXJrZXJzKSB7XG4gICAgICAgIHZhciBvZmZzZXQgPSBkYXRhYmluTWFya2Vycy5sYXN0T2Zmc2V0UGFyc2VkO1xuICAgICAgICBcbiAgICAgICAgdmFyIGJ5dGVzID0gW107XG4gICAgICAgIHZhciBieXRlc0NvcGllZCA9IGRhdGFiaW5NYXJrZXJzLmRhdGFiaW4uY29weUJ5dGVzKGJ5dGVzLCAvKnN0YXJ0T2Zmc2V0PSovMCwge1xuICAgICAgICAgICAgICAgIGZvcmNlQ29weUFsbFJhbmdlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG1heExlbmd0aFRvQ29weTogakdsb2JhbHMuajJrT2Zmc2V0cy5NQVJLRVJfU0laRSArIGpHbG9iYWxzLmoya09mZnNldHMuTEVOR1RIX0ZJRUxEX1NJWkUsXG4gICAgICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBvZmZzZXRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHdoaWxlIChieXRlc0NvcGllZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IGdldE1hcmtlckFzUHJvcGVydHlOYW1lKFxuICAgICAgICAgICAgICAgIGJ5dGVzLFxuICAgICAgICAgICAgICAgICdvZmZzZXQgJyArIG9mZnNldCArICcgb2YgZGF0YWJpbiB3aXRoIGNsYXNzIElEID0gJyArXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiaW5NYXJrZXJzLmRhdGFiaW4uZ2V0Q2xhc3NJZCgpICsgJyBhbmQgaW4gY2xhc3MgSUQgPSAnICtcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJpbk1hcmtlcnMuZGF0YWJpbi5nZXRJbkNsYXNzSWQoKSk7XG4gICAgICAgICAgICBkYXRhYmluTWFya2Vycy5tYXJrZXJUb09mZnNldFttYXJrZXIudG9TdHJpbmcoKV0gPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gbWVzc2FnZUhlYWRlclBhcnNlci5nZXRJbnQxNihieXRlcywgakdsb2JhbHMuajJrT2Zmc2V0cy5NQVJLRVJfU0laRSk7XG4gICAgICAgICAgICBvZmZzZXQgKz0gbGVuZ3RoICsgakdsb2JhbHMuajJrT2Zmc2V0cy5NQVJLRVJfU0laRTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYnl0ZXNDb3BpZWQgPSBkYXRhYmluTWFya2Vycy5kYXRhYmluLmNvcHlCeXRlcyhieXRlcywgLypzdGFydE9mZnNldD0qLzAsIHtcbiAgICAgICAgICAgICAgICBmb3JjZUNvcHlBbGxSYW5nZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkUgKyBqR2xvYmFscy5qMmtPZmZzZXRzLkxFTkdUSF9GSUVMRF9TSVpFLFxuICAgICAgICAgICAgICAgIGRhdGFiaW5TdGFydE9mZnNldDogb2Zmc2V0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhYmluTWFya2Vycy5sYXN0T2Zmc2V0UGFyc2VkID0gb2Zmc2V0O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBhZnRlclBhcnNlTWFya2VycyhkYXRhYmluTWFya2VycywgZm9yY2VBbGxNYXJrZXJzUGFyc2VkKSB7XG4gICAgICAgIHZhciBkYXRhYmluTGVuZ3RoID0gZGF0YWJpbk1hcmtlcnMuZGF0YWJpbi5nZXREYXRhYmluTGVuZ3RoSWZLbm93bigpO1xuICAgICAgICBkYXRhYmluTWFya2Vycy5pc1BhcnNlZEFsbE1hcmtlcnMgPSBkYXRhYmluTWFya2Vycy5sYXN0T2Zmc2V0UGFyc2VkID09PSBkYXRhYmluTGVuZ3RoO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFkYXRhYmluTWFya2Vycy5pc1BhcnNlZEFsbE1hcmtlcnMgJiYgZGF0YWJpbk1hcmtlcnMuZGF0YWJpbiAhPT0gbWFpbkhlYWRlckRhdGFiaW4pIHtcbiAgICAgICAgICAgIHZhciBieXRlcyA9IFtdO1xuICAgICAgICAgICAgdmFyIGJ5dGVzQ29waWVkID0gZGF0YWJpbk1hcmtlcnMuZGF0YWJpbi5jb3B5Qnl0ZXMoYnl0ZXMsIC8qc3RhcnRPZmZzZXQ9Ki8wLCB7XG4gICAgICAgICAgICAgICAgZm9yY2VDb3B5QWxsUmFuZ2U6IHRydWUsXG4gICAgICAgICAgICAgICAgbWF4TGVuZ3RoVG9Db3B5OiBqR2xvYmFscy5qMmtPZmZzZXRzLk1BUktFUl9TSVpFLFxuICAgICAgICAgICAgICAgIGRhdGFiaW5TdGFydE9mZnNldDogZGF0YWJpbk1hcmtlcnMubGFzdE9mZnNldFBhcnNlZFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYnl0ZXNDb3BpZWQgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBpc01hcmtlcihieXRlcywgMCwgakdsb2JhbHMuajJrTWFya2Vycy5TdGFydE9mRGF0YSkpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkYXRhYmluTWFya2Vycy5sYXN0T2Zmc2V0UGFyc2VkICs9IGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkU7XG4gICAgICAgICAgICAgICAgZGF0YWJpbk1hcmtlcnMuaXNQYXJzZWRBbGxNYXJrZXJzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGZvcmNlQWxsTWFya2Vyc1BhcnNlZCAmJiAhZGF0YWJpbk1hcmtlcnMuaXNQYXJzZWRBbGxNYXJrZXJzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnZGF0YS1iaW4gd2l0aCBjbGFzcyBJRCA9ICcgK1xuICAgICAgICAgICAgICAgIGRhdGFiaW5NYXJrZXJzLmRhdGFiaW4uZ2V0Q2xhc3NJZCgpICsgJyBhbmQgaW4gY2xhc3MgSUQgPSAnICtcbiAgICAgICAgICAgICAgICBkYXRhYmluTWFya2Vycy5kYXRhYmluLmdldEluQ2xhc3NJZCgpICtcbiAgICAgICAgICAgICAgICAnIHdhcyBub3QgcmVjaWV2ZWQgeWV0Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gZ2V0TWFya2VyQXNQcm9wZXJ0eU5hbWUoYnl0ZXMsIG1hcmtlclBvc2l0aW9uRGVzY3JpcHRpb24pIHtcbiAgICAgICAgaWYgKGJ5dGVzWzBdICE9PSAweEZGKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnRXhwZWN0ZWQgbWFya2VyIGluICcgKyBtYXJrZXJQb3NpdGlvbkRlc2NyaXB0aW9uLCAnQScpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbWFya2VyID0gYnl0ZXNbMV0udG9TdHJpbmcoMTYpO1xuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3BhcnNlcnMvanBpcC1tYXJrZXJzLXBhcnNlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBPZmZzZXRzQ2FsY3VsYXRvcihcbiAgICBtYWluSGVhZGVyRGF0YWJpbiwgbWFya2Vyc1BhcnNlcikge1xuICAgIFxuICAgIHZhciBzdXBwb3J0ZWRNYXJrZXJzID0gW1xuICAgICAgICBqR2xvYmFscy5qMmtNYXJrZXJzLkltYWdlQW5kVGlsZVNpemUsXG4gICAgICAgIGpHbG9iYWxzLmoya01hcmtlcnMuQ29kaW5nU3R5bGVEZWZhdWx0LFxuICAgICAgICBqR2xvYmFscy5qMmtNYXJrZXJzLlF1YW50aXphdGlvbkRlZmF1bHQsXG4gICAgICAgIGpHbG9iYWxzLmoya01hcmtlcnMuQ29tbWVudFxuICAgICAgICBdO1xuICAgIFxuICAgIHRoaXMuZ2V0Q29kaW5nU3R5bGVPZmZzZXQgPSBnZXRDb2RpbmdTdHlsZU9mZnNldDtcbiAgICBcbiAgICB0aGlzLmdldENvZGluZ1N0eWxlQmFzZVBhcmFtcyA9IGdldENvZGluZ1N0eWxlQmFzZVBhcmFtcztcbiAgICBcbiAgICB0aGlzLmdldEltYWdlQW5kVGlsZVNpemVPZmZzZXQgPSBmdW5jdGlvbiBnZXRJbWFnZUFuZFRpbGVTaXplT2Zmc2V0KCkge1xuICAgICAgICAvLyBBLjUuMSAoSW1hZ2UgYW5kIHRpbGUgc2l6ZSBtYXJrZXIgc2VnbWVudClcbiAgICAgICAgXG4gICAgICAgIHZhciBzaXpNYXJrZXJPZmZzZXQgPSBtYXJrZXJzUGFyc2VyLmdldE1hbmRhdG9yeU1hcmtlck9mZnNldEluRGF0YWJpbihcbiAgICAgICAgICAgIG1haW5IZWFkZXJEYXRhYmluLFxuICAgICAgICAgICAgakdsb2JhbHMuajJrTWFya2Vycy5JbWFnZUFuZFRpbGVTaXplLFxuICAgICAgICAgICAgJ0ltYWdlIGFuZCBUaWxlIFNpemUgKFNJWiknLFxuICAgICAgICAgICAgJ0EuNS4xJyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gc2l6TWFya2VyT2Zmc2V0O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRSYW5nZXNPZkJlc3RSZXNvbHV0aW9uTGV2ZWxzRGF0YSA9XG4gICAgICAgIGZ1bmN0aW9uIGdldFJhbmdlc1dpdGhEYXRhT2ZSZXNvbHV0aW9uTGV2ZWxzQ2xvc3VyZShcbiAgICAgICAgICAgIGRhdGFiaW4sIG51bVJlc29sdXRpb25MZXZlbHMpIHtcbiAgICAgICAgXG4gICAgICAgIG1hcmtlcnNQYXJzZXIuY2hlY2tTdXBwb3J0ZWRNYXJrZXJzKFxuICAgICAgICAgICAgZGF0YWJpbiwgc3VwcG9ydGVkTWFya2VycywgLyppc01hcmtlcnNTdXBwb3J0ZWQ9Ki90cnVlKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBudW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHZhciBkYXRhYmluQ29kaW5nU3R5bGVEZWZhdWx0QmFzZVBhcmFtcyA9IGdldENvZGluZ1N0eWxlQmFzZVBhcmFtcyhcbiAgICAgICAgICAgIGRhdGFiaW4sIC8qaXNNYW5kYXRvcnk9Ki9mYWxzZSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YWJpbk9yTWFpbkhlYWRlckNvZGluZ1N0eWxlQmFzZVBhcmFtcyA9IGRhdGFiaW5Db2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zO1xuICAgICAgICBpZiAoZGF0YWJpbkNvZGluZ1N0eWxlRGVmYXVsdEJhc2VQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRhdGFiaW5Pck1haW5IZWFkZXJDb2RpbmdTdHlsZUJhc2VQYXJhbXMgPSBnZXRDb2RpbmdTdHlsZUJhc2VQYXJhbXMoXG4gICAgICAgICAgICAgICAgbWFpbkhlYWRlckRhdGFiaW4sIC8qaXNNYW5kYXRvcnk9Ki90cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXQgPVxuICAgICAgICAgICAgICAgIGRhdGFiaW5Db2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zLm51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBjb2RpbmdTdHlsZU51bVJlc29sdXRpb25MZXZlbHMgPSBcbiAgICAgICAgICAgIGRhdGFiaW5Pck1haW5IZWFkZXJDb2RpbmdTdHlsZUJhc2VQYXJhbXMubnVtUmVzb2x1dGlvbkxldmVscztcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoY29kaW5nU3R5bGVOdW1SZXNvbHV0aW9uTGV2ZWxzIDw9IG51bVJlc29sdXRpb25MZXZlbHMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdudW1SZXNvbHV0aW9uTGV2ZWxzICgnICsgbnVtUmVzb2x1dGlvbkxldmVscyArICcpIDw9IENPRC4nICtcbiAgICAgICAgICAgICAgICAnbnVtUmVzb2x1dGlvbkxldmVscyAoJyArIGNvZGluZ1N0eWxlTnVtUmVzb2x1dGlvbkxldmVscyArICcpJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmFuZ2VzID0gW107XG5cbiAgICAgICAgYWRkUmFuZ2VPZkJlc3RSZXNvbHV0aW9uTGV2ZWxzSW5Db2RpbmdTdHlsZShcbiAgICAgICAgICAgIHJhbmdlcywgZGF0YWJpbkNvZGluZ1N0eWxlRGVmYXVsdEJhc2VQYXJhbXMsIG51bVJlc29sdXRpb25MZXZlbHMpO1xuXG4gICAgICAgIGFkZFJhbmdlT2ZCZXN0UmVzb2x1dGlvbkxldmVsc0luUXVhbnRpemF0aW9uKFxuICAgICAgICAgICAgcmFuZ2VzLFxuICAgICAgICAgICAgZGF0YWJpbixcbiAgICAgICAgICAgIGRhdGFiaW5Pck1haW5IZWFkZXJDb2RpbmdTdHlsZUJhc2VQYXJhbXMsXG4gICAgICAgICAgICBudW1SZXNvbHV0aW9uTGV2ZWxzKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgcmFuZ2VzOiByYW5nZXMsXG4gICAgICAgICAgICBudW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0OiBudW1EZWNvbXBvc2l0aW9uTGV2ZWxzT2Zmc2V0XG4gICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGdldENvZGluZ1N0eWxlQmFzZVBhcmFtcyhcbiAgICAgICAgZGF0YWJpbiwgaXNNYW5kYXRvcnkpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBjb2RpbmdTdHlsZURlZmF1bHRPZmZzZXQgPSBnZXRDb2RpbmdTdHlsZU9mZnNldChcbiAgICAgICAgICAgIGRhdGFiaW4sIGlzTWFuZGF0b3J5KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb2RpbmdTdHlsZURlZmF1bHRPZmZzZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbnVtQnl0ZXMgPSA4O1xuICAgICAgICB2YXIgYnl0ZXNPZmZzZXQgPSBjb2RpbmdTdHlsZURlZmF1bHRPZmZzZXQgKyBqR2xvYmFscy5qMmtPZmZzZXRzLk1BUktFUl9TSVpFO1xuICAgICAgICB2YXIgYnl0ZXMgPSBnZXRCeXRlcyhkYXRhYmluLCBudW1CeXRlcywgYnl0ZXNPZmZzZXQpO1xuXG4gICAgICAgIHZhciBjb2RpbmdTdHlsZUZsYWdzRm9yQWxsQ29tcG9uZW50c09mZnNldCA9IDI7IC8vIFNjb2RcbiAgICAgICAgdmFyIGNvZGluZ1N0eWxlRmxhZ3NGb3JBbGxDb21wb25lbnRzID1cbiAgICAgICAgICAgIGJ5dGVzW2NvZGluZ1N0eWxlRmxhZ3NGb3JBbGxDb21wb25lbnRzT2Zmc2V0XTtcbiAgICAgICAgICAgIFxuICAgICAgICB2YXIgaXNEZWZhdWx0UHJlY2luY3RTaXplID0gIShjb2RpbmdTdHlsZUZsYWdzRm9yQWxsQ29tcG9uZW50cyAmIDB4MSk7XG4gICAgICAgIHZhciBpc1N0YXJ0T2ZQYWNrZXRNYXJrZXJBbGxvd2VkID0gISEoY29kaW5nU3R5bGVGbGFnc0ZvckFsbENvbXBvbmVudHMgJiAweDIpO1xuICAgICAgICB2YXIgaXNFbmRQYWNrZXRIZWFkZXJNYXJrZXJBbGxvd2VkID0gISEoY29kaW5nU3R5bGVGbGFnc0ZvckFsbENvbXBvbmVudHMgJiAweDQpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXRJbkJ5dGVzID0gNzsgLy8gU1Bjb2QsIDFzdCBieXRlXG4gICAgICAgIHZhciBudW1EZWNvbXBvc2l0aW9uTGV2ZWxzID0gYnl0ZXNbbnVtRGVjb21wb3NpdGlvbkxldmVsc09mZnNldEluQnl0ZXNdO1xuICAgICAgICB2YXIgbnVtUmVzb2x1dGlvbkxldmVscyA9IG51bURlY29tcG9zaXRpb25MZXZlbHMgKyAxO1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXQgPSBieXRlc09mZnNldCArIG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXRJbkJ5dGVzO1xuICAgICAgICBcbiAgICAgICAgdmFyIHByZWNpbmN0U2l6ZXNPZmZzZXQgPSBpc0RlZmF1bHRQcmVjaW5jdFNpemUgPyBudWxsIDogY29kaW5nU3R5bGVEZWZhdWx0T2Zmc2V0ICsgMTQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY29kaW5nU3R5bGVEZWZhdWx0T2Zmc2V0OiBjb2RpbmdTdHlsZURlZmF1bHRPZmZzZXQsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlzRGVmYXVsdFByZWNpbmN0U2l6ZTogaXNEZWZhdWx0UHJlY2luY3RTaXplLFxuICAgICAgICAgICAgaXNTdGFydE9mUGFja2V0TWFya2VyQWxsb3dlZDogaXNTdGFydE9mUGFja2V0TWFya2VyQWxsb3dlZCxcbiAgICAgICAgICAgIGlzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZDogaXNFbmRQYWNrZXRIZWFkZXJNYXJrZXJBbGxvd2VkLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBudW1SZXNvbHV0aW9uTGV2ZWxzOiBudW1SZXNvbHV0aW9uTGV2ZWxzLFxuICAgICAgICAgICAgcHJlY2luY3RTaXplc09mZnNldDogcHJlY2luY3RTaXplc09mZnNldCxcbiAgICAgICAgICAgIG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXQ6IG51bURlY29tcG9zaXRpb25MZXZlbHNPZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBhZGRSYW5nZU9mQmVzdFJlc29sdXRpb25MZXZlbHNJbkNvZGluZ1N0eWxlKFxuICAgICAgICByYW5nZXMsIGNvZGluZ1N0eWxlRGVmYXVsdEJhc2VQYXJhbXMsIG51bVJlc29sdXRpb25MZXZlbHMpIHtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zID09PSBudWxsIHx8XG4gICAgICAgICAgICBjb2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zLmlzRGVmYXVsdFByZWNpbmN0U2l6ZSkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsZXZlbHNOb3RJblJhbmdlID1cbiAgICAgICAgICAgIGNvZGluZ1N0eWxlRGVmYXVsdEJhc2VQYXJhbXMubnVtUmVzb2x1dGlvbkxldmVscyAtIG51bVJlc29sdXRpb25MZXZlbHM7XG4gICAgICAgIFxuICAgICAgICB2YXIgZmlyc3RPZmZzZXRJblJhbmdlID1cbiAgICAgICAgICAgIGNvZGluZ1N0eWxlRGVmYXVsdEJhc2VQYXJhbXMucHJlY2luY3RTaXplc09mZnNldCArIGxldmVsc05vdEluUmFuZ2U7XG4gICAgICAgIFxuICAgICAgICB2YXIgbWFya2VyTGVuZ3RoT2Zmc2V0ID0gXG4gICAgICAgICAgICBjb2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zLmNvZGluZ1N0eWxlRGVmYXVsdE9mZnNldCArIGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkU7XG4gICAgICAgIFxuICAgICAgICB2YXIgcHJlY2luY3RTaXplc1JhbmdlID0ge1xuICAgICAgICAgICAgbWFya2VyU2VnbWVudExlbmd0aE9mZnNldDogbWFya2VyTGVuZ3RoT2Zmc2V0LFxuICAgICAgICAgICAgc3RhcnQ6IGZpcnN0T2Zmc2V0SW5SYW5nZSxcbiAgICAgICAgICAgIGxlbmd0aDogbnVtUmVzb2x1dGlvbkxldmVsc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgXG5cbiAgICAgICAgcmFuZ2VzLnB1c2gocHJlY2luY3RTaXplc1JhbmdlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRRdWFudGl6YXRpb25EYXRhQnl0ZXNQZXJTdWJiYW5kKGRhdGFiaW4sIHF1YW50aXphdGlvblN0eWxlT2Zmc2V0KSB7XG4gICAgICAgIHZhciBzcWNkT2Zmc2V0ID0gcXVhbnRpemF0aW9uU3R5bGVPZmZzZXQgKyA0OyAvLyBTcWNkXG4gICAgICAgIHZhciBieXRlcyA9IGdldEJ5dGVzKGRhdGFiaW4sIC8qbnVtQnl0ZXM9Ki8xLCBzcWNkT2Zmc2V0KTtcbiAgICAgICAgdmFyIHF1YW50aXphdGlvblN0eWxlID0gYnl0ZXNbMF0gJiAweDFGO1xuICAgICAgICBcbiAgICAgICAgdmFyIGJ5dGVzUGVyU3ViYmFuZDtcbiAgICAgICAgc3dpdGNoIChxdWFudGl6YXRpb25TdHlsZSkge1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIGJ5dGVzUGVyU3ViYmFuZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgYnl0ZXNQZXJTdWJiYW5kID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBieXRlc1BlclN1YmJhbmQgPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1F1YW50aXphdGlvbiBzdHlsZSBvZiAnICsgcXVhbnRpemF0aW9uU3R5bGUsICdBLjYuNCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYnl0ZXNQZXJTdWJiYW5kO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBhZGRSYW5nZU9mQmVzdFJlc29sdXRpb25MZXZlbHNJblF1YW50aXphdGlvbihcbiAgICAgICAgcmFuZ2VzLFxuICAgICAgICBkYXRhYmluLFxuICAgICAgICBjb2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zLFxuICAgICAgICBudW1SZXNvbHV0aW9uTGV2ZWxzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgcWNkTWFya2VyT2Zmc2V0ID0gbWFya2Vyc1BhcnNlci5nZXRNYXJrZXJPZmZzZXRJbkRhdGFiaW4oXG4gICAgICAgICAgICBkYXRhYmluLCBqR2xvYmFscy5qMmtNYXJrZXJzLlF1YW50aXphdGlvbkRlZmF1bHQpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHFjZE1hcmtlck9mZnNldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgYnl0ZXNQZXJTdWJiYW5kID0gZ2V0UXVhbnRpemF0aW9uRGF0YUJ5dGVzUGVyU3ViYmFuZChcbiAgICAgICAgICAgIGRhdGFiaW4sIHFjZE1hcmtlck9mZnNldCk7XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKGJ5dGVzUGVyU3ViYmFuZCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbGV2ZWxzTm90SW5SYW5nZSA9XG4gICAgICAgICAgICBjb2RpbmdTdHlsZURlZmF1bHRCYXNlUGFyYW1zLm51bVJlc29sdXRpb25MZXZlbHMgLSBudW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgICAgICBcbiAgICAgICAgdmFyIHN1YmJhbmRzTm90SW5SYW5nZSA9IDEgKyAzICogKGxldmVsc05vdEluUmFuZ2UgLSAxKTtcbiAgICAgICAgdmFyIHN1YmJhbmRzSW5SYW5nZSA9IDMgKiBudW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgICAgICBcbiAgICAgICAgdmFyIGZpcnN0T2Zmc2V0SW5SYW5nZSA9XG4gICAgICAgICAgICBxY2RNYXJrZXJPZmZzZXQgKyA1ICsgc3ViYmFuZHNOb3RJblJhbmdlICogYnl0ZXNQZXJTdWJiYW5kO1xuICAgICAgICBcbiAgICAgICAgdmFyIHJhbmdlTGVuZ3RoID0gc3ViYmFuZHNJblJhbmdlICogYnl0ZXNQZXJTdWJiYW5kO1xuICAgICAgICBcbiAgICAgICAgdmFyIG1hcmtlckxlbmd0aE9mZnNldCA9IHFjZE1hcmtlck9mZnNldCArIGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkU7XG4gICAgICAgIFxuICAgICAgICB2YXIgcXVhbnRpemF0aW9uc1JhbmdlID0ge1xuICAgICAgICAgICAgbWFya2VyU2VnbWVudExlbmd0aE9mZnNldDogbWFya2VyTGVuZ3RoT2Zmc2V0LFxuICAgICAgICAgICAgc3RhcnQ6IGZpcnN0T2Zmc2V0SW5SYW5nZSxcbiAgICAgICAgICAgIGxlbmd0aDogcmFuZ2VMZW5ndGhcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByYW5nZXMucHVzaChxdWFudGl6YXRpb25zUmFuZ2UpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBleHBlY3ROb0NvZGluZ1N0eWxlQ29tcG9uZW50KGRhdGFiaW4pIHtcbiAgICAgICAgdmFyIGNvY09mZnNldCA9IG1hcmtlcnNQYXJzZXIuZ2V0TWFya2VyT2Zmc2V0SW5EYXRhYmluKFxuICAgICAgICAgICAgZGF0YWJpbiwgakdsb2JhbHMuajJrTWFya2Vycy5Db2RpbmdTdHlsZUNvbXBvbmVudCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29jT2Zmc2V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBBLjYuMlxuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDT0MgTWFya2VyIChDb2RpbmcgU3R5bGUgQ29tcG9uZW50KScsICdBLjYuMicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldENvZGluZ1N0eWxlT2Zmc2V0KGRhdGFiaW4sIGlzTWFuZGF0b3J5KSB7XG4gICAgICAgIGV4cGVjdE5vQ29kaW5nU3R5bGVDb21wb25lbnQoZGF0YWJpbik7XG5cbiAgICAgICAgdmFyIG9mZnNldDtcbiAgICAgICAgaWYgKGlzTWFuZGF0b3J5KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBtYXJrZXJzUGFyc2VyLmdldE1hbmRhdG9yeU1hcmtlck9mZnNldEluRGF0YWJpbihcbiAgICAgICAgICAgICAgICBkYXRhYmluLFxuICAgICAgICAgICAgICAgIGpHbG9iYWxzLmoya01hcmtlcnMuQ29kaW5nU3R5bGVEZWZhdWx0LFxuICAgICAgICAgICAgICAgICdDT0QgKENvZGluZyBzdHlsZSBEZWZhdWx0KScsXG4gICAgICAgICAgICAgICAgJ0EuNi4xJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBtYXJrZXJzUGFyc2VyLmdldE1hcmtlck9mZnNldEluRGF0YWJpbihcbiAgICAgICAgICAgICAgICBkYXRhYmluLCBqR2xvYmFscy5qMmtNYXJrZXJzLkNvZGluZ1N0eWxlRGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldEJ5dGVzKGRhdGFiaW4sIG51bUJ5dGVzLCBkYXRhYmluU3RhcnRPZmZzZXQsIGFsbG93RW5kT2ZSYW5nZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcblxuICAgICAgICB2YXIgcmFuZ2VPcHRpb25zID0ge1xuICAgICAgICAgICAgZm9yY2VDb3B5QWxsUmFuZ2U6IHRydWUsXG4gICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IG51bUJ5dGVzLFxuICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBkYXRhYmluU3RhcnRPZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBkYXRhYmluLmNvcHlCeXRlcyhieXRlcywgLypzdGFydE9mZnNldD0qLzAsIHJhbmdlT3B0aW9ucyk7XG4gICAgICAgIGlmIChieXRlc0NvcGllZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0hlYWRlciBkYXRhLWJpbiBoYXMgbm90IHlldCByZWNpZXZlZCAnICsgbnVtQnl0ZXMgK1xuICAgICAgICAgICAgICAgICcgYnl0ZXMgc3RhcnRpbmcgZnJvbSBvZmZzZXQgJyArIGRhdGFiaW5TdGFydE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9wYXJzZXJzL2pwaXAtb2Zmc2V0cy1jYWxjdWxhdG9yLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSnBpcFBhY2tldHNEYXRhQ29sbGVjdG9yKFxuICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgcXVhbGl0eUxheWVyc0NhY2hlLFxuICAgIGpwaXBGYWN0b3J5KSB7XG4gICAgXG4gICAgdGhpcy5nZXRBbGxDb2RlYmxvY2tzRGF0YSA9IGZ1bmN0aW9uIGdldEFsbENvZGVibG9ja3NEYXRhKFxuICAgICAgICBjb2Rlc3RyZWFtUGFydCwgbWluUXVhbGl0eSwgbWF4UXVhbGl0eSkge1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciBhbHJlYWR5UmV0dXJuZWRDb2RlYmxvY2tzID0gW107XG4gICAgICAgIHZhciBjb2RlYmxvY2tzRGF0YSA9IGdldE5ld0NvZGVibG9ja3NEYXRhQW5kVXBkYXRlUmV0dXJuZWRDb2RlYmxvY2tzKFxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnQsIG1pblF1YWxpdHksIG1heFF1YWxpdHksIGFscmVhZHlSZXR1cm5lZENvZGVibG9ja3MpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvZGVibG9ja3NEYXRhOiBjb2RlYmxvY2tzRGF0YSxcbiAgICAgICAgICAgIGFscmVhZHlSZXR1cm5lZENvZGVibG9ja3M6IGFscmVhZHlSZXR1cm5lZENvZGVibG9ja3NcbiAgICAgICAgICAgIH07XG4gICAgfTtcbiAgICAgICAgXG4gICAgZnVuY3Rpb24gZ2V0TmV3Q29kZWJsb2Nrc0RhdGFBbmRVcGRhdGVSZXR1cm5lZENvZGVibG9ja3MoXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0LCBtaW5RdWFsaXR5LCBtYXhRdWFsaXR5LCBhbHJlYWR5UmV0dXJuZWRDb2RlYmxvY2tzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZUluZGV4SW5Db2Rlc3RyZWFtUGFydCA9IDA7XG4gICAgICAgIHZhciBkdW1teU9mZnNldCA9IDA7XG4gICAgICAgIHZhciB0aWxlSXRlcmF0b3IgPSBjb2Rlc3RyZWFtUGFydC5nZXRUaWxlSXRlcmF0b3IoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHBhY2tldERhdGFPZmZzZXRzOiBbXSxcbiAgICAgICAgICAgIGRhdGE6IGpwaXBGYWN0b3J5LmNyZWF0ZUNvbXBvc2l0ZUFycmF5KGR1bW15T2Zmc2V0KSxcbiAgICAgICAgICAgIGFsbFJlbGV2YW50Qnl0ZXNMb2FkZWQ6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAodGlsZUl0ZXJhdG9yLnRyeUFkdmFuY2UoKSkge1xuICAgICAgICAgICAgdmFyIHByZWNpbmN0SXRlcmF0b3IgPSB0aWxlSXRlcmF0b3IuY3JlYXRlUHJlY2luY3RJdGVyYXRvcigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcXVhbGl0eSA9IHRpbGVJdGVyYXRvci50aWxlU3RydWN0dXJlLmdldE51bVF1YWxpdHlMYXllcnMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1heFF1YWxpdHkgIT09IHVuZGVmaW5lZCAmJiBtYXhRdWFsaXR5ICE9PSAnbWF4Jykge1xuICAgICAgICAgICAgICAgIHF1YWxpdHkgPSBNYXRoLm1pbihxdWFsaXR5LCBtYXhRdWFsaXR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1pblF1YWxpdHkgPT09ICdtYXgnKSB7XG4gICAgICAgICAgICAgICAgY29kZXN0cmVhbVBhcnQubWluTnVtUXVhbGl0eUxheWVycyA9IHF1YWxpdHk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1pblF1YWxpdHkgPiBxdWFsaXR5KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdtaW5RdWFsaXR5IGlzIGxhcmdlciB0aGFuIHF1YWxpdHknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2hpbGUgKHByZWNpbmN0SXRlcmF0b3IudHJ5QWR2YW5jZSgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmVjaW5jdEl0ZXJhdG9yLmlzSW5Db2Rlc3RyZWFtUGFydCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIHByZWNpbmN0IG5vdCBpbiBjb2Rlc3RyZWFtIHBhcnQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGluQ2xhc3NJbmRleCA9XG4gICAgICAgICAgICAgICAgICAgIHRpbGVJdGVyYXRvci50aWxlU3RydWN0dXJlLnByZWNpbmN0UG9zaXRpb25Ub0luQ2xhc3NJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVjaW5jdERhdGFiaW4gPSBkYXRhYmluc1NhdmVyLmdldFByZWNpbmN0RGF0YWJpbihcbiAgICAgICAgICAgICAgICAgICAgaW5DbGFzc0luZGV4KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWRJblByZWNpbmN0ID1cbiAgICAgICAgICAgICAgICAgICAgYWxyZWFkeVJldHVybmVkQ29kZWJsb2Nrc1tpbkNsYXNzSW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5lZEluUHJlY2luY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm5lZEluUHJlY2luY3QgPSB7IGxheWVyUGVyQ29kZWJsb2NrOiBbXSB9O1xuICAgICAgICAgICAgICAgICAgICBhbHJlYWR5UmV0dXJuZWRDb2RlYmxvY2tzW2luQ2xhc3NJbmRleF0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRJblByZWNpbmN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBsYXllclJlYWNoZWQgPSBwdXNoUGFja2V0cyhcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgICAgICAgICB0aWxlSW5kZXhJbkNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgICAgICAgICB0aWxlSXRlcmF0b3IudGlsZVN0cnVjdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgcHJlY2luY3RJdGVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgcHJlY2luY3REYXRhYmluLFxuICAgICAgICAgICAgICAgICAgICByZXR1cm5lZEluUHJlY2luY3QsXG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHkpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChsYXllclJlYWNoZWQgPCBtaW5RdWFsaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5PVEU6IGFscmVhZHlSZXR1cm5lZENvZGVibG9ja3MgaXMgd3JvbmcgaW4gdGhpcyBzdGFnZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gYmVjYXVzZSBpdCB3YXMgdXBkYXRlZCB3aXRoIGEgZGF0YSB3aGljaCB3aWxsIG5vdCBiZVxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm5lZC4gSSBkb24ndCBjYXJlIGFib3V0IGl0IG5vdyBiZWNhdXNlIHJldHVybmluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBudWxsIGhlcmUgbWVhbnMgc29tZXRoaW5nIGJhZCBoYXBwZW5lZCAoYW4gZXhjZXB0aW9uIGlzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRocm93biBpbiBSZXF1ZXN0Q29udGV4dCB3aGVuIHRoaXMgaGFwcGVucykuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHNvbWUgZGF5IHRoZSBjb25zaXN0ZW5jeSBvZiBhbHJlYWR5UmV0dXJuZWRDb2RlYmxvY2tzXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzIGltcG9ydGFudCB0aGVuIGEgbmV3IG9iamVjdCBzaG91bGQgYmUgcmV0dXJuZWQgb24gZWFjaFxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxsIHRvIHRoaXMgZnVuY3Rpb24sIG9yIGEgdHJhbnNhY3Rpb25hbCBzdHlsZSBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gdXNlZCBoZXJlIHRvIGFib3J0IGFsbCBub24tcmV0dXJuZWQgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgKyt0aWxlSW5kZXhJbkNvZGVzdHJlYW1QYXJ0O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZGF0YUFzVWludDggPSBuZXcgVWludDhBcnJheShyZXN1bHQuZGF0YS5nZXRMZW5ndGgoKSk7XG4gICAgICAgIHJlc3VsdC5kYXRhLmNvcHlUb1R5cGVkQXJyYXkoZGF0YUFzVWludDgsIDAsIDAsIHJlc3VsdC5kYXRhLmdldExlbmd0aCgpKTtcbiAgICAgICAgcmVzdWx0LmRhdGEgPSBkYXRhQXNVaW50ODtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaFBhY2tldHMoXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgdGlsZUluZGV4SW5Db2Rlc3RyZWFtUGFydCxcbiAgICAgICAgdGlsZVN0cnVjdHVyZSxcbiAgICAgICAgcHJlY2luY3RJdGVyYXRvcixcbiAgICAgICAgcHJlY2luY3REYXRhYmluLFxuICAgICAgICByZXR1cm5lZENvZGVibG9ja3NJblByZWNpbmN0LFxuICAgICAgICBxdWFsaXR5KSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgbGF5ZXI7XG4gICAgICAgIHZhciBvZmZzZXRJblByZWNpbmN0RGF0YWJpbjtcbiAgICAgICAgXG4gICAgICAgIGZvciAobGF5ZXIgPSAwOyBsYXllciA8IHF1YWxpdHk7ICsrbGF5ZXIpIHtcbiAgICAgICAgICAgIHZhciBjb2RlYmxvY2tPZmZzZXRzSW5EYXRhYmluID1cbiAgICAgICAgICAgICAgICBxdWFsaXR5TGF5ZXJzQ2FjaGUuZ2V0UGFja2V0T2Zmc2V0c0J5Q29kZWJsb2NrSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgIHByZWNpbmN0RGF0YWJpbiwgbGF5ZXIsIHByZWNpbmN0SXRlcmF0b3IpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY29kZWJsb2NrT2Zmc2V0c0luRGF0YWJpbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBvZmZzZXRJblByZWNpbmN0RGF0YWJpbiA9XG4gICAgICAgICAgICAgICAgY29kZWJsb2NrT2Zmc2V0c0luRGF0YWJpbi5oZWFkZXJTdGFydE9mZnNldCArXG4gICAgICAgICAgICAgICAgY29kZWJsb2NrT2Zmc2V0c0luRGF0YWJpbi5oZWFkZXJMZW5ndGg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBudW1Db2RlYmxvY2tzID1cbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tPZmZzZXRzSW5EYXRhYmluLmNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4Lmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBjb2RlYmxvY2tPZmZzZXRzSW5SZXN1bHQgPSBuZXcgQXJyYXkobnVtQ29kZWJsb2Nrcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBpc0luY29tcGxldGVQYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Db2RlYmxvY2tzOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWQgPSByZXR1cm5lZENvZGVibG9ja3NJblByZWNpbmN0LmxheWVyUGVyQ29kZWJsb2NrW2ldO1xuICAgICAgICAgICAgICAgIGlmIChyZXR1cm5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybmVkID0geyBsYXllcjogLTEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRDb2RlYmxvY2tzSW5QcmVjaW5jdC5sYXllclBlckNvZGVibG9ja1tpXSA9IHJldHVybmVkO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmV0dXJuZWQubGF5ZXIgPj0gbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBjb2RlYmxvY2sgPVxuICAgICAgICAgICAgICAgICAgICBjb2RlYmxvY2tPZmZzZXRzSW5EYXRhYmluLmNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4W2ldO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXRJblJlc3VsdEFycmF5ID0gcmVzdWx0LmRhdGEuZ2V0TGVuZ3RoKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGJ5dGVzQ29waWVkID0gcHJlY2luY3REYXRhYmluLmNvcHlUb0NvbXBvc2l0ZUFycmF5KFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQuZGF0YSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBvZmZzZXRJblByZWNpbmN0RGF0YWJpbixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heExlbmd0aFRvQ29weTogY29kZWJsb2NrLmNvZGVibG9ja0JvZHlMZW5ndGhCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmNlQ29weUFsbFJhbmdlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChieXRlc0NvcGllZCAhPT0gY29kZWJsb2NrLmNvZGVibG9ja0JvZHlMZW5ndGhCeXRlcykge1xuICAgICAgICAgICAgICAgICAgICBjb2RlYmxvY2tPZmZzZXRzSW5SZXN1bHQubGVuZ3RoID0gaTtcbiAgICAgICAgICAgICAgICAgICAgaXNJbmNvbXBsZXRlUGFja2V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybmVkLmxheWVyID0gbGF5ZXI7XG4gICAgICAgICAgICAgICAgY29kZWJsb2NrT2Zmc2V0c0luUmVzdWx0W2ldID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogb2Zmc2V0SW5SZXN1bHRBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBvZmZzZXRJblJlc3VsdEFycmF5ICsgY29kZWJsb2NrLmNvZGVibG9ja0JvZHlMZW5ndGhCeXRlcyxcbiAgICAgICAgICAgICAgICAgICAgY29kaW5ncGFzc2VzOiBjb2RlYmxvY2suY29kaW5nUGFzc2VzLFxuICAgICAgICAgICAgICAgICAgICB6ZXJvQml0UGxhbmVzOiBjb2RlYmxvY2suemVyb0JpdFBsYW5lc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG9mZnNldEluUHJlY2luY3REYXRhYmluICs9IGNvZGVibG9jay5jb2RlYmxvY2tCb2R5TGVuZ3RoQnl0ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBwcmVjaW5jdEluZGV4ID1cbiAgICAgICAgICAgICAgICB0aWxlU3RydWN0dXJlLnByZWNpbmN0UG9zaXRpb25Ub0luZGV4SW5Db21wb25lbnRSZXNvbHV0aW9uKFxuICAgICAgICAgICAgICAgICAgICBwcmVjaW5jdEl0ZXJhdG9yKTtcbiAgICAgICAgICAgIHZhciBwYWNrZXQgPSB7XG4gICAgICAgICAgICAgICAgdGlsZUluZGV4OiB0aWxlSW5kZXhJbkNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICAgICAgICAgIHI6IHByZWNpbmN0SXRlcmF0b3IucmVzb2x1dGlvbkxldmVsLFxuICAgICAgICAgICAgICAgIHA6IHByZWNpbmN0SW5kZXgsXG4gICAgICAgICAgICAgICAgYzogcHJlY2luY3RJdGVyYXRvci5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgbDogbGF5ZXIsXG4gICAgICAgICAgICAgICAgY29kZWJsb2NrT2Zmc2V0czogY29kZWJsb2NrT2Zmc2V0c0luUmVzdWx0XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVzdWx0LnBhY2tldERhdGFPZmZzZXRzLnB1c2gocGFja2V0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGlzSW5jb21wbGV0ZVBhY2tldCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXN1bHQuYWxsUmVsZXZhbnRCeXRlc0xvYWRlZCArPSBvZmZzZXRJblByZWNpbmN0RGF0YWJpbjtcbiAgICAgICAgcmV0dXJuIGxheWVyO1xuICAgIH0gICAgXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy93cml0ZXJzL2pwaXAtcGFja2V0cy1kYXRhLWNvbGxlY3Rvci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBQYXJhbXNDb2Rlc3RyZWFtUGFydChcbiAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcywgY29kZXN0cmVhbVN0cnVjdHVyZSwganBpcEZhY3RvcnkpIHtcblxuICAgIHZhciB0aWxlc0JvdW5kcyA9IG51bGw7XG4gICAgdmFyIGZ1bGxUaWxlc1NpemUgPSBudWxsO1xuICAgIFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbGV2ZWwnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjb2Rlc3RyZWFtUGFydFBhcmFtcyA/IGNvZGVzdHJlYW1QYXJ0UGFyYW1zLmxldmVsIDogMDtcbiAgICB9fSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2Z1bGxUaWxlc1NpemUnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChmdWxsVGlsZXNTaXplID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZVRpbGVzQm91bmRzKCk7XG4gICAgICAgICAgICBmdWxsVGlsZXNTaXplID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRTaXplT2ZUaWxlcyh0aWxlc0JvdW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bGxUaWxlc1NpemU7XG4gICAgfX0pO1xuICAgIFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGlsZXNCb3VuZHMnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhbGlkYXRlVGlsZXNCb3VuZHMoKTtcbiAgICAgICAgcmV0dXJuIHRpbGVzQm91bmRzO1xuICAgIH19KTtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVJdGVyYXRvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2V0YWJsZUl0ZXJhdG9yID0ge1xuICAgICAgICAgICAgaXNTdGFydGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGN1cnJlbnRYOiAtMSxcbiAgICAgICAgICAgIGN1cnJlbnRZOiAtMVxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0ge1xuICAgICAgICAgICAgZ2V0IHRpbGVJbmRleCgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNldGFibGVJdGVyYXRvci5pc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnaXRlcmF0b3IudGlsZUluZGV4IGFjY2Vzc2VkIGJlZm9yZSB0cnlBZHZhbmNlKCknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHRpbGVzSW5Sb3cgPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bVRpbGVzWCgpO1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdEluUm93ID0gc2V0YWJsZUl0ZXJhdG9yLmN1cnJlbnRZICogdGlsZXNJblJvdztcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBmaXJzdEluUm93ICsgc2V0YWJsZUl0ZXJhdG9yLmN1cnJlbnRYO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGdldCB0aWxlU3RydWN0dXJlKCkge1xuICAgICAgICAgICAgICAgIGlmICghc2V0YWJsZUl0ZXJhdG9yLmlzU3RhcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICdpdGVyYXRvci50aWxlSW5kZXggYWNjZXNzZWQgYmVmb3JlIHRyeUFkdmFuY2UoKScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gaXRlcmF0b3IudGlsZUluZGV4O1xuICAgICAgICAgICAgICAgIHZhciB0aWxlU3RydWN0dXJlID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRUaWxlU3RydWN0dXJlKGlkeCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbGVTdHJ1Y3R1cmU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjcmVhdGVQcmVjaW5jdEl0ZXJhdG9yOiBmdW5jdGlvbiBjcmVhdGVQcmVjaW5jdEl0ZXJhdG9yKFxuICAgICAgICAgICAgICAgIGlzSXRlcmF0ZVByZWNpbmN0c05vdEluQ29kZXN0cmVhbVBhcnQpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoIXNldGFibGVJdGVyYXRvci5pc1N0YXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnaXRlcmF0b3IudGlsZUluZGV4IGFjY2Vzc2VkIGJlZm9yZSB0cnlBZHZhbmNlKCknKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IGl0ZXJhdG9yLnRpbGVJbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4ganBpcEZhY3RvcnkuY3JlYXRlUGFyYW1zUHJlY2luY3RJdGVyYXRvcihcbiAgICAgICAgICAgICAgICAgICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgaWR4LFxuICAgICAgICAgICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgaXNJdGVyYXRlUHJlY2luY3RzTm90SW5Db2Rlc3RyZWFtUGFydCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnlBZHZhbmNlOiBmdW5jdGlvbiB0cnlBZHZhbmNlKCkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cnlBZHZhbmNlVGlsZUl0ZXJhdG9yKHNldGFibGVJdGVyYXRvcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpdGVyYXRvcjtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIHRyeUFkdmFuY2VUaWxlSXRlcmF0b3Ioc2V0YWJsZUl0ZXJhdG9yKSB7XG4gICAgICAgIGlmICghc2V0YWJsZUl0ZXJhdG9yLmlzU3RhcnRlZCkge1xuICAgICAgICAgICAgdmFsaWRhdGVUaWxlc0JvdW5kcygpO1xuICAgICAgICAgICAgc2V0YWJsZUl0ZXJhdG9yLmlzU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBzZXRhYmxlSXRlcmF0b3IuY3VycmVudFggPSB0aWxlc0JvdW5kcy5taW5UaWxlWDtcbiAgICAgICAgICAgIHNldGFibGVJdGVyYXRvci5jdXJyZW50WSA9IHRpbGVzQm91bmRzLm1pblRpbGVZO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZXRhYmxlSXRlcmF0b3IuY3VycmVudFkgPj0gdGlsZXNCb3VuZHMubWF4VGlsZVlFeGNsdXNpdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDYW5ub3QgYWR2YW5jZSB0aWxlIGl0ZXJhdG9yIGFmdGVyIGVuZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICArK3NldGFibGVJdGVyYXRvci5jdXJyZW50WDtcbiAgICAgICAgaWYgKHNldGFibGVJdGVyYXRvci5jdXJyZW50WCA8IHRpbGVzQm91bmRzLm1heFRpbGVYRXhjbHVzaXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0YWJsZUl0ZXJhdG9yLmN1cnJlbnRYID0gdGlsZXNCb3VuZHMubWluVGlsZVg7XG4gICAgICAgICsrc2V0YWJsZUl0ZXJhdG9yLmN1cnJlbnRZO1xuICAgICAgICBcbiAgICAgICAgdmFyIGlzTW9yZVRpbGVzQXZhaWxhYmxlID1cbiAgICAgICAgICAgIHNldGFibGVJdGVyYXRvci5jdXJyZW50WSA8IHRpbGVzQm91bmRzLm1heFRpbGVZRXhjbHVzaXZlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlzTW9yZVRpbGVzQXZhaWxhYmxlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVRpbGVzQm91bmRzKCkge1xuICAgICAgICBpZiAodGlsZXNCb3VuZHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvZGVzdHJlYW1QYXJ0UGFyYW1zKSB7XG4gICAgICAgICAgICB0aWxlc0JvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBsZXZlbDogMCxcbiAgICAgICAgICAgICAgICBtaW5UaWxlWDogMCxcbiAgICAgICAgICAgICAgICBtaW5UaWxlWTogMCxcbiAgICAgICAgICAgICAgICBtYXhUaWxlWEV4Y2x1c2l2ZTogY29kZXN0cmVhbVN0cnVjdHVyZS5nZXROdW1UaWxlc1goKSxcbiAgICAgICAgICAgICAgICBtYXhUaWxlWUV4Y2x1c2l2ZTogY29kZXN0cmVhbVN0cnVjdHVyZS5nZXROdW1UaWxlc1koKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGVzQm91bmRzID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRUaWxlc0Zyb21QaXhlbHMoXG4gICAgICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLXBhcmFtcy1jb2Rlc3RyZWFtLXBhcnQuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwUGFyYW1zUHJlY2luY3RJdGVyYXRvcihcbiAgICBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgIHRpbGVJbmRleCxcbiAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICBpc0l0ZXJhdGVQcmVjaW5jdHNOb3RJbkNvZGVzdHJlYW1QYXJ0KSB7XG4gICAgXG4gICAgdmFyIGlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB2YXIgY29tcG9uZW50ID0gMDtcbiAgICB2YXIgcHJlY2luY3RYID0gcHJlY2luY3RYO1xuICAgIHZhciBwcmVjaW5jdFkgPSBwcmVjaW5jdFk7XG4gICAgdmFyIHJlc29sdXRpb25MZXZlbCA9IDA7XG4gICAgdmFyIGlzSW5Db2Rlc3RyZWFtUGFydCA9IHRydWU7XG4gICAgdmFyIHByZWNpbmN0SW5kZXhJbkNvbXBvbmVudFJlc29sdXRpb24gPSAtMTtcbiAgICB2YXIgaW5DbGFzc0luZGV4ID0gLTE7XG4gICAgdmFyIHByb2dyZXNzaW9uT3JkZXI7XG4gICAgdmFyIHByZWNpbmN0c0luQ29kZXN0cmVhbVBhcnRQZXJMZXZlbFBlckNvbXBvbmVudCA9IG51bGw7XG4gICAgdmFyIHRpbGVTdHJ1Y3R1cmU7XG4gICAgXG4gICAgLy8gQS42LjEgaW4gcGFydCAxOiBDb3JlIENvZGluZyBTeXN0ZW1cbiAgICBcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RpbGVJbmRleCcsIHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRpbGVJbmRleDtcbiAgICB9fSk7ICAgXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjb21wb25lbnQnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfX0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncHJlY2luY3RYJywgeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJlY2luY3RYO1xuICAgIH19KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ByZWNpbmN0WScsIHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHByZWNpbmN0WTtcbiAgICB9fSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdyZXNvbHV0aW9uTGV2ZWwnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHV0aW9uTGV2ZWw7XG4gICAgfX0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaXNJbkNvZGVzdHJlYW1QYXJ0JywgeyBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gaXNJbkNvZGVzdHJlYW1QYXJ0O1xuICAgIH19KTtcbiAgICBcbiAgICB0aGlzLnRyeUFkdmFuY2UgPSBmdW5jdGlvbiB0cnlBZHZhbmNlKCkge1xuICAgICAgICBpZiAoIWlzSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgICAgIGluaXRpYWxpemUoKTtcbiAgICAgICAgICAgIGlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBuZWVkQWR2YW5jZU5leHRNZW1iZXIgPSB0cnVlO1xuICAgICAgICB2YXIgcHJlY2luY3RzUmFuZ2VIYXNoID0gaXNJdGVyYXRlUHJlY2luY3RzTm90SW5Db2Rlc3RyZWFtUGFydCA/XG4gICAgICAgICAgICBudWxsOiBwcmVjaW5jdHNJbkNvZGVzdHJlYW1QYXJ0UGVyTGV2ZWxQZXJDb21wb25lbnQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgbmVlZFJlc2V0UHJlY2luY3RUb01pbmltYWxJbkNvZGVzdHJlYW1QYXJ0ID0gZmFsc2U7XG4gICAgICAgIFxuICAgICAgICBwcmVjaW5jdEluZGV4SW5Db21wb25lbnRSZXNvbHV0aW9uID0gLTE7XG4gICAgICAgIGluQ2xhc3NJbmRleCA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAyOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYWR2YW5jZVByb2dyZXNzaW9uT3JkZXJNZW1iZXIoaSxwcmVjaW5jdHNSYW5nZUhhc2gpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBuZWVkQWR2YW5jZU5leHRNZW1iZXIgPSBuZXdWYWx1ZSA9PT0gMDtcbiAgICAgICAgICAgIGlmICghbmVlZEFkdmFuY2VOZXh0TWVtYmVyKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc2lvbk9yZGVyW2ldID09PSAnUCcgJiZcbiAgICAgICAgICAgICAgICAhaXNJdGVyYXRlUHJlY2luY3RzTm90SW5Db2Rlc3RyZWFtUGFydCkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG5lZWRSZXNldFByZWNpbmN0VG9NaW5pbWFsSW5Db2Rlc3RyZWFtUGFydCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChuZWVkQWR2YW5jZU5leHRNZW1iZXIpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGFyZSBoZXJlLCB0aGUgbGFzdCBwcmVjaW5jdCBoYXMgYmVlbiByZWFjaGVkXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChwcmVjaW5jdHNJbkNvZGVzdHJlYW1QYXJ0UGVyTGV2ZWxQZXJDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGlzSW5Db2Rlc3RyZWFtUGFydCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHJhbmdlUGVyTGV2ZWwgPVxuICAgICAgICAgICAgcHJlY2luY3RzSW5Db2Rlc3RyZWFtUGFydFBlckxldmVsUGVyQ29tcG9uZW50W2NvbXBvbmVudF07XG4gICAgICAgIHZhciBwcmVjaW5jdHNSYW5nZSA9IHJhbmdlUGVyTGV2ZWxbcmVzb2x1dGlvbkxldmVsXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChuZWVkUmVzZXRQcmVjaW5jdFRvTWluaW1hbEluQ29kZXN0cmVhbVBhcnQpIHtcbiAgICAgICAgICAgIHByZWNpbmN0WCA9IHByZWNpbmN0c1JhbmdlLm1pblByZWNpbmN0WDtcbiAgICAgICAgICAgIHByZWNpbmN0WSA9IHByZWNpbmN0c1JhbmdlLm1pblByZWNpbmN0WTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNJbkNvZGVzdHJlYW1QYXJ0ID1cbiAgICAgICAgICAgIHByZWNpbmN0WCA+PSBwcmVjaW5jdHNSYW5nZS5taW5QcmVjaW5jdFggJiZcbiAgICAgICAgICAgIHByZWNpbmN0WSA+PSBwcmVjaW5jdHNSYW5nZS5taW5QcmVjaW5jdFkgJiZcbiAgICAgICAgICAgIHByZWNpbmN0WCA8IHByZWNpbmN0c1JhbmdlLm1heFByZWNpbmN0WEV4Y2x1c2l2ZSAmJlxuICAgICAgICAgICAgcHJlY2luY3RZIDwgcHJlY2luY3RzUmFuZ2UubWF4UHJlY2luY3RZRXhjbHVzaXZlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgICAgICB0aWxlU3RydWN0dXJlID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRUaWxlU3RydWN0dXJlKHRpbGVJbmRleCk7XG5cbiAgICAgICAgaWYgKCghIWNvZGVzdHJlYW1QYXJ0UGFyYW1zKSAmJlxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubGV2ZWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbWluTnVtUmVzb2x1dGlvbkxldmVscyA9XG4gICAgICAgICAgICAgICAgdGlsZVN0cnVjdHVyZS5nZXRNaW5OdW1SZXNvbHV0aW9uTGV2ZWxzT3ZlckNvbXBvbmVudHMoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1pbk51bVJlc29sdXRpb25MZXZlbHMgPD0gY29kZXN0cmVhbVBhcnRQYXJhbXMubGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBhZHZhbmNlIHJlc29sdXRpb246IGxldmVsPScgK1xuICAgICAgICAgICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5sZXZlbCArXG4gICAgICAgICAgICAgICAgICAgICcgYnV0IHNob3VsZCBiZSBzbWFsbGVyIHRoYW4gJyArIG1pbk51bVJlc29sdXRpb25MZXZlbHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJlY2luY3RzSW5Db2Rlc3RyZWFtUGFydFBlckxldmVsUGVyQ29tcG9uZW50ID1cbiAgICAgICAgICAgIGdldFByZWNpbmN0c0luQ29kZXN0cmVhbVBhcnRQZXJMZXZlbFBlckNvbXBvbmVudCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBpZiAoIWlzSXRlcmF0ZVByZWNpbmN0c05vdEluQ29kZXN0cmVhbVBhcnQgJiZcbiAgICAgICAgICAgIHByZWNpbmN0c0luQ29kZXN0cmVhbVBhcnRQZXJMZXZlbFBlckNvbXBvbmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZmlyc3RQcmVjaW5jdHNSYW5nZSA9XG4gICAgICAgICAgICAgICAgcHJlY2luY3RzSW5Db2Rlc3RyZWFtUGFydFBlckxldmVsUGVyQ29tcG9uZW50WzBdWzBdO1xuICAgICAgICAgICAgcHJlY2luY3RYID0gZmlyc3RQcmVjaW5jdHNSYW5nZS5taW5QcmVjaW5jdFg7XG4gICAgICAgICAgICBwcmVjaW5jdFkgPSBmaXJzdFByZWNpbmN0c1JhbmdlLm1pblByZWNpbmN0WTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcHJvZ3Jlc3Npb25PcmRlciA9IHRpbGVTdHJ1Y3R1cmUuZ2V0UHJvZ3Jlc3Npb25PcmRlcigpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRQcmVjaW5jdHNJbkNvZGVzdHJlYW1QYXJ0UGVyTGV2ZWxQZXJDb21wb25lbnQoKSB7XG4gICAgICAgIGlmICghY29kZXN0cmVhbVBhcnRQYXJhbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgY29tcG9uZW50cyA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TnVtQ29tcG9uZW50cygpO1xuICAgICAgICB2YXIgcGVyQ29tcG9uZW50UmVzdWx0ID0gbmV3IEFycmF5KGNvbXBvbmVudHMpO1xuICAgICAgICB2YXIgbWluTGV2ZWwgPVxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubGV2ZWwgfHwgMDtcbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlTGVmdEluTGV2ZWwgPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldFRpbGVMZWZ0KFxuICAgICAgICAgICAgdGlsZUluZGV4LCBtaW5MZXZlbCk7XG4gICAgICAgIHZhciB0aWxlVG9wSW5MZXZlbCA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZVRvcChcbiAgICAgICAgICAgIHRpbGVJbmRleCwgbWluTGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG1pblhJblRpbGUgPVxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWCAtIHRpbGVMZWZ0SW5MZXZlbDtcbiAgICAgICAgdmFyIG1pbllJblRpbGUgPVxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWSAtIHRpbGVUb3BJbkxldmVsO1xuICAgICAgICB2YXIgbWF4WEluVGlsZSA9XG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5tYXhYRXhjbHVzaXZlIC0gdGlsZUxlZnRJbkxldmVsO1xuICAgICAgICB2YXIgbWF4WUluVGlsZSA9XG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5tYXhZRXhjbHVzaXZlIC0gdGlsZVRvcEluTGV2ZWw7XG5cbiAgICAgICAgZm9yICh2YXIgY29tcG9uZW50ID0gMDsgY29tcG9uZW50IDwgY29tcG9uZW50czsgKytjb21wb25lbnQpIHtcbiAgICAgICAgICAgIHZhciBjb21wb25lbnRTdHJ1Y3R1cmUgPSB0aWxlU3RydWN0dXJlLmdldENvbXBvbmVudFN0cnVjdHVyZShjb21wb25lbnQpO1xuICAgICAgICAgICAgdmFyIGxldmVscyA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1SZXNvbHV0aW9uTGV2ZWxzKCk7XG4gICAgICAgICAgICB2YXIgbGV2ZWxzSW5Db2Rlc3RyZWFtUGFydCA9IGxldmVscyAtIG1pbkxldmVsO1xuICAgICAgICAgICAgdmFyIG51bVJlc29sdXRpb25MZXZlbHMgPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtUmVzb2x1dGlvbkxldmVscygpO1xuICAgICAgICAgICAgdmFyIHBlckxldmVsUmVzdWx0ID0gbmV3IEFycmF5KGxldmVscyk7XG4gICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgbGV2ZWwgPSAwOyBsZXZlbCA8IGxldmVsc0luQ29kZXN0cmVhbVBhcnQ7ICsrbGV2ZWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29tcG9uZW50U2NhbGVYID0gY29tcG9uZW50U3RydWN0dXJlLmdldENvbXBvbmVudFNjYWxlWCgpO1xuICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRTY2FsZVkgPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0Q29tcG9uZW50U2NhbGVZKCk7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsSW5Db2Rlc3RyZWFtUGFydCA9IGxldmVsc0luQ29kZXN0cmVhbVBhcnQgLSBsZXZlbCAtIDE7XG4gICAgICAgICAgICAgICAgdmFyIGxldmVsU2NhbGVYID0gY29tcG9uZW50U2NhbGVYIDw8IGxldmVsSW5Db2Rlc3RyZWFtUGFydDtcbiAgICAgICAgICAgICAgICB2YXIgbGV2ZWxTY2FsZVkgPSBjb21wb25lbnRTY2FsZVkgPDwgbGV2ZWxJbkNvZGVzdHJlYW1QYXJ0O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciByZWR1bmRhbnQgPSA0OyAvLyBSZWR1bmRhbnQgcGl4ZWxzIGZvciB3YXZlbGV0IDktNyBjb252b2x1dGlvblxuICAgICAgICAgICAgICAgIHZhciBtaW5YSW5MZXZlbCA9IE1hdGguZmxvb3IobWluWEluVGlsZSAvIGxldmVsU2NhbGVYKSAtIHJlZHVuZGFudDtcbiAgICAgICAgICAgICAgICB2YXIgbWluWUluTGV2ZWwgPSBNYXRoLmZsb29yKG1pbllJblRpbGUgLyBsZXZlbFNjYWxlWSkgLSByZWR1bmRhbnQ7XG4gICAgICAgICAgICAgICAgdmFyIG1heFhJbkxldmVsID0gTWF0aC5jZWlsKG1heFhJblRpbGUgLyBsZXZlbFNjYWxlWCkgKyByZWR1bmRhbnQ7XG4gICAgICAgICAgICAgICAgdmFyIG1heFlJbkxldmVsID0gTWF0aC5jZWlsKG1heFlJblRpbGUgLyBsZXZlbFNjYWxlWSkgKyByZWR1bmRhbnQ7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHByZWNpbmN0V2lkdGggPVxuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0UHJlY2luY3RXaWR0aChsZXZlbCkgKiBjb21wb25lbnRTY2FsZVg7XG4gICAgICAgICAgICAgICAgdmFyIHByZWNpbmN0SGVpZ2h0ID1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50U3RydWN0dXJlLmdldFByZWNpbmN0SGVpZ2h0KGxldmVsKSAqIGNvbXBvbmVudFNjYWxlWTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbWluUHJlY2luY3RYID0gTWF0aC5mbG9vcihtaW5YSW5MZXZlbCAvIHByZWNpbmN0V2lkdGgpO1xuICAgICAgICAgICAgICAgIHZhciBtaW5QcmVjaW5jdFkgPSBNYXRoLmZsb29yKG1pbllJbkxldmVsIC8gcHJlY2luY3RIZWlnaHQpO1xuICAgICAgICAgICAgICAgIHZhciBtYXhQcmVjaW5jdFggPSBNYXRoLmNlaWwobWF4WEluTGV2ZWwgLyBwcmVjaW5jdFdpZHRoKTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4UHJlY2luY3RZID0gTWF0aC5jZWlsKG1heFlJbkxldmVsIC8gcHJlY2luY3RIZWlnaHQpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBwcmVjaW5jdHNYID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1gobGV2ZWwpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVjaW5jdHNZID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1kobGV2ZWwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHBlckxldmVsUmVzdWx0W2xldmVsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbWluUHJlY2luY3RYOiBNYXRoLm1heCgwLCBtaW5QcmVjaW5jdFgpLFxuICAgICAgICAgICAgICAgICAgICBtaW5QcmVjaW5jdFk6IE1hdGgubWF4KDAsIG1pblByZWNpbmN0WSksXG4gICAgICAgICAgICAgICAgICAgIG1heFByZWNpbmN0WEV4Y2x1c2l2ZTogTWF0aC5taW4obWF4UHJlY2luY3RYLCBwcmVjaW5jdHNYKSxcbiAgICAgICAgICAgICAgICAgICAgbWF4UHJlY2luY3RZRXhjbHVzaXZlOiBNYXRoLm1pbihtYXhQcmVjaW5jdFksIHByZWNpbmN0c1kpXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBlckNvbXBvbmVudFJlc3VsdFtjb21wb25lbnRdID0gcGVyTGV2ZWxSZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBwZXJDb21wb25lbnRSZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGFkdmFuY2VQcm9ncmVzc2lvbk9yZGVyTWVtYmVyKG1lbWJlckluZGV4LCBwcmVjaW5jdHNSYW5nZSkge1xuICAgICAgICB2YXIgY29tcG9uZW50U3RydWN0dXJlID0gdGlsZVN0cnVjdHVyZS5nZXRDb21wb25lbnRTdHJ1Y3R1cmUoY29tcG9uZW50KTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAocHJvZ3Jlc3Npb25PcmRlclttZW1iZXJJbmRleF0pIHtcbiAgICAgICAgICAgIGNhc2UgJ1InOlxuICAgICAgICAgICAgICAgIHZhciBudW1SZXNvbHV0aW9uTGV2ZWxzID1cbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50U3RydWN0dXJlLmdldE51bVJlc29sdXRpb25MZXZlbHMoKTtcbiAgICAgICAgICAgICAgICBpZiAoKCEhY29kZXN0cmVhbVBhcnRQYXJhbXMpICYmIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLmxldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bVJlc29sdXRpb25MZXZlbHMgLT0gY29kZXN0cmVhbVBhcnRQYXJhbXMubGV2ZWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICsrcmVzb2x1dGlvbkxldmVsO1xuICAgICAgICAgICAgICAgIHJlc29sdXRpb25MZXZlbCAlPSBudW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHV0aW9uTGV2ZWw7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgICAgICsrY29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudCAlPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bUNvbXBvbmVudHMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdQJzpcbiAgICAgICAgICAgICAgICB2YXIgbWluWCwgbWluWSwgbWF4WCwgbWF4WTtcbiAgICAgICAgICAgICAgICBpZiAocHJlY2luY3RzUmFuZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByZWNpbmN0c1JhbmdlUGVyTGV2ZWwgPSBwcmVjaW5jdHNSYW5nZVtjb21wb25lbnRdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJlY2luY3RzUmFuZ2VJbkxldmVsQ29tcG9uZW50ID0gcHJlY2luY3RzUmFuZ2VQZXJMZXZlbFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb25MZXZlbF07XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBtaW5YID0gcHJlY2luY3RzUmFuZ2VJbkxldmVsQ29tcG9uZW50Lm1pblByZWNpbmN0WDtcbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IHByZWNpbmN0c1JhbmdlSW5MZXZlbENvbXBvbmVudC5taW5QcmVjaW5jdFk7XG4gICAgICAgICAgICAgICAgICAgIG1heFggPSBwcmVjaW5jdHNSYW5nZUluTGV2ZWxDb21wb25lbnQubWF4UHJlY2luY3RYRXhjbHVzaXZlO1xuICAgICAgICAgICAgICAgICAgICBtYXhZID0gcHJlY2luY3RzUmFuZ2VJbkxldmVsQ29tcG9uZW50Lm1heFByZWNpbmN0WUV4Y2x1c2l2ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtaW5YID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbWluWSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG1heFggPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtUHJlY2luY3RzWChyZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICAgICAgICAgICAgICBtYXhZID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1kocmVzb2x1dGlvbkxldmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcHJlY2luY3RYIC09IChtaW5YIC0gMSk7XG4gICAgICAgICAgICAgICAgcHJlY2luY3RYICU9IChtYXhYIC0gbWluWCk7XG4gICAgICAgICAgICAgICAgcHJlY2luY3RYICs9IG1pblg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHByZWNpbmN0WCAhPSBtaW5YKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVjaW5jdFggLSBtaW5YO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFkgLT0gKG1pblkgLSAxKTtcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFkgJT0gKG1heFkgLSBtaW5ZKTtcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFkgKz0gbWluWTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBwcmVjaW5jdFkgLSBtaW5ZO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlICdMJyA6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdBZHZhbmNpbmcgTCBpcyBub3Qgc3VwcG9ydGVkIGluIEpQSVAnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1VuZXhwZWN0ZWQgbGV0dGVyIGluIHByb2dyZXNzaW9uIG9yZGVyOiAnICtcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3Npb25PcmRlclttZW1iZXJJbmRleF0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLXBhcmFtcy1wcmVjaW5jdC1pdGVyYXRvci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBQcmVjaW5jdENvZGVzdHJlYW1QYXJ0KFxuICAgIHNpemVzQ2FsY3VsYXRvcixcbiAgICB0aWxlU3RydWN0dXJlLFxuICAgIHRpbGVJbmRleCxcbiAgICBjb21wb25lbnQsXG4gICAgbGV2ZWxJbmRleCxcbiAgICBwcmVjaW5jdFgsXG4gICAgcHJlY2luY3RZKSB7XG5cbiAgICB2YXIgZnVsbFRpbGVzU2l6ZSA9IG51bGw7XG4gICAgdmFyIHRpbGVzQm91bmRzID0gbnVsbDtcbiAgICB2YXIgbGV2ZWwgPSBjYWxjdWxhdGVMZXZlbCgpO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsZXZlbCcsIHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH19KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZnVsbFRpbGVzU2l6ZScsIHsgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGZ1bGxUaWxlc1NpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB0aWxlQm91bmRzID0gdGhpcy50aWxlc0JvdW5kcztcbiAgICAgICAgICAgIGZ1bGxUaWxlc1NpemUgPSBzaXplc0NhbGN1bGF0b3IuZ2V0U2l6ZU9mVGlsZXModGlsZUJvdW5kcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bGxUaWxlc1NpemU7XG4gICAgfX0pO1xuICAgIFxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndGlsZXNCb3VuZHMnLCB7IGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aWxlc0JvdW5kcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIG51bVRpbGVzWCA9IHNpemVzQ2FsY3VsYXRvci5nZXROdW1UaWxlc1goKTtcbiAgICAgICAgICAgIHZhciB4ID0gdGlsZUluZGV4ICUgbnVtVGlsZXNYO1xuICAgICAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKHRpbGVJbmRleCAvIG51bVRpbGVzWCk7XG4gICAgICAgICAgICB0aWxlc0JvdW5kcyA9IHtcbiAgICAgICAgICAgICAgICBsZXZlbDogbGV2ZWwsXG4gICAgICAgICAgICAgICAgbWluVGlsZVg6IHgsXG4gICAgICAgICAgICAgICAgbWluVGlsZVk6IHksXG4gICAgICAgICAgICAgICAgbWF4VGlsZVhFeGNsdXNpdmU6IHggKyAxLFxuICAgICAgICAgICAgICAgIG1heFRpbGVZRXhjbHVzaXZlOiB5ICsgMVxuICAgICAgICAgICAgfTsgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWxlc0JvdW5kcztcbiAgICB9fSk7XG4gICAgXG4gICAgdGhpcy5nZXRUaWxlSXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHRyeUFkdmFuY2VUaWxlQ2FsbHMgPSAwO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldCB0aWxlSW5kZXgoKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tWYWxpZFRpbGVJdGVyYXRvcigndGlsZScsIHRyeUFkdmFuY2VUaWxlQ2FsbHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aWxlSW5kZXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBnZXQgdGlsZVN0cnVjdHVyZSgpIHtcbiAgICAgICAgICAgICAgICBjaGVja1ZhbGlkVGlsZUl0ZXJhdG9yKCd0aWxlJywgdHJ5QWR2YW5jZVRpbGVDYWxscyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRpbGVTdHJ1Y3R1cmU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0cnlBZHZhbmNlOiBmdW5jdGlvbiB0cnlBZHZhbmNlKCkge1xuICAgICAgICAgICAgICAgIGlmICh0cnlBZHZhbmNlVGlsZUNhbGxzID4gMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICdDYW5ub3QgYWR2YW5jZSB0aWxlIGl0ZXJhdG9yIGFmdGVyIGVuZGVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICsrdHJ5QWR2YW5jZVRpbGVDYWxscztcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ5QWR2YW5jZVRpbGVDYWxscyA8IDI7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjcmVhdGVQcmVjaW5jdEl0ZXJhdG9yOiBmdW5jdGlvbiBjcmVhdGVQcmVjaW5jdEl0ZXJhdG9yKFxuICAgICAgICAgICAgICAgIGlzSXRlcmF0ZVByZWNpbmN0c05vdEluQ29kZXN0cmVhbVBhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2hlY2tWYWxpZFRpbGVJdGVyYXRvcigndGlsZScsIHRyeUFkdmFuY2VUaWxlQ2FsbHMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChpc0l0ZXJhdGVQcmVjaW5jdHNOb3RJbkNvZGVzdHJlYW1QYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1ByZWNpbmN0IGl0ZXJhdG9yIG9mIHNpbmdsZSBwcmVjaW5jdCBwYXJ0IGNhbm5vdCAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpdGVyYXRlIHByZWNpbmN0cyBvdXQgb2YgcGFydCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgdHJ5QWR2YW5jZUNhbGxzID0gMDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBnZXQgdGlsZUluZGV4KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWxpZFRpbGVJdGVyYXRvcigncHJlY2luY3QnLCB0cnlBZHZhbmNlQ2FsbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpbGVJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0IGNvbXBvbmVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRUaWxlSXRlcmF0b3IoJ3ByZWNpbmN0JywgdHJ5QWR2YW5jZUNhbGxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGdldCBwcmVjaW5jdFgoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbGlkVGlsZUl0ZXJhdG9yKCdwcmVjaW5jdCcsIHRyeUFkdmFuY2VDYWxscyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJlY2luY3RYO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXQgcHJlY2luY3RZKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWxpZFRpbGVJdGVyYXRvcigncHJlY2luY3QnLCB0cnlBZHZhbmNlQ2FsbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZWNpbmN0WTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0IHJlc29sdXRpb25MZXZlbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrVmFsaWRUaWxlSXRlcmF0b3IoJ3ByZWNpbmN0JywgdHJ5QWR2YW5jZUNhbGxzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbEluZGV4O1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBnZXQgaXNJbkNvZGVzdHJlYW1QYXJ0KCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tWYWxpZFRpbGVJdGVyYXRvcigncHJlY2luY3QnLCB0cnlBZHZhbmNlQ2FsbHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRyeUFkdmFuY2U6IGZ1bmN0aW9uIHRyeUFkdmFuY2UoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHJ5QWR2YW5jZUNhbGxzID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQ2Fubm90IGFkdmFuY2UgcHJlY2luY3QgaXRlcmF0b3IgYWZ0ZXIgZW5kZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICsrdHJ5QWR2YW5jZUNhbGxzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyeUFkdmFuY2VDYWxscyA8IDI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjaGVja1ZhbGlkVGlsZUl0ZXJhdG9yKGl0ZXJhdG9yVHlwZSwgdHJ5QWR2YW5jZUNhbGxzKSB7XG4gICAgICAgIGlmICh0cnlBZHZhbmNlQ2FsbHMgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDYW5ub3QgdXNlICcgKyBpdGVyYXRvclR5cGUgKyAnIGl0ZXJhdG9yIGJlZm9yZSBzdGFydGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHJ5QWR2YW5jZUNhbGxzID4gMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCB1c2UgJyArIGl0ZXJhdG9yVHlwZSArICcgaXRlcmF0b3IgYWZ0ZXIgZW5kZWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjYWxjdWxhdGVMZXZlbCgpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudFN0cnVjdHVyZSA9XG4gICAgICAgICAgICB0aWxlU3RydWN0dXJlLmdldENvbXBvbmVudFN0cnVjdHVyZShjb21wb25lbnQpO1xuICAgICAgICB2YXIgbnVtUmVzb2x1dGlvbkxldmVsc0luQ29tcG9uZW50ID1cbiAgICAgICAgICAgIGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1SZXNvbHV0aW9uTGV2ZWxzKCk7XG4gICAgICAgIHJldHVybiBudW1SZXNvbHV0aW9uTGV2ZWxzSW5Db21wb25lbnQgLSBsZXZlbEluZGV4IC0gMTtcbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcHJlY2luY3QtY29kZXN0cmVhbS1wYXJ0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSnBpcFByZWNpbmN0c0l0ZXJhdG9yV2FpdGVyKFxuICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgZGF0YWJpbnNTYXZlcixcbiAgICBpdGVyYXRlUHJlY2luY3RDYWxsYmFjayxcbiAgICBqcGlwRmFjdG9yeSkge1xuICAgIFxuICAgIHZhciB0aWxlSGVhZGVyc05vdExvYWRlZCA9IDA7XG4gICAgdmFyIGlzUmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgIHZhciBpc1VucmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgIFxuICAgIHZhciByZWdpc3RlcmVkVGlsZUhlYWRlckRhdGFiaW5zID0gW107XG4gICAgdmFyIGFjY3VtdWxhdGVkRGF0YVBlckRhdGFiaW4gPSBbXTtcbiAgICBcbiAgICB0aGlzLmlzQWxsVGlsZUhlYWRlcnNMb2FkZWQgPSBmdW5jdGlvbiBpc0FsbFRpbGVIZWFkZXJzTG9hZGVkKCkge1xuICAgICAgICByZXR1cm4gdGlsZUhlYWRlcnNOb3RMb2FkZWQgPT09IDA7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnJlZ2lzdGVyID0gZnVuY3Rpb24gcmVnaXN0ZXIoKSB7XG4gICAgICAgIGlmIChpc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdKcGlwUXVhbGl0eVdhaXRlciBhbHJlYWR5IHJlZ2lzdGVyZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNSZWdpc3RlcmVkID0gdHJ1ZTtcblxuICAgICAgICArK3RpbGVIZWFkZXJzTm90TG9hZGVkO1xuXG4gICAgICAgIHZhciB0aWxlSXRlcmF0b3IgPSBjb2Rlc3RyZWFtUGFydC5nZXRUaWxlSXRlcmF0b3IoKTtcbiAgICAgICAgd2hpbGUgKHRpbGVJdGVyYXRvci50cnlBZHZhbmNlKCkpIHtcbiAgICAgICAgICAgIHZhciB0aWxlSW5kZXggPSB0aWxlSXRlcmF0b3IudGlsZUluZGV4O1xuICAgICAgICAgICAgdmFyIGRhdGFiaW4gPSBkYXRhYmluc1NhdmVyLmdldFRpbGVIZWFkZXJEYXRhYmluKHRpbGVJbmRleCk7XG5cbiAgICAgICAgICAgIHZhciBpbkNsYXNzSWQgPSBkYXRhYmluLmdldEluQ2xhc3NJZCgpO1xuICAgICAgICAgICAgYWNjdW11bGF0ZWREYXRhUGVyRGF0YWJpbltpbkNsYXNzSWRdID0ge1xuICAgICAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3I6IHRpbGVJdGVyYXRvci5jcmVhdGVQcmVjaW5jdEl0ZXJhdG9yKCksXG4gICAgICAgICAgICAgICAgaXNBbHJlYWR5TG9hZGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGRhdGFiaW5zU2F2ZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICBkYXRhYmluLCAnZGF0YUFycml2ZWQnLCB0aWxlSGVhZGVyRGF0YUFycml2ZWQpO1xuICAgICAgICAgICAgcmVnaXN0ZXJlZFRpbGVIZWFkZXJEYXRhYmlucy5wdXNoKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICArK3RpbGVIZWFkZXJzTm90TG9hZGVkO1xuICAgICAgICAgICAgdGlsZUhlYWRlckRhdGFBcnJpdmVkKGRhdGFiaW4pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAtLXRpbGVIZWFkZXJzTm90TG9hZGVkO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy51bnJlZ2lzdGVyID0gZnVuY3Rpb24gdW5yZWdpc3RlcigpIHtcbiAgICAgICAgaWYgKCFpc1JlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdKcGlwUXVhbGl0eVdhaXRlciBub3QgcmVnaXN0ZXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1VucmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpc1VucmVnaXN0ZXJlZCA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZWdpc3RlcmVkVGlsZUhlYWRlckRhdGFiaW5zLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIocmVnaXN0ZXJlZFRpbGVIZWFkZXJEYXRhYmluc1tqXSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIHRpbGVIZWFkZXJEYXRhQXJyaXZlZCh0aWxlSGVhZGVyRGF0YWJpbikge1xuICAgICAgICBpZiAoIXRpbGVIZWFkZXJEYXRhYmluLmlzQWxsRGF0YWJpbkxvYWRlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBpbkNsYXNzSWQgPSB0aWxlSGVhZGVyRGF0YWJpbi5nZXRJbkNsYXNzSWQoKTtcbiAgICAgICAgdmFyIHRpbGVBY2N1bXVsYXRlZERhdGEgPSBhY2N1bXVsYXRlZERhdGFQZXJEYXRhYmluW2luQ2xhc3NJZF07XG4gICAgICAgIFxuICAgICAgICBpZiAodGlsZUFjY3VtdWxhdGVkRGF0YS5pc0FscmVhZHlMb2FkZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGlsZUFjY3VtdWxhdGVkRGF0YS5pc0FscmVhZHlMb2FkZWQgPSB0cnVlO1xuICAgICAgICAtLXRpbGVIZWFkZXJzTm90TG9hZGVkO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVJbmRleCA9IGluQ2xhc3NJZDsgLy8gU2VlbXMgY29ycmVjdCwgYnV0IGNhbiBiZSBwcmV0dGllclxuICAgICAgICB2YXIgdGlsZVN0cnVjdHVyZSA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZVN0cnVjdHVyZSh0aWxlSW5kZXgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHByZWNpbmN0SXRlcmF0b3IgPSB0aWxlQWNjdW11bGF0ZWREYXRhLnByZWNpbmN0SXRlcmF0b3I7XG5cbiAgICAgICAgd2hpbGUgKHByZWNpbmN0SXRlcmF0b3IudHJ5QWR2YW5jZSgpKSB7XG4gICAgICAgICAgICBpZiAoIXByZWNpbmN0SXRlcmF0b3IuaXNJbkNvZGVzdHJlYW1QYXJ0KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIHByZWNpbmN0IG5vdCBpbiBjb2Rlc3RyZWFtIHBhcnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaXRlcmF0ZVByZWNpbmN0Q2FsbGJhY2socHJlY2luY3RJdGVyYXRvciwgdGlsZVN0cnVjdHVyZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbWFnZS1zdHJ1Y3R1cmVzL2pwaXAtcHJlY2luY3RzLWl0ZXJhdG9yLXdhaXRlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBRdWFsaXR5V2FpdGVyKFxuICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgIHByb2dyZXNzaXZlbmVzcyxcbiAgICBtYXhRdWFsaXR5LFxuICAgIHF1YWxpdHlMYXllclJlYWNoZWRDYWxsYmFjayxcbiAgICBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgIGRhdGFiaW5zU2F2ZXIsXG4gICAgc3RhcnRUcmFja1ByZWNpbmN0Q2FsbGJhY2ssXG4gICAgY2FsbGJhY2tzVGhpcyxcbiAgICBqcGlwRmFjdG9yeSkge1xuXG4gICAgLy8gTk9URTogKHBlcmZvcm1hbmNlKSBUb2dnbGVkIGJldHdlZW4gaW50IGFuZCBzdHJpbmcgKCdtYXgnKVxuICAgIHZhciBtaW5OdW1RdWFsaXR5TGF5ZXJzUmVhY2hlZCA9IDA7XG4gICAgdmFyIHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgPSAwO1xuICAgIHZhciBpc1JlZ2lzdGVyZWQgPSBmYWxzZTtcbiAgICB2YXIgaXNSZXF1ZXN0RG9uZSA9IGZhbHNlO1xuXG4gICAgdmFyIGFjY3VtdWxhdGVkRGF0YVBlclByZWNpbmN0ID0gW107XG4gICAgdmFyIHByZWNpbmN0Q291bnRCeVJlYWNoZWRRdWFsaXR5TGF5ZXIgPSBbMF07XG4gICAgdmFyIHByZWNpbmN0Q291bnRJbk1heFF1YWxpdHlMYXllciA9IDA7XG4gICAgdmFyIHByZWNpbmN0Q291bnQgPSAwO1xuICAgIHZhciBwZW5kaW5nUHJlY2luY3RVcGRhdGUgPSBbXTtcblxuICAgIHZhciBkZWZhdWx0VGlsZVN0cnVjdHVyZSA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0RGVmYXVsdFRpbGVTdHJ1Y3R1cmUoKTtcbiAgICB2YXIgZGVmYXVsdE51bVF1YWxpdHlMYXllcnMgPSBkZWZhdWx0VGlsZVN0cnVjdHVyZS5nZXROdW1RdWFsaXR5TGF5ZXJzKCk7XG5cbiAgICB2YXIgcHJlY2luY3RzV2FpdGVyID0ganBpcEZhY3RvcnkuY3JlYXRlUHJlY2luY3RzSXRlcmF0b3JXYWl0ZXIoXG4gICAgICAgIGNvZGVzdHJlYW1QYXJ0LFxuICAgICAgICBjb2Rlc3RyZWFtU3RydWN0dXJlLFxuICAgICAgICBkYXRhYmluc1NhdmVyLFxuICAgICAgICBpdGVyYXRlUHJlY2luY3RDYWxsYmFjayk7XG4gICAgXG4gICAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyKCkge1xuICAgICAgICBwcmVjaW5jdHNXYWl0ZXIucmVnaXN0ZXIoKTtcbiAgICAgICAgaXNSZWdpc3RlcmVkID0gdHJ1ZTtcbiAgICAgICAgdHJ5QWR2YW5jZVF1YWxpdHlMYXllcnNSZWFjaGVkKCk7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgICAgICBwcmVjaW5jdHNXYWl0ZXIudW5yZWdpc3RlcigpO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5wcmVjaW5jdFF1YWxpdHlMYXllclJlYWNoZWQgPSBmdW5jdGlvbiBwcmVjaW5jdFF1YWxpdHlMYXllclJlYWNoZWQoXG4gICAgICAgIHByZWNpbmN0SW5DbGFzc0lkLCBxdWFsaXR5UmVhY2hlZCkge1xuXG4gICAgICAgIHZhciBhY2N1bXVsYXRlZERhdGEgPSB1cGRhdGVQcmVjaW5jdERhdGEoXG4gICAgICAgICAgICBwcmVjaW5jdEluQ2xhc3NJZCwgcXVhbGl0eVJlYWNoZWQpO1xuXG4gICAgICAgIGlmIChhY2N1bXVsYXRlZERhdGEuaXNVcGRhdGVkICYmIGFjY3VtdWxhdGVkRGF0YS5xdWFsaXR5SW5UaWxlKSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRlZERhdGEuaXNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0cnlBZHZhbmNlUXVhbGl0eUxheWVyc1JlYWNoZWQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRQcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkID0gZnVuY3Rpb24gZ2V0UHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZCgpIHtcbiAgICAgICAgcmV0dXJuIHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmlzRG9uZSA9IGZ1bmN0aW9uIGlzRG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIGlzUmVxdWVzdERvbmU7XG4gICAgfTtcblxuICAgIHRoaXMuZ2V0UXVhbGl0eVJlYWNoZWQgPSBmdW5jdGlvbiBnZXRRdWFsaXR5UmVhY2hlZCgpIHtcbiAgICAgICAgaWYgKHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdDYW5ub3QgY3JlYXRlIGNvZGVzdHJlYW0gYmVmb3JlIGZpcnN0IHByb2dyZXNzaXZlbmVzcyAnICtcbiAgICAgICAgICAgICAgICAnc3RhZ2UgaGFzIGJlZW4gcmVhY2hlZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcXVhbGl0eVJlYWNoZWQgPVxuICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzW3Byb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgLSAxXS5taW5OdW1RdWFsaXR5TGF5ZXJzO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHF1YWxpdHlSZWFjaGVkO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBpdGVyYXRlUHJlY2luY3RDYWxsYmFjayhwcmVjaW5jdEl0ZXJhdG9yLCB0aWxlU3RydWN0dXJlKSB7XG4gICAgICAgIHZhciBpbkNsYXNzSW5kZXggPSB0aWxlU3RydWN0dXJlLnByZWNpbmN0UG9zaXRpb25Ub0luQ2xhc3NJbmRleChcbiAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IpO1xuICAgICAgICB2YXIgcHJlY2luY3REYXRhYmluID0gZGF0YWJpbnNTYXZlci5nZXRQcmVjaW5jdERhdGFiaW4oXG4gICAgICAgICAgICBpbkNsYXNzSW5kZXgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGFjY3VtdWxhdGVkRGF0YVBlclByZWNpbmN0W2luQ2xhc3NJbmRleF0pIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdQcmVjaW5jdCB3YXMgaXRlcmF0ZWQgdHdpY2UgaW4gY29kZXN0cmVhbSBwYXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICsrcHJlY2luY3RDb3VudEJ5UmVhY2hlZFF1YWxpdHlMYXllclswXTtcbiAgICAgICAgKytwcmVjaW5jdENvdW50O1xuICAgICAgICB2YXIgcXVhbGl0eUluVGlsZSA9IHRpbGVTdHJ1Y3R1cmUuZ2V0TnVtUXVhbGl0eUxheWVycygpO1xuICAgICAgICBhY2N1bXVsYXRlZERhdGFQZXJQcmVjaW5jdFtpbkNsYXNzSW5kZXhdID0ge1xuICAgICAgICAgICAgcXVhbGl0eVJlYWNoZWQ6IDAsXG4gICAgICAgICAgICBpc1VwZGF0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNNYXhRdWFsaXR5OiBmYWxzZSxcbiAgICAgICAgICAgIHF1YWxpdHlJblRpbGU6IHF1YWxpdHlJblRpbGVcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcGVuZGluZ1F1YWxpdHlSZWFjaGVkID0gcGVuZGluZ1ByZWNpbmN0VXBkYXRlW2luQ2xhc3NJbmRleF07XG4gICAgICAgIGlmIChwZW5kaW5nUXVhbGl0eVJlYWNoZWQpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBwZW5kaW5nUHJlY2luY3RVcGRhdGVbaW5DbGFzc0luZGV4XTtcbiAgICAgICAgICAgIHVwZGF0ZVByZWNpbmN0RGF0YShpbkNsYXNzSW5kZXgsIHBlbmRpbmdRdWFsaXR5UmVhY2hlZCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN0YXJ0VHJhY2tQcmVjaW5jdENhbGxiYWNrLmNhbGwoXG4gICAgICAgICAgICBjYWxsYmFja3NUaGlzLFxuICAgICAgICAgICAgcHJlY2luY3REYXRhYmluLFxuICAgICAgICAgICAgcXVhbGl0eUluVGlsZSxcbiAgICAgICAgICAgIHByZWNpbmN0SXRlcmF0b3IsXG4gICAgICAgICAgICBpbkNsYXNzSW5kZXgsXG4gICAgICAgICAgICB0aWxlU3RydWN0dXJlKTtcbiAgICAgICAgICAgIFxuICAgICAgICBpZiAoaXNSZWdpc3RlcmVkKSB7XG4gICAgICAgICAgICB0cnlBZHZhbmNlUXVhbGl0eUxheWVyc1JlYWNoZWQoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB1cGRhdGVQcmVjaW5jdERhdGEocHJlY2luY3RJbkNsYXNzSWQsIHF1YWxpdHlSZWFjaGVkKSB7XG4gICAgICAgIHZhciBhY2N1bXVsYXRlZERhdGEgPSBhY2N1bXVsYXRlZERhdGFQZXJQcmVjaW5jdFtwcmVjaW5jdEluQ2xhc3NJZF07XG4gICAgICAgIGlmICghYWNjdW11bGF0ZWREYXRhKSB7XG4gICAgICAgICAgICBwZW5kaW5nUHJlY2luY3RVcGRhdGVbcHJlY2luY3RJbkNsYXNzSWRdID0gcXVhbGl0eVJlYWNoZWQ7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC0tcHJlY2luY3RDb3VudEJ5UmVhY2hlZFF1YWxpdHlMYXllclthY2N1bXVsYXRlZERhdGEucXVhbGl0eVJlYWNoZWRdO1xuICAgICAgICBpZiAoYWNjdW11bGF0ZWREYXRhLmlzTWF4UXVhbGl0eSkge1xuICAgICAgICAgICAgLS1wcmVjaW5jdENvdW50SW5NYXhRdWFsaXR5TGF5ZXI7XG4gICAgICAgICAgICBhY2N1bXVsYXRlZERhdGEuaXNNYXhRdWFsaXR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHF1YWxpdHlSZWFjaGVkIGluIGxhc3QgcXVhbGl0eSBtaWdodCBhcnJpdmUgZWl0aGVyIGFzICdtYXgnIG9yIG51bWJlci4gTm9ybWFsaXplIGJvdGggY2FzZXMgdG8gbnVtYmVyXG4gICAgICAgIHZhciBxdWFsaXR5UmVhY2hlZE51bWVyaWMgPSBxdWFsaXR5UmVhY2hlZCA9PT0gJ21heCcgPyBhY2N1bXVsYXRlZERhdGEucXVhbGl0eUluVGlsZSA6IHF1YWxpdHlSZWFjaGVkO1xuICAgICAgICBhY2N1bXVsYXRlZERhdGEuaXNVcGRhdGVkID1cbiAgICAgICAgICAgIGFjY3VtdWxhdGVkRGF0YS5xdWFsaXR5UmVhY2hlZCAhPT0gcXVhbGl0eVJlYWNoZWROdW1lcmljO1xuICAgICAgICBhY2N1bXVsYXRlZERhdGEucXVhbGl0eVJlYWNoZWQgPSBxdWFsaXR5UmVhY2hlZE51bWVyaWM7XG4gICAgICAgIFxuICAgICAgICBpZiAocXVhbGl0eVJlYWNoZWROdW1lcmljID09PSBhY2N1bXVsYXRlZERhdGEucXVhbGl0eUluVGlsZSkge1xuICAgICAgICAgICAgKytwcmVjaW5jdENvdW50SW5NYXhRdWFsaXR5TGF5ZXI7XG4gICAgICAgICAgICBhY2N1bXVsYXRlZERhdGEuaXNNYXhRdWFsaXR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb3VudCA9IHByZWNpbmN0Q291bnRCeVJlYWNoZWRRdWFsaXR5TGF5ZXJbcXVhbGl0eVJlYWNoZWROdW1lcmljXSB8fCAwO1xuICAgICAgICBwcmVjaW5jdENvdW50QnlSZWFjaGVkUXVhbGl0eUxheWVyW3F1YWxpdHlSZWFjaGVkTnVtZXJpY10gPSBjb3VudCArIDE7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYWNjdW11bGF0ZWREYXRhO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiB0cnlBZHZhbmNlUXVhbGl0eUxheWVyc1JlYWNoZWQoKSB7XG4gICAgICAgIGlmIChwcmVjaW5jdENvdW50QnlSZWFjaGVkUXVhbGl0eUxheWVyLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgcHJlY2luY3RDb3VudEJ5UmVhY2hlZFF1YWxpdHlMYXllclttaW5OdW1RdWFsaXR5TGF5ZXJzUmVhY2hlZF0gPiAwIHx8XG4gICAgICAgICAgICBtaW5OdW1RdWFsaXR5TGF5ZXJzUmVhY2hlZCA9PT0gJ21heCcgfHxcbiAgICAgICAgICAgIHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgPj0gcHJvZ3Jlc3NpdmVuZXNzLmxlbmd0aCB8fFxuICAgICAgICAgICAgIXByZWNpbmN0c1dhaXRlci5pc0FsbFRpbGVIZWFkZXJzTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNSZXF1ZXN0RG9uZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ1JlcXVlc3QgYWxyZWFkeSBkb25lIGJ1dCBjYWxsYmFjayBpcyBjYWxsZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGhhc1ByZWNpbmN0c0luUXVhbGl0eUxheWVyO1xuICAgICAgICBcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgKyttaW5OdW1RdWFsaXR5TGF5ZXJzUmVhY2hlZDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1pbk51bVF1YWxpdHlMYXllcnNSZWFjaGVkID49IHByZWNpbmN0Q291bnRCeVJlYWNoZWRRdWFsaXR5TGF5ZXIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdBZHZhbmNpbmcgcHJvZ3Jlc3NpdmVuZXNzIHJvbGxlZCBvdXQgb2YgYXJyYXkgb2YgcHJlY2luY3RzIGNvdW50cyBieSBxdWFsaXR5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGhhc1ByZWNpbmN0c0luUXVhbGl0eUxheWVyID1cbiAgICAgICAgICAgICAgICBwcmVjaW5jdENvdW50QnlSZWFjaGVkUXVhbGl0eUxheWVyW21pbk51bVF1YWxpdHlMYXllcnNSZWFjaGVkXSA+IDA7XG4gICAgICAgIH0gd2hpbGUgKCFoYXNQcmVjaW5jdHNJblF1YWxpdHlMYXllcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgbnVtUXVhbGl0eUxheWVyc1RvV2FpdCA9IHByb2dyZXNzaXZlbmVzc1tcbiAgICAgICAgICAgIHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWRdLm1pbk51bVF1YWxpdHlMYXllcnM7XG5cbiAgICAgICAgaWYgKG1pbk51bVF1YWxpdHlMYXllcnNSZWFjaGVkIDwgbnVtUXVhbGl0eUxheWVyc1RvV2FpdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaXNGaXJzdCA9IHRydWU7XG4gICAgICAgIHdoaWxlIChwcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkIDwgcHJvZ3Jlc3NpdmVuZXNzLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHF1YWxpdHlMYXllcnNSZXF1aXJlZCA9IHByb2dyZXNzaXZlbmVzc1tcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkXS5taW5OdW1RdWFsaXR5TGF5ZXJzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoKHF1YWxpdHlMYXllcnNSZXF1aXJlZCA9PT0gJ21heCcgJiYgcHJlY2luY3RDb3VudEluTWF4UXVhbGl0eUxheWVyICE9PSBwcmVjaW5jdENvdW50KSB8fFxuICAgICAgICAgICAgICAgIHF1YWxpdHlMYXllcnNSZXF1aXJlZCA+IG1pbk51bVF1YWxpdHlMYXllcnNSZWFjaGVkKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBmb3JjZUN1cnJlbnRTdGFnZSA9IFxuICAgICAgICAgICAgICAgIHByb2dyZXNzaXZlbmVzc1twcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkXS5mb3JjZU1heFF1YWxpdHkgPT09ICdmb3JjZScgfHxcbiAgICAgICAgICAgICAgICBwcm9ncmVzc2l2ZW5lc3NbcHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZF0uZm9yY2VNYXhRdWFsaXR5ID09PSAnZm9yY2VBbGwnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2tpcEZvcmNlQ2hlY2sgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHByb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgPCBwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgIFRoaXMgY2hlY2sgY2FwdHVyZXMgdGhlIGZvbGxvd2luZyBjb21tb24gY2FzZSBvZiBwcm9ncmVzc2l2ZW5lc3M6XG4gICAgICAgICAgICAgICAgICAgIFt7IG1pbk51bVF1YWxpdHlMYXllcnM6IDEsIGZvcmNlTWF4UXVhbGl0eTogJ2ZvcmNlJyB9LFxuICAgICAgICAgICAgICAgICAgICAgeyBtaW5OdW1RdWFsaXR5TGF5ZXJzOiAnbWF4JywgZm9yY2VNYXhRdWFsaXR5OiAnbm8nIH1dXG4gICAgICAgICAgICAgICAgICAgIFRoaXMgaXMgdGhlIGF1dG9tYXRpYyBwcm9ncmVzc2l2ZW5lc3MgZm9yIGFuIGltYWdlIHdpdGggc2luZ2xlIHF1YWxpdHkgbGF5ZXIuXG4gICAgICAgICAgICAgICAgICAgIFRoZSBjaGVjayBoZXJlIHRyaWVzIHRvIGF2b2lkIGNhbGxpbmcgdGhlIGNhbGxiYWNrIHR3aWNlIGluIGNhc2UgdGhhdCBhbGwgcHJlY2luY3RzXG4gICAgICAgICAgICAgICAgICAgIGhhdmUgb25seSBzaW5nbGUgcXVhbGl0eSBsYXllciwgd2hpY2ggbWFrZXMgYm90aCBzdGFnZXMgaWRlbnRpY2FsLlxuICAgICAgICAgICAgICAgICAgICBIYW5kbGluZyB0aGlzIHNpdHVhdGlvbiBieSBlbGltaW5hdGluZyB0aGUgZmlyc3Qgc3RhZ2Ugd2hlbiBjYWxjdWxhdGluZyB0aGUgYXV0b21hdGljXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzaXZlbmVzcyBpcyB3cm9uZyBpbiBjYXNlIHRoYXQgdGhlcmUgYXJlIHRpbGVzIHdpdGggbm9uLWRlZmF1bHQgY291bnQgb2YgcXVhbGl0eVxuICAgICAgICAgICAgICAgICAgICBsYXllcnMgdGhhdCBpcyBiaWdnZXIgdGhhbiAxLCB0aHVzIGl0IHNob3VsZCBiZSBoYW5kbGVkIGhlcmUuXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2tpcEZvcmNlQ2hlY2sgPVxuICAgICAgICAgICAgICAgICAgICBwcmVjaW5jdENvdW50SW5NYXhRdWFsaXR5TGF5ZXIgPT09IHByZWNpbmN0Q291bnQgJiZcbiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzW3Byb2dyZXNzaXZlU3RhZ2VzRmluaXNoZWQgKyAxXS5taW5OdW1RdWFsaXR5TGF5ZXJzID09PSAnbWF4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICsrcHJvZ3Jlc3NpdmVTdGFnZXNGaW5pc2hlZDtcblxuICAgICAgICAgICAgaWYgKCFpc0ZpcnN0ICYmICFza2lwRm9yY2VDaGVjayAmJiBmb3JjZUN1cnJlbnRTdGFnZSkge1xuICAgICAgICAgICAgICAgIHF1YWxpdHlMYXllclJlYWNoZWRDYWxsYmFjay5jYWxsKGNhbGxiYWNrc1RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpc0ZpcnN0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlzUmVxdWVzdERvbmUgPSBwcm9ncmVzc2l2ZVN0YWdlc0ZpbmlzaGVkID09PSBwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoO1xuXG4gICAgICAgIHF1YWxpdHlMYXllclJlYWNoZWRDYWxsYmFjay5jYWxsKGNhbGxiYWNrc1RoaXMpO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ltYWdlLXN0cnVjdHVyZXMvanBpcC1xdWFsaXR5LXdhaXRlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpwaXBSZXF1ZXN0UGFyYW1zTW9kaWZpZXI7XG5cbmZ1bmN0aW9uIEpwaXBSZXF1ZXN0UGFyYW1zTW9kaWZpZXIoY29kZXN0cmVhbVN0cnVjdHVyZSkge1xuICAgIHRoaXMubW9kaWZ5Q29kZXN0cmVhbVBhcnRQYXJhbXMgPSBmdW5jdGlvbiBtb2RpZnlDb2Rlc3RyZWFtUGFydFBhcmFtcyhjb2Rlc3RyZWFtUGFydFBhcmFtcykge1xuICAgICAgICB2YXIgY29kZXN0cmVhbVBhcnRQYXJhbXNNb2RpZmllZCA9IGNhc3RDb2Rlc3RyZWFtUGFydFBhcmFtcyhjb2Rlc3RyZWFtUGFydFBhcmFtcyk7XG4gICAgICAgIHJldHVybiBjb2Rlc3RyZWFtUGFydFBhcmFtc01vZGlmaWVkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBhbmQgZmlsbCBvdXQgcHJvZ3Jlc3NpdmVuZXNzLlxuICAgICAqIEBwYXJhbSB7UHJvZ3Jlc3NpdmVuZXNzfSBwcm9ncmVzc2l2ZW5lc3MgLSBEZWZhdWx0cyBwcm9ncmVzc2l2ZW5lc3NbXS5mb3JjZU1heFF1YWxpdHkgdG8gJ25vJywgaXQgY2Fubm90IGJlICdmb3JjZUFsbCcuIFxuICAgICAqIEByZXR1cm5zIHtQcm9ncmVzc2l2ZW5lc3N9XG4gICAgICovXG4gICAgdGhpcy5tb2RpZnlDdXN0b21Qcm9ncmVzc2l2ZW5lc3MgPSBmdW5jdGlvbiBtb2RpZnlDdXN0b21Qcm9ncmVzc2l2ZW5lc3MocHJvZ3Jlc3NpdmVuZXNzKSB7XG4gICAgICAgIC8vIENoZWNrIHZhbGlkIGFyZ3VtZW50XG4gICAgICAgIGlmICghcHJvZ3Jlc3NpdmVuZXNzIHx8ICFwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ3Byb2dyZXNzaXZlbmVzcycsXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzLFxuICAgICAgICAgICAgICAgICdjdXN0b20gcHJvZ3Jlc3NpdmVuZXNzIGFyZ3VtZW50IHNob3VsZCBiZSBub24gZW1wdHkgYXJyYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuc3VyZSB0aGFuIG1pbk51bVF1YWxpdHlMYXllcnMgaXMgZ2l2ZW4gZm9yIGFsbCBpdGVtc1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShwcm9ncmVzc2l2ZW5lc3MubGVuZ3RoKTtcblxuICAgICAgICAvLyBFbnN1cmUgbWluTnVtUXVhbGl0eUxheWVycyBpcyBnaXZlbiBmb3IgYWxsIGl0ZW1zIGluIHByb2dyZXNzaXZlbmVzcyBhcnJheVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb2dyZXNzaXZlbmVzcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIG1pbk51bVF1YWxpdHlMYXllcnMgPSBwcm9ncmVzc2l2ZW5lc3NbaV0ubWluTnVtUXVhbGl0eUxheWVycztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1pbk51bVF1YWxpdHlMYXllcnMgIT09ICdtYXgnKSB7XG4gICAgICAgICAgICAgICAgbWluTnVtUXVhbGl0eUxheWVycyA9IHZhbGlkYXRlTnVtZXJpY1BhcmFtKFxuICAgICAgICAgICAgICAgICAgICBtaW5OdW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICAncHJvZ3Jlc3NpdmVuZXNzWycgKyBpICsgJ10ubWluTnVtUXVhbGl0eUxheWVycycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBmb3JjZU1heFF1YWxpdHkgZm9yIGEgZ2l2ZW4gcHJvZ3Jlc3NpdmVuZXNzIGxldmVsIG11c3QgYmVcbiAgICAgICAgICAgIC8vIGVpdGhlciAnbm8nIG9yICdmb3JjZScsIGl0IGNhbm5vdCBiZSAnZm9yY2VBbGwnXG4gICAgICAgICAgICAvLyBpdCBkZWZhdWx0cyB0byAnbm8nXG4gICAgICAgICAgICB2YXIgZm9yY2VNYXhRdWFsaXR5ID0gJ25vJztcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc2l2ZW5lc3NbaV0uZm9yY2VNYXhRdWFsaXR5KSB7XG4gICAgICAgICAgICAgICAgZm9yY2VNYXhRdWFsaXR5ID0gcHJvZ3Jlc3NpdmVuZXNzW2ldLmZvcmNlTWF4UXVhbGl0eTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlTWF4UXVhbGl0eSAhPT0gJ25vJyAmJlxuICAgICAgICAgICAgICAgICAgICBmb3JjZU1heFF1YWxpdHkgIT09ICdmb3JjZScgJiZcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VNYXhRdWFsaXR5ICE9PSAnZm9yY2VBbGwnKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3Byb2dyZXNzaXZlbmVzc1snICsgaSArICddLmZvcmNlTWF4UXVhbGl0eScsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZU1heFF1YWxpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAnZm9yY2VNYXhRdWFsaXR5IHNob3VsZCBiZSBcIm5vXCIsIFwiZm9yY2VcIiBvciBcImZvcmNlQWxsXCInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlTWF4UXVhbGl0eSA9PT0gJ2ZvcmNlQWxsJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1wiZm9yY2VBbGxcIiB2YWx1ZSBmb3IgZm9yY2VNYXhRdWFsaXR5IGluIHByb2dyZXNzaXZlbmVzcycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0W2ldID0ge1xuICAgICAgICAgICAgICAgIG1pbk51bVF1YWxpdHlMYXllcnM6IG1pbk51bVF1YWxpdHlMYXllcnMsXG4gICAgICAgICAgICAgICAgZm9yY2VNYXhRdWFsaXR5OiBmb3JjZU1heFF1YWxpdHlcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4UXVhbGl0eV0gTWF4IHF1YWxpdHkgdG8gcHJvZ3Jlc3NpdmUgdXAgdG8uXG4gICAgICogQHJldHVybnMge1Byb2dyZXNzaXZlbmVzc30gUHJvZ3Jlc3NpdmVuZXNzIG9mIFsxLCAyLCAzLCBtYXhRdWFsaXR5LzIsIG1heFF1YWxpdHldLlxuICAgICAqL1xuICAgIHRoaXMuZ2V0QXV0b21hdGljUHJvZ3Jlc3NpdmVuZXNzID0gZnVuY3Rpb24gZ2V0QXV0b21hdGljUHJvZ3Jlc3NpdmVuZXNzKG1heFF1YWxpdHkpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHByb2dyZXNzaXZlbmVzcyBvZiAoMSwgMiwgMywgKCNtYXgtcXVhbGl0eS8yKSwgKCNtYXgtcXVhbGl0eSkpXG5cbiAgICAgICAgdmFyIHByb2dyZXNzaXZlbmVzcyA9IFtdO1xuXG4gICAgICAgIC8vIE5vIHByb2dyZXNzaXZlbmVzcywgd2FpdCBmb3IgYWxsIHF1YWxpdHkgbGF5ZXJzIHRvIGJlIGZldGNoZWRcbiAgICAgICAgLy8gTWF4IHF1YWxpdHkgbXVzdCBiZSB0aGUgc21hbGxlciBvZiB0aGUgdXNlcnMgaW5wdXQgbWF4UXVhbGl0eVxuICAgICAgICAvLyBvciB0aGUgbnVtYmVyIG9mIHF1YWxpdHkgbGF5ZXJzIG9mIHRoZSBpbWFnZSBpdHNlbGZcbiAgICAgICAgdmFyIHRpbGVTdHJ1Y3R1cmUgPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldERlZmF1bHRUaWxlU3RydWN0dXJlKCk7XG4gICAgICAgIHZhciBudW1RdWFsaXR5TGF5ZXJzTnVtZXJpYyA9IHRpbGVTdHJ1Y3R1cmUuZ2V0TnVtUXVhbGl0eUxheWVycygpOyAvLyBJbWFnZXMgbnVtYmVyIG9mIHF1YWxpdHkgbGF5ZXJzXG4gICAgICAgIHZhciBxdWFsaXR5TnVtZXJpY09yTWF4ID0gJ21heCc7XG4gICAgICAgIFxuICAgICAgICBpZiAobWF4UXVhbGl0eSAhPT0gdW5kZWZpbmVkICYmIG1heFF1YWxpdHkgIT09ICdtYXgnKSB7XG4gICAgICAgICAgICBudW1RdWFsaXR5TGF5ZXJzTnVtZXJpYyA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIG51bVF1YWxpdHlMYXllcnNOdW1lcmljLCBtYXhRdWFsaXR5KTtcbiAgICAgICAgICAgIHF1YWxpdHlOdW1lcmljT3JNYXggPSBudW1RdWFsaXR5TGF5ZXJzTnVtZXJpYztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gTG9naWMgdG8gZ2V0IFsxLCAyLCAzLCBtYXhRdWFsaXR5LzIsIG1heFF1YWxpdHldIHByb2dyZXNzaXZlbmVzc1xuICAgICAgICB2YXIgZmlyc3RRdWFsaXR5TGF5ZXJzQ291bnQgPSBudW1RdWFsaXR5TGF5ZXJzTnVtZXJpYyA8IDQgP1xuICAgICAgICAgICAgbnVtUXVhbGl0eUxheWVyc051bWVyaWMgLSAxOiAzO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBmaXJzdFF1YWxpdHlMYXllcnNDb3VudDsgKytpKSB7XG4gICAgICAgICAgICBwcm9ncmVzc2l2ZW5lc3MucHVzaCh7XG4gICAgICAgICAgICAgICAgbWluTnVtUXVhbGl0eUxheWVyczogaSxcbiAgICAgICAgICAgICAgICBmb3JjZU1heFF1YWxpdHk6ICdubydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgbWlkZGxlUXVhbGl0eSA9IE1hdGgucm91bmQobnVtUXVhbGl0eUxheWVyc051bWVyaWMgLyAyKTtcbiAgICAgICAgaWYgKG1pZGRsZVF1YWxpdHkgPiBmaXJzdFF1YWxpdHlMYXllcnNDb3VudCAmJiBcbiAgICAgICAgICAgIChxdWFsaXR5TnVtZXJpY09yTWF4ID09PSAnbWF4JyB8fCBtaWRkbGVRdWFsaXR5IDwgcXVhbGl0eU51bWVyaWNPck1heCkpIHtcbiAgICAgICAgICAgIHByb2dyZXNzaXZlbmVzcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBtaW5OdW1RdWFsaXR5TGF5ZXJzOiBtaWRkbGVRdWFsaXR5LFxuICAgICAgICAgICAgICAgIGZvcmNlTWF4UXVhbGl0eTogJ25vJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHByb2dyZXNzaXZlbmVzcy5wdXNoKHtcbiAgICAgICAgICAgIG1pbk51bVF1YWxpdHlMYXllcnM6IHF1YWxpdHlOdW1lcmljT3JNYXgsXG4gICAgICAgICAgICBmb3JjZU1heFF1YWxpdHk6ICdubydcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBGb3JjZSBkZWNvZGluZyBvbmx5IGZpcnN0IHF1YWxpdHkgbGF5ZXJzIGZvciBxdWlja2VyIHNob3ctdXBcbiAgICAgICAgcHJvZ3Jlc3NpdmVuZXNzWzBdLmZvcmNlTWF4UXVhbGl0eSA9ICdmb3JjZSc7XG5cbiAgICAgICAgcmV0dXJuIHByb2dyZXNzaXZlbmVzcztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FzdENvZGVzdHJlYW1QYXJ0UGFyYW1zKGNvZGVzdHJlYW1QYXJ0UGFyYW1zKSB7XG4gICAgICAgIHZhciBsZXZlbCA9IHZhbGlkYXRlTnVtZXJpY1BhcmFtKFxuICAgICAgICAgICAgY29kZXN0cmVhbVBhcnRQYXJhbXMubGV2ZWwsXG4gICAgICAgICAgICAnbGV2ZWwnLFxuICAgICAgICAgICAgLypkZWZhdWx0VmFsdWU9Ki91bmRlZmluZWQsXG4gICAgICAgICAgICAvKmFsbG93VW5kZWZpZW5kPSovdHJ1ZSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbWluWCA9IHZhbGlkYXRlTnVtZXJpY1BhcmFtKGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1pblgsICdtaW5YJyk7XG4gICAgICAgIHZhciBtaW5ZID0gdmFsaWRhdGVOdW1lcmljUGFyYW0oY29kZXN0cmVhbVBhcnRQYXJhbXMubWluWSwgJ21pblknKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBtYXhYID0gdmFsaWRhdGVOdW1lcmljUGFyYW0oXG4gICAgICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcy5tYXhYRXhjbHVzaXZlLCAnbWF4WEV4Y2x1c2l2ZScpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG1heFkgPSB2YWxpZGF0ZU51bWVyaWNQYXJhbShcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLm1heFlFeGNsdXNpdmUsICdtYXhZRXhjbHVzaXZlJyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbGV2ZWxXaWR0aCA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TGV2ZWxXaWR0aChsZXZlbCk7XG4gICAgICAgIHZhciBsZXZlbEhlaWdodCA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TGV2ZWxIZWlnaHQobGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgaWYgKG1pblggPCAwIHx8IG1heFggPiBsZXZlbFdpZHRoIHx8XG4gICAgICAgICAgICBtaW5ZIDwgMCB8fCBtYXhZID4gbGV2ZWxIZWlnaHQgfHxcbiAgICAgICAgICAgIG1pblggPj0gbWF4WCB8fCBtaW5ZID49IG1heFkpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdjb2Rlc3RyZWFtUGFydFBhcmFtcycsIGNvZGVzdHJlYW1QYXJ0UGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIG1pblg6IG1pblgsXG4gICAgICAgICAgICBtaW5ZOiBtaW5ZLFxuICAgICAgICAgICAgbWF4WEV4Y2x1c2l2ZTogbWF4WCxcbiAgICAgICAgICAgIG1heFlFeGNsdXNpdmU6IG1heFksXG4gICAgICAgICAgICBsZXZlbDogbGV2ZWxcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYSBnaXZlbiBudW1lcmljIHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5wdXRWYWx1ZSAtIGlucHV0IGdpdmVuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHByb3BlcnR5TmFtZSAtIG5hbWUgb2YgcHJvcGVydHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVmYXVsdFZhbHVlIC0gZGVmYXVsdCB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbGxvd1VuZGVmaW5lZCAtIGlzIHRvIGJlIGFsbG93ZWQgdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVOdW1lcmljUGFyYW0oXG4gICAgICAgIGlucHV0VmFsdWUsIHByb3BlcnR5TmFtZSwgZGVmYXVsdFZhbHVlLCBhbGxvd1VuZGVmaW5lZCkge1xuICAgICAgICBcbiAgICAgICAgLy8gSWYgYWxsb3dlZCB1bmRlZmluZWQsIHJldHVybiBkZWZhdWx0IChkZWZpbmVkKSB2YWx1ZVxuICAgICAgICBpZiAoaW5wdXRWYWx1ZSA9PT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICAoZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgfHwgYWxsb3dVbmRlZmluZWQpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSAraW5wdXRWYWx1ZTtcbiAgICAgICAgaWYgKGlzTmFOKHJlc3VsdCkgfHwgcmVzdWx0ICE9PSBNYXRoLmZsb29yKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5Bcmd1bWVudEV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eU5hbWUsIGlucHV0VmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW1hZ2Utc3RydWN0dXJlcy9qcGlwLXJlcXVlc3QtcGFyYW1zLW1vZGlmaWVyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbi8qKlxuICogSnBpcCByZXF1ZXN0IG9iamVjdFxuICogQHBhcmFtIHtzZXNzaW9uSGVscGVyT2JqZWN0fSBzZXNzaW9uSGVscGVyIFxuICogQHBhcmFtIHttZXNzYWdlSGVhZGVyUGFyc2VyT2JqZWN0fSBtZXNzYWdlSGVhZGVyUGFyc2VyIFxuICogQHBhcmFtIHtjaGFubmVsT2JqZWN0fSBjaGFubmVsIFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcXVlc3RVcmwgXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayBcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZhaWx1cmVDYWxsYmFjayBcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwUmVxdWVzdChcbiAgICBzZXNzaW9uSGVscGVyLFxuICAgIG1lc3NhZ2VIZWFkZXJQYXJzZXIsXG4gICAgY2hhbm5lbCxcbiAgICByZXF1ZXN0VXJsLFxuICAgIGNhbGxiYWNrLFxuICAgIGZhaWx1cmVDYWxsYmFjaykge1xuICAgIFxuICAgIHZhciBLQiA9IDEwMjQ7XG4gICAgdmFyIFBST0dSRVNTSVZFTkVTU19NSU5fTEVOR1RIX0JZVEVTID0gMTAgKiBLQjtcblxuICAgIHZhciBSRVNQT05TRV9FTkRFRF9TVUNDRVNTID0gMTtcbiAgICB2YXIgUkVTUE9OU0VfRU5ERURfQUJPUlRFRCA9IDI7XG4gICAgdmFyIFJFU1BPTlNFX0VOREVEX1NFTlRfQU5PVEhFUl9NRVNTQUdFID0gMztcbiAgICBcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIGlzQWN0aXZlID0gZmFsc2U7IC8vIElzIHRoaXMgcmVxdWVzdCBhY3RpdmU/XG4gICAgdmFyIGVuZGVkQnlVc2VyID0gZmFsc2U7IC8vID8/XG4gICAgdmFyIGxhc3RSZXF1ZXN0SWQ7IC8vIExhc3Qgc2VudCByZXF1ZXN0IElEXG4gICAgdmFyIHJlc3BvbnNlTGVuZ3RoID0gUFJPR1JFU1NJVkVORVNTX01JTl9MRU5HVEhfQllURVM7IC8vIE1pbiByZXNwb25zZSBsZW5ndGhcbiAgICBcbiAgICAvLyBTdGFydCByZXF1ZXN0XG4gICAgdGhpcy5zdGFydFJlcXVlc3QgPSBmdW5jdGlvbiBzdGFydFJlcXVlc3QoKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHJlcXVlc3QgaXMgYWxyZWFkeSBhY3RpdmUgb3IgaGFzIGFscmVhZHkgc3RvcHBlZFxuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdzdGFydFJlcXVlc3QgY2FsbGVkIHR3aWNlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5kZWRCeVVzZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdyZXF1ZXN0IHdhcyBhbHJlYWR5IHN0b3BwZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNBY3RpdmUgPSB0cnVlOyAvLyBSZXF1ZXN0IGlzIG5vdyBhY3RpdmVcbiAgICAgICAgc2Vzc2lvbkhlbHBlci5yZXF1ZXN0U3RhcnRlZCgpOyAvLyBJbmNyZW1lbnQgc2Vzc2lvbkhlbHBlci5hY3RpdmVSZXF1ZXN0c1xuICAgICAgICBcbiAgICAgICAgc2VuZE1lc3NhZ2VPZkRhdGFSZXF1ZXN0KCk7IC8vIFNlbmQgbWVzc2FnZVxuICAgIH07XG5cbiAgICAvLyBTdG9wIHJlcXVlc3RcbiAgICB0aGlzLnN0b3BSZXF1ZXN0QXN5bmMgPSBmdW5jdGlvbiBzdG9wUmVxdWVzdEFzeW5jKHJlcXVlc3QpIHtcbiAgICAgICAgZW5kZWRCeVVzZXIgPSB0cnVlO1xuICAgIH07XG4gICAgXG4gICAgLy8gR2V0IGxhc3QgcmVxdWVzdCBJRFxuICAgIHRoaXMuZ2V0TGFzdFJlcXVlc3RJZCA9IGZ1bmN0aW9uIGdldExhc3RSZXF1ZXN0SWQoKSB7XG4gICAgICAgIGlmICghaXNBY3RpdmUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIGNhbGwgdG8gZ2V0TGFzdFJlcXVlc3RJZCBvbiBpbmFjdGl2ZSByZXF1ZXN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBsYXN0UmVxdWVzdElkO1xuICAgIH07XG4gICAgXG4gICAgLy8gPz9cbiAgICB0aGlzLmNhbGxDYWxsYmFja0FmdGVyQ29uY3VycmVudFJlcXVlc3RzRmluaXNoZWQgPVxuICAgICAgICBmdW5jdGlvbiBjYWxsQ2FsbGJhY2tBZnRlckNvbmN1cnJlbnRSZXF1ZXN0c0ZpbmlzaGVkKCkge1xuICAgICAgICBcbiAgICAgICAgY2FsbGJhY2soc2VsZiwgLyppc1Jlc3BvbnNlRG9uZT0qL3RydWUpO1xuICAgIH07XG4gICAgXG4gICAgLy8gU3VjY2VzcyBjYWxsYmFja1xuICAgIGZ1bmN0aW9uIGludGVybmFsU3VjY2Vzc0NhbGxiYWNrKGFqYXhSZXNwb25zZSwgaXNSZXNwb25zZURvbmUpIHtcbiAgICAgICAgdmFyIGZhaWxlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgZW5kZWRSZWFzb24gPSBwcm9jZXNzQWpheFJlc3BvbnNlKGFqYXhSZXNwb25zZSwgaXNSZXNwb25zZURvbmUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZW5kZWRSZWFzb24gPT09IFJFU1BPTlNFX0VOREVEX1NFTlRfQU5PVEhFUl9NRVNTQUdFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmYWlsZWQgPSBlbmRlZFJlYXNvbiA9PT0gUkVTUE9OU0VfRU5ERURfQUJPUlRFRDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNlc3Npb25IZWxwZXIub25FeGNlcHRpb24oZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWZhaWxlZCkge1xuICAgICAgICAgICAgICAgIHNlc3Npb25IZWxwZXIud2FpdEZvckNvbmN1cnJlbnRSZXF1ZXN0c1RvRW5kKHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjaGFubmVsLnJlcXVlc3RFbmRlZChhamF4UmVzcG9uc2UsIHNlbGYpO1xuXG4gICAgICAgICAgICBpZiAoZmFpbGVkICYmICFlbmRlZEJ5VXNlciAmJiBmYWlsdXJlQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXNzaW9uSGVscGVyLmNoZWNrQ29uY3VycmVudFJlcXVlc3RzRmluaXNoZWQoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5vbkV4Y2VwdGlvbihlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhaWx1cmUgY2FsbGJhY2tcbiAgICBmdW5jdGlvbiBpbnRlcm5hbEZhaWx1cmVDYWxsYmFjayhhamF4UmVzcG9uc2UpIHtcbiAgICAgICAgY2hhbm5lbC5yZXF1ZXN0RW5kZWQoYWpheFJlc3BvbnNlLCBzZWxmKTtcbiAgICAgICAgc2Vzc2lvbkhlbHBlci5jaGVja0NvbmN1cnJlbnRSZXF1ZXN0c0ZpbmlzaGVkKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZmFpbHVyZUNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIFByb2Nlc3MgdGhlIEFqYXggcmVzcG9uc2VcbiAgICBmdW5jdGlvbiBwcm9jZXNzQWpheFJlc3BvbnNlKGFqYXhSZXNwb25zZSwgaXNSZXNwb25zZURvbmUpIHtcbiAgICAgICAgaWYgKCFpc1Jlc3BvbnNlRG9uZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oJ0FKQVggJyArXG4gICAgICAgICAgICAgICAgJ2NhbGxiYWNrIGNhbGxlZCBhbHRob3VnaCByZXNwb25zZSBpcyBub3QgZG9uZSB5ZXQgJyArXG4gICAgICAgICAgICAgICAgJ2FuZCBjaHVua2VkIGVuY29kaW5nIGlzIG5vdCBlbmFibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgdmFyIGNyZWF0ZWRDaGFubmVsID0gc2Vzc2lvbkhlbHBlci5nZXRDcmVhdGVkQ2hhbm5lbElkKFxuICAgICAgICAgICAgYWpheFJlc3BvbnNlKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjcmVhdGVkQ2hhbm5lbCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKGNoYW5uZWwuZ2V0Q2hhbm5lbElkKCkgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXNzaW9uSGVscGVyLm9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ2hhbm5lbCBjcmVhdGVkIGFsdGhvdWdoIHdhcyBub3QgcmVxdWVzdGVkJywgJ0QuMi4zJykpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGFubmVsLnNldENoYW5uZWxJZChjcmVhdGVkQ2hhbm5lbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbC5nZXRDaGFubmVsSWQoKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5vbkV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdDYW5ub3QgZXh0cmFjdCBjaWQgZnJvbSBjbmV3IHJlc3BvbnNlJywgJ0QuMi4zJykpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gc2F2ZVRvRGF0YWJpbnNGcm9tT2Zmc2V0KGFqYXhSZXNwb25zZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZW5kT2Zmc2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gUkVTUE9OU0VfRU5ERURfQUJPUlRFRDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGVuZGVkUmVhc29uID0gcGFyc2VFbmRPZlJlc3BvbnNlKGFqYXhSZXNwb25zZSwgZW5kT2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIGVuZGVkUmVhc29uO1xuICAgIH1cbiAgICBcbiAgICAvLyBTZW5kIEFqYXggcmVzcG9uc2Ugd2l0aCBVUkxcbiAgICBmdW5jdGlvbiBzZW5kTWVzc2FnZU9mRGF0YVJlcXVlc3QoKSB7XG4gICAgICAgIGxhc3RSZXF1ZXN0SWQgPSBjaGFubmVsLm5leHRSZXF1ZXN0SWQoKTsgLy8gPz9cbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSByZXF1ZXN0IFVSTFxuICAgICAgICB2YXIgdXJsID0gcmVxdWVzdFVybCArXG4gICAgICAgICAgICAnJmxlbj0nICsgcmVzcG9uc2VMZW5ndGggK1xuICAgICAgICAgICAgJyZxaWQ9JyArIGxhc3RSZXF1ZXN0SWQ7XG4gICAgICAgIFxuICAgICAgICByZXNwb25zZUxlbmd0aCAqPSAyOyAvLyBFeHRlbmQgcmVzcG9uc2UgbGVuZ3RoPz9cbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBjaGFubmVsIGlmIG5vIGN1cnJlbnQgY2hhbm5lbCBJRFxuICAgICAgICAvLyBJZiBmaXJzdENoYW5uZWwgZXhpc3RzLCB1c2UgdGhhdFxuICAgICAgICB2YXIgc2hvdWxkQ3JlYXRlQ2hhbm5lbCA9IGNoYW5uZWwuZ2V0Q2hhbm5lbElkKCkgPT09IG51bGw7XG4gICAgICAgIGlmIChzaG91bGRDcmVhdGVDaGFubmVsKSB7XG4gICAgICAgICAgICB1cmwgKz0gJyZjbmV3PWh0dHAnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZXhpc3RDaGFubmVsSW5TZXNzaW9uID0gc2Vzc2lvbkhlbHBlci5nZXRGaXJzdENoYW5uZWwoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChleGlzdENoYW5uZWxJblNlc3Npb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJyZjaWQ9JyArIGV4aXN0Q2hhbm5lbEluU2Vzc2lvbi5nZXRDaGFubmVsSWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTk9URTogSWYgZXhpc3RDaGFubmVsSW5TZXNzaW9uLCBtYXliZSBzaG91bGQgcmVtb3ZlIFwiJnN0cmVhbT0wXCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybCArPSAnJmNpZD0nICsgY2hhbm5lbC5nZXRDaGFubmVsSWQoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gU2VuZCBBamF4IHJlcXVlc3RcbiAgICAgICAgc2Vzc2lvbkhlbHBlci5zZW5kQWpheChcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGludGVybmFsU3VjY2Vzc0NhbGxiYWNrLFxuICAgICAgICAgICAgaW50ZXJuYWxGYWlsdXJlQ2FsbGJhY2spO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBQYXJzZSBlbmQgb2YgcmVzcG9uc2VcbiAgICAgKiBAcGFyYW0ge2FqYXhSZXNwb25zZX0gYWpheFJlc3BvbnNlIFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgLSBvZmZzZXQgb2YgY2hhcmFjdGVycyBpbiBVUkxcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSAtIEVvUiByZXN1bHQgKGRlZnVhbHQgZWl0aGVyIFJFU1BPTlNFX0VOREVEX0FCT1JURUQgb3IgUkVTUE9OU0VfRU5ERURfU1VDQ0VTUylcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJzZUVuZE9mUmVzcG9uc2UoYWpheFJlc3BvbnNlLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGVuZFJlc3BvbnNlUmVzdWx0ID0gUkVTUE9OU0VfRU5ERURfQUJPUlRFRDtcbiAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYWpheFJlc3BvbnNlLnJlc3BvbnNlKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRocm93IGV4Y2VwdGlvbiBpZiBFb1IgaXMgbm90IGZvdW5kXG4gICAgICAgIGlmIChvZmZzZXQgPiBieXRlcy5sZW5ndGggLSAyIHx8XG4gICAgICAgICAgICBieXRlc1tvZmZzZXRdICE9PSAwKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbignQ291bGQgbm90IGZpbmQgJyArXG4gICAgICAgICAgICAgICAgJ0VuZCBPZiBSZXNwb25zZSAoRU9SKSBjb2RlIGF0IHRoZSBlbmQgb2YgcmVzcG9uc2UnLCAnRC4zJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFRocm93IGV4Y2VwdGlvbnMgZm9yIGVuZGluZyByZWFzb25zXG4gICAgICAgIHN3aXRjaCAoYnl0ZXNbb2Zmc2V0ICsgMV0pIHtcbiAgICAgICAgICAgIGNhc2Ugakdsb2JhbHMuanBpcEVuZE9mUmVzcG9uc2VSZWFzb25zLklNQUdFX0RPTkU6XG4gICAgICAgICAgICBjYXNlIGpHbG9iYWxzLmpwaXBFbmRPZlJlc3BvbnNlUmVhc29ucy5XSU5ET1dfRE9ORTpcbiAgICAgICAgICAgIGNhc2Ugakdsb2JhbHMuanBpcEVuZE9mUmVzcG9uc2VSZWFzb25zLlFVQUxJVFlfTElNSVQ6XG4gICAgICAgICAgICAgICAgZW5kUmVzcG9uc2VSZXN1bHQgPSBSRVNQT05TRV9FTkRFRF9TVUNDRVNTO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIGpHbG9iYWxzLmpwaXBFbmRPZlJlc3BvbnNlUmVhc29ucy5XSU5ET1dfQ0hBTkdFOlxuICAgICAgICAgICAgICAgIGlmICghZW5kZWRCeVVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VydmVyIHJlc3BvbnNlIHdhcyB0ZXJtaW5hdGVkIGR1ZSB0byBuZXdlciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdyZXF1ZXN0IGlzc3VlZCBvbiBzYW1lIGNoYW5uZWwuIFRoYXQgbWF5IGJlIGFuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2ludGVybmFsIHdlYmpwaXAuanMgZXJyb3IgLSBDaGVjayB0aGF0IG1vdmFibGUgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAncmVxdWVzdHMgYXJlIHdlbGwgbWFpbnRhaW5lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY2FzZSBqR2xvYmFscy5qcGlwRW5kT2ZSZXNwb25zZVJlYXNvbnMuQllURV9MSU1JVDpcbiAgICAgICAgICAgIGNhc2Ugakdsb2JhbHMuanBpcEVuZE9mUmVzcG9uc2VSZWFzb25zLlJFU1BPTlNFX0xJTUlUOlxuICAgICAgICAgICAgICAgIGlmICghZW5kZWRCeVVzZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZE1lc3NhZ2VPZkRhdGFSZXF1ZXN0KCk7XG4gICAgICAgICAgICAgICAgICAgIGVuZFJlc3BvbnNlUmVzdWx0ID0gUkVTUE9OU0VfRU5ERURfU0VOVF9BTk9USEVSX01FU1NBR0U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIGpHbG9iYWxzLmpwaXBFbmRPZlJlc3BvbnNlUmVhc29ucy5TRVNTSU9OX0xJTUlUOlxuICAgICAgICAgICAgICAgIHNlc3Npb25IZWxwZXIub25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgIG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlcnZlciByZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzZXNzaW9uIGlzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2xpbWl0dGVkLCBubyBmdXJ0aGVyIHJlcXVlc3RzIHNob3VsZCBiZSBpc3N1ZWQgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAndGhpcyBzZXNzaW9uJykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjYXNlIGpHbG9iYWxzLmpwaXBFbmRPZlJlc3BvbnNlUmVhc29ucy5OT05fU1BFQ0lGSUVEOlxuICAgICAgICAgICAgICAgIHNlc3Npb25IZWxwZXIub25FeGNlcHRpb24obmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdTZXJ2ZXIgZXJyb3IgdGVybWluYXRlZCByZXNwb25zZSB3aXRoIG5vIHJlYXNvbiBzcGVjaWZpZWQnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBzZXNzaW9uSGVscGVyLm9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnU2VydmVyIHJlc3BvbmRlZCB3aXRoIGlsbGVnYWwgRW5kIE9mIFJlc3BvbnNlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyhFT1IpIGNvZGU6ICcgKyBieXRlc1tvZmZzZXQgKyAxXSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZW5kUmVzcG9uc2VSZXN1bHQ7XG4gICAgfVxuICAgIFxuICAgIC8vID8/XG4gICAgZnVuY3Rpb24gc2F2ZVRvRGF0YWJpbnNGcm9tT2Zmc2V0KGFqYXhSZXNwb25zZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYWpheFJlc3BvbnNlLnJlc3BvbnNlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgICAgICB2YXIgcHJldmlvdXNIZWFkZXI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBieXRlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZXNbb2Zmc2V0XSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbmQgT2YgUmVzcG9uc2UgKEVPUilcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXIgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLnBhcnNlTWVzc2FnZUhlYWRlcihcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXMsIG9mZnNldCwgcHJldmlvdXNIZWFkZXIpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIuYm9keVN0YXJ0ICsgaGVhZGVyLm1lc3NhZ2VCb2R5TGVuZ3RoID4gYnl0ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHNlc3Npb25IZWxwZXIuZ2V0RGF0YWJpbnNTYXZlcigpLnNhdmVEYXRhKGhlYWRlciwgYnl0ZXMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGhlYWRlci5ib2R5U3RhcnQgKyBoZWFkZXIubWVzc2FnZUJvZHlMZW5ndGg7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNIZWFkZXIgPSBoZWFkZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHNlc3Npb25IZWxwZXIub25FeGNlcHRpb24oZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJvdG9jb2wvanBpcC1yZXF1ZXN0LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbi8qKlxuICogSGVscCBKUElQIHNlc3Npb25zXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YVJlcXVlc3RVcmwgXG4gKiBAcGFyYW0ge251bWJlcn0ga25vd25UYXJnZXRJZCBcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb2Rlc3RyZWFtU3RydWN0dXJlIFxuICogQHBhcmFtIHtvYmplY3R9IGRhdGFiaW5zU2F2ZXIgXG4gKiBAcGFyYW0ge29iamVjdH0gYWpheEhlbHBlciAtIHNpbXBsZS1hamF4LWhlbHBlci5qcyBvYmplY3RcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0ganBpcFNlc3Npb25IZWxwZXJcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwU2Vzc2lvbkhlbHBlcihcbiAgICBkYXRhUmVxdWVzdFVybCxcbiAgICBrbm93blRhcmdldElkLFxuICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgZGF0YWJpbnNTYXZlcixcbiAgICBhamF4SGVscGVyKSB7XG4gICAgXG4gICAgdmFyIHN0YXR1c0NhbGxiYWNrID0gbnVsbDsgLy8gU3RhdHVzIGNhbGxiYWNrIGZ1bmN0aW9uP1xuICAgIHZhciByZXF1ZXN0RW5kZWRDYWxsYmFjayA9IG51bGw7IC8vIFJlcXVlc3QgZW5kZWQgZnVuY3Rpb24/XG4gICAgXG4gICAgdmFyIGNoYW5uZWxzID0gW107IC8vIENoYW5uZWxzXG4gICAgdmFyIGZpcnN0Q2hhbm5lbCA9IG51bGw7IC8vIEZpcnN0IGNoYW5uZWwgcG9pbnRlclxuXG4gICAgdmFyIGFjdGl2ZVJlcXVlc3RzID0gMDsgLy8gQW1vdW50IG9mIGFjdGl2ZSByZXF1ZXN0c1xuICAgIHZhciB3YWl0aW5nRm9yQ29uY3VycmVudFJlcXVlc3RzID0gW107IC8vIExpc3Qgb2YgcmVxdWVzdHMgd2FpdGluZyBhdCB0aGUgc2FtZSB0aW1lXG5cbiAgICB2YXIgaXNSZWFkeSA9IGZhbHNlOyAvLyA/IGlzIHJlYWR5XG4gICAgdmFyIHRhcmdldElkID0ga25vd25UYXJnZXRJZCB8fCAnMCc7IC8vIFNldCB0YXJnZXQgSURcbiAgICBcbiAgICAvLyBPbiBleGNlcHRpb24sIFxuICAgIHRoaXMub25FeGNlcHRpb24gPSBmdW5jdGlvbiBvbkV4Y2VwdGlvbihleGNlcHRpb24pIHtcbiAgICAgICAgb25TdGF0dXNDaGFuZ2UoZXhjZXB0aW9uKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0SXNSZWFkeSA9IGZ1bmN0aW9uIGdldElzUmVhZHkoKSB7XG4gICAgICAgIHJldHVybiBpc1JlYWR5O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5zZXRJc1JlYWR5ID0gZnVuY3Rpb24gc2V0SXNSZWFkeShpc1JlYWR5Xykge1xuICAgICAgICBpc1JlYWR5ID0gaXNSZWFkeV87XG4gICAgICAgIG9uU3RhdHVzQ2hhbmdlKCk7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldENvZGVzdHJlYW1TdHJ1Y3R1cmUgPSBmdW5jdGlvbiBnZXRDb2Rlc3RyZWFtU3RydWN0dXJlKCkge1xuICAgICAgICByZXR1cm4gY29kZXN0cmVhbVN0cnVjdHVyZTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0RGF0YWJpbnNTYXZlciA9IGZ1bmN0aW9uIGdldERhdGFiaW5zU2F2ZXIoKSB7XG4gICAgICAgIHJldHVybiBkYXRhYmluc1NhdmVyO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXREYXRhUmVxdWVzdFVybCA9IGZ1bmN0aW9uIGdldERhdGFSZXF1ZXN0VXJsKCkge1xuICAgICAgICByZXR1cm4gZGF0YVJlcXVlc3RVcmw7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFRhcmdldElkID0gZnVuY3Rpb24gZ2V0VGFyZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRJZDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0Rmlyc3RDaGFubmVsID0gZnVuY3Rpb24gZ2V0Rmlyc3RDaGFubmVsKCkge1xuICAgICAgICByZXR1cm4gZmlyc3RDaGFubmVsO1xuICAgIH07XG4gICAgXG4gICAgLy8gU2V0IHN0YXR1cyBjYWxsYmFja1xuICAgIHRoaXMuc2V0U3RhdHVzQ2FsbGJhY2sgPSBmdW5jdGlvbiBzZXRTdGF0dXNDYWxsYmFjayhzdGF0dXNDYWxsYmFja18pIHtcbiAgICAgICAgc3RhdHVzQ2FsbGJhY2sgPSBzdGF0dXNDYWxsYmFja187XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnNldFJlcXVlc3RFbmRlZENhbGxiYWNrID0gZnVuY3Rpb24gc2V0UmVxdWVzdEVuZGVkQ2FsbGJhY2soXG4gICAgICAgIHJlcXVlc3RFbmRlZENhbGxiYWNrXykge1xuICAgICAgICBcbiAgICAgICAgcmVxdWVzdEVuZGVkQ2FsbGJhY2sgPSByZXF1ZXN0RW5kZWRDYWxsYmFja187XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnJlcXVlc3RTdGFydGVkID0gZnVuY3Rpb24gcmVxdWVzdFN0YXJ0ZWQoKSB7XG4gICAgICAgICsrYWN0aXZlUmVxdWVzdHM7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnJlcXVlc3RFbmRlZCA9IGZ1bmN0aW9uIHJlcXVlc3RFbmRlZChhamF4UmVzcG9uc2UsIGNoYW5uZWwpIHtcbiAgICAgICAgLS1hY3RpdmVSZXF1ZXN0cztcbiAgICAgICAgXG4gICAgICAgIHZhciB0YXJnZXRJZEZyb21TZXJ2ZXIgPSBhamF4UmVzcG9uc2UuZ2V0UmVzcG9uc2VIZWFkZXIoJ0pQSVAtdGlkJyk7XG4gICAgICAgIGlmICh0YXJnZXRJZEZyb21TZXJ2ZXIgIT09ICcnICYmIHRhcmdldElkRnJvbVNlcnZlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldElkID09PSAnMCcpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldElkRnJvbVNlcnZlcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0SWQgIT09IHRhcmdldElkRnJvbVNlcnZlcikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ1NlcnZlciByZXR1cm5lZCB1bm1hdGNoZWQgdGFyZ2V0IElEJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChmaXJzdENoYW5uZWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGZpcnN0Q2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBjaGFubmVsRnJlZWQgPSBjaGFubmVsLmdldElzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QoKSA/XG4gICAgICAgICAgICBudWxsIDogY2hhbm5lbDtcbiAgICAgICAgXG4gICAgICAgIGlmIChyZXF1ZXN0RW5kZWRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVxdWVzdEVuZGVkQ2FsbGJhY2soY2hhbm5lbEZyZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRBY3RpdmVSZXF1ZXN0c0NvdW50ID0gZnVuY3Rpb24gZ2V0QWN0aXZlUmVxdWVzdHNDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZVJlcXVlc3RzO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5jaGFubmVsQ3JlYXRlZCA9IGZ1bmN0aW9uIGNoYW5uZWxDcmVhdGVkKGNoYW5uZWwpIHtcbiAgICAgICAgY2hhbm5lbHMucHVzaChjaGFubmVsKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0Q3JlYXRlZENoYW5uZWxJZCA9IGZ1bmN0aW9uIGdldENyZWF0ZWRDaGFubmVsSWQoYWpheFJlc3BvbnNlKSB7XG4gICAgICAgIHZhciBjbmV3UmVzcG9uc2UgPSBhamF4UmVzcG9uc2UuZ2V0UmVzcG9uc2VIZWFkZXIoJ0pQSVAtY25ldycpO1xuICAgICAgICBpZiAoIWNuZXdSZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBrZXlWYWx1ZVBhaXJzSW5SZXNwb25zZSA9IGNuZXdSZXNwb25zZS5zcGxpdCgnLCcpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVQYWlyc0luUmVzcG9uc2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXlBbmRWYWx1ZSA9IGtleVZhbHVlUGFpcnNJblJlc3BvbnNlW2ldLnNwbGl0KCc9Jyk7XG5cbiAgICAgICAgICAgIGlmIChrZXlBbmRWYWx1ZVswXSA9PT0gJ2NpZCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5QW5kVmFsdWVbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy53YWl0Rm9yQ29uY3VycmVudFJlcXVlc3RzVG9FbmQgPVxuICAgICAgICBmdW5jdGlvbiB3YWl0Rm9yQ29uY3VycmVudFJlcXVlc3RzVG9FbmQocmVxdWVzdCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIGNvbmN1cnJlbnRSZXF1ZXN0cyA9IFtdO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFubmVscy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIHJlcXVlc3RzID0gY2hhbm5lbHNbaV0uZ2V0UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2UoKTtcbiAgICAgICAgICAgIHZhciBudW1SZXF1ZXN0cyA9IHJlcXVlc3RzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChudW1SZXF1ZXN0cyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbGFzdFJlcXVlc3RJZCA9IHJlcXVlc3RzWzBdLmdldExhc3RSZXF1ZXN0SWQoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVxdWVzdHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBsYXN0UmVxdWVzdElkID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgIGxhc3RSZXF1ZXN0SWQsIHJlcXVlc3RzW2pdLmdldExhc3RSZXF1ZXN0SWQoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbmN1cnJlbnRSZXF1ZXN0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBjaGFubmVsOiBjaGFubmVsc1tpXSxcbiAgICAgICAgICAgICAgICByZXF1ZXN0SWQ6IGxhc3RSZXF1ZXN0SWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgd2FpdGluZ0ZvckNvbmN1cnJlbnRSZXF1ZXN0cy5wdXNoKHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHJlcXVlc3QsXG4gICAgICAgICAgICBjb25jdXJyZW50UmVxdWVzdHM6IGNvbmN1cnJlbnRSZXF1ZXN0c1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHRoaXMuY2hlY2tDb25jdXJyZW50UmVxdWVzdHNGaW5pc2hlZCA9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQ29uY3VycmVudFJlcXVlc3RzRmluaXNoZWQoKSB7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gd2FpdGluZ0ZvckNvbmN1cnJlbnRSZXF1ZXN0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgdmFyIGlzQWxsQ29uY3VycmVudFJlcXVlc3RzRmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBjb25jdXJyZW50UmVxdWVzdHMgPVxuICAgICAgICAgICAgICAgIHdhaXRpbmdGb3JDb25jdXJyZW50UmVxdWVzdHNbaV0uY29uY3VycmVudFJlcXVlc3RzO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gY29uY3VycmVudFJlcXVlc3RzLmxlbmd0aCAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICAgICAgdmFyIHdhaXRpbmcgPSBjb25jdXJyZW50UmVxdWVzdHNbal07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHdhaXRpbmcuY2hhbm5lbC5pc0FsbE9sZFJlcXVlc3RzRW5kZWQod2FpdGluZy5yZXF1ZXN0SWQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmN1cnJlbnRSZXF1ZXN0c1tqXSA9IGNvbmN1cnJlbnRSZXF1ZXN0c1tcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmN1cnJlbnRSZXF1ZXN0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgY29uY3VycmVudFJlcXVlc3RzLmxlbmd0aCAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNvbmN1cnJlbnRSZXF1ZXN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gd2FpdGluZ0ZvckNvbmN1cnJlbnRSZXF1ZXN0c1tpXS5yZXF1ZXN0O1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gcmVxdWVzdC5jYWxsYmFjaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgd2FpdGluZ0ZvckNvbmN1cnJlbnRSZXF1ZXN0c1tpXSA9IHdhaXRpbmdGb3JDb25jdXJyZW50UmVxdWVzdHNbXG4gICAgICAgICAgICAgICAgd2FpdGluZ0ZvckNvbmN1cnJlbnRSZXF1ZXN0cy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHdhaXRpbmdGb3JDb25jdXJyZW50UmVxdWVzdHMubGVuZ3RoIC09IDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlcXVlc3QuY2FsbENhbGxiYWNrQWZ0ZXJDb25jdXJyZW50UmVxdWVzdHNGaW5pc2hlZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICAvLyBTZW5kIEFqYXggcmVxdWVzdFxuICAgIHRoaXMuc2VuZEFqYXggPSBmdW5jdGlvbiBzZW5kQWpheChcbiAgICAgICAgdXJsLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgZmFpbHVyZUNhbGxiYWNrKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgZm9ya2VkRmFpbHVyZUNhbGxiYWNrO1xuICAgICAgICBcbiAgICAgICAgLy8gRGVmaW5lIGZhaWx1cmUgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgaWYgKGZhaWx1cmVDYWxsYmFjaykge1xuICAgICAgICAgICAgZm9ya2VkRmFpbHVyZUNhbGxiYWNrID0gZnVuY3Rpb24gZm9ya0ZhaWx1cmVDYWxsYmFjayhhamF4UmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBnZW5lcmFsRmFpbHVyZUNhbGxiYWNrKGFqYXhSZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgZmFpbHVyZUNhbGxiYWNrKGFqYXhSZXNwb25zZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ya2VkRmFpbHVyZUNhbGxiYWNrID0gZ2VuZXJhbEZhaWx1cmVDYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgYWpheEhlbHBlci5yZXF1ZXN0KHVybCwgY2FsbGJhY2ssIGZvcmtlZEZhaWx1cmVDYWxsYmFjayk7XG4gICAgfTtcbiAgICBcbiAgICBmdW5jdGlvbiBnZW5lcmFsRmFpbHVyZUNhbGxiYWNrKGFqYXhSZXNwb25zZSkge1xuICAgICAgICB2YXIgZXhjZXB0aW9uID0gbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAnQmFkIGpwaXAgc2VydmVyIHJlc3BvbnNlIChzdGF0dXMgPSAnICsgYWpheFJlc3BvbnNlLnN0YXR1cyArICcpJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgb25TdGF0dXNDaGFuZ2UoZXhjZXB0aW9uKTtcbiAgICB9XG4gICAgXG4gICAgLy8gT24gc3RhdHVzIGNoYW5nZVxuICAgIGZ1bmN0aW9uIG9uU3RhdHVzQ2hhbmdlKGV4Y2VwdGlvbikge1xuICAgICAgICAvLyBJZiBleGNlcHRpb24gaXMgdW5kZWZpbmVkLCBzZXQgdG8gbnVsbFxuICAgICAgICBpZiAoZXhjZXB0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIElmIHN0YXR1cyBjYWxsYmFjayBmdW5jdGlvbj8gaXMgbm8gbG9uZ2VyIG51bGwsXG4gICAgICAgIC8vIHJ1biBzdGF0dXNDYWxsYmFjaygpIHdpdGggaXNSZWFkeSBhbmQgZXhjZXB0aW9uXG4gICAgICAgIGlmIChzdGF0dXNDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhdHVzQ2FsbGJhY2soe1xuICAgICAgICAgICAgICAgIGlzUmVhZHk6IGlzUmVhZHksXG4gICAgICAgICAgICAgICAgZXhjZXB0aW9uOiBleGNlcHRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJvdG9jb2wvanBpcC1zZXNzaW9uLWhlbHBlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG4vKipcbiAqIENyZWF0ZXMgSnBpcFNlc3Npb24gb2JqZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gbWF4Q2hhbm5lbHNJblNlc3Npb24gLSBtYXggcGVybWlzc2libGUgY2hhbm5lbHMgaW4gc2Vzc2lvblxuICogQHBhcmFtIHtudW1iZXJ9IG1heFJlcXVlc3RzV2FpdGluZ0ZvclJlc3BvbnNlSW5DaGFubmVsIC0gbWF4IHJlcXVlc3RzIHdhaXRpbmcgZm9yIHJlc3BvbnNlIGluIGNoYW5uZWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBrbm93blRhcmdldElkIFxuICogQHBhcmFtIHtvYmplY3R9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUgXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YWJpbnNTYXZlciBcbiAqIEBwYXJhbSB7ZnVuY3Rpb24/fSBzZXRJbnRlcnZhbEZ1bmN0aW9uIFxuICogQHBhcmFtIHtmdW5jdGlvbj99IGNsZWFySW50ZXJ2YWxGdW5jdGlvbiBcbiAqIEBwYXJhbSB7b2JqZWN0fSBqcGlwRmFjdG9yeSAtIGpwaXBSdW50aW1lRmFjdG9yeSBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwU2Vzc2lvbihcbiAgICBtYXhDaGFubmVsc0luU2Vzc2lvbixcbiAgICBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCxcbiAgICBrbm93blRhcmdldElkLFxuICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgZGF0YWJpbnNTYXZlcixcbiAgICBzZXRJbnRlcnZhbEZ1bmN0aW9uLFxuICAgIGNsZWFySW50ZXJ2YWxGdW5jdGlvbixcbiAgICBqcGlwRmFjdG9yeSkge1xuXG4gICAgLy8gVGltZSBjb25zdGFudHNcbiAgICB2YXIgU0VDT05EID0gMTAwMDtcbiAgICB2YXIgS0VFUF9BTElWRV9JTlRFUlZBTCA9IDMwICogU0VDT05EO1xuICAgIFxuICAgIC8vIFVSTHMgLSByZWNhbGwgVVJMID0gYmFzZSBVUkwgKyBjaGFubmVsIG1hbmFnZW1lbnQgVVJMICsgZGF0YSByZXF1ZXN0IFVSTFxuICAgIHZhciBjaGFubmVsTWFuYWdlbWVudFVybDsgLy8gQmFzZSBjaGFubmVsIG1hbmFnZW1lbnQgVVJMXG4gICAgdmFyIGRhdGFSZXF1ZXN0VXJsOyAvLyBTcGVjaWZpYyBkYXRhIHJlcXVlc3QgVVJMXG4gICAgdmFyIGNsb3NlU2Vzc2lvblVybDsgLy8gVVJMIHRvIGNsb3NlIHNlc3Npb25cbiAgICBcbiAgICAvLyBDbG9zZVxuICAgIHZhciBpc0Nsb3NlQ2FsbGVkID0gZmFsc2U7IC8vIElzIGNsb3NlKCkgY2FsbGVkXG4gICAgdmFyIGNsb3NlQ2FsbGJhY2tQZW5kaW5nID0gbnVsbDsgLy8gSXMgY2xvc2UoKSBjYWxsYmFjayBwZW5kaW5nPz9cblxuICAgIHZhciBzZXNzaW9uSGVscGVyID0gbnVsbDsgLy8ganBpcC1zZXNzaW9uLWhlbHBlci5qc1xuICAgIHZhciBzdGF0dXNDYWxsYmFjayA9IG51bGw7XG4gICAgdmFyIHJlcXVlc3RFbmRlZENhbGxiYWNrID0gbnVsbDtcblxuICAgIC8vIENoYW5uZWwgdmFyaWFibGVzXG4gICAgdmFyIG5vbkRlZGljYXRlZENoYW5uZWxzID0gW107XG4gICAgdmFyIGNoYW5uZWxzQ3JlYXRlZCA9IDA7XG4gICAgdmFyIGtlZXBBbGl2ZUludGVydmFsSGFuZGxlID0gbnVsbDtcbiAgICBcbiAgICAvKipcbiAgICAgKiBPcGVuIHNlc3Npb25cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVybFxuICAgICAqL1xuICAgIHRoaXMub3BlbiA9IGZ1bmN0aW9uIG9wZW4oYmFzZVVybCkge1xuICAgICAgICBcbiAgICAgICAgLy8gVGhyb3cgZXhjZXB0aW9uIGlmIGNhbGxlZCB0d2ljZVxuICAgICAgICBpZiAoc2Vzc2lvbkhlbHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ3Nlc3Npb24ub3BlbigpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgcXVlcnkgam9pbmVyc1xuICAgICAgICB2YXIgcXVlcnlQYXJhbXNEZWxpbWl0ZXIgPSBiYXNlVXJsLmluZGV4T2YoJz8nKSA8IDAgPyAnPycgOiAnJic7XG4gICAgICAgIFxuICAgICAgICAvLyBNYWtlIGNoYW5uZWwgbWFuYWdlbWVudCBVUkwsIHdoZXRoZXIgYnkgdGlsZSBvciBwcmVjaW50XG4gICAgICAgIGNoYW5uZWxNYW5hZ2VtZW50VXJsID0gYmFzZVVybCArIHF1ZXJ5UGFyYW1zRGVsaW1pdGVyICsgJ3R5cGU9JyArIFxuICAgICAgICAgICAgKGRhdGFiaW5zU2F2ZXIuZ2V0SXNKcGlwVGlsZVBhcnRTdHJlYW0oKSA/ICdqcHQtc3RyZWFtJyA6ICdqcHAtc3RyZWFtJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBNYWtlIGZpbmFsIGRhdGEgcmVxdWVzdCBVUkxcbiAgICAgICAgZGF0YVJlcXVlc3RVcmwgPSBjaGFubmVsTWFuYWdlbWVudFVybCArICcmc3RyZWFtPTAnO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHNlc3Npb24gaGVscGVyXG4gICAgICAgIHNlc3Npb25IZWxwZXIgPSBqcGlwRmFjdG9yeS5jcmVhdGVTZXNzaW9uSGVscGVyKFxuICAgICAgICAgICAgZGF0YVJlcXVlc3RVcmwsIGtub3duVGFyZ2V0SWQsIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsIGRhdGFiaW5zU2F2ZXIpO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IGNhbGxiYWNrXG4gICAgICAgIGlmIChzdGF0dXNDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5zZXRTdGF0dXNDYWxsYmFjayhzdGF0dXNDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChyZXF1ZXN0RW5kZWRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5zZXRSZXF1ZXN0RW5kZWRDYWxsYmFjayhyZXF1ZXN0RW5kZWRDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBjaGFubmVsID0gY3JlYXRlQ2hhbm5lbCgpO1xuICAgICAgICBcbiAgICAgICAgY2hhbm5lbC5zZW5kTWluaW1hbFJlcXVlc3Qoc2Vzc2lvblJlYWR5Q2FsbGJhY2spOyAvLyBTZW5kIG1pbmltYWwgcmVxdWVzdFxuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRUYXJnZXRJZCA9IGZ1bmN0aW9uIGdldFRhcmdldElkKCkge1xuICAgICAgICBlbnN1cmVSZWFkeSgpO1xuICAgICAgICByZXR1cm4gc2Vzc2lvbkhlbHBlci5nZXRUYXJnZXRJZCgpO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRJc1JlYWR5ID0gZnVuY3Rpb24gZ2V0SXNSZWFkeSgpIHtcbiAgICAgICAgdmFyIGlzUmVhZHkgPSBzZXNzaW9uSGVscGVyICE9PSBudWxsICYmIHNlc3Npb25IZWxwZXIuZ2V0SXNSZWFkeSgpO1xuICAgICAgICByZXR1cm4gaXNSZWFkeTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuc2V0U3RhdHVzQ2FsbGJhY2sgPSBmdW5jdGlvbiBzZXRTdGF0dXNDYWxsYmFjayhzdGF0dXNDYWxsYmFja18pIHtcbiAgICAgICAgc3RhdHVzQ2FsbGJhY2sgPSBzdGF0dXNDYWxsYmFja187XG4gICAgICAgIFxuICAgICAgICBpZiAoc2Vzc2lvbkhlbHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5zZXRTdGF0dXNDYWxsYmFjayhzdGF0dXNDYWxsYmFja18pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnNldFJlcXVlc3RFbmRlZENhbGxiYWNrID0gZnVuY3Rpb24gc2V0UmVxdWVzdEVuZGVkQ2FsbGJhY2soXG4gICAgICAgIHJlcXVlc3RFbmRlZENhbGxiYWNrXykge1xuICAgICAgICBcbiAgICAgICAgcmVxdWVzdEVuZGVkQ2FsbGJhY2sgPSByZXF1ZXN0RW5kZWRDYWxsYmFja187XG4gICAgICAgIFxuICAgICAgICBpZiAoc2Vzc2lvbkhlbHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2Vzc2lvbkhlbHBlci5zZXRSZXF1ZXN0RW5kZWRDYWxsYmFjayhyZXF1ZXN0RW5kZWRDYWxsYmFja18pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmhhc0FjdGl2ZVJlcXVlc3RzID0gZnVuY3Rpb24gaGFzQWN0aXZlUmVxdWVzdHMoKSB7XG4gICAgICAgIGVuc3VyZVJlYWR5KCk7XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlUmVxdWVzdHMgPSBzZXNzaW9uSGVscGVyLmdldEFjdGl2ZVJlcXVlc3RzQ291bnQoKSA+IDA7XG4gICAgICAgIHJldHVybiBpc0FjdGl2ZVJlcXVlc3RzO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy50cnlHZXRDaGFubmVsID0gZnVuY3Rpb24gdHJ5R2V0Q2hhbm5lbChkZWRpY2F0ZUZvck1vdmFibGVSZXF1ZXN0KSB7XG4gICAgICAgIGVuc3VyZVJlYWR5KCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgY2FuQ3JlYXRlTmV3Q2hhbm5lbCA9IGNoYW5uZWxzQ3JlYXRlZCA8IG1heENoYW5uZWxzSW5TZXNzaW9uO1xuICAgICAgICB2YXIgc2VhcmNoT25seUNoYW5uZWxXaXRoRW1wdHlRdWV1ZSA9XG4gICAgICAgICAgICBjYW5DcmVhdGVOZXdDaGFubmVsIHx8IGRlZGljYXRlRm9yTW92YWJsZVJlcXVlc3Q7XG4gICAgICAgIFxuICAgICAgICB2YXIgbWF4UmVxdWVzdHNJbkNoYW5uZWwgPSBzZWFyY2hPbmx5Q2hhbm5lbFdpdGhFbXB0eVF1ZXVlID9cbiAgICAgICAgICAgIDAgOiBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCAtIDE7XG5cbiAgICAgICAgdmFyIGNoYW5uZWwgPSBnZXRDaGFubmVsV2l0aE1pbmltYWxXYWl0aW5nUmVxdWVzdHMoXG4gICAgICAgICAgICBtYXhSZXF1ZXN0c0luQ2hhbm5lbCxcbiAgICAgICAgICAgIC8qaXNFeHRyYWN0RnJvbU5vbkRlZGljYXRlZExpc3Q9Ki9kZWRpY2F0ZUZvck1vdmFibGVSZXF1ZXN0KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjaGFubmVsID09PSBudWxsICYmIGNhbkNyZWF0ZU5ld0NoYW5uZWwpIHtcbiAgICAgICAgICAgIGNoYW5uZWwgPSBjcmVhdGVDaGFubmVsKGRlZGljYXRlRm9yTW92YWJsZVJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoZGVkaWNhdGVGb3JNb3ZhYmxlUmVxdWVzdCAmJiBjaGFubmVsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjaGFubmVsLmRlZGljYXRlRm9yTW92YWJsZVJlcXVlc3QoKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoY2xvc2VkQ2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGNoYW5uZWxzQ3JlYXRlZCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBjbG9zZSBzZXNzaW9uIGJlZm9yZSBvcGVuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDbG9zZUNhbGxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0Nhbm5vdCBjbG9zZSBzZXNzaW9uIHR3aWNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlzQ2xvc2VDYWxsZWQgPSB0cnVlO1xuICAgICAgICBjbG9zZUNhbGxiYWNrUGVuZGluZyA9IGNsb3NlZENhbGxiYWNrO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNsb3NlU2Vzc2lvblVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjbG9zZUludGVybmFsKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8vIENsb3NlIHNlc3Npb24gKGludGVybmFscylcbiAgICBmdW5jdGlvbiBjbG9zZUludGVybmFsKCkge1xuICAgICAgICAvLyBJZiBjaGFubmVsIGlzIHRvIGJlIGtlcHQgYWxpdmUsIGNsZWFyIGludGVydmFsIGZ1bmN0aW9uXG4gICAgICAgIGlmIChrZWVwQWxpdmVJbnRlcnZhbEhhbmRsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbEZ1bmN0aW9uKGtlZXBBbGl2ZUludGVydmFsSGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2Vzc2lvbkhlbHBlci5zZXRJc1JlYWR5KGZhbHNlKTsgLy8gU2V0IHNlc3Npb24gdG8gbm90IHJlYWR5XG4gICAgICAgIHNlc3Npb25IZWxwZXIuc2VuZEFqYXgoY2xvc2VTZXNzaW9uVXJsLCBjbG9zZUNhbGxiYWNrUGVuZGluZyk7IC8vIFNlbmQgY2xvc2Ugc2Vzc2lvbiByZXF1ZXN0XG4gICAgfVxuICAgIFxuICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIG5ldyBjaGFubmVsXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hhbm5lbChpc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0KSB7XG4gICAgICAgICsrY2hhbm5lbHNDcmVhdGVkO1xuICAgICAgICB2YXIgY2hhbm5lbCA9IGpwaXBGYWN0b3J5LmNyZWF0ZUNoYW5uZWwoXG4gICAgICAgICAgICBtYXhSZXF1ZXN0c1dhaXRpbmdGb3JSZXNwb25zZUluQ2hhbm5lbCwgc2Vzc2lvbkhlbHBlcik7XG4gICAgICAgIFxuICAgICAgICBzZXNzaW9uSGVscGVyLmNoYW5uZWxDcmVhdGVkKGNoYW5uZWwpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFpc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0KSB7XG4gICAgICAgICAgICBub25EZWRpY2F0ZWRDaGFubmVscy5wdXNoKGNoYW5uZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoYW5uZWw7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldENoYW5uZWxXaXRoTWluaW1hbFdhaXRpbmdSZXF1ZXN0cyhcbiAgICAgICAgbWF4UmVxdWVzdHNJbkNoYW5uZWwsIGlzRXh0cmFjdEZyb21Ob25EZWRpY2F0ZWRMaXN0KSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgY2hhbm5lbCA9IG51bGw7XG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIG1pbmltYWxXYWl0aW5nUmVxdWVzdHMgPSBtYXhSZXF1ZXN0c0luQ2hhbm5lbCArIDE7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkRlZGljYXRlZENoYW5uZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgd2FpdGluZ1JlcXVlc3RzID1cbiAgICAgICAgICAgICAgICBub25EZWRpY2F0ZWRDaGFubmVsc1tpXS5nZXRBbGxRdWV1ZWRSZXF1ZXN0Q291bnQoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHdhaXRpbmdSZXF1ZXN0cyA8IG1pbmltYWxXYWl0aW5nUmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICBjaGFubmVsID0gbm9uRGVkaWNhdGVkQ2hhbm5lbHNbaV07XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIG1pbmltYWxXYWl0aW5nUmVxdWVzdHMgPSB3YWl0aW5nUmVxdWVzdHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh3YWl0aW5nUmVxdWVzdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFpc0V4dHJhY3RGcm9tTm9uRGVkaWNhdGVkTGlzdCB8fCBjaGFubmVsID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hhbm5lbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbm9uRGVkaWNhdGVkQ2hhbm5lbHNbaW5kZXhdID1cbiAgICAgICAgICAgIG5vbkRlZGljYXRlZENoYW5uZWxzW25vbkRlZGljYXRlZENoYW5uZWxzLmxlbmd0aCAtIDFdO1xuICAgICAgICBub25EZWRpY2F0ZWRDaGFubmVscy5sZW5ndGggLT0gMTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjaGFubmVsO1xuICAgIH1cbiAgICBcbiAgICAvLyBTZXNzaW9uIHJlYWR5IGNhbGxiYWNrIGZ1bmN0aW9uLCBydW5zIGFmdGVyIHNlc3Npb24gaXMgcmVhZHlcbiAgICBmdW5jdGlvbiBzZXNzaW9uUmVhZHlDYWxsYmFjaygpIHtcblxuICAgICAgICAvLyBTZXQgbWFpbiBoZWFkZXIgZGF0YWJpbiBhbmQgY2hlY2sgbWFpbiBoZWFkZXIgaXMgbG9hZGluZ1xuICAgICAgICB2YXIgbWFpbkhlYWRlckRhdGFiaW4gPSBkYXRhYmluc1NhdmVyLmdldE1haW5IZWFkZXJEYXRhYmluKCk7XG4gICAgICAgIGlmICghbWFpbkhlYWRlckRhdGFiaW4uaXNBbGxEYXRhYmluTG9hZGVkKCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnTWFpbiBoZWFkZXIgd2FzIG5vdCBsb2FkZWQgb24gc2Vzc2lvbiBjcmVhdGlvbicpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBTZXQgYXJiaXRyYXJ5IGNoYW5uZWwgYW5kIGNoYW5uZWwgSURcbiAgICAgICAgdmFyIGFyYml0cmFyeUNoYW5uZWwgPSBzZXNzaW9uSGVscGVyLmdldEZpcnN0Q2hhbm5lbCgpO1xuICAgICAgICB2YXIgYXJiaXRyYXJ5Q2hhbm5lbElkID0gYXJiaXRyYXJ5Q2hhbm5lbC5nZXRDaGFubmVsSWQoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBjbG9zZSBzZXNzaW9uIFVSTFxuICAgICAgICBjbG9zZVNlc3Npb25VcmwgPSBjaGFubmVsTWFuYWdlbWVudFVybCArXG4gICAgICAgICAgICAnJmNjbG9zZT0qJyArXG4gICAgICAgICAgICAnJmNpZD0nICsgYXJiaXRyYXJ5Q2hhbm5lbElkO1xuICAgICAgICBcbiAgICAgICAgLy8gSWYgY2xvc2UoKSB3YXMgY2FsbGVkLCBjbG9zZSBpbnRlcm5hbCBhbmQgc2VuZCBzZXNzaW9uIGNsb3NlIHJlcXVlc3RcbiAgICAgICAgaWYgKGlzQ2xvc2VDYWxsZWQpIHtcbiAgICAgICAgICAgIGNsb3NlSW50ZXJuYWwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKGFyYml0cmFyeUNoYW5uZWxJZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBGYWlsdXJlIGluZGljYXRpb24gYWxyZWFkeSByZXR1cm5lZCBpbiBKcGlwUmVxdWVzdFxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBLZWVwIGFsaXZlIGhhbmRsZVxuICAgICAgICBrZWVwQWxpdmVJbnRlcnZhbEhhbmRsZSA9IHNldEludGVydmFsRnVuY3Rpb24oXG4gICAgICAgICAgICBrZWVwQWxpdmVIYW5kbGVyLCBLRUVQX0FMSVZFX0lOVEVSVkFMKTtcbiAgICAgICAgXG4gICAgICAgIHNlc3Npb25IZWxwZXIuc2V0SXNSZWFkeSh0cnVlKTsgLy8gU2V0IHNlc3Npb24gcmVhZHkgdG8gdHJ1ZVxuICAgIH1cbiAgICBcbiAgICAvLyBJZiBubyBhY3RpdmUgcmVxdWVzdHMsIHNlbmQgbWluaW1hbCByZXF1ZXN0IHRvIGtlZXAgYWxpdmVcbiAgICBmdW5jdGlvbiBrZWVwQWxpdmVIYW5kbGVyKCkge1xuICAgICAgICBpZiAoc2Vzc2lvbkhlbHBlci5nZXRBY3RpdmVSZXF1ZXN0c0NvdW50KCkgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBhcmJpdHJhcnlDaGFubmVsID0gc2Vzc2lvbkhlbHBlci5nZXRGaXJzdENoYW5uZWwoKTtcbiAgICAgICAgYXJiaXRyYXJ5Q2hhbm5lbC5zZW5kTWluaW1hbFJlcXVlc3QoZnVuY3Rpb24gZHVtbXlDYWxsYmFjaygpIHt9KTtcbiAgICB9XG4gICAgXG4gICAgLy8gVGhyb3cgZXhjZXB0aW9uIGlmIHNlc3Npb24gaXMgbm90IHJlYWR5XG4gICAgZnVuY3Rpb24gZW5zdXJlUmVhZHkoKSB7XG4gICAgICAgIGlmIChzZXNzaW9uSGVscGVyID09PSBudWxsIHx8ICFzZXNzaW9uSGVscGVyLmdldElzUmVhZHkoKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oJ0Nhbm5vdCBwZXJmb3JtICcgK1xuICAgICAgICAgICAgICAgICd0aGlzIG9wZXJhdGlvbiB3aGVuIHRoZSBzZXNzaW9uIGlzIG5vdCByZWFkeScpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcHJvdG9jb2wvanBpcC1zZXNzaW9uLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSnBpcFJlY29ubmVjdGFibGVSZXF1ZXN0ZXIoXG4gICAgbWF4Q2hhbm5lbHNJblNlc3Npb24sXG4gICAgbWF4UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2VJbkNoYW5uZWwsIFxuICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgZGF0YWJpbnNTYXZlcixcbiAgICBqcGlwRmFjdG9yeSxcbiAgICAvLyBOT1RFOiBNb3ZlIHBhcmFtZXRlciB0byBiZWdpbm5pbmcgYW5kIGV4cG9zZSBpbiBDb2Rlc3RyZWFtQ2xpZW50XG4gICAgbWF4SnBpcENhY2hlU2l6ZUNvbmZpZykge1xuICAgIFxuICAgIHZhciBNQiA9IDEwNDg1NzY7XG4gICAgdmFyIG1heEpwaXBDYWNoZVNpemUgPSBtYXhKcGlwQ2FjaGVTaXplQ29uZmlnIHx8ICgxMCAqIE1CKTtcbiAgICBcbiAgICB2YXIgc2Vzc2lvbldhaXRpbmdGb3JSZWFkeTtcbiAgICB2YXIgYWN0aXZlU2Vzc2lvbiA9IG51bGw7XG4gICAgdmFyIHNlc3Npb25XYWl0aW5nRm9yRGlzY29ubmVjdCA9IG51bGw7XG4gICAgXG4gICAgdmFyIHVybCA9IG51bGw7XG4gICAgdmFyIHdhaXRpbmdGb3JDbG9zZVNlc3Npb25zID0gMDtcbiAgICBcbiAgICB2YXIgbm9uRGVkaWNhdGVkUmVxdWVzdHNXYWl0aW5nRm9yU2VuZCA9IFtdO1xuICAgIHZhciBkZWRpY2F0ZWRDaGFubmVscyA9IFtdO1xuICAgIFxuICAgIHZhciBzdGF0dXNDYWxsYmFjayA9IG51bGw7XG4gICAgdmFyIGxhc3RDbG9zZWRDYWxsYmFjayA9IG51bGw7XG4gICAgXG4gICAgdGhpcy5nZXRJc1JlYWR5ID0gZnVuY3Rpb24gZ2V0SXNSZWFkeSgpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZVNlc3Npb24gIT09IG51bGwgJiYgYWN0aXZlU2Vzc2lvbi5nZXRJc1JlYWR5KCk7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbiBvcGVuKGJhc2VVcmwpIHtcbiAgICAgICAgaWYgKGJhc2VVcmwgPT09IHVuZGVmaW5lZCB8fCBiYXNlVXJsID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oJ2Jhc2VVcmwnLCBiYXNlVXJsKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHVybCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLklsbGVnYWxPcGVyYXRpb25FeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0ltYWdlIHdhcyBhbHJlYWR5IG9wZW5lZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB1cmwgPSBiYXNlVXJsO1xuICAgICAgICBjcmVhdGVJbnRlcm5hbFNlc3Npb24oKTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZShjbG9zZWRDYWxsYmFjaykge1xuICAgICAgICBpZiAobGFzdENsb3NlZENhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSWxsZWdhbE9wZXJhdGlvbkV4Y2VwdGlvbignY2xvc2VkIHR3aWNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGxhc3RDbG9zZWRDYWxsYmFjayA9IGNsb3NlZENhbGxiYWNrO1xuICAgICAgICB3YWl0aW5nRm9yQ2xvc2VTZXNzaW9ucyA9IDE7XG4gICAgICAgIFxuICAgICAgICBjbG9zZUludGVybmFsU2Vzc2lvbihhY3RpdmVTZXNzaW9uKTtcbiAgICAgICAgY2xvc2VJbnRlcm5hbFNlc3Npb24oc2Vzc2lvbldhaXRpbmdGb3JSZWFkeSk7XG4gICAgICAgIGNsb3NlSW50ZXJuYWxTZXNzaW9uKHNlc3Npb25XYWl0aW5nRm9yRGlzY29ubmVjdCk7XG4gICAgICAgIFxuICAgICAgICBjaGVja0lmQWxsU2Vzc2lvbnNDbG9zZWRBZnRlclNlc3Npb25DbG9zZWQoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5zZXRTdGF0dXNDYWxsYmFjayA9IGZ1bmN0aW9uIHNldFN0YXR1c0NhbGxiYWNrKG5ld1N0YXR1c0NhbGxiYWNrKSB7XG4gICAgICAgIHN0YXR1c0NhbGxiYWNrID0gbmV3U3RhdHVzQ2FsbGJhY2s7XG4gICAgICAgIFxuICAgICAgICBpZiAoYWN0aXZlU2Vzc2lvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgYWN0aXZlU2Vzc2lvbi5zZXRTdGF0dXNDYWxsYmFjayhuZXdTdGF0dXNDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZGVkaWNhdGVDaGFubmVsRm9yTW92YWJsZVJlcXVlc3QgPVxuICAgICAgICBmdW5jdGlvbiBkZWRpY2F0ZUNoYW5uZWxGb3JNb3ZhYmxlUmVxdWVzdCgpIHtcblxuICAgICAgICBjaGVja1JlYWR5KCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSA9IHsgaW50ZXJuYWxEZWRpY2F0ZWRDaGFubmVsOiBudWxsIH07XG4gICAgICAgIGRlZGljYXRlZENoYW5uZWxzLnB1c2goZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSk7XG4gICAgICAgIGNyZWF0ZUludGVybmFsRGVkaWNhdGVkQ2hhbm5lbChkZWRpY2F0ZWRDaGFubmVsSGFuZGxlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5yZXF1ZXN0RGF0YSA9IGZ1bmN0aW9uIHJlcXVlc3REYXRhKFxuICAgICAgICBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIGZhaWx1cmVDYWxsYmFjayxcbiAgICAgICAgbnVtUXVhbGl0eUxheWVycyxcbiAgICAgICAgZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZVRvTW92ZSkge1xuXG4gICAgICAgIGNoZWNrUmVhZHkoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgaXNFbmRlZDogZmFsc2UsXG4gICAgICAgICAgICBpbnRlcm5hbFJlcXVlc3Q6IG51bGwsXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zOiBjb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgICAgIGZhaWx1cmVDYWxsYmFjazogZmFpbHVyZUNhbGxiYWNrLFxuICAgICAgICAgICAgbnVtUXVhbGl0eUxheWVyczogbnVtUXVhbGl0eUxheWVyc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHZhciBjaGFubmVsO1xuICAgICAgICB2YXIgbW92ZURlZGljYXRlZENoYW5uZWwgPSAhIWRlZGljYXRlZENoYW5uZWxIYW5kbGVUb01vdmU7XG4gICAgICAgIFxuICAgICAgICBpZiAobW92ZURlZGljYXRlZENoYW5uZWwpIHtcbiAgICAgICAgICAgIGNoYW5uZWwgPSBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlVG9Nb3ZlLmludGVybmFsRGVkaWNhdGVkQ2hhbm5lbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5uZWwgPSBhY3RpdmVTZXNzaW9uLnRyeUdldENoYW5uZWwoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGNoYW5uZWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBub25EZWRpY2F0ZWRSZXF1ZXN0c1dhaXRpbmdGb3JTZW5kLnB1c2gocmVxdWVzdCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5uZWwuZ2V0SXNEZWRpY2F0ZWRGb3JNb3ZhYmxlUmVxdWVzdCgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdFeHBlY3RlZCBub24tbW92YWJsZSBjaGFubmVsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjaGFubmVsLmdldElzRGVkaWNhdGVkRm9yTW92YWJsZVJlcXVlc3QoKSAhPT0gbW92ZURlZGljYXRlZENoYW5uZWwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdnZXRJc0RlZGljYXRlZEZvck1vdmFibGVSZXF1ZXN0IGluY29uc2lzdGVuY3knKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuaW50ZXJuYWxSZXF1ZXN0ID0gY2hhbm5lbC5yZXF1ZXN0RGF0YShcbiAgICAgICAgICAgIGNvZGVzdHJlYW1QYXJ0UGFyYW1zLFxuICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICBmYWlsdXJlQ2FsbGJhY2ssXG4gICAgICAgICAgICBudW1RdWFsaXR5TGF5ZXJzKTtcblxuICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuc3RvcFJlcXVlc3RBc3luYyA9IGZ1bmN0aW9uIHN0b3BSZXF1ZXN0QXN5bmMocmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LmlzRW5kZWQgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlcXVlc3QuaW50ZXJuYWxSZXF1ZXN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXF1ZXN0LmludGVybmFsUmVxdWVzdC5zdG9wUmVxdWVzdEFzeW5jKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIHRoaXMucmVjb25uZWN0ID0gcmVjb25uZWN0O1xuICAgIFxuICAgIGZ1bmN0aW9uIHJlY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHNlc3Npb25XYWl0aW5nRm9yUmVhZHkgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdQcmV2aW91cyBzZXNzaW9uIHN0aWxsIG5vdCBlc3RhYmxpc2hlZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoc3RhdHVzQ2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNDYWxsYmFjayh7XG4gICAgICAgICAgICAgICAgICAgIGlzUmVhZHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGV4Y2VwdGlvbjogLy9qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1ByZXZpb3VzIHNlc3Npb24gdGhhdCBzaG91bGQgYmUgY2xvc2VkIHN0aWxsIGFsaXZlLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ01heWJlIG9sZCByZXF1ZXN0Q29udGV4dHMgaGF2ZSBub3QgYmVlZCBjbG9zZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1JlY29ubmVjdCB3aWxsIG5vdCBiZSBkb25lJyAvLyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGRhdGFiaW5zU2F2ZXIuY2xlYW51cFVucmVnaXN0ZXJlZERhdGFiaW5zKCk7XG4gICAgICAgIGNyZWF0ZUludGVybmFsU2Vzc2lvbigpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbFNlc3Npb24oKSB7XG4gICAgICAgIHZhciB0YXJnZXRJZDtcbiAgICAgICAgaWYgKGFjdGl2ZVNlc3Npb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRhcmdldElkID0gYWN0aXZlU2Vzc2lvbi5nZXRUYXJnZXRJZCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZXNzaW9uV2FpdGluZ0ZvclJlYWR5ID0ganBpcEZhY3RvcnkuY3JlYXRlU2Vzc2lvbihcbiAgICAgICAgICAgIG1heENoYW5uZWxzSW5TZXNzaW9uLFxuICAgICAgICAgICAgbWF4UmVxdWVzdHNXYWl0aW5nRm9yUmVzcG9uc2VJbkNoYW5uZWwsXG4gICAgICAgICAgICB0YXJnZXRJZCxcbiAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsXG4gICAgICAgICAgICBkYXRhYmluc1NhdmVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICBzZXNzaW9uV2FpdGluZ0ZvclJlYWR5LnNldFN0YXR1c0NhbGxiYWNrKHdhaXRpbmdGb3JSZWFkeUNhbGxiYWNrKTtcbiAgICAgICAgXG4gICAgICAgIHNlc3Npb25XYWl0aW5nRm9yUmVhZHkub3Blbih1cmwpO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbERlZGljYXRlZENoYW5uZWwoZGVkaWNhdGVkQ2hhbm5lbEhhbmRsZSkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IGFjdGl2ZVNlc3Npb24udHJ5R2V0Q2hhbm5lbChcbiAgICAgICAgICAgIC8qZGVkaWNhdGVGb3JNb3ZhYmxlUmVxdWVzdD0qL3RydWUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNoYW5uZWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsT3BlcmF0aW9uRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdUb28gbWFueSBjb25jdXJyZW50IHJlcXVlc3RzLiBMaW1pdCB0aGUgdXNlIG9mIGRlZGljYXRlZCAnICtcbiAgICAgICAgICAgICAgICAnKG1vdmFibGUpIHJlcXVlc3RzLCBlbmxhcmdlIG1heENoYW5uZWxzSW5TZXNzaW9uIG9yIHdhaXQgJyArXG4gICAgICAgICAgICAgICAgJ2ZvciByZXF1ZXN0cyB0byBmaW5pc2ggYW5kIGF2b2lkIGNyZWF0ZSBuZXcgb25lcycpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIWNoYW5uZWwuZ2V0SXNEZWRpY2F0ZWRGb3JNb3ZhYmxlUmVxdWVzdCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnZ2V0SXNEZWRpY2F0ZWRGb3JNb3ZhYmxlUmVxdWVzdCBpbmNvbnNpc3RlbmN5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWRpY2F0ZWRDaGFubmVsSGFuZGxlLmludGVybmFsRGVkaWNhdGVkQ2hhbm5lbCA9IGNoYW5uZWw7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIHdhaXRpbmdGb3JSZWFkeUNhbGxiYWNrKHN0YXR1cykge1xuICAgICAgICBpZiAoc2Vzc2lvbldhaXRpbmdGb3JSZWFkeSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgc3RhdHVzLmlzUmVhZHkgIT09IHNlc3Npb25XYWl0aW5nRm9yUmVhZHkuZ2V0SXNSZWFkeSgpKSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKCdVbmV4cGVjdGVkICcgK1xuICAgICAgICAgICAgICAgICdzdGF0dXNDYWxsYmFjayB3aGVuIG5vdCByZWdpc3RlcmVkIHRvIHNlc3Npb24gb3IgJyArXG4gICAgICAgICAgICAgICAgJ2luY29uc2lzdGVudCBpc1JlYWR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChzdGF0dXMuaXNSZWFkeSkge1xuICAgICAgICAgICAgaWYgKHNlc3Npb25XYWl0aW5nRm9yRGlzY29ubmVjdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0IHNob3VsZCBiZSBudWxsJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNlc3Npb25XYWl0aW5nRm9yRGlzY29ubmVjdCA9IGFjdGl2ZVNlc3Npb247XG4gICAgICAgICAgICBhY3RpdmVTZXNzaW9uID0gc2Vzc2lvbldhaXRpbmdGb3JSZWFkeTtcbiAgICAgICAgICAgIHNlc3Npb25XYWl0aW5nRm9yUmVhZHkgPSBudWxsO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0LnNldFN0YXR1c0NhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgIGlmICghdHJ5RGlzY29ubmVjdFdhaXRpbmdTZXNzaW9uKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0LnNldFJlcXVlc3RFbmRlZENhbGxiYWNrKFxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5RGlzY29ubmVjdFdhaXRpbmdTZXNzaW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFjdGl2ZVNlc3Npb24uc2V0U3RhdHVzQ2FsbGJhY2soc3RhdHVzQ2FsbGJhY2spO1xuICAgICAgICAgICAgYWN0aXZlU2Vzc2lvbi5zZXRSZXF1ZXN0RW5kZWRDYWxsYmFjayhhY3RpdmVTZXNzaW9uUmVxdWVzdEVuZGVkQ2FsbGJhY2spO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlZGljYXRlZENoYW5uZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY3JlYXRlSW50ZXJuYWxEZWRpY2F0ZWRDaGFubmVsKGRlZGljYXRlZENoYW5uZWxzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHN0YXR1c0NhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGF0dXNDYWxsYmFjayhzdGF0dXMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGNsb3NlSW50ZXJuYWxTZXNzaW9uKHNlc3Npb24pIHtcbiAgICAgICAgaWYgKHNlc3Npb24gIT09IG51bGwpIHtcbiAgICAgICAgICAgICsrd2FpdGluZ0ZvckNsb3NlU2Vzc2lvbnM7XG4gICAgICAgICAgICBzZXNzaW9uLmNsb3NlKGNoZWNrSWZBbGxTZXNzaW9uc0Nsb3NlZEFmdGVyU2Vzc2lvbkNsb3NlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY2hlY2tJZkFsbFNlc3Npb25zQ2xvc2VkQWZ0ZXJTZXNzaW9uQ2xvc2VkKCkge1xuICAgICAgICAtLXdhaXRpbmdGb3JDbG9zZVNlc3Npb25zO1xuICAgICAgICBcbiAgICAgICAgaWYgKHdhaXRpbmdGb3JDbG9zZVNlc3Npb25zID09PSAwICYmIGxhc3RDbG9zZWRDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBsYXN0Q2xvc2VkQ2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjaGVja1JlYWR5KCkge1xuICAgICAgICBpZiAoYWN0aXZlU2Vzc2lvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oJ1RoaXMgb3BlcmF0aW9uICcgK1xuICAgICAgICAgICAgICAgICdpcyBmb3JiaWRkZW4gd2hlbiBzZXNzaW9uIGlzIG5vdCByZWFkeScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGFjdGl2ZVNlc3Npb25SZXF1ZXN0RW5kZWRDYWxsYmFjayhjaGFubmVsRnJlZWQpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSBudWxsO1xuICAgICAgICBcbiAgICAgICAgaWYgKGRhdGFiaW5zU2F2ZXIuZ2V0TG9hZGVkQnl0ZXMoKSA+IG1heEpwaXBDYWNoZVNpemUpIHtcbiAgICAgICAgICAgIHJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoY2hhbm5lbEZyZWVkID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChjaGFubmVsRnJlZWQuZ2V0SXNEZWRpY2F0ZWRGb3JNb3ZhYmxlUmVxdWVzdCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnRXhwZWN0ZWQgbm9uLW1vdmFibGUgY2hhbm5lbCBhcyBjaGFubmVsRnJlZWQnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKG5vbkRlZGljYXRlZFJlcXVlc3RzV2FpdGluZ0ZvclNlbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlcXVlc3QgPSBub25EZWRpY2F0ZWRSZXF1ZXN0c1dhaXRpbmdGb3JTZW5kLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAocmVxdWVzdC5pbnRlcm5hbFJlcXVlc3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbignUmVxdWVzdCB3YXMgJyArXG4gICAgICAgICAgICAgICAgICAgICdhbHJlYWR5IHNlbnQgYnV0IHN0aWxsIGluIHF1ZXVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKHJlcXVlc3QuaXNFbmRlZCk7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVxdWVzdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcmVxdWVzdC5pbnRlcm5hbFJlcXVlc3QgPSBjaGFubmVsRnJlZWQucmVxdWVzdERhdGEoXG4gICAgICAgICAgICAgICAgcmVxdWVzdC5jb2Rlc3RyZWFtUGFydFBhcmFtcyxcbiAgICAgICAgICAgICAgICByZXF1ZXN0LmNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QuZmFpbHVyZUNhbGxiYWNrLFxuICAgICAgICAgICAgICAgIHJlcXVlc3QubnVtUXVhbGl0eUxheWVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdHJ5RGlzY29ubmVjdFdhaXRpbmdTZXNzaW9uKCkge1xuICAgICAgICB2YXIgY2FuQ2xvc2VTZXNzaW9uID0gIXNlc3Npb25XYWl0aW5nRm9yRGlzY29ubmVjdC5oYXNBY3RpdmVSZXF1ZXN0cygpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNhbkNsb3NlU2Vzc2lvbikge1xuICAgICAgICAgICAgc2Vzc2lvbldhaXRpbmdGb3JEaXNjb25uZWN0LmNsb3NlKCk7XG4gICAgICAgICAgICBzZXNzaW9uV2FpdGluZ0ZvckRpc2Nvbm5lY3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY2FuQ2xvc2VTZXNzaW9uO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3Byb3RvY29sL2pwaXAtcmVjb25uZWN0YWJsZS1yZXF1ZXN0ZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwU3RydWN0dXJlUGFyc2VyKFxuICAgIGRhdGFiaW5zU2F2ZXIsIG1hcmtlcnNQYXJzZXIsIG1lc3NhZ2VIZWFkZXJQYXJzZXIsIG9mZnNldHNDYWxjdWxhdG9yKSB7XG4gICAgXG4gICAgdGhpcy5wYXJzZUNvZGVzdHJlYW1TdHJ1Y3R1cmUgPSBmdW5jdGlvbiBwYXJzZUNvZGVzdHJlYW1TdHJ1Y3R1cmUoKSB7XG4gICAgICAgIC8vIEEuNS4xIChJbWFnZSBhbmQgVGlsZSBTaXplKVxuICAgICAgICBcbiAgICAgICAgdmFyIG1haW5IZWFkZXJEYXRhYmluID0gZGF0YWJpbnNTYXZlci5nZXRNYWluSGVhZGVyRGF0YWJpbigpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHNpek1hcmtlck9mZnNldCA9IG9mZnNldHNDYWxjdWxhdG9yLmdldEltYWdlQW5kVGlsZVNpemVPZmZzZXQoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlcyA9IGdldEJ5dGVzKFxuICAgICAgICAgICAgbWFpbkhlYWRlckRhdGFiaW4sXG4gICAgICAgICAgICAvKm51bUJ5dGVzPSovMzgsXG4gICAgICAgICAgICBzaXpNYXJrZXJPZmZzZXQgKyBqR2xvYmFscy5qMmtPZmZzZXRzLk1BUktFUl9TSVpFICsgakdsb2JhbHMuajJrT2Zmc2V0cy5MRU5HVEhfRklFTERfU0laRSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVmZXJlbmNlR3JpZFNpemVPZmZzZXQgPVxuICAgICAgICAgICAgakdsb2JhbHMuajJrT2Zmc2V0cy5SRUZFUkVOQ0VfR1JJRF9TSVpFX09GRlNFVF9BRlRFUl9TSVpfTUFSS0VSIC1cbiAgICAgICAgICAgIChqR2xvYmFscy5qMmtPZmZzZXRzLk1BUktFUl9TSVpFICsgakdsb2JhbHMuajJrT2Zmc2V0cy5MRU5HVEhfRklFTERfU0laRSk7XG4gICAgICAgIHZhciBudW1Db21wb25lbnRzT2Zmc2V0ID1cbiAgICAgICAgICAgIGpHbG9iYWxzLmoya09mZnNldHMuTlVNX0NPTVBPTkVOVFNfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVIgLVxuICAgICAgICAgICAgKGpHbG9iYWxzLmoya09mZnNldHMuTUFSS0VSX1NJWkUgKyBqR2xvYmFscy5qMmtPZmZzZXRzLkxFTkdUSF9GSUVMRF9TSVpFKTtcbiAgICAgICAgICAgIFxuICAgICAgICB2YXIgcmVmZXJlbmNlR3JpZFNpemVYID0gbWVzc2FnZUhlYWRlclBhcnNlci5nZXRJbnQzMihcbiAgICAgICAgICAgIGJ5dGVzLCByZWZlcmVuY2VHcmlkU2l6ZU9mZnNldCk7IC8vIFhTaXpcbiAgICAgICAgdmFyIHJlZmVyZW5jZUdyaWRTaXplWSA9IG1lc3NhZ2VIZWFkZXJQYXJzZXIuZ2V0SW50MzIoXG4gICAgICAgICAgICBieXRlcywgcmVmZXJlbmNlR3JpZFNpemVPZmZzZXQgKyA0KTsgLy8gWVNpelxuICAgICAgICAgICAgXG4gICAgICAgIHZhciBpbWFnZU9mZnNldFggPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDMyKGJ5dGVzLCAxMCk7IC8vIFhPU2l6XG4gICAgICAgIHZhciBpbWFnZU9mZnNldFkgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDMyKGJ5dGVzLCAxNCk7IC8vIFlPU2l6XG4gICAgICAgIHZhciB0aWxlU2l6ZVggPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDMyKGJ5dGVzLCAxOCk7IC8vIFhUU2l6XG4gICAgICAgIHZhciB0aWxlU2l6ZVkgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDMyKGJ5dGVzLCAyMik7IC8vIFlUU2l6XG4gICAgICAgIHZhciBmaXJzdFRpbGVPZmZzZXRYID0gbWVzc2FnZUhlYWRlclBhcnNlci5nZXRJbnQzMihieXRlcywgMjYpOyAvLyBYVE9TaXpcbiAgICAgICAgdmFyIGZpcnN0VGlsZU9mZnNldFkgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDMyKGJ5dGVzLCAzMCk7IC8vIFlUT1NpelxuICAgICAgICBcbiAgICAgICAgdmFyIG51bUNvbXBvbmVudHMgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDE2KGJ5dGVzLCBudW1Db21wb25lbnRzT2Zmc2V0KTsgLy8gQ1NpelxuICAgICAgICBcbiAgICAgICAgdmFyIGNvbXBvbmVudHNEYXRhT2Zmc2V0ID1cbiAgICAgICAgICAgIHNpek1hcmtlck9mZnNldCArIGpHbG9iYWxzLmoya09mZnNldHMuTlVNX0NPTVBPTkVOVFNfT0ZGU0VUX0FGVEVSX1NJWl9NQVJLRVIgKyAyO1xuICAgICAgICB2YXIgY29tcG9uZW50c0RhdGFMZW5ndGggPSBudW1Db21wb25lbnRzICogMztcbiAgICAgICAgXG4gICAgICAgIHZhciBjb21wb25lbnRzRGF0YUJ5dGVzID0gZ2V0Qnl0ZXMoXG4gICAgICAgICAgICBtYWluSGVhZGVyRGF0YWJpbiwgY29tcG9uZW50c0RhdGFMZW5ndGgsIGNvbXBvbmVudHNEYXRhT2Zmc2V0KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBjb21wb25lbnRzU2NhbGVYID0gbmV3IEFycmF5KG51bUNvbXBvbmVudHMpO1xuICAgICAgICB2YXIgY29tcG9uZW50c1NjYWxlWSA9IG5ldyBBcnJheShudW1Db21wb25lbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1Db21wb25lbnRzOyArK2kpIHtcbiAgICAgICAgICAgIGNvbXBvbmVudHNTY2FsZVhbaV0gPSBjb21wb25lbnRzRGF0YUJ5dGVzW2kgKiAzICsgMV07XG4gICAgICAgICAgICBjb21wb25lbnRzU2NhbGVZW2ldID0gY29tcG9uZW50c0RhdGFCeXRlc1tpICogMyArIDJdO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgbnVtQ29tcG9uZW50czogbnVtQ29tcG9uZW50cyxcbiAgICAgICAgICAgIGNvbXBvbmVudHNTY2FsZVg6IGNvbXBvbmVudHNTY2FsZVgsXG4gICAgICAgICAgICBjb21wb25lbnRzU2NhbGVZOiBjb21wb25lbnRzU2NhbGVZLFxuICAgICAgICAgICAgaW1hZ2VXaWR0aDogcmVmZXJlbmNlR3JpZFNpemVYIC0gZmlyc3RUaWxlT2Zmc2V0WCxcbiAgICAgICAgICAgIGltYWdlSGVpZ2h0OiByZWZlcmVuY2VHcmlkU2l6ZVkgLSBmaXJzdFRpbGVPZmZzZXRZLFxuICAgICAgICAgICAgdGlsZVdpZHRoOiB0aWxlU2l6ZVgsXG4gICAgICAgICAgICB0aWxlSGVpZ2h0OiB0aWxlU2l6ZVksXG4gICAgICAgICAgICBmaXJzdFRpbGVPZmZzZXRYOiBmaXJzdFRpbGVPZmZzZXRYLFxuICAgICAgICAgICAgZmlyc3RUaWxlT2Zmc2V0WTogZmlyc3RUaWxlT2Zmc2V0WVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5wYXJzZURlZmF1bHRUaWxlUGFyYW1zID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBtYWluSGVhZGVyRGF0YWJpbiA9IGRhdGFiaW5zU2F2ZXIuZ2V0TWFpbkhlYWRlckRhdGFiaW4oKTtcblxuICAgICAgICB2YXIgdGlsZVBhcmFtcyA9IHBhcnNlQ29kaW5nU3R5bGUobWFpbkhlYWRlckRhdGFiaW4sIC8qaXNNYW5kYXRvcnk9Ki90cnVlKTtcbiAgICAgICAgcmV0dXJuIHRpbGVQYXJhbXM7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLnBhcnNlT3ZlcnJpZGVuVGlsZVBhcmFtcyA9IGZ1bmN0aW9uKHRpbGVJbmRleCkge1xuICAgICAgICB2YXIgdGlsZUhlYWRlckRhdGFiaW4gPSBkYXRhYmluc1NhdmVyLmdldFRpbGVIZWFkZXJEYXRhYmluKHRpbGVJbmRleCk7XG4gICAgICAgIFxuICAgICAgICAvLyBBLjQuMiAoU3RhcnQgT2YgVGlsZS1wYXJ0KVxuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVQYXJhbXMgPSBwYXJzZUNvZGluZ1N0eWxlKHRpbGVIZWFkZXJEYXRhYmluLCAvKmlzTWFuZGF0b3J5PSovZmFsc2UpO1xuICAgICAgICByZXR1cm4gdGlsZVBhcmFtcztcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcGFyc2VDb2RpbmdTdHlsZShkYXRhYmluLCBpc01hbmRhdG9yeSkge1xuICAgICAgICAvLyBBLjUuMSAoSW1hZ2UgYW5kIFRpbGUgU2l6ZSlcblxuICAgICAgICB2YXIgYmFzZVBhcmFtcyA9IG9mZnNldHNDYWxjdWxhdG9yLmdldENvZGluZ1N0eWxlQmFzZVBhcmFtcyhcbiAgICAgICAgICAgIGRhdGFiaW4sIGlzTWFuZGF0b3J5KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChiYXNlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYWluSGVhZGVyRGF0YWJpbiA9IGRhdGFiaW5zU2F2ZXIuZ2V0TWFpbkhlYWRlckRhdGFiaW4oKTtcblxuICAgICAgICB2YXIgc2l6TWFya2VyT2Zmc2V0ID0gb2Zmc2V0c0NhbGN1bGF0b3IuZ2V0SW1hZ2VBbmRUaWxlU2l6ZU9mZnNldCgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIG51bUNvbXBvbmVudHNPZmZzZXQgPVxuICAgICAgICAgICAgc2l6TWFya2VyT2Zmc2V0ICsgakdsb2JhbHMuajJrT2Zmc2V0cy5OVU1fQ09NUE9ORU5UU19PRkZTRVRfQUZURVJfU0laX01BUktFUjtcblxuICAgICAgICB2YXIgbnVtQ29tcG9uZW50c0J5dGVzID0gZ2V0Qnl0ZXMoXG4gICAgICAgICAgICBtYWluSGVhZGVyRGF0YWJpbixcbiAgICAgICAgICAgIC8qbnVtQnl0ZXM9Ki8yLFxuICAgICAgICAgICAgLypzdGFydE9mZnNldD0qL251bUNvbXBvbmVudHNPZmZzZXQpO1xuICAgICAgICB2YXIgbnVtQ29tcG9uZW50cyA9IG1lc3NhZ2VIZWFkZXJQYXJzZXIuZ2V0SW50MTYobnVtQ29tcG9uZW50c0J5dGVzLCAwKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBwYWNrZWRQYWNrZXRIZWFkZXJzTWFya2VySW5UaWxlSGVhZGVyID1cbiAgICAgICAgICAgIG1hcmtlcnNQYXJzZXIuZ2V0TWFya2VyT2Zmc2V0SW5EYXRhYmluKFxuICAgICAgICAgICAgICAgIGRhdGFiaW4sIGpHbG9iYWxzLmoya01hcmtlcnMuUGFja2VkUGFja2V0SGVhZGVyc0luVGlsZUhlYWRlcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgcGFja2VkUGFja2V0SGVhZGVyc01hcmtlckluTWFpbkhlYWRlciA9XG4gICAgICAgICAgICBtYXJrZXJzUGFyc2VyLmdldE1hcmtlck9mZnNldEluRGF0YWJpbihcbiAgICAgICAgICAgICAgICBtYWluSGVhZGVyRGF0YWJpbiwgakdsb2JhbHMuajJrTWFya2Vycy5QYWNrZWRQYWNrZXRIZWFkZXJzSW5NYWluSGVhZGVyKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpc1BhY2tldEhlYWRlcnNOZWFyRGF0YSA9XG4gICAgICAgICAgICBwYWNrZWRQYWNrZXRIZWFkZXJzTWFya2VySW5UaWxlSGVhZGVyID09PSBudWxsICYmXG4gICAgICAgICAgICBwYWNrZWRQYWNrZXRIZWFkZXJzTWFya2VySW5NYWluSGVhZGVyID09PSBudWxsO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNvZGluZ1N0eWxlTW9yZURhdGFPZmZzZXQgPSBiYXNlUGFyYW1zLmNvZGluZ1N0eWxlRGVmYXVsdE9mZnNldCArIDY7XG4gICAgICAgIHZhciBjb2RpbmdTdHlsZU1vcmVEYXRhQnl0ZXMgPSBnZXRCeXRlcyhcbiAgICAgICAgICAgIGRhdGFiaW4sXG4gICAgICAgICAgICAvKm51bUJ5dGVzPSovNixcbiAgICAgICAgICAgIC8qc3RhcnRPZmZzZXQ9Ki9jb2RpbmdTdHlsZU1vcmVEYXRhT2Zmc2V0KTtcbiAgICAgICAgdmFyIG51bVF1YWxpdHlMYXllcnMgPSBtZXNzYWdlSGVhZGVyUGFyc2VyLmdldEludDE2KFxuICAgICAgICAgICAgY29kaW5nU3R5bGVNb3JlRGF0YUJ5dGVzLCAwKTtcblxuICAgICAgICB2YXIgY29kZWJsb2NrV2lkdGggPSBwYXJzZUNvZGVibG9ja1NpemUoXG4gICAgICAgICAgICBjb2RpbmdTdHlsZU1vcmVEYXRhQnl0ZXMsIDQpO1xuICAgICAgICB2YXIgY29kZWJsb2NrSGVpZ2h0ID0gcGFyc2VDb2RlYmxvY2tTaXplKFxuICAgICAgICAgICAgY29kaW5nU3R5bGVNb3JlRGF0YUJ5dGVzLCA1KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBwcmVjaW5jdFdpZHRocyA9IG5ldyBBcnJheShiYXNlUGFyYW1zLm51bVJlc29sdXRpb25MZXZlbHMpO1xuICAgICAgICB2YXIgcHJlY2luY3RIZWlnaHRzID0gbmV3IEFycmF5KGJhc2VQYXJhbXMubnVtUmVzb2x1dGlvbkxldmVscyk7XG4gICAgICAgIFxuICAgICAgICB2YXIgcHJlY2luY3RTaXplc0J5dGVzID0gbnVsbDtcbiAgICAgICAgaWYgKCFiYXNlUGFyYW1zLmlzRGVmYXVsdFByZWNpbmN0U2l6ZSkge1xuICAgICAgICAgICAgdmFyIHByZWNpbmN0U2l6ZXNCeXRlc05lZWRlZCA9IGJhc2VQYXJhbXMubnVtUmVzb2x1dGlvbkxldmVscztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJlY2luY3RTaXplc0J5dGVzID0gZ2V0Qnl0ZXMoXG4gICAgICAgICAgICAgICAgZGF0YWJpbixcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFNpemVzQnl0ZXNOZWVkZWQsXG4gICAgICAgICAgICAgICAgYmFzZVBhcmFtcy5wcmVjaW5jdFNpemVzT2Zmc2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZhdWx0U2l6ZSA9IDEgPDwgMTU7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmFzZVBhcmFtcy5udW1SZXNvbHV0aW9uTGV2ZWxzOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChiYXNlUGFyYW1zLmlzRGVmYXVsdFByZWNpbmN0U2l6ZSkge1xuICAgICAgICAgICAgICAgIHByZWNpbmN0V2lkdGhzW2ldID0gZGVmYXVsdFNpemU7XG4gICAgICAgICAgICAgICAgcHJlY2luY3RIZWlnaHRzW2ldID0gZGVmYXVsdFNpemU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBwcmVjaW5jdFNpemVPZmZzZXQgPSBpO1xuICAgICAgICAgICAgdmFyIHNpemVFeHBvbmVudHMgPSBwcmVjaW5jdFNpemVzQnl0ZXNbcHJlY2luY3RTaXplT2Zmc2V0XTtcbiAgICAgICAgICAgIHZhciBwcHggPSBzaXplRXhwb25lbnRzICYgMHgwRjtcbiAgICAgICAgICAgIHZhciBwcHkgPSBzaXplRXhwb25lbnRzID4+PiA0O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcmVjaW5jdFdpZHRoc1tpXSA9IDEgKiBNYXRoLnBvdygyLCBwcHgpOyAvLyBBdm9pZCBuZWdhdGl2ZSByZXN1bHQgZHVlIHRvIHNpZ25lZCBjYWxjdWxhdGlvblxuICAgICAgICAgICAgcHJlY2luY3RIZWlnaHRzW2ldID0gMSAqIE1hdGgucG93KDIsIHBweSk7IC8vIEF2b2lkIG5lZ2F0aXZlIHJlc3VsdCBkdWUgdG8gc2lnbmVkIGNhbGN1bGF0aW9uXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBwYXJhbXNQZXJDb21wb25lbnQgPSBuZXcgQXJyYXkobnVtQ29tcG9uZW50cyk7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtQ29tcG9uZW50czsgKytqKSB7XG4gICAgICAgICAgICBwYXJhbXNQZXJDb21wb25lbnRbal0gPSB7XG4gICAgICAgICAgICAgICAgbWF4Q29kZWJsb2NrV2lkdGg6IGNvZGVibG9ja1dpZHRoLFxuICAgICAgICAgICAgICAgIG1heENvZGVibG9ja0hlaWdodDogY29kZWJsb2NrSGVpZ2h0LFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIG51bVJlc29sdXRpb25MZXZlbHM6IGJhc2VQYXJhbXMubnVtUmVzb2x1dGlvbkxldmVscyxcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFdpZHRoUGVyTGV2ZWw6IHByZWNpbmN0V2lkdGhzLFxuICAgICAgICAgICAgICAgIHByZWNpbmN0SGVpZ2h0UGVyTGV2ZWw6IHByZWNpbmN0SGVpZ2h0c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGRlZmF1bHRDb21wb25lbnRQYXJhbXMgPSB7XG4gICAgICAgICAgICBtYXhDb2RlYmxvY2tXaWR0aDogY29kZWJsb2NrV2lkdGgsXG4gICAgICAgICAgICBtYXhDb2RlYmxvY2tIZWlnaHQ6IGNvZGVibG9ja0hlaWdodCxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbnVtUmVzb2x1dGlvbkxldmVsczogYmFzZVBhcmFtcy5udW1SZXNvbHV0aW9uTGV2ZWxzLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwcmVjaW5jdFdpZHRoUGVyTGV2ZWw6IHByZWNpbmN0V2lkdGhzLFxuICAgICAgICAgICAgcHJlY2luY3RIZWlnaHRQZXJMZXZlbDogcHJlY2luY3RIZWlnaHRzXG4gICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVQYXJhbXMgPSB7XG4gICAgICAgICAgICBudW1RdWFsaXR5TGF5ZXJzOiBudW1RdWFsaXR5TGF5ZXJzLFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpc1BhY2tldEhlYWRlcnNOZWFyRGF0YTogaXNQYWNrZXRIZWFkZXJzTmVhckRhdGEsXG4gICAgICAgICAgICBpc1N0YXJ0T2ZQYWNrZXRNYXJrZXJBbGxvd2VkOiBiYXNlUGFyYW1zLmlzU3RhcnRPZlBhY2tldE1hcmtlckFsbG93ZWQsXG4gICAgICAgICAgICBpc0VuZFBhY2tldEhlYWRlck1hcmtlckFsbG93ZWQ6IGJhc2VQYXJhbXMuaXNFbmRQYWNrZXRIZWFkZXJNYXJrZXJBbGxvd2VkLFxuXG4gICAgICAgICAgICBwYXJhbXNQZXJDb21wb25lbnQ6IHBhcmFtc1BlckNvbXBvbmVudCxcbiAgICAgICAgICAgIGRlZmF1bHRDb21wb25lbnRQYXJhbXM6IGRlZmF1bHRDb21wb25lbnRQYXJhbXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdGlsZVBhcmFtcztcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gcGFyc2VDb2RlYmxvY2tTaXplKGJ5dGVzLCBvZmZzZXQpIHtcbiAgICAgICAgdmFyIGNvZGVibG9ja1NpemVFeHBvbmVudE1pbnVzMiA9IGJ5dGVzW29mZnNldF07XG4gICAgICAgIHZhciBjb2RlYmxvY2tTaXplRXhwb25lbnQgPSAyICsgKGNvZGVibG9ja1NpemVFeHBvbmVudE1pbnVzMiAmIDB4MEYpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvZGVibG9ja1NpemVFeHBvbmVudCA+IDEwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnSWxsZWdhbCBjb2RlYmxvY2sgd2lkdGggZXhwb25lbnQgJyArIGNvZGVibG9ja1NpemVFeHBvbmVudCxcbiAgICAgICAgICAgICAgICAnQS42LjEsIFRhYmxlIEEuMTgnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHNpemUgPSAxIDw8IGNvZGVibG9ja1NpemVFeHBvbmVudDtcbiAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldEJ5dGVzKGRhdGFiaW4sIG51bUJ5dGVzLCBkYXRhYmluU3RhcnRPZmZzZXQsIGFsbG93RW5kT2ZSYW5nZSkge1xuICAgICAgICB2YXIgYnl0ZXMgPSBbXTtcblxuICAgICAgICB2YXIgcmFuZ2VPcHRpb25zID0ge1xuICAgICAgICAgICAgZm9yY2VDb3B5QWxsUmFuZ2U6IHRydWUsXG4gICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IG51bUJ5dGVzLFxuICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBkYXRhYmluU3RhcnRPZmZzZXRcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBkYXRhYmluLmNvcHlCeXRlcyhieXRlcywgLypzdGFydE9mZnNldD0qLzAsIHJhbmdlT3B0aW9ucyk7XG4gICAgICAgIGlmIChieXRlc0NvcGllZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ0hlYWRlciBkYXRhLWJpbiBoYXMgbm90IHlldCByZWNpZXZlZCAnICsgbnVtQnl0ZXMgK1xuICAgICAgICAgICAgICAgICcgYnl0ZXMgc3RhcnRpbmcgZnJvbSBvZmZzZXQgJyArIGRhdGFiaW5TdGFydE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9wYXJzZXJzL2pwaXAtc3RydWN0dXJlLXBhcnNlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBUaWxlU3RydWN0dXJlKFxuICAgIHNpemVQYXJhbXMsXG4gICAgY29kZXN0cmVhbVN0cnVjdHVyZSxcbiAgICBqcGlwRmFjdG9yeSxcbiAgICBwcm9ncmVzc2lvbk9yZGVyXG4gICAgKSB7XG4gICAgXG4gICAgdmFyIGRlZmF1bHRDb21wb25lbnRTdHJ1Y3R1cmU7XG4gICAgdmFyIGNvbXBvbmVudFN0cnVjdHVyZXM7XG4gICAgdmFyIGNvbXBvbmVudFRvSW5DbGFzc0xldmVsU3RhcnRJbmRleDtcbiAgICB2YXIgbWluTnVtUmVzb2x1dGlvbkxldmVscztcblxuICAgIHRoaXMuZ2V0UHJvZ3Jlc3Npb25PcmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvZ3Jlc3Npb25PcmRlcjtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0RGVmYXVsdENvbXBvbmVudFN0cnVjdHVyZSA9IGZ1bmN0aW9uIGdldERlZmF1bHRDb21wb25lbnRTdHJ1Y3R1cmUoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29tcG9uZW50U3RydWN0dXJlO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRDb21wb25lbnRTdHJ1Y3R1cmUgPSBmdW5jdGlvbiBnZXRDb21wb25lbnRTdHJ1Y3R1cmUoY29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnRTdHJ1Y3R1cmVzW2NvbXBvbmVudF07XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFRpbGVXaWR0aCA9IGZ1bmN0aW9uIGdldFRpbGVXaWR0aENsb3N1cmUoKSB7XG4gICAgICAgIHJldHVybiBzaXplUGFyYW1zLnRpbGVTaXplLndpZHRoO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5nZXRUaWxlSGVpZ2h0ID0gZnVuY3Rpb24gZ2V0VGlsZUhlaWdodENsb3N1cmUoKSB7XG4gICAgICAgIHJldHVybiBzaXplUGFyYW1zLnRpbGVTaXplLmhlaWdodDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TnVtUXVhbGl0eUxheWVycyA9IGZ1bmN0aW9uIGdldE51bVF1YWxpdHlMYXllcnMoKSB7XG4gICAgICAgIHJldHVybiBzaXplUGFyYW1zLm51bVF1YWxpdHlMYXllcnM7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldElzUGFja2V0SGVhZGVyTmVhckRhdGEgPSBmdW5jdGlvbiBnZXRJc1BhY2tldEhlYWRlck5lYXJEYXRhKCkge1xuICAgICAgICByZXR1cm4gc2l6ZVBhcmFtcy5pc1BhY2tldEhlYWRlcnNOZWFyRGF0YTtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0SXNTdGFydE9mUGFja2V0TWFya2VyQWxsb3dlZCA9IGZ1bmN0aW9uIGdldElzU3RhcnRPZlBhY2tldE1hcmtlckFsbG93ZWQoKSB7XG4gICAgICAgIHJldHVybiBzaXplUGFyYW1zLmlzU3RhcnRPZlBhY2tldE1hcmtlckFsbG93ZWQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldElzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZCA9XG4gICAgICAgIGZ1bmN0aW9uIGdldElzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZCgpIHtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzaXplUGFyYW1zLmlzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMuZ2V0TWluTnVtUmVzb2x1dGlvbkxldmVsc092ZXJDb21wb25lbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBtaW5OdW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5wcmVjaW5jdEluQ2xhc3NJbmRleFRvUG9zaXRpb24gPSBmdW5jdGlvbihpbkNsYXNzSW5kZXgpIHtcbiAgICAgICAgLy8gQS4zLjJcbiAgICAgICAgXG4gICAgICAgIGlmIChpbkNsYXNzSW5kZXggPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuQXJndW1lbnRFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ2luQ2xhc3NJbmRleCcsXG4gICAgICAgICAgICAgICAgaW5DbGFzc0luZGV4LFxuICAgICAgICAgICAgICAgICdJbnZhbGlkIG5lZ2F0aXZlIGluLWNsYXNzIGluZGV4IG9mIHByZWNpbmN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBudW1UaWxlcyA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TnVtVGlsZXNYKCkgKiBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bVRpbGVzWSgpO1xuICAgICAgICB2YXIgbnVtQ29tcG9uZW50cyA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TnVtQ29tcG9uZW50cygpO1xuXG4gICAgICAgIHZhciB0aWxlSW5kZXggPSBpbkNsYXNzSW5kZXggJSBudW1UaWxlcztcbiAgICAgICAgdmFyIGluQ2xhc3NJbmRleFdpdGhvdXRUaWxlID0gKGluQ2xhc3NJbmRleCAtIHRpbGVJbmRleCkgLyBudW1UaWxlcztcbiAgICAgICAgXG4gICAgICAgIHZhciBjb21wb25lbnQgPSBpbkNsYXNzSW5kZXhXaXRob3V0VGlsZSAlIG51bUNvbXBvbmVudHM7XG4gICAgICAgIHZhciBjb21wb25lbnRTdHJ1Y3R1cmUgPSBjb21wb25lbnRTdHJ1Y3R1cmVzW2NvbXBvbmVudF07XG4gICAgICAgIFxuICAgICAgICB2YXIgbnVtUmVzb2x1dGlvbkxldmVscyA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1SZXNvbHV0aW9uTGV2ZWxzKCk7XG4gICAgICAgIHZhciBwcmVjaW5jdEluZGV4ID0gKGluQ2xhc3NJbmRleFdpdGhvdXRUaWxlIC0gY29tcG9uZW50KSAvIG51bUNvbXBvbmVudHM7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzb2x1dGlvbkxldmVsO1xuICAgICAgICB2YXIgbGV2ZWxTdGFydEluZGV4ID0gMDtcbiAgICAgICAgZm9yIChyZXNvbHV0aW9uTGV2ZWwgPSAxOyByZXNvbHV0aW9uTGV2ZWwgPCBudW1SZXNvbHV0aW9uTGV2ZWxzOyArK3Jlc29sdXRpb25MZXZlbCkge1xuICAgICAgICAgICAgdmFyIG5leHRMZXZlbFN0YXJ0SW5kZXggPVxuICAgICAgICAgICAgICAgIGNvbXBvbmVudFRvSW5DbGFzc0xldmVsU3RhcnRJbmRleFtjb21wb25lbnRdW3Jlc29sdXRpb25MZXZlbF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChuZXh0TGV2ZWxTdGFydEluZGV4ID4gcHJlY2luY3RJbmRleCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsZXZlbFN0YXJ0SW5kZXggPSBuZXh0TGV2ZWxTdGFydEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAtLXJlc29sdXRpb25MZXZlbDtcbiAgICAgICAgdmFyIHByZWNpbmN0SW5kZXhJbkxldmVsID0gcHJlY2luY3RJbmRleCAtIGxldmVsU3RhcnRJbmRleDtcbiAgICAgICAgXG4gICAgICAgIHZhciBwcmVjaW5jdHNYID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1gocmVzb2x1dGlvbkxldmVsKTtcbiAgICAgICAgdmFyIHByZWNpbmN0c1kgPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtUHJlY2luY3RzWShyZXNvbHV0aW9uTGV2ZWwpO1xuXG4gICAgICAgIHZhciBwcmVjaW5jdFggPSBwcmVjaW5jdEluZGV4SW5MZXZlbCAlIHByZWNpbmN0c1g7XG4gICAgICAgIHZhciBwcmVjaW5jdFkgPSAocHJlY2luY3RJbmRleEluTGV2ZWwgLSBwcmVjaW5jdFgpIC8gcHJlY2luY3RzWDtcbiAgICAgICAgXG4gICAgICAgIGlmIChwcmVjaW5jdFkgPj0gcHJlY2luY3RzWSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdpbkNsYXNzSW5kZXgnLFxuICAgICAgICAgICAgICAgIGluQ2xhc3NJbmRleCxcbiAgICAgICAgICAgICAgICAnSW52YWxpZCBpbi1jbGFzcyBpbmRleCBvZiBwcmVjaW5jdCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgdGlsZUluZGV4OiB0aWxlSW5kZXgsXG4gICAgICAgICAgICBjb21wb25lbnQ6IGNvbXBvbmVudCxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcHJlY2luY3RYOiBwcmVjaW5jdFgsXG4gICAgICAgICAgICBwcmVjaW5jdFk6IHByZWNpbmN0WSxcbiAgICAgICAgICAgIHJlc29sdXRpb25MZXZlbDogcmVzb2x1dGlvbkxldmVsXG4gICAgICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICAgIFxuICAgIHRoaXMucHJlY2luY3RQb3NpdGlvblRvSW5DbGFzc0luZGV4ID0gZnVuY3Rpb24ocHJlY2luY3RQb3NpdGlvbikge1xuICAgICAgICAvLyBBLjMuMlxuXG4gICAgICAgIHZhciBudW1Db21wb25lbnRzID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXROdW1Db21wb25lbnRzKCk7XG4gICAgICAgIHZhbGlkYXRlQXJndW1lbnRJblJhbmdlKFxuICAgICAgICAgICAgJ3ByZWNpbmN0UG9zaXRpb24uY29tcG9uZW50JywgcHJlY2luY3RQb3NpdGlvbi5jb21wb25lbnQsIG51bUNvbXBvbmVudHMpO1xuXG4gICAgICAgIHZhciBjb21wb25lbnRTdHJ1Y3R1cmUgPSBjb21wb25lbnRTdHJ1Y3R1cmVzW3ByZWNpbmN0UG9zaXRpb24uY29tcG9uZW50XTtcblxuICAgICAgICB2YXIgbnVtUmVzb2x1dGlvbkxldmVscyA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1SZXNvbHV0aW9uTGV2ZWxzKCk7XG4gICAgICAgIHZhbGlkYXRlQXJndW1lbnRJblJhbmdlKFxuICAgICAgICAgICAgJ3ByZWNpbmN0UG9zaXRpb24ucmVzb2x1dGlvbkxldmVsJywgcHJlY2luY3RQb3NpdGlvbi5yZXNvbHV0aW9uTGV2ZWwsIG51bVJlc29sdXRpb25MZXZlbHMpO1xuXG4gICAgICAgIHZhciBudW1UaWxlcyA9IGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TnVtVGlsZXNYKCkgKiBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bVRpbGVzWSgpO1xuICAgICAgICB2YXIgcHJlY2luY3RzWCA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1QcmVjaW5jdHNYKHByZWNpbmN0UG9zaXRpb24ucmVzb2x1dGlvbkxldmVsKTtcbiAgICAgICAgdmFyIHByZWNpbmN0c1kgPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtUHJlY2luY3RzWShwcmVjaW5jdFBvc2l0aW9uLnJlc29sdXRpb25MZXZlbCk7XG5cbiAgICAgICAgdmFsaWRhdGVBcmd1bWVudEluUmFuZ2UoXG4gICAgICAgICAgICAncHJlY2luY3RQb3NpdGlvbi5wcmVjaW5jdFgnLCBwcmVjaW5jdFBvc2l0aW9uLnByZWNpbmN0WCwgcHJlY2luY3RzWCk7XG4gICAgICAgIHZhbGlkYXRlQXJndW1lbnRJblJhbmdlKFxuICAgICAgICAgICAgJ3ByZWNpbmN0UG9zaXRpb24ucHJlY2luY3RZJywgcHJlY2luY3RQb3NpdGlvbi5wcmVjaW5jdFksIHByZWNpbmN0c1kpO1xuICAgICAgICB2YWxpZGF0ZUFyZ3VtZW50SW5SYW5nZShcbiAgICAgICAgICAgICdwcmVjaW5jdFBvc2l0aW9uLnRpbGVJbmRleCcsIHByZWNpbmN0UG9zaXRpb24udGlsZUluZGV4LCBudW1UaWxlcyk7XG5cbiAgICAgICAgdmFyIHByZWNpbmN0SW5kZXhJbkxldmVsID0gcHJlY2luY3RQb3NpdGlvbi5wcmVjaW5jdFggK1xuICAgICAgICAgICAgcHJlY2luY3RQb3NpdGlvbi5wcmVjaW5jdFkgKiBwcmVjaW5jdHNYO1xuXG4gICAgICAgIHZhciBsZXZlbFN0YXJ0SW5kZXggPSBjb21wb25lbnRUb0luQ2xhc3NMZXZlbFN0YXJ0SW5kZXhbcHJlY2luY3RQb3NpdGlvbi5jb21wb25lbnRdW3ByZWNpbmN0UG9zaXRpb24ucmVzb2x1dGlvbkxldmVsXTtcblxuICAgICAgICB2YXIgcHJlY2luY3RJbmRleCA9IHByZWNpbmN0SW5kZXhJbkxldmVsICsgbGV2ZWxTdGFydEluZGV4O1xuXG4gICAgICAgIHZhciBpbkNsYXNzSW5kZXhXaXRob3V0VGlsZSA9XG4gICAgICAgICAgICBwcmVjaW5jdFBvc2l0aW9uLmNvbXBvbmVudCArIHByZWNpbmN0SW5kZXggKiBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bUNvbXBvbmVudHMoKTtcblxuICAgICAgICB2YXIgaW5DbGFzc0luZGV4ID0gcHJlY2luY3RQb3NpdGlvbi50aWxlSW5kZXggK1xuICAgICAgICAgICAgaW5DbGFzc0luZGV4V2l0aG91dFRpbGUgKiBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bVRpbGVzWCgpICogY29kZXN0cmVhbVN0cnVjdHVyZS5nZXROdW1UaWxlc1koKTtcblxuICAgICAgICByZXR1cm4gaW5DbGFzc0luZGV4O1xuICAgIH07XG4gICAgXG4gICAgdGhpcy5wcmVjaW5jdFBvc2l0aW9uVG9JbmRleEluQ29tcG9uZW50UmVzb2x1dGlvbiA9IGZ1bmN0aW9uKHByZWNpbmN0UG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudFN0cnVjdHVyZSA9IGNvbXBvbmVudFN0cnVjdHVyZXNbXG4gICAgICAgICAgICBwcmVjaW5jdFBvc2l0aW9uLmNvbXBvbmVudF07XG4gICAgICAgIFxuICAgICAgICB2YXIgcHJlY2luY3RzWCA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1QcmVjaW5jdHNYKFxuICAgICAgICAgICAgcHJlY2luY3RQb3NpdGlvbi5yZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICB2YXIgcHJlY2luY3RJbmRleEluQ29tcG9uZW50UmVzb2x1dGlvbiA9XG4gICAgICAgICAgICBwcmVjaW5jdFBvc2l0aW9uLnByZWNpbmN0WCArXG4gICAgICAgICAgICBwcmVjaW5jdFBvc2l0aW9uLnByZWNpbmN0WSAqIHByZWNpbmN0c1g7XG5cbiAgICAgICAgcmV0dXJuIHByZWNpbmN0SW5kZXhJbkNvbXBvbmVudFJlc29sdXRpb247XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlQXJndW1lbnRJblJhbmdlKHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSwgc3VwcmltdW1QYXJhbVZhbHVlKSB7XG4gICAgICAgIGlmIChwYXJhbVZhbHVlIDwgMCB8fCBwYXJhbVZhbHVlID49IHN1cHJpbXVtUGFyYW1WYWx1ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkFyZ3VtZW50RXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZSxcbiAgICAgICAgICAgICAgICBwYXJhbVZhbHVlLFxuICAgICAgICAgICAgICAgIHBhcmFtTmFtZSArICcgaXMgZXhwZWN0ZWQgdG8gYmUgYmV0d2VlbiAwIGFuZCAnICsgc3VwcmltdW1QYXJhbVZhbHVlIC0gMSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVUYXJnZXRQcm9ncmVzc2lvbk9yZGVyKHByb2dyZXNzaW9uT3JkZXIpIHtcbiAgICAgICAgaWYgKHByb2dyZXNzaW9uT3JkZXIubGVuZ3RoICE9PSA0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbignSWxsZWdhbCBwcm9ncmVzc2lvbiBvcmRlciAnICsgcHJvZ3Jlc3Npb25PcmRlciArICc6IHVuZXhwZWN0ZWQgbGVuZ3RoJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChwcm9ncmVzc2lvbk9yZGVyWzNdICE9PSAnTCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbGxlZ2FsRGF0YUV4Y2VwdGlvbignSWxsZWdhbCB0YXJnZXQgcHJvZ3Jlc3Npb24gb3JkZXIgb2YgJyArIHByb2dyZXNzaW9uT3JkZXIsICdBLjMuMi4xJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBoYXNQID0gcHJvZ3Jlc3Npb25PcmRlci5pbmRleE9mKCdQJykgPj0gMDtcbiAgICAgICAgdmFyIGhhc0MgPSBwcm9ncmVzc2lvbk9yZGVyLmluZGV4T2YoJ0MnKSA+PSAwO1xuICAgICAgICB2YXIgaGFzUiA9IHByb2dyZXNzaW9uT3JkZXIuaW5kZXhPZignUicpID49IDA7XG4gICAgICAgIGlmICghaGFzUCB8fCAhaGFzQyB8fCAhaGFzUikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oJ0lsbGVnYWwgcHJvZ3Jlc3Npb24gb3JkZXIgJyArIHByb2dyZXNzaW9uT3JkZXIgKyAnOiBtaXNzaW5nIGxldHRlcicpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAocHJvZ3Jlc3Npb25PcmRlciAhPT0gJ1JQQ0wnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5VbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24oJ1Byb2dyZXNzaW9uIG9yZGVyIG9mICcgKyBwcm9ncmVzc2lvbk9yZGVyLCAnQS42LjEnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUGFyYW1zKCkge1xuICAgICAgICBjb21wb25lbnRUb0luQ2xhc3NMZXZlbFN0YXJ0SW5kZXggPSBuZXcgQXJyYXkoY29tcG9uZW50cyk7XG5cbiAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bUNvbXBvbmVudHMoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBkZWZhdWx0Q29tcG9uZW50ID0gc2l6ZVBhcmFtcy5kZWZhdWx0Q29tcG9uZW50UGFyYW1zO1xuICAgICAgICBtaW5OdW1SZXNvbHV0aW9uTGV2ZWxzID0gZGVmYXVsdENvbXBvbmVudC5udW1SZXNvbHV0aW9uTGV2ZWxzO1xuICAgICAgICB2YXIgaXNDb21wb25lbnRzSWRlbnRpY2FsU2l6ZSA9IHRydWU7XG4gICAgICAgIHZhciBpc1ByZWNpbmN0UGFydGl0aW9uRml0c1RvVGlsZVBhcnRpdGlvbiA9IHRydWU7XG5cbiAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb21wb25lbnRzOyArK2MpIHtcbiAgICAgICAgICAgIHZhciBzaXplID0gc2l6ZVBhcmFtcy5wYXJhbXNQZXJDb21wb25lbnRbY107XG4gICAgICAgICAgICBtaW5OdW1SZXNvbHV0aW9uTGV2ZWxzID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgbWluTnVtUmVzb2x1dGlvbkxldmVscywgc2l6ZS5udW1SZXNvbHV0aW9uTGV2ZWxzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbXBvbmVudFRvSW5DbGFzc0xldmVsU3RhcnRJbmRleFtjXSA9IG5ldyBBcnJheShzaXplLm51bVJlc29sdXRpb25MZXZlbHMpO1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudFN0cnVjdHVyZSA9IGNvbXBvbmVudFN0cnVjdHVyZXNbY107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBhY2N1bXVsYXRlZE9mZnNldCA9IDA7XG4gICAgICAgICAgICB2YXIgZmlyc3RMZXZlbFByZWNpbmN0c1ggPSBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtUHJlY2luY3RzWChjKTtcbiAgICAgICAgICAgIHZhciBmaXJzdExldmVsUHJlY2luY3RzWSA9IGNvbXBvbmVudFN0cnVjdHVyZS5nZXROdW1QcmVjaW5jdHNZKGMpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHNpemUubnVtUmVzb2x1dGlvbkxldmVsczsgKytyKSB7XG4gICAgICAgICAgICAgICAgY29tcG9uZW50VG9JbkNsYXNzTGV2ZWxTdGFydEluZGV4W2NdW3JdID0gYWNjdW11bGF0ZWRPZmZzZXQ7XG4gICAgICAgICAgICAgICAgdmFyIHByZWNpbmN0c1hJbkxldmVsID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1gocik7XG4gICAgICAgICAgICAgICAgdmFyIHByZWNpbmN0c1lJbkxldmVsID0gY29tcG9uZW50U3RydWN0dXJlLmdldE51bVByZWNpbmN0c1kocik7XG4gICAgICAgICAgICAgICAgYWNjdW11bGF0ZWRPZmZzZXQgKz0gcHJlY2luY3RzWEluTGV2ZWwgKiBwcmVjaW5jdHNZSW5MZXZlbDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChkZWZhdWx0Q29tcG9uZW50LnByZWNpbmN0V2lkdGhQZXJMZXZlbFtyXSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUucHJlY2luY3RXaWR0aFBlckxldmVsW3JdIHx8XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRDb21wb25lbnQucHJlY2luY3RIZWlnaHRQZXJMZXZlbFtyXSAhPT1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUucHJlY2luY3RIZWlnaHRQZXJMZXZlbFtyXSkge1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaXNDb21wb25lbnRzSWRlbnRpY2FsU2l6ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgaXNIb3Jpem9udGFsUGFydGl0aW9uU3VwcG9ydGVkID1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tJZlByZWNpbmN0UGFydGl0aW9uU3RhcnRzSW5UaWxlVG9wTGVmdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplLm51bVJlc29sdXRpb25MZXZlbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0UHJlY2luY3RXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TGV2ZWxXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBpc1ZlcnRpY2FsUGFydGl0aW9uU3VwcG9ydGVkID1cbiAgICAgICAgICAgICAgICAgICAgY2hlY2tJZlByZWNpbmN0UGFydGl0aW9uU3RhcnRzSW5UaWxlVG9wTGVmdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplLm51bVJlc29sdXRpb25MZXZlbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0UHJlY2luY3RXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0TGV2ZWxXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUuZ2V0VGlsZVdpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlzUHJlY2luY3RQYXJ0aXRpb25GaXRzVG9UaWxlUGFydGl0aW9uICY9XG4gICAgICAgICAgICAgICAgICAgIGlzSG9yaXpvbnRhbFBhcnRpdGlvblN1cHBvcnRlZCAmJlxuICAgICAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsUGFydGl0aW9uU3VwcG9ydGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0NvbXBvbmVudHNJZGVudGljYWxTaXplKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuajJrRXhjZXB0aW9ucy5VbnN1cHBvcnRlZEZlYXR1cmVFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgJ1NwZWNpYWwgQ29kaW5nIFN0eWxlIGZvciBDb21wb25lbnQgKENPQyknLCAnQS42LjInKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFpc1ByZWNpbmN0UGFydGl0aW9uRml0c1RvVGlsZVBhcnRpdGlvbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdQcmVjaW5jdCBUb3BMZWZ0IHdoaWNoIGlzIG5vdCBtYXRjaGVkIHRvIHRpbGUgVG9wTGVmdCcsICdCLjYnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjaGVja0lmUHJlY2luY3RQYXJ0aXRpb25TdGFydHNJblRpbGVUb3BMZWZ0KFxuICAgICAgICByZXNvbHV0aW9uTGV2ZWwsXG4gICAgICAgIG51bVJlc29sdXRpb25MZXZlbHMsXG4gICAgICAgIGdldFByZWNpbmN0U2l6ZUZ1bmN0aW9uLFxuICAgICAgICBnZXRMZXZlbFNpemVGdW5jdGlvbixcbiAgICAgICAgZ2V0VGlsZVNpemUxREZ1bmN0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICAvLyBKcGVnMjAwMCBzdGFuZGFyZCBhbGxvd3MgcGFydGl0aW9uIG9mIHRpbGVzIHdoaWNoIGRvZXMgbm90IGZpdFxuICAgICAgICAvLyBleGFjdGx5IHRoZSBwcmVjaW5jdHMgcGFydGl0aW9uIChpLmUuIHRoZSBmaXJzdCBwcmVjaW5jdHMgXCJ2aXJ0dWFsbHlcIlxuICAgICAgICAvLyBzdGFydHMgYmVmb3JlIHRoZSB0aWxlLCB0aHVzIGlzIHNtYWxsZXIgdGhhbiBvdGhlcikuXG4gICAgICAgIC8vIFRoaXMgaXMgbm90IHN1cHBvcnRlZCBub3cgaW4gdGhlIGNvZGUsIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGNoZWNrXG4gICAgICAgIC8vIHRoYXQgdGhpcyBpcyBub3QgdGhlIHNpdHVhdGlvbi5cbiAgICAgICAgXG4gICAgICAgIC8vIFRoZSBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgZmlyc3RUaWxlT2Zmc2V0IGlzIHplcm8gYW5kIGNvbXBvbmVudFNjYWxlXG4gICAgICAgIC8vIGlzIG9uZSAoVW5zdXBwb3J0ZWRFeGNlcHRpb25zIGFyZSB0aHJvd24gaW4gQ29tcG9uZW50U3RydWN0dXJlIGFuZFxuICAgICAgICAvLyBDb2Rlc3RyZWFtU3RydWN0dXJlIGNsYXNzZXMpLlxuICAgICAgICBcbiAgICAgICAgdmFyIHByZWNpbmN0U2l6ZSA9IGdldFByZWNpbmN0U2l6ZUZ1bmN0aW9uKHJlc29sdXRpb25MZXZlbCk7XG4gICAgICAgIHZhciBsZXZlbFNpemUgPSBnZXRMZXZlbFNpemVGdW5jdGlvbihyZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICB2YXIgdGlsZVNpemUxRCA9IGdldFRpbGVTaXplMURGdW5jdGlvbihyZXNvbHV0aW9uTGV2ZWwpO1xuICAgICAgICBcbiAgICAgICAgaWYgKHByZWNpbmN0U2l6ZSA+PSBsZXZlbFNpemUgfHwgdGlsZVNpemUxRCA+PSBsZXZlbFNpemUpIHtcbiAgICAgICAgICAgIC8vIHByZWNpbmN0U2l6ZSA+PSBsZXZlbFNpemUgPT0+IFByZWNpbmN0IGlzIGxhcmdlciB0aGFuIGltYWdlIHRodXNcbiAgICAgICAgICAgIC8vIGFueXdheSB0aWxlIGhhcyBhIHNpbmdsZSBwcmVjaW5jdFxuICAgICAgICAgICAgLy8gdGlsZVNpemUxRCA+PSBsZXZlbFNpemUgPT0+IExldmVsIGhhcyBvbmx5IHNpbmdsZSB0aWxlIHRodXMgbm9cbiAgICAgICAgICAgIC8vIGNoYW5jZXMgZm9yIHRpbGUgdG9wLWxlZnQgdG8gbm90IG1hdGNoIGZpcnN0IHByZWNpbmN0IHRvcC1sZWZ0XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgaXNQcmVjaW5jdFBhcnRpdGlvbkZpdHNUb1RpbGVQYXJ0aXRpb24gPVxuICAgICAgICAgICAgcHJlY2luY3RTaXplICUgdGlsZVNpemUxRCA9PT0gMCB8fFxuICAgICAgICAgICAgdGlsZVNpemUxRCAlIHByZWNpbmN0U2l6ZSA9PT0gMDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpc1ByZWNpbmN0UGFydGl0aW9uRml0c1RvVGlsZVBhcnRpdGlvbjtcbiAgICB9XG4gICAgXG4gICAgZGVmYXVsdENvbXBvbmVudFN0cnVjdHVyZSA9IGpwaXBGYWN0b3J5LmNyZWF0ZUNvbXBvbmVudFN0cnVjdHVyZShcbiAgICAgICAgc2l6ZVBhcmFtcy5kZWZhdWx0Q29tcG9uZW50UGFyYW1zLCB0aGlzKTtcbiAgICAgICAgXG4gICAgY29tcG9uZW50U3RydWN0dXJlcyA9IG5ldyBBcnJheShjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bUNvbXBvbmVudHMoKSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2Rlc3RyZWFtU3RydWN0dXJlLmdldE51bUNvbXBvbmVudHMoKTsgKytpKSB7XG4gICAgICAgIGNvbXBvbmVudFN0cnVjdHVyZXNbaV0gPSBqcGlwRmFjdG9yeS5jcmVhdGVDb21wb25lbnRTdHJ1Y3R1cmUoXG4gICAgICAgICAgICBzaXplUGFyYW1zLnBhcmFtc1BlckNvbXBvbmVudFtpXSwgdGhpcyk7XG4gICAgfVxuICAgIFxuICAgIHByZXByb2Nlc3NQYXJhbXMoKTtcbiAgICBcbiAgICB2YWxpZGF0ZVRhcmdldFByb2dyZXNzaW9uT3JkZXIocHJvZ3Jlc3Npb25PcmRlcik7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2ltYWdlLXN0cnVjdHVyZXMvanBpcC10aWxlLXN0cnVjdHVyZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBKcGlwQml0c3RyZWFtUmVhZGVyQ2xvc3VyZSgpIHtcbiAgICB2YXIgTlVMTF9CWVRFID0gLTE7IC8vIFVzaW5nIGpzJyBudWxsIGFuZCBudW1iZXIgaW4gc2FtZSBwcm9wZXJ0eSBkZWdyYWRlcyBwZXJmb3JtYW5jZVxuICAgIHZhciB6ZXJvQml0c1VudGlsRmlyc3RPbmVCaXRNYXAgPSBjcmVhdGVaZXJvQml0c1VudGlsRmlyc3RPbmVCaXRNYXAoKTtcblxuICAgIGZ1bmN0aW9uIEpwaXBCaXRzdHJlYW1SZWFkZXIoZGF0YWJpbiwgdHJhbnNhY3Rpb25IZWxwZXIpIHtcbiAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgICAgICAgIG5leHRPZmZzZXRUb1BhcnNlOiAwLFxuICAgICAgICAgICAgdmFsaWRCaXRzSW5DdXJyZW50Qnl0ZTogMCxcbiAgICAgICAgICAgIG9yaWdpbmFsQnl0ZVdpdGhvdXRTaGlmdDogTlVMTF9CWVRFLFxuICAgICAgICAgICAgY3VycmVudEJ5dGU6IE5VTExfQllURSxcbiAgICAgICAgICAgIGlzU2tpcE5leHRCeXRlOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB2YXIgc3RyZWFtU3RhdGUgPSB0cmFuc2FjdGlvbkhlbHBlci5jcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0KGluaXRpYWxTdGF0ZSwgZnVuY3Rpb24gY2xvbmVTdGF0ZShzdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuZXh0T2Zmc2V0VG9QYXJzZTogc3RhdGUubmV4dE9mZnNldFRvUGFyc2UsXG4gICAgICAgICAgICAgICAgdmFsaWRCaXRzSW5DdXJyZW50Qnl0ZTogc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEJ5dGVXaXRob3V0U2hpZnQ6IHN0YXRlLm9yaWdpbmFsQnl0ZVdpdGhvdXRTaGlmdCxcbiAgICAgICAgICAgICAgICBjdXJyZW50Qnl0ZTogc3RhdGUuY3VycmVudEJ5dGUsXG4gICAgICAgICAgICAgICAgaXNTa2lwTmV4dEJ5dGU6IHN0YXRlLmlzU2tpcE5leHRCeXRlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIGFjdGl2ZVRyYW5zYWN0aW9uID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYWN0aXZlVHJhbnNhY3Rpb24nLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldEFjdGl2ZVRyYW5zYWN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUcmFuc2FjdGlvbiA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgICAgICAhYWN0aXZlVHJhbnNhY3Rpb24uaXNBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmpwaXBFeGNlcHRpb25zLkludGVybmFsRXJyb3JFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAnTm8gYWN0aXZlIHRyYW5zYWN0aW9uIGluIGJpdHN0cmVhbVJlYWRlcicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gYWN0aXZlVHJhbnNhY3Rpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdiaXRzQ291bnRlcicsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0Qml0c0NvdW50ZXIoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RyZWFtU3RhdGUuZ2V0VmFsdWUoYWN0aXZlVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHRyeVZhbGlkYXRlQ3VycmVudEJ5dGUoZGF0YWJpbiwgc3RhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5pc1NraXBOZXh0Qnl0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIHN0YXRlIG9mIGJpdHN0cmVhbVJlYWRlcjogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnV2hlbiAweEZGIGVuY291bnRlcmVkLCB0cnlWYWxpZGF0ZUN1cnJlbnRCeXRlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3Nob3VsZCBza2lwIHRoZSB3aG9sZSBieXRlICBhZnRlciAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdzaGlmdFJlbWFpbmluZ0JpdHNJbkJ5dGUgYW5kIGNsZWFyIGlzU2tpcE5leHRCeXRlLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdIb3dldmVyIHRoZSBmbGFnIGlzIHN0aWxsIHNldCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gc3RhdGUubmV4dE9mZnNldFRvUGFyc2UgKiA4IC0gc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGF0YWJpbk9mZnNldCcsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0RGF0YWJpbk9mZnNldCgpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBzdHJlYW1TdGF0ZS5nZXRWYWx1ZShhY3RpdmVUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLmlzU2tpcE5leHRCeXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5uZXh0T2Zmc2V0VG9QYXJzZSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlICUgOCAhPT0gMCB8fFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5vcmlnaW5hbEJ5dGVXaXRob3V0U2hpZnQgPT09IDB4RkYpIHtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBjYWxjdWxhdGUgZGF0YWJpbiBvZmZzZXQgd2hlbiBiaXRzdHJlYW1SZWFkZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnIGlzIGluIHRoZSBtaWRkbGUgb2YgdGhlIGJ5dGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLm5leHRPZmZzZXRUb1BhcnNlIC0gc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZSAvIDg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldERhdGFiaW5PZmZzZXQob2Zmc2V0SW5CeXRlcykge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbVN0YXRlLmdldFZhbHVlKGFjdGl2ZVRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlID0gMDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5pc1NraXBOZXh0Qnl0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHN0YXRlLm9yaWdpbmFsQnl0ZVdpdGhvdXRTaGlmdCA9IE5VTExfQllURTtcbiAgICAgICAgICAgICAgICBzdGF0ZS5uZXh0T2Zmc2V0VG9QYXJzZSA9IG9mZnNldEluQnl0ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zdGFydE5ld1RyYW5zYWN0aW9uID0gZnVuY3Rpb24gc3RhcnROZXdUcmFuc2FjdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmVUcmFuc2FjdGlvbiAhPT0gbnVsbCAmJiBhY3RpdmVUcmFuc2FjdGlvbi5pc0FjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnQ2Fubm90IHN0YXJ0IG5ldyB0cmFuc2FjdGlvbiBpbiBiaXRzdHJlYW1SZWFkZXIgJyArXG4gICAgICAgICAgICAgICAgICAgICd3aGlsZSBhbm90aGVyIHRyYW5zYWN0aW9uIGlzIGFjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBhY3RpdmVUcmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uSGVscGVyLmNyZWF0ZVRyYW5zYWN0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNoaWZ0UmVtYWluaW5nQml0c0luQnl0ZSA9IGZ1bmN0aW9uIHNoaWZ0UmVtYWluaW5nQml0c0luQnl0ZSgpIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbVN0YXRlLmdldFZhbHVlKGFjdGl2ZVRyYW5zYWN0aW9uKTtcblxuICAgICAgICAgICAgc3RhdGUuaXNTa2lwTmV4dEJ5dGUgPSBzdGF0ZS5vcmlnaW5hbEJ5dGVXaXRob3V0U2hpZnQgPT09IDB4RkY7XG4gICAgICAgICAgICBzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlID0gTWF0aC5mbG9vcihcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlIC8gOCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNoaWZ0Qml0ID0gZnVuY3Rpb24gc2hpZnRCaXQoKSB7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBzdHJlYW1TdGF0ZS5nZXRWYWx1ZShhY3RpdmVUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICBpZiAoIXRyeVZhbGlkYXRlQ3VycmVudEJ5dGUoZGF0YWJpbiwgc3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBvbmVzQ291bnQgPSBjb3VudEFuZFNoaWZ0Qml0cyhcbiAgICAgICAgICAgICAgICBkYXRhYmluLFxuICAgICAgICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgICAgICAgIC8qaXNVbnRpbFplcm9CaXQ9Ki90cnVlLFxuICAgICAgICAgICAgICAgIC8qbWF4Qml0c1RvU2hpZnQ9Ki8xKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG9uZXNDb3VudDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY291bnRaZXJvc0FuZFNoaWZ0VW50aWxGaXJzdE9uZUJpdCA9XG4gICAgICAgICAgICBmdW5jdGlvbiBjb3VudFplcm9zQW5kU2hpZnRVbnRpbEZpcnN0T25lQml0KG1heEJpdHNUb1NoaWZ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RyZWFtU3RhdGUuZ2V0VmFsdWUoYWN0aXZlVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBjb3VudEFuZFNoaWZ0Qml0cyhcbiAgICAgICAgICAgICAgICAgICAgZGF0YWJpbiwgc3RhdGUsIC8qaXNVbnRpbFplcm9CaXQ9Ki9mYWxzZSwgbWF4Qml0c1RvU2hpZnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLmNvdW50T25lc0FuZFNoaWZ0VW50aWxGaXJzdFplcm9CaXQgPVxuICAgICAgICAgICAgZnVuY3Rpb24gY291bnRPbmVzQW5kU2hpZnRVbnRpbEZpcnN0WmVyb0JpdChtYXhCaXRzVG9TaGlmdCkge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHN0cmVhbVN0YXRlLmdldFZhbHVlKGFjdGl2ZVRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gY291bnRBbmRTaGlmdEJpdHMoXG4gICAgICAgICAgICAgICAgICAgIGRhdGFiaW4sIHN0YXRlLCAvKmlzVW50aWxaZXJvQml0PSovdHJ1ZSwgbWF4Qml0c1RvU2hpZnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNoaWZ0Qml0cyA9IGZ1bmN0aW9uIHNoaWZ0Qml0cyhiaXRzQ291bnQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gc3RyZWFtU3RhdGUuZ2V0VmFsdWUoYWN0aXZlVHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgdmFyIHJlbWFpbmluZ0JpdHMgPSBiaXRzQ291bnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHdoaWxlIChyZW1haW5pbmdCaXRzID4gMCkge1xuICAgICAgICAgICAgICAgIGlmICghdHJ5VmFsaWRhdGVDdXJyZW50Qnl0ZShkYXRhYmluLCBzdGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBiaXRzVG9UYWtlID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlLnZhbGlkQml0c0luQ3VycmVudEJ5dGUsIHJlbWFpbmluZ0JpdHMpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBhZGRUb1Jlc3VsdCA9IHN0YXRlLmN1cnJlbnRCeXRlID4+ICg4IC0gYml0c1RvVGFrZSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gKHJlc3VsdCA8PCBiaXRzVG9UYWtlKSArIGFkZFRvUmVzdWx0O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlbW92ZUJpdHNGcm9tQnl0ZShzdGF0ZSwgYml0c1RvVGFrZSk7XG4gICAgICAgICAgICAgICAgcmVtYWluaW5nQml0cyAtPSBiaXRzVG9UYWtlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjb3VudEFuZFNoaWZ0Qml0cyhkYXRhYmluLCBzdGF0ZSwgaXNVbnRpbFplcm9CaXQsIG1heEJpdHNUb1NoaWZ0KSB7XG4gICAgICAgIHZhciBjb3VudGVkQml0cyA9IDA7XG4gICAgICAgIHZhciBmb3VuZFRlcm1pbmF0aW5nQml0O1xuICAgICAgICB2YXIgcmVtYWluaW5nQml0cyA9IG1heEJpdHNUb1NoaWZ0O1xuICAgICAgICBcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKCF0cnlWYWxpZGF0ZUN1cnJlbnRCeXRlKGRhdGFiaW4sIHN0YXRlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYnl0ZVZhbHVlID0gaXNVbnRpbFplcm9CaXQgPyB+c3RhdGUuY3VycmVudEJ5dGUgOiBzdGF0ZS5jdXJyZW50Qnl0ZTtcbiAgICAgICAgICAgIHZhciBiaXRzQ291bnRJbmNsdWRpbmdUZXJtaW5hdGluZ0JpdCA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIHplcm9CaXRzVW50aWxGaXJzdE9uZUJpdE1hcFtieXRlVmFsdWVdLFxuICAgICAgICAgICAgICAgIHN0YXRlLnZhbGlkQml0c0luQ3VycmVudEJ5dGUgKyAxKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGJpdHNDb3VudE5vdEluY2x1ZGluZ1Rlcm1pbmF0aW5nQml0ID1cbiAgICAgICAgICAgICAgICBiaXRzQ291bnRJbmNsdWRpbmdUZXJtaW5hdGluZ0JpdCAtIDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChyZW1haW5pbmdCaXRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYml0c0NvdW50SW5jbHVkaW5nVGVybWluYXRpbmdCaXQgPiByZW1haW5pbmdCaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZUJpdHNGcm9tQnl0ZShzdGF0ZSwgcmVtYWluaW5nQml0cyk7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZWRCaXRzICs9IHJlbWFpbmluZ0JpdHM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZW1haW5pbmdCaXRzIC09IGJpdHNDb3VudE5vdEluY2x1ZGluZ1Rlcm1pbmF0aW5nQml0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb3VudGVkQml0cyArPSBiaXRzQ291bnROb3RJbmNsdWRpbmdUZXJtaW5hdGluZ0JpdDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm91bmRUZXJtaW5hdGluZ0JpdCA9XG4gICAgICAgICAgICAgICAgYml0c0NvdW50SW5jbHVkaW5nVGVybWluYXRpbmdCaXQgPD0gc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZTtcblxuICAgICAgICAgICAgaWYgKGZvdW5kVGVybWluYXRpbmdCaXQpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVCaXRzRnJvbUJ5dGUoc3RhdGUsIGJpdHNDb3VudEluY2x1ZGluZ1Rlcm1pbmF0aW5nQml0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCFmb3VuZFRlcm1pbmF0aW5nQml0KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb3VudGVkQml0cztcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gcmVtb3ZlQml0c0Zyb21CeXRlKHN0YXRlLCBiaXRzQ291bnQpIHtcbiAgICAgICAgc3RhdGUudmFsaWRCaXRzSW5DdXJyZW50Qnl0ZSAtPSBiaXRzQ291bnQ7XG4gICAgICAgIGlmIChzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlID4gMCkge1xuICAgICAgICAgICAgc3RhdGUuY3VycmVudEJ5dGUgPSAoc3RhdGUuY3VycmVudEJ5dGUgPDwgYml0c0NvdW50KSAmIDB4RkY7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cnlWYWxpZGF0ZUN1cnJlbnRCeXRlKGRhdGFiaW4sIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBieXRlc05lZWRlZCA9IHN0YXRlLmlzU2tpcE5leHRCeXRlID8gMiA6IDE7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0QXJyYXkgPSBbXTtcbiAgICAgICAgdmFyIGJ5dGVzQ29waWVkID0gZGF0YWJpbi5jb3B5Qnl0ZXMocmVzdWx0QXJyYXksIC8qcmVzdWx0U3RhcnRPZmZzZXQ9Ki8wLCB7XG4gICAgICAgICAgICBmb3JjZUNvcHlBbGxSYW5nZTogdHJ1ZSxcbiAgICAgICAgICAgIGRhdGFiaW5TdGFydE9mZnNldDogc3RhdGUubmV4dE9mZnNldFRvUGFyc2UsXG4gICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IGJ5dGVzTmVlZGVkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmIChieXRlc0NvcGllZCAhPT0gYnl0ZXNOZWVkZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcmV2Qnl0ZSA9IHN0YXRlLm9yaWdpbmFsQnl0ZVdpdGhvdXRTaGlmdDtcblxuICAgICAgICBzdGF0ZS5jdXJyZW50Qnl0ZSA9IHJlc3VsdEFycmF5W2J5dGVzTmVlZGVkIC0gMV07XG4gICAgICAgIHN0YXRlLnZhbGlkQml0c0luQ3VycmVudEJ5dGUgPSA4O1xuICAgICAgICBzdGF0ZS5vcmlnaW5hbEJ5dGVXaXRob3V0U2hpZnQgPSBzdGF0ZS5jdXJyZW50Qnl0ZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwcmV2Qnl0ZSA9PT0gMHhGRikge1xuICAgICAgICAgICAgaWYgKChyZXN1bHRBcnJheVswXSAmIDB4ODApICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGpHbG9iYWxzLmoya0V4Y2VwdGlvbnMuSWxsZWdhbERhdGFFeGNlcHRpb24oXG4gICAgICAgICAgICAgICAgICAgICdFeHBlY3RlZCAwIGJpdCBhZnRlciAweEZGIGJ5dGUnLCAnQi4xMC4xJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIE5vIG5lZWQgdG8gc2tpcCBhbm90aGVyIGJpdCBpZiBhbHJlYWR5IHNraXAgdGhlIHdob2xlIGJ5dGVcbiAgICAgICAgICAgIGlmICghc3RhdGUuaXNTa2lwTmV4dEJ5dGUpIHtcbiAgICAgICAgICAgICAgICBzdGF0ZS5jdXJyZW50Qnl0ZSA8PD0gMTtcbiAgICAgICAgICAgICAgICBzdGF0ZS52YWxpZEJpdHNJbkN1cnJlbnRCeXRlID0gNztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc3RhdGUuaXNTa2lwTmV4dEJ5dGUgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUubmV4dE9mZnNldFRvUGFyc2UgKz0gYnl0ZXNOZWVkZWQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVaZXJvQml0c1VudGlsRmlyc3RPbmVCaXRNYXAoKSB7XG4gICAgICAgIHZhciBhcnJheU1hcCA9IG5ldyBBcnJheSgyNTUpO1xuICAgICAgICBcbiAgICAgICAgYXJyYXlNYXBbMHgwMF0gPSA5O1xuICAgICAgICBhcnJheU1hcFsweDAxXSA9IDg7XG4gICAgICAgIGFycmF5TWFwWzB4MDJdID0gNztcbiAgICAgICAgYXJyYXlNYXBbMHgwM10gPSA3O1xuICAgICAgICBcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGkgPSAweDA0OyBpIDw9IDB4MDc7ICsraSkge1xuICAgICAgICAgICAgYXJyYXlNYXBbaV0gPSA2O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmb3IgKGkgPSAweDA4OyBpIDw9IDB4MEY7ICsraSkge1xuICAgICAgICAgICAgYXJyYXlNYXBbaV0gPSA1O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMHgxMDsgaSA8PSAweDFGOyArK2kpIHtcbiAgICAgICAgICAgIGFycmF5TWFwW2ldID0gNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDB4MjA7IGkgPD0gMHgzRjsgKytpKSB7XG4gICAgICAgICAgICBhcnJheU1hcFtpXSA9IDM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDB4NDA7IGkgPD0gMHg3RjsgKytpKSB7XG4gICAgICAgICAgICBhcnJheU1hcFtpXSA9IDI7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDB4ODA7IGkgPD0gMHhGRjsgKytpKSB7XG4gICAgICAgICAgICBhcnJheU1hcFtpXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEF2b2lkIHR3bydzIGNvbXBsZW1lbnQgcHJvYmxlbXNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8PSAweEZGOyArK2kpIHtcbiAgICAgICAgICAgIGFycmF5TWFwW2kgLSAweDEwMF0gPSBhcnJheU1hcFtpXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gSnBpcEJpdHN0cmVhbVJlYWRlcjtcbn0pKCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3F1YWxpdHktbGF5ZXJzL2pwaXAtYml0c3RyZWFtLXJlYWRlci5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEpwaXBUYWdUcmVlKFxuICAgIGJpdHN0cmVhbVJlYWRlciwgd2lkdGgsIGhlaWdodCwgdHJhbnNhY3Rpb25IZWxwZXIpIHtcbiAgICBcbiAgICB2YXIgaXNBbHJlYWR5UmVhZEJpdHNUcmFuc2FjdGlvbmFsT2JqZWN0ID1cbiAgICAgICAgdHJhbnNhY3Rpb25IZWxwZXIuY3JlYXRlVHJhbnNhY3Rpb25hbE9iamVjdChmYWxzZSwgZnVuY3Rpb24gY2xvbmVCb29sZWFuKG9sZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9sZDtcbiAgICAgICAgfSk7XG4gICAgdmFyIGxldmVscztcbiAgICBcbiAgICBjcmVhdGVMZXZlbHNBcnJheSgpO1xuICAgICAgICBcbiAgICB0aGlzLnNldE1pbmltYWxWYWx1ZUlmTm90UmVhZEJpdHMgPSBmdW5jdGlvbiBzZXRNaW5pbWFsVmFsdWVJZk5vdFJlYWRCaXRzKFxuICAgICAgICBtaW5pbWFsVmFsdWUpIHtcbiAgICBcbiAgICAgICAgaWYgKGlzQWxyZWFkeVJlYWRCaXRzKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uYWxPYmplY3QgPSBsZXZlbHNbMF0uY29udGVudFswXTtcbiAgICAgICAgdmFyIG5vZGUgPSB0cmFuc2FjdGlvbmFsT2JqZWN0LmdldFZhbHVlKFxuICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLmFjdGl2ZVRyYW5zYWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIG5vZGUubWluaW1hbFBvc3NpYmxlVmFsdWUgPSBtaW5pbWFsVmFsdWU7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmlzU21hbGxlclRoYW5PckVxdWFsc1RvID0gZnVuY3Rpb24gaXNTbWFsbGVyVGhhbk9yRXF1YWxzVG8oXG4gICAgICAgIHgsIHksIHZhbHVlKSB7XG4gICAgICAgIFxuICAgICAgICBzZXRBbHJlYWR5UmVhZEJpdHMoKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBnZXROZXh0Tm9kZSA9IGdldFJvb3RUb0xlYWZJdGVyYXRvcih4LCB5KTtcbiAgICAgICAgdmFyIGN1cnJlbnROb2RlID0gZ2V0TmV4dE5vZGUoKTtcbiAgICAgICAgdmFyIGxhc3ROb2RlO1xuICAgICAgICBcbiAgICAgICAgd2hpbGUgKGN1cnJlbnROb2RlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudE5vZGUubWluaW1hbFBvc3NpYmxlVmFsdWUgPiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKCFjdXJyZW50Tm9kZS5pc0ZpbmFsVmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF4Qml0c1RvU2hpZnQgPSB2YWx1ZSAtIGN1cnJlbnROb2RlLm1pbmltYWxQb3NzaWJsZVZhbHVlICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgYWRkVG9WYWx1ZSA9IGJpdHN0cmVhbVJlYWRlci5jb3VudFplcm9zQW5kU2hpZnRVbnRpbEZpcnN0T25lQml0KFxuICAgICAgICAgICAgICAgICAgICBtYXhCaXRzVG9TaGlmdCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChhZGRUb1ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZS5taW5pbWFsUG9zc2libGVWYWx1ZSArPSBhZGRUb1ZhbHVlO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChhZGRUb1ZhbHVlIDwgbWF4Qml0c1RvU2hpZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUuaXNGaW5hbFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxhc3ROb2RlID0gY3VycmVudE5vZGU7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGdldE5leHROb2RlKCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBsYXN0Tm9kZS5taW5pbWFsUG9zc2libGVWYWx1ZSA8PSB2YWx1ZTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiAhbGFzdE5vZGUuaXNGaW5hbFZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAnV3JvbmcgcGFyc2luZyBpbiBUYWdUcmVlLmlzU21hbGxlclRoYW5PckVxdWFsc1RvOiAnICtcbiAgICAgICAgICAgICAgICAnbm90IHN1cmUgaWYgdmFsdWUgaXMgc21hbGxlciB0aGFuIGFza2VkJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoeCwgeSkge1xuICAgICAgICB2YXIgZ2V0TmV4dE5vZGUgPSBnZXRSb290VG9MZWFmSXRlcmF0b3IoeCwgeSk7XG4gICAgICAgIHZhciBjdXJyZW50Tm9kZSA9IGdldE5leHROb2RlKCk7XG4gICAgICAgIHZhciBsZWFmO1xuICAgICAgICBcbiAgICAgICAgc2V0QWxyZWFkeVJlYWRCaXRzKCk7XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAoY3VycmVudE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICghY3VycmVudE5vZGUuaXNGaW5hbFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFkZFRvVmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuY291bnRaZXJvc0FuZFNoaWZ0VW50aWxGaXJzdE9uZUJpdCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChhZGRUb1ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlLm1pbmltYWxQb3NzaWJsZVZhbHVlICs9IGFkZFRvVmFsdWU7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUuaXNGaW5hbFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGVhZiA9IGN1cnJlbnROb2RlO1xuICAgICAgICAgICAgY3VycmVudE5vZGUgPSBnZXROZXh0Tm9kZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbGVhZi5taW5pbWFsUG9zc2libGVWYWx1ZTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxldmVsc0FycmF5KCkge1xuICAgICAgICBsZXZlbHMgPSBbXTtcbiAgICAgICAgdmFyIGxldmVsV2lkdGggPSB3aWR0aDtcbiAgICAgICAgdmFyIGxldmVsSGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBcbiAgICAgICAgd2hpbGUgKGxldmVsV2lkdGggPj0gMSB8fCBsZXZlbEhlaWdodCA+PSAxKSB7XG4gICAgICAgICAgICBsZXZlbFdpZHRoID0gTWF0aC5jZWlsKGxldmVsV2lkdGgpO1xuICAgICAgICAgICAgbGV2ZWxIZWlnaHQgPSBNYXRoLmNlaWwobGV2ZWxIZWlnaHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZWxlbWVudENvdW50ID0gbGV2ZWxXaWR0aCAqIGxldmVsSGVpZ2h0O1xuICAgICAgICAgICAgbGV2ZWxzLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgIHdpZHRoOiBsZXZlbFdpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogbGV2ZWxIZWlnaHQsXG4gICAgICAgICAgICAgICAgY29udGVudDogbmV3IEFycmF5KGVsZW1lbnRDb3VudClcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV2ZWxXaWR0aCAvPSAyO1xuICAgICAgICAgICAgbGV2ZWxIZWlnaHQgLz0gMjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaW5pdE5vZGUoMCwgMCk7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldFJvb3RUb0xlYWZJdGVyYXRvcih4LCB5KSB7XG4gICAgICAgIHZhciBsZXZlbCA9IDA7XG4gICAgICAgIHZhciBwcmV2SXRlcmF0ZWROb2RlID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHQoKSB7XG4gICAgICAgICAgICBpZiAobGV2ZWwgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuSW50ZXJuYWxFcnJvckV4Y2VwdGlvbihcbiAgICAgICAgICAgICAgICAgICAgJ0l0ZXJhdGVkIHRvbyBkZWVwIGluIHRhZyB0cmVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChsZXZlbCA9PT0gbGV2ZWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGxldmVsID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIHNoaWZ0RmFjdG9yID0gbGV2ZWxzLmxlbmd0aCAtIGxldmVsIC0gMTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50WCA9IE1hdGguZmxvb3IoeCA+PiBzaGlmdEZhY3Rvcik7XG4gICAgICAgICAgICB2YXIgY3VycmVudFkgPSBNYXRoLmZsb29yKHkgPj4gc2hpZnRGYWN0b3IpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgaW5kZXhJbkxldmVsID0gbGV2ZWxzW2xldmVsXS53aWR0aCAqIGN1cnJlbnRZICsgY3VycmVudFg7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciB0cmFuc2FjdGlvbmFsT2JqZWN0ID0gbGV2ZWxzW2xldmVsXS5jb250ZW50W2luZGV4SW5MZXZlbF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh0cmFuc2FjdGlvbmFsT2JqZWN0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbmFsT2JqZWN0ID0gaW5pdE5vZGUobGV2ZWwsIGluZGV4SW5MZXZlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0cmFuc2FjdGlvbmFsT2JqZWN0LmdldFZhbHVlKFxuICAgICAgICAgICAgICAgIGJpdHN0cmVhbVJlYWRlci5hY3RpdmVUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChwcmV2SXRlcmF0ZWROb2RlICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgcHJldkl0ZXJhdGVkTm9kZS5taW5pbWFsUG9zc2libGVWYWx1ZSA+IHJlc3VsdC5taW5pbWFsUG9zc2libGVWYWx1ZSkge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlc3VsdC5taW5pbWFsUG9zc2libGVWYWx1ZSA9IHByZXZJdGVyYXRlZE5vZGUubWluaW1hbFBvc3NpYmxlVmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHByZXZJdGVyYXRlZE5vZGUgPSByZXN1bHQ7XG4gICAgICAgICAgICArK2xldmVsO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGdldE5leHQ7XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGluaXROb2RlKGxldmVsLCBpbmRleEluTGV2ZWwpIHtcbiAgICAgICAgdmFyIG9iamVjdFZhbHVlID0ge1xuICAgICAgICAgICAgbWluaW1hbFBvc3NpYmxlVmFsdWU6IDAsXG4gICAgICAgICAgICBpc0ZpbmFsVmFsdWU6IGZhbHNlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciB0cmFuc2FjdGlvbmFsT2JqZWN0ID0gdHJhbnNhY3Rpb25IZWxwZXIuY3JlYXRlVHJhbnNhY3Rpb25hbE9iamVjdChcbiAgICAgICAgICAgIG9iamVjdFZhbHVlLCBmdW5jdGlvbiBjbG9uZU5vZGVWYWx1ZShub2RlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBtaW5pbWFsUG9zc2libGVWYWx1ZTogbm9kZVZhbHVlLm1pbmltYWxQb3NzaWJsZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBpc0ZpbmFsVmFsdWU6IG5vZGVWYWx1ZS5pc0ZpbmFsVmFsdWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBsZXZlbHNbbGV2ZWxdLmNvbnRlbnRbaW5kZXhJbkxldmVsXSA9IHRyYW5zYWN0aW9uYWxPYmplY3Q7XG4gICAgICAgIHJldHVybiB0cmFuc2FjdGlvbmFsT2JqZWN0O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBpc0FscmVhZHlSZWFkQml0cygpIHtcbiAgICAgICAgdmFyIGlzQWxyZWFkeVJlYWRCaXRzVHJhbnNhY3Rpb25hbFZhbHVlID1cbiAgICAgICAgICAgIGlzQWxyZWFkeVJlYWRCaXRzVHJhbnNhY3Rpb25hbE9iamVjdC5nZXRWYWx1ZShcbiAgICAgICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuYWN0aXZlVHJhbnNhY3Rpb24pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGlzQWxyZWFkeVJlYWRCaXRzVHJhbnNhY3Rpb25hbFZhbHVlO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBzZXRBbHJlYWR5UmVhZEJpdHMoKSB7XG4gICAgICAgIGlzQWxyZWFkeVJlYWRCaXRzVHJhbnNhY3Rpb25hbE9iamVjdC5zZXRWYWx1ZShcbiAgICAgICAgICAgIGJpdHN0cmVhbVJlYWRlci5hY3RpdmVUcmFuc2FjdGlvbiwgdHJ1ZSk7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcXVhbGl0eS1sYXllcnMvanBpcC10YWctdHJlZS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGpHbG9iYWxzID0gcmVxdWlyZSgnajJrLWpwaXAtZ2xvYmFscy5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbiBKcGlwQ29kZWJsb2NrTGVuZ3RoUGFyc2VyQ2xvc3VyZSgpIHtcbiAgICAvLyBCLjEwLjcuXG4gICAgXG4gICAgdmFyIGV4YWN0TG9nMlRhYmxlID0gY3JlYXRlRXhhY3RMb2cyVGFibGUoKTtcbiAgICBcbiAgICBmdW5jdGlvbiBKcGlwQ29kZWJsb2NrTGVuZ3RoUGFyc2VyKGJpdHN0cmVhbVJlYWRlciwgdHJhbnNhY3Rpb25IZWxwZXIpIHtcbiAgICAgICAgdmFyIGxCbG9jayA9IHRyYW5zYWN0aW9uSGVscGVyLmNyZWF0ZVRyYW5zYWN0aW9uYWxPYmplY3QoXG4gICAgICAgICAgICB7IGxCbG9ja1ZhbHVlOiAzIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZUxCbG9jayhvbGRMQmxvY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsQmxvY2tWYWx1ZTogb2xkTEJsb2NrLmxCbG9ja1ZhbHVlIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGFyc2UgPSBmdW5jdGlvbiBwYXJzZShjb2RpbmdQYXNzZXMpIHtcbiAgICAgICAgICAgIHZhciBhZGRUb0xCbG9jayA9IGJpdHN0cmVhbVJlYWRlci5jb3VudE9uZXNBbmRTaGlmdFVudGlsRmlyc3RaZXJvQml0KCk7XG4gICAgICAgICAgICBpZiAoYWRkVG9MQmxvY2sgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGxCbG9ja1N0YXRlID0gbEJsb2NrLmdldFZhbHVlKGJpdHN0cmVhbVJlYWRlci5hY3RpdmVUcmFuc2FjdGlvbik7XG4gICAgICAgICAgICBsQmxvY2tTdGF0ZS5sQmxvY2tWYWx1ZSArPSBhZGRUb0xCbG9jaztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGNvZGluZ1Bhc3Nlc0xvZzIgPSBleGFjdExvZzJUYWJsZVtjb2RpbmdQYXNzZXNdO1xuICAgICAgICAgICAgaWYgKGNvZGluZ1Bhc3Nlc0xvZzIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICAgICAnVW5leHBlY3RlZCB2YWx1ZSBvZiBjb2RpbmcgcGFzc2VzICcgKyBjb2RpbmdQYXNzZXMgK1xuICAgICAgICAgICAgICAgICAgICAnLiBFeHBlY3RlZCBwb3NpdGl2ZSBpbnRlZ2VyIDw9IDE2NCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgYml0c0NvdW50ID0gbEJsb2NrU3RhdGUubEJsb2NrVmFsdWUgKyBjb2RpbmdQYXNzZXNMb2cyO1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGJpdHN0cmVhbVJlYWRlci5zaGlmdEJpdHMoYml0c0NvdW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gY3JlYXRlRXhhY3RMb2cyVGFibGUoKSB7XG4gICAgICAgIHZhciBtYXhDb2RpbmdQYXNzZXNQb3NzaWJsZSA9IDE2NDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShtYXhDb2RpbmdQYXNzZXNQb3NzaWJsZSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW5wdXRWYWx1ZUxvd2VyQm91bmQgPSAxO1xuICAgICAgICB2YXIgaW5wdXRWYWx1ZVVwcGVyQm91bmQgPSAyO1xuICAgICAgICB2YXIgbG9nMlJlc3VsdCA9IDA7XG4gICAgICAgIFxuICAgICAgICB3aGlsZSAoaW5wdXRWYWx1ZUxvd2VyQm91bmQgPD0gbWF4Q29kaW5nUGFzc2VzUG9zc2libGUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbnB1dFZhbHVlTG93ZXJCb3VuZDsgaSA8IGlucHV0VmFsdWVVcHBlckJvdW5kOyArK2kpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbaV0gPSBsb2cyUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbnB1dFZhbHVlTG93ZXJCb3VuZCAqPSAyO1xuICAgICAgICAgICAgaW5wdXRWYWx1ZVVwcGVyQm91bmQgKj0gMjtcbiAgICAgICAgICAgICsrbG9nMlJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIEpwaXBDb2RlYmxvY2tMZW5ndGhQYXJzZXI7XG59KSgpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9xdWFsaXR5LWxheWVycy9qcGlwLWNvZGVibG9jay1sZW5ndGgtcGFyc2VyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgakdsb2JhbHMgPSByZXF1aXJlKCdqMmstanBpcC1nbG9iYWxzLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID1cbiAgICBmdW5jdGlvbiBKcGlwU3ViYmFuZExlbmd0aEluUGFja2V0SGVhZGVyQ2FsY3VsYXRvcihcbiAgICAgICAgYml0c3RyZWFtUmVhZGVyLFxuICAgICAgICBudW1Db2RlYmxvY2tzWCxcbiAgICAgICAgbnVtQ29kZWJsb2Nrc1ksXG4gICAgICAgIGNvZGluZ1Bhc3Nlc051bWJlclBhcnNlcixcbiAgICAgICAgdHJhbnNhY3Rpb25IZWxwZXIsXG4gICAgICAgIGpwaXBGYWN0b3J5KSB7XG4gICAgXG4gICAgdmFyIGNvZGVibG9ja0xlbmd0aFBhcnNlcnMgPSBudWxsO1xuICAgIHZhciBpc0NvZGVibG9ja3NJbmNsdWRlZCA9IG51bGw7XG4gICAgdmFyIHBhcnNlZFF1YWxpdHlMYXllcnMgPSB0cmFuc2FjdGlvbkhlbHBlci5jcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0KFxuICAgICAgICAwLCBmdW5jdGlvbiBjbG9uZUxheWVycyhsYXllcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXllcnM7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB2YXIgaW5jbHVzaW9uVHJlZSA9IGpwaXBGYWN0b3J5LmNyZWF0ZVRhZ1RyZWUoXG4gICAgICAgIGJpdHN0cmVhbVJlYWRlciwgbnVtQ29kZWJsb2Nrc1gsIG51bUNvZGVibG9ja3NZKTtcbiAgICBcbiAgICB2YXIgemVyb0JpdFBsYW5lc1RyZWUgPSBqcGlwRmFjdG9yeS5jcmVhdGVUYWdUcmVlKFxuICAgICAgICBiaXRzdHJlYW1SZWFkZXIsIG51bUNvZGVibG9ja3NYLCBudW1Db2RlYmxvY2tzWSk7XG4gICAgXG4gICAgdGhpcy5jYWxjdWxhdGVTdWJiYW5kTGVuZ3RoID0gZnVuY3Rpb24gY2FsY3VhbHRlU3ViYmFuZExlbmd0aChxdWFsaXR5TGF5ZXIpIHtcbiAgICAgICAgZW5zdXJlUXVhbGl0eUxheWVyTm90UGFyc2VkWWV0KHF1YWxpdHlMYXllcik7XG4gICAgICAgIFxuICAgICAgICBsYXp5SW5pdEFycmF5cygpO1xuICAgICAgICBcbiAgICAgICAgaW5jbHVzaW9uVHJlZS5zZXRNaW5pbWFsVmFsdWVJZk5vdFJlYWRCaXRzKHF1YWxpdHlMYXllcik7XG4gICAgICAgIFxuICAgICAgICB2YXIgYWNjdW11bGF0ZWRCb2R5TGVuZ3RoQnl0ZXMgPSAwO1xuICAgICAgICB2YXIgY29kZWJsb2NrSW5kZXggPSAwO1xuICAgICAgICB2YXIgY29kZWJsb2NrTGVuZ3RoQnlJbmRleCA9IG5ldyBBcnJheShudW1Db2RlYmxvY2tzWCAqIG51bUNvZGVibG9ja3NZKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgbnVtQ29kZWJsb2Nrc1k7ICsreSkge1xuICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBudW1Db2RlYmxvY2tzWDsgKyt4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvZGVibG9ja0JvZHlMZW5ndGggPSBnZXROZXh0Q29kZWJsb2NrTGVuZ3RoKHgsIHksIHF1YWxpdHlMYXllcik7XG4gICAgICAgICAgICAgICAgaWYgKGNvZGVibG9ja0JvZHlMZW5ndGggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvZGVibG9ja0xlbmd0aEJ5SW5kZXhbY29kZWJsb2NrSW5kZXgrK10gPSBjb2RlYmxvY2tCb2R5TGVuZ3RoO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFjY3VtdWxhdGVkQm9keUxlbmd0aEJ5dGVzICs9XG4gICAgICAgICAgICAgICAgICAgIGNvZGVibG9ja0JvZHlMZW5ndGguY29kZWJsb2NrQm9keUxlbmd0aEJ5dGVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBwYXJzZWRRdWFsaXR5TGF5ZXJzLnNldFZhbHVlKFxuICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLmFjdGl2ZVRyYW5zYWN0aW9uLCBxdWFsaXR5TGF5ZXIgKyAxKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb2RlYmxvY2tCb2R5TGVuZ3RoQnlJbmRleDogY29kZWJsb2NrTGVuZ3RoQnlJbmRleCxcbiAgICAgICAgICAgIG92ZXJhbGxCb2R5TGVuZ3RoQnl0ZXM6IGFjY3VtdWxhdGVkQm9keUxlbmd0aEJ5dGVzXG4gICAgICAgICAgICB9O1xuICAgIH07XG4gICAgXG4gICAgZnVuY3Rpb24gZW5zdXJlUXVhbGl0eUxheWVyTm90UGFyc2VkWWV0KHF1YWxpdHlMYXllcikge1xuICAgICAgICB2YXIgcGFyc2VkUXVhbGl0eUxheWVyc1ZhbHVlID0gcGFyc2VkUXVhbGl0eUxheWVycy5nZXRWYWx1ZShcbiAgICAgICAgICAgIGJpdHN0cmVhbVJlYWRlci5hY3RpdmVUcmFuc2FjdGlvbik7XG4gICAgICAgIFxuICAgICAgICBpZiAocGFyc2VkUXVhbGl0eUxheWVyc1ZhbHVlID49IHF1YWxpdHlMYXllciArIDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdVbmV4cGVjdGVkIHF1YWxpdHkgbGF5ZXIgdG8gcGFyc2UnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBsYXp5SW5pdEFycmF5cygpIHtcbiAgICAgICAgaWYgKGNvZGVibG9ja0xlbmd0aFBhcnNlcnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29kZWJsb2NrTGVuZ3RoUGFyc2VycyA9IG5ldyBBcnJheShudW1Db2RlYmxvY2tzWCk7XG4gICAgICAgIGlzQ29kZWJsb2Nrc0luY2x1ZGVkID0gbmV3IEFycmF5KG51bUNvZGVibG9ja3NYKTtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgbnVtQ29kZWJsb2Nrc1g7ICsreCkge1xuICAgICAgICAgICAgY29kZWJsb2NrTGVuZ3RoUGFyc2Vyc1t4XSA9IG5ldyBBcnJheShudW1Db2RlYmxvY2tzWSk7XG4gICAgICAgICAgICBpc0NvZGVibG9ja3NJbmNsdWRlZFt4XSA9IG5ldyBBcnJheShudW1Db2RlYmxvY2tzWSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgbnVtQ29kZWJsb2Nrc1k7ICsreSkge1xuICAgICAgICAgICAgICAgIGNvZGVibG9ja0xlbmd0aFBhcnNlcnNbeF1beV0gPVxuICAgICAgICAgICAgICAgICAgICBqcGlwRmFjdG9yeS5jcmVhdGVDb2RlYmxvY2tMZW5ndGhQYXJzZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIsIHRyYW5zYWN0aW9uSGVscGVyKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaXNDb2RlYmxvY2tzSW5jbHVkZWRbeF1beV0gPSB0cmFuc2FjdGlvbkhlbHBlci5jcmVhdGVUcmFuc2FjdGlvbmFsT2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICB7IGlzSW5jbHVkZWQ6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lSXNJbmNsdWRlZChvbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGlzSW5jbHVkZWQ6IG9sZC5pc0luY2x1ZGVkIH07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGZ1bmN0aW9uIGdldE5leHRDb2RlYmxvY2tMZW5ndGgoeCwgeSwgcXVhbGl0eUxheWVyKSB7XG4gICAgICAgIHZhciBpc0NvZGVibG9ja0FscmVhZHlJbmNsdWRlZCA9IGlzQ29kZWJsb2Nrc0luY2x1ZGVkW3hdW3ldLmdldFZhbHVlKFxuICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLmFjdGl2ZVRyYW5zYWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHZhciBpc0NvZGVibG9ja0luY2x1ZGVkTm93O1xuICAgICAgICBpZiAoaXNDb2RlYmxvY2tBbHJlYWR5SW5jbHVkZWQuaXNJbmNsdWRlZCkge1xuICAgICAgICAgICAgaXNDb2RlYmxvY2tJbmNsdWRlZE5vdyA9IGJpdHN0cmVhbVJlYWRlci5zaGlmdEJpdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXNDb2RlYmxvY2tJbmNsdWRlZE5vdyA9IGluY2x1c2lvblRyZWUuaXNTbWFsbGVyVGhhbk9yRXF1YWxzVG8oXG4gICAgICAgICAgICAgICAgeCwgeSwgcXVhbGl0eUxheWVyKTtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIGlmIChpc0NvZGVibG9ja0luY2x1ZGVkTm93ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmICghaXNDb2RlYmxvY2tJbmNsdWRlZE5vdykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tCb2R5TGVuZ3RoQnl0ZXM6IDAsXG4gICAgICAgICAgICAgICAgY29kaW5nUGFzc2VzOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHplcm9CaXRQbGFuZXMgPSBudWxsO1xuICAgICAgICBpZiAoIWlzQ29kZWJsb2NrQWxyZWFkeUluY2x1ZGVkLmlzSW5jbHVkZWQpIHtcbiAgICAgICAgICAgIHplcm9CaXRQbGFuZXMgPSB6ZXJvQml0UGxhbmVzVHJlZS5nZXRWYWx1ZSh4LCB5KTtcbiAgICAgICAgICAgIGlmICh6ZXJvQml0UGxhbmVzID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBjb2RpbmdQYXNzZXMgPSBjb2RpbmdQYXNzZXNOdW1iZXJQYXJzZXIucGFyc2UoYml0c3RyZWFtUmVhZGVyKTtcbiAgICAgICAgaWYgKGNvZGluZ1Bhc3NlcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsZW5ndGhQYXJzZXIgPSBjb2RlYmxvY2tMZW5ndGhQYXJzZXJzW3hdW3ldO1xuICAgICAgICB2YXIgYm9keUxlbmd0aEJ5dGVzID0gbGVuZ3RoUGFyc2VyLnBhcnNlKGNvZGluZ1Bhc3Nlcyk7XG4gICAgICAgIFxuICAgICAgICBpZiAoYm9keUxlbmd0aEJ5dGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaXNDb2RlYmxvY2tBbHJlYWR5SW5jbHVkZWQuaXNJbmNsdWRlZCA9IHRydWU7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgY29kZWJsb2NrQm9keUxlbmd0aEJ5dGVzOiBib2R5TGVuZ3RoQnl0ZXMsXG4gICAgICAgICAgICBjb2RpbmdQYXNzZXM6IGNvZGluZ1Bhc3Nlc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGlmICh6ZXJvQml0UGxhbmVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQuemVyb0JpdFBsYW5lcyA9IHplcm9CaXRQbGFuZXM7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcXVhbGl0eS1sYXllcnMvanBpcC1zdWJiYW5kLWxlbmd0aC1pbi1wYWNrZXQtaGVhZGVyLWNhbGN1bGF0b3IuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwUGFja2V0TGVuZ3RoQ2FsY3VsYXRvcihcbiAgICB0aWxlU3RydWN0dXJlLFxuICAgIGNvbXBvbmVudFN0cnVjdHVyZSxcbiAgICBkYXRhYmluLFxuICAgIHN0YXJ0T2Zmc2V0SW5EYXRhYmluLFxuICAgIHByZWNpbmN0LFxuICAgIGpwaXBGYWN0b3J5KSB7XG4gICAgXG4gICAgdmFyIGNhbGN1bGF0ZWRMZW5ndGhzID0gW107XG4gICAgXG4gICAgdmFyIGJpdHN0cmVhbVJlYWRlciA9IGpwaXBGYWN0b3J5LmNyZWF0ZUJpdHN0cmVhbVJlYWRlcihkYXRhYmluKTtcbiAgICBcbiAgICB2YXIgbnVtQ29kZWJsb2Nrc1ggPVxuICAgICAgICBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtQ29kZWJsb2Nrc1hJblByZWNpbmN0KHByZWNpbmN0KTtcbiAgICB2YXIgbnVtQ29kZWJsb2Nrc1kgPVxuICAgICAgICBjb21wb25lbnRTdHJ1Y3R1cmUuZ2V0TnVtQ29kZWJsb2Nrc1lJblByZWNpbmN0KHByZWNpbmN0KTtcbiAgICAgICAgXG4gICAgdmFyIG51bVF1YWxpdHlMYXllcnNJblRpbGUgPSB0aWxlU3RydWN0dXJlLmdldE51bVF1YWxpdHlMYXllcnMoKTtcbiAgICB2YXIgaXNQYWNrZXRIZWFkZXJOZWFyRGF0YSA9IHRpbGVTdHJ1Y3R1cmUuZ2V0SXNQYWNrZXRIZWFkZXJOZWFyRGF0YSgpO1xuICAgIHZhciBpc1N0YXJ0T2ZQYWNrZXRNYXJrZXJBbGxvd2VkID0gdGlsZVN0cnVjdHVyZS5nZXRJc1N0YXJ0T2ZQYWNrZXRNYXJrZXJBbGxvd2VkKCk7XG4gICAgdmFyIGlzRW5kUGFja2V0SGVhZGVyTWFya2VyQWxsb3dlZCA9XG4gICAgICAgIHRpbGVTdHJ1Y3R1cmUuZ2V0SXNFbmRQYWNrZXRIZWFkZXJNYXJrZXJBbGxvd2VkKCk7XG4gICAgXG4gICAgdmFyIHN1YmJhbmRQYXJzZXJzID0gaW5pdFN1YmJhbmRQYXJzZXJzKCk7XG4gICAgXG4gICAgdGhpcy5jYWxjdWxhdGVFbmRPZmZzZXRPZkxhc3RGdWxsUGFja2V0ID1cbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlRnVsbFBhY2tldHNBdmFpbGFibGVPZmZzZXRzKHF1YWxpdHkpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBpc0FsbG93ZWRGdWxsUXVhbGl0eSA9XG4gICAgICAgICAgICBxdWFsaXR5ID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHF1YWxpdHkgPj0gbnVtUXVhbGl0eUxheWVyc0luVGlsZTtcbiAgICAgICAgXG4gICAgICAgIHZhciBudW1RdWFsaXR5TGF5ZXJzVG9QYXJzZTtcbiAgICAgICAgaWYgKCFpc0FsbG93ZWRGdWxsUXVhbGl0eSkge1xuICAgICAgICAgICAgbnVtUXVhbGl0eUxheWVyc1RvUGFyc2UgPSBxdWFsaXR5O1xuICAgICAgICB9IGVsc2UgaWYgKCFkYXRhYmluLmlzQWxsRGF0YWJpbkxvYWRlZCgpKSB7XG4gICAgICAgICAgICBudW1RdWFsaXR5TGF5ZXJzVG9QYXJzZSA9IG51bVF1YWxpdHlMYXllcnNJblRpbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZW5kT2Zmc2V0ID0gZGF0YWJpbi5nZXREYXRhYmluTGVuZ3RoSWZLbm93bigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVuZE9mZnNldDogZW5kT2Zmc2V0LFxuICAgICAgICAgICAgICAgIG51bVF1YWxpdHlMYXllcnM6IG51bVF1YWxpdHlMYXllcnNJblRpbGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjaGVja1N1cHBvcnRlZFN0cnVjdHVyZSgpO1xuICAgICAgICBcbiAgICAgICAgdHJ5VmFsaWRhdGVQYWNrZXRzKG51bVF1YWxpdHlMYXllcnNUb1BhcnNlKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGdldEZ1bGxRdWFsaXR5TGF5ZXJzRW5kT2Zmc2V0KG51bVF1YWxpdHlMYXllcnNUb1BhcnNlKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFBhY2tldE9mZnNldHNCeUNvZGVibG9ja0luZGV4ID0gZnVuY3Rpb24gZ2V0UGFja2V0T2Zmc2V0c0J5Q29kZWJsb2NrSW5kZXgoXG4gICAgICAgIHF1YWxpdHlMYXllcikge1xuICAgICAgICBcbiAgICAgICAgY2hlY2tTdXBwb3J0ZWRTdHJ1Y3R1cmUoKTtcbiAgICAgICAgdHJ5VmFsaWRhdGVQYWNrZXRzKHF1YWxpdHlMYXllciArIDEpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNhbGN1bGF0ZWRMZW5ndGhzLmxlbmd0aCA8PSBxdWFsaXR5TGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY2FsY3VsYXRlZExlbmd0aHNbcXVhbGl0eUxheWVyXTtcbiAgICB9O1xuICAgIFxuICAgIGZ1bmN0aW9uIHRyeVZhbGlkYXRlUGFja2V0cyhxdWFsaXR5TGF5ZXJzKSB7XG4gICAgICAgIHdoaWxlIChjYWxjdWxhdGVkTGVuZ3Rocy5sZW5ndGggPCBxdWFsaXR5TGF5ZXJzKSB7XG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuc3RhcnROZXdUcmFuc2FjdGlvbigpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgbmV4dFBhY2tldCA9IHRyeUNhbGN1bGF0ZU5leHRQYWNrZXRMZW5ndGgoXG4gICAgICAgICAgICAgICAgY2FsY3VsYXRlZExlbmd0aHMubGVuZ3RoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG5leHRQYWNrZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuYWN0aXZlVHJhbnNhY3Rpb24uYWJvcnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNhbGN1bGF0ZWRMZW5ndGhzLnB1c2gobmV4dFBhY2tldCk7XG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuYWN0aXZlVHJhbnNhY3Rpb24uY29tbWl0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gdHJ5Q2FsY3VsYXRlTmV4dFBhY2tldExlbmd0aChxdWFsaXR5TGF5ZXIpIHtcbiAgICAgICAgdmFyIGhlYWRlclN0YXJ0T2Zmc2V0O1xuICAgICAgICBpZiAocXVhbGl0eUxheWVyID4gMCkge1xuICAgICAgICAgICAgdmFyIGxhc3QgPSBjYWxjdWxhdGVkTGVuZ3Roc1txdWFsaXR5TGF5ZXIgLSAxXTtcbiAgICAgICAgICAgIGhlYWRlclN0YXJ0T2Zmc2V0ID1cbiAgICAgICAgICAgICAgICBsYXN0LmhlYWRlclN0YXJ0T2Zmc2V0ICtcbiAgICAgICAgICAgICAgICBsYXN0LmhlYWRlckxlbmd0aCArXG4gICAgICAgICAgICAgICAgbGFzdC5vdmVyYWxsQm9keUxlbmd0aEJ5dGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZGVyU3RhcnRPZmZzZXQgPSBzdGFydE9mZnNldEluRGF0YWJpbjtcbiAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIGJpdHN0cmVhbVJlYWRlci5kYXRhYmluT2Zmc2V0ID0gaGVhZGVyU3RhcnRPZmZzZXQ7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNQYWNrZXRIZWFkZXJOZWFyRGF0YSAmJiBpc1N0YXJ0T2ZQYWNrZXRNYXJrZXJBbGxvd2VkKSB7XG4gICAgICAgICAgICB2YXIgaXNNYXJrZXIgPSBpc01hcmtlckhlcmUoMHg5MSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChpc01hcmtlciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01hcmtlcikge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydE9mUGFja2V0U2VnbWVudExlbmd0aCA9IDY7XG4gICAgICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLmRhdGFiaW5PZmZzZXQgKz0gc3RhcnRPZlBhY2tldFNlZ21lbnRMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBpc1BhY2tldEV4aXN0SW5RdWFsaXR5TGF5ZXIgPSBiaXRzdHJlYW1SZWFkZXIuc2hpZnRCaXQoKTtcbiAgICAgICAgaWYgKGlzUGFja2V0RXhpc3RJblF1YWxpdHlMYXllciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmICghaXNQYWNrZXRFeGlzdEluUXVhbGl0eUxheWVyKSB7XG4gICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIuc2hpZnRSZW1haW5pbmdCaXRzSW5CeXRlKCk7XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJTdGFydE9mZnNldDogaGVhZGVyU3RhcnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGVhZGVyTGVuZ3RoOiAxLFxuICAgICAgICAgICAgICAgIGNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4OiBbXSxcbiAgICAgICAgICAgICAgICBvdmVyYWxsQm9keUxlbmd0aEJ5dGVzOiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGJvZHlMZW5ndGggPSBhY3R1YWxDYWxjdWxhdGVQYWNrZXRMZW5ndGhBZnRlclplcm9MZW5ndGhCaXQoXG4gICAgICAgICAgICBxdWFsaXR5TGF5ZXIpO1xuICAgICAgICBpZiAoYm9keUxlbmd0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBoZWFkZXJFbmRPZmZzZXQgPSBiaXRzdHJlYW1SZWFkZXIuZGF0YWJpbk9mZnNldDtcbiAgICAgICAgYm9keUxlbmd0aC5oZWFkZXJMZW5ndGggPSBoZWFkZXJFbmRPZmZzZXQgLSBoZWFkZXJTdGFydE9mZnNldDtcblxuICAgICAgICBib2R5TGVuZ3RoLmhlYWRlclN0YXJ0T2Zmc2V0ID0gaGVhZGVyU3RhcnRPZmZzZXQ7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYm9keUxlbmd0aDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gYWN0dWFsQ2FsY3VsYXRlUGFja2V0TGVuZ3RoQWZ0ZXJaZXJvTGVuZ3RoQml0KHF1YWxpdHlMYXllcikge1xuICAgICAgICB2YXIgYm9keUJ5dGVzID0gMDtcbiAgICAgICAgdmFyIGNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4ID0gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIHN1YmJhbmQgPSAwOyBzdWJiYW5kIDwgc3ViYmFuZFBhcnNlcnMubGVuZ3RoOyArK3N1YmJhbmQpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZXIgPSBzdWJiYW5kUGFyc2Vyc1tzdWJiYW5kXTtcbiAgICAgICAgICAgIHZhciBzdWJiYW5kQm9keUxlbmd0aCA9IHBhcnNlci5jYWxjdWxhdGVTdWJiYW5kTGVuZ3RoKHF1YWxpdHlMYXllcik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChzdWJiYW5kQm9keUxlbmd0aCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoY29kZWJsb2NrQm9keUxlbmd0aEJ5SW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tCb2R5TGVuZ3RoQnlJbmRleCA9XG4gICAgICAgICAgICAgICAgICAgIHN1YmJhbmRCb2R5TGVuZ3RoLmNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2RlYmxvY2tCb2R5TGVuZ3RoQnlJbmRleCA9IGNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4LmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgc3ViYmFuZEJvZHlMZW5ndGguY29kZWJsb2NrQm9keUxlbmd0aEJ5SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBib2R5Qnl0ZXMgKz0gc3ViYmFuZEJvZHlMZW5ndGgub3ZlcmFsbEJvZHlMZW5ndGhCeXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGJpdHN0cmVhbVJlYWRlci5zaGlmdFJlbWFpbmluZ0JpdHNJbkJ5dGUoKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChpc0VuZFBhY2tldEhlYWRlck1hcmtlckFsbG93ZWQpIHtcbiAgICAgICAgICAgIHZhciBpc01hcmtlciA9IGlzTWFya2VySGVyZSgweDkyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGlzTWFya2VyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzTWFya2VyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVuZFBhY2tldEhlYWRlck1hcmtlckxlbmd0aCA9IDI7XG4gICAgICAgICAgICAgICAgYml0c3RyZWFtUmVhZGVyLmRhdGFiaW5PZmZzZXQgKz0gZW5kUGFja2V0SGVhZGVyTWFya2VyTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29kZWJsb2NrQm9keUxlbmd0aEJ5SW5kZXg6IGNvZGVibG9ja0JvZHlMZW5ndGhCeUluZGV4LFxuICAgICAgICAgICAgb3ZlcmFsbEJvZHlMZW5ndGhCeXRlczogYm9keUJ5dGVzXG4gICAgICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBnZXRGdWxsUXVhbGl0eUxheWVyc0VuZE9mZnNldChxdWFsaXR5KSB7XG4gICAgICAgIHZhciBudW1QYXJzZWRRdWFsaXR5TGF5ZXIgPSBNYXRoLm1pbihcbiAgICAgICAgICAgIHF1YWxpdHksIGNhbGN1bGF0ZWRMZW5ndGhzLmxlbmd0aCk7XG4gICAgICAgIFxuICAgICAgICBpZiAobnVtUGFyc2VkUXVhbGl0eUxheWVyID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGVuZE9mZnNldDogc3RhcnRPZmZzZXRJbkRhdGFiaW4sXG4gICAgICAgICAgICAgICAgbnVtUXVhbGl0eUxheWVyczogMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsYXN0UGFja2V0ID0gY2FsY3VsYXRlZExlbmd0aHNbbnVtUGFyc2VkUXVhbGl0eUxheWVyIC0gMV07XG4gICAgICAgIHZhciBlbmRPZmZzZXQgPVxuICAgICAgICAgICAgbGFzdFBhY2tldC5oZWFkZXJTdGFydE9mZnNldCArXG4gICAgICAgICAgICBsYXN0UGFja2V0LmhlYWRlckxlbmd0aCArXG4gICAgICAgICAgICBsYXN0UGFja2V0Lm92ZXJhbGxCb2R5TGVuZ3RoQnl0ZXM7XG4gICAgICAgIFxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZW5kT2Zmc2V0OiBlbmRPZmZzZXQsXG4gICAgICAgICAgICBudW1RdWFsaXR5TGF5ZXJzOiBudW1QYXJzZWRRdWFsaXR5TGF5ZXJcbiAgICAgICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBpbml0U3ViYmFuZFBhcnNlcnMoKSB7XG4gICAgICAgIHZhciBudW1TdWJiYW5kcyA9IHByZWNpbmN0LnJlc29sdXRpb25MZXZlbCA9PT0gMCA/IDEgOiAzO1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVN1YmJhbmRzOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBudW1Db2RlYmxvY2tzWEluU3ViYmFuZDtcbiAgICAgICAgICAgIHZhciBudW1Db2RlYmxvY2tzWUluU3ViYmFuZDtcbiAgICAgICAgICAgIGlmIChwcmVjaW5jdC5yZXNvbHV0aW9uTGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgICBudW1Db2RlYmxvY2tzWEluU3ViYmFuZCA9IG51bUNvZGVibG9ja3NYO1xuICAgICAgICAgICAgICAgIG51bUNvZGVibG9ja3NZSW5TdWJiYW5kID0gbnVtQ29kZWJsb2Nrc1k7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRyZWF0IHRoZSBlZGdlIGNhc2Ugb2Ygc2luZ2xlIHJlZHVuZGFudCBwaXhlbHMgY29sdW1uXG4gICAgICAgICAgICAgICAgLy8gKEluIG90aGVyIGNhc2VzLCBudW1Db2RlYmxvY2tzWCBpcyBmdWxsIGR1cGxpY2F0aW9uIG9mIDIuXG4gICAgICAgICAgICAgICAgLy8gU2VlIEpwaXBDb21wb25lbnRTdHJ1Y3R1cmUgaW1wbGVtZW50YXRpb24pLlxuICAgICAgICAgICAgICAgIGlmIChpID09PSAxKSB7IC8vIExIXG4gICAgICAgICAgICAgICAgICAgIG51bUNvZGVibG9ja3NYSW5TdWJiYW5kID0gTWF0aC5jZWlsKG51bUNvZGVibG9ja3NYIC8gMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gSEwgb3IgSEhcbiAgICAgICAgICAgICAgICAgICAgbnVtQ29kZWJsb2Nrc1hJblN1YmJhbmQgPSBNYXRoLmZsb29yKG51bUNvZGVibG9ja3NYIC8gMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFRyZWF0IHRoZSBlZGdlIGNhc2Ugb2Ygc2luZ2xlIHJlZHVuZGFudCBwaXhlbHMgcm93XG4gICAgICAgICAgICAgICAgLy8gKEluIG90aGVyIGNhc2VzLCBudW1Db2RlYmxvY2tzWSBpcyBmdWxsIGR1cGxpY2F0aW9uIG9mIDIuXG4gICAgICAgICAgICAgICAgLy8gU2VlIEpwaXBDb21wb25lbnRTdHJ1Y3R1cmUgaW1wbGVtZW50YXRpb24pLlxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7IC8vIEhMXG4gICAgICAgICAgICAgICAgICAgIG51bUNvZGVibG9ja3NZSW5TdWJiYW5kID0gTWF0aC5jZWlsKG51bUNvZGVibG9ja3NZIC8gMik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHsgLy8gTEggb3IgSEhcbiAgICAgICAgICAgICAgICAgICAgbnVtQ29kZWJsb2Nrc1lJblN1YmJhbmQgPSBNYXRoLmZsb29yKG51bUNvZGVibG9ja3NZIC8gMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobnVtQ29kZWJsb2Nrc1hJblN1YmJhbmQgPT09IDAgfHwgbnVtQ29kZWJsb2Nrc1lJblN1YmJhbmQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzdWx0LnB1c2goanBpcEZhY3RvcnkuY3JlYXRlU3ViYmFuZExlbmd0aEluUGFja2V0SGVhZGVyQ2FsY3VsYXRvcihcbiAgICAgICAgICAgICAgICBiaXRzdHJlYW1SZWFkZXIsXG4gICAgICAgICAgICAgICAgbnVtQ29kZWJsb2Nrc1hJblN1YmJhbmQsXG4gICAgICAgICAgICAgICAgbnVtQ29kZWJsb2Nrc1lJblN1YmJhbmQpKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgXG4gICAgZnVuY3Rpb24gaXNNYXJrZXJIZXJlKG1hcmtlclNlY29uZEJ5dGUpIHtcbiAgICAgICAgdmFyIHBvc3NpYmxlTWFya2VyID0gbmV3IEFycmF5KDIpO1xuICAgICAgICB2YXIgYnl0ZXNDb3BpZWQgPSBkYXRhYmluLmNvcHlCeXRlcyhcbiAgICAgICAgICAgIHBvc3NpYmxlTWFya2VyLFxuICAgICAgICAgICAgLypyZXN1bHRTdGFydE9mZnNldD0qLzAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZGF0YWJpblN0YXJ0T2Zmc2V0OiBiaXRzdHJlYW1SZWFkZXIuZGF0YWJpbk9mZnNldCxcbiAgICAgICAgICAgICAgICBtYXhMZW5ndGhUb0NvcHk6IDIsXG4gICAgICAgICAgICAgICAgZm9yY2VDb3B5QWxsUmFuZ2U6IGZhbHNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHN3aXRjaCAoYnl0ZXNDb3BpZWQpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICB2YXIgaXNNYXJrZXIgPVxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU1hcmtlclswXSA9PT0gMHhGRiAmJlxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZU1hcmtlclsxXSA9PT0gbWFya2VyU2Vjb25kQnl0ZTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXJrZXI7XG5cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAocG9zc2libGVNYXJrZXJbMF0gPT09IDB4RkYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBjaGVja1N1cHBvcnRlZFN0cnVjdHVyZSgpIHtcbiAgICAgICAgaWYgKCFpc1BhY2tldEhlYWRlck5lYXJEYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgakdsb2JhbHMuanBpcEV4Y2VwdGlvbnMuVW5zdXBwb3J0ZWRGZWF0dXJlRXhjZXB0aW9uKFxuICAgICAgICAgICAgICAgICdQUE0gb3IgUFBUJywgJ0EuNy40IGFuZCBBLjcuNScpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcXVhbGl0eS1sYXllcnMvanBpcC1wYWNrZXQtbGVuZ3RoLWNhbGN1bGF0b3IuanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBKcGlwUXVhbGl0eUxheWVyc0NhY2hlKFxuICAgIGNvZGVzdHJlYW1TdHJ1Y3R1cmUsIGpwaXBGYWN0b3J5KSB7XG4gICAgXG4gICAgdmFyIENBQ0hFX0tFWSA9ICdwYWNrZXRMZW5ndGhDYWxjdWxhdG9yJztcbiAgICBcbiAgICB0aGlzLmdldFBhY2tldE9mZnNldHNCeUNvZGVibG9ja0luZGV4ID1cbiAgICAgICAgZnVuY3Rpb24gZ2V0UGFja2V0T2Zmc2V0c0J5Q29kZWJsb2NrSW5kZXgoXG4gICAgICAgICAgICBwcmVjaW5jdERhdGFiaW4sIHF1YWxpdHlMYXllciwgcHJlY2luY3RQb3NpdGlvbikge1xuICAgICAgICBcbiAgICAgICAgdmFyIHBhY2tldExlbmd0aENhbGN1bGF0b3IgPSBnZXRQYWNrZXRQYXJzZXIoXG4gICAgICAgICAgICBwcmVjaW5jdERhdGFiaW4sIHByZWNpbmN0UG9zaXRpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciByZXN1bHQgPSBwYWNrZXRMZW5ndGhDYWxjdWxhdG9yLmdldFBhY2tldE9mZnNldHNCeUNvZGVibG9ja0luZGV4KFxuICAgICAgICAgICAgcXVhbGl0eUxheWVyKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmdldFF1YWxpdHlMYXllck9mZnNldCA9IGZ1bmN0aW9uIGdldFF1YWxpdHlMYXllck9mZnNldChcbiAgICAgICAgcHJlY2luY3REYXRhYmluLCBxdWFsaXR5LCBwcmVjaW5jdFBvc2l0aW9uKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgbG9hZGVkUmFuZ2VzID0gcHJlY2luY3REYXRhYmluLmdldEV4aXN0aW5nUmFuZ2VzKCk7XG4gICAgICAgIHZhciBlbmRPZmZzZXRMb2FkZWQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgcGFja2V0TGVuZ3RoQ2FsY3VsYXRvciA9IGdldFBhY2tldFBhcnNlcihcbiAgICAgICAgICAgIHByZWNpbmN0RGF0YWJpbiwgcHJlY2luY3RQb3NpdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgaWYgKGxvYWRlZFJhbmdlcy5sZW5ndGggPCAxIHx8IGxvYWRlZFJhbmdlc1swXS5zdGFydCA+IDApIHtcbiAgICAgICAgICAgIGVuZE9mZnNldExvYWRlZCA9IDA7XG4gICAgICAgICAgICBxdWFsaXR5ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuZE9mZnNldExvYWRlZCA9IGxvYWRlZFJhbmdlc1swXS5zdGFydCArIGxvYWRlZFJhbmdlc1swXS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBsYXllcnNJblByZWNpbmN0ID1cbiAgICAgICAgICAgIHBhY2tldExlbmd0aENhbGN1bGF0b3IuY2FsY3VsYXRlRW5kT2Zmc2V0T2ZMYXN0RnVsbFBhY2tldChcbiAgICAgICAgICAgICAgICBxdWFsaXR5KTtcbiAgICAgICAgXG4gICAgICAgIHdoaWxlIChlbmRPZmZzZXRMb2FkZWQgPCBsYXllcnNJblByZWNpbmN0LmVuZE9mZnNldCkge1xuICAgICAgICAgICAgdmFyIHJlZHVjZWRMYXllcnNUb1NlYXJjaCA9IGxheWVyc0luUHJlY2luY3QubnVtUXVhbGl0eUxheWVycyAtIDE7XG4gICAgICAgICAgICBsYXllcnNJblByZWNpbmN0ID0gcGFja2V0TGVuZ3RoQ2FsY3VsYXRvclxuICAgICAgICAgICAgICAgIC5jYWxjdWxhdGVFbmRPZmZzZXRPZkxhc3RGdWxsUGFja2V0KHJlZHVjZWRMYXllcnNUb1NlYXJjaCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBsYXllcnNJblByZWNpbmN0O1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRQYWNrZXRQYXJzZXIocHJlY2luY3REYXRhYmluLCBwcmVjaW5jdFBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBwYWNrZXRMZW5ndGhDYWxjdWxhdG9yQ29udGFpbmVyID1cbiAgICAgICAgICAgIHByZWNpbmN0RGF0YWJpbi5nZXRDYWNoZWREYXRhKENBQ0hFX0tFWSk7XG4gICAgICAgIFxuICAgICAgICBpZiAocGFja2V0TGVuZ3RoQ2FsY3VsYXRvckNvbnRhaW5lci5jYWxjdWxhdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBwYWNrZXRMZW5ndGhDYWxjdWxhdG9yQ29udGFpbmVyLmNhbGN1bGF0b3I7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChwcmVjaW5jdFBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBqR2xvYmFscy5qcGlwRXhjZXB0aW9ucy5JbnRlcm5hbEVycm9yRXhjZXB0aW9uKCdwcmVjaW5jdFBvc2l0aW9uICcgK1xuICAgICAgICAgICAgICAgICdzaG91bGQgYmUgZ2l2ZW4gb24gdGhlIGZpcnN0IHRpbWUgb2YgdXNpbmcgUXVhbGl0eUxheWVyc0NhY2hlICcgK1xuICAgICAgICAgICAgICAgICdvbiB0aGlzIHByZWNpbmN0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciB0aWxlU3RydWN0dXJlID0gY29kZXN0cmVhbVN0cnVjdHVyZS5nZXRUaWxlU3RydWN0dXJlKFxuICAgICAgICAgICAgcHJlY2luY3RQb3NpdGlvbi50aWxlSW5kZXgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIGNvbXBvbmVudFN0cnVjdHVyZSA9IHRpbGVTdHJ1Y3R1cmUuZ2V0Q29tcG9uZW50U3RydWN0dXJlKFxuICAgICAgICAgICAgcHJlY2luY3RQb3NpdGlvbi5jb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgIHBhY2tldExlbmd0aENhbGN1bGF0b3JDb250YWluZXIuY2FsY3VsYXRvciA9XG4gICAgICAgICAgICBqcGlwRmFjdG9yeS5jcmVhdGVQYWNrZXRMZW5ndGhDYWxjdWxhdG9yKFxuICAgICAgICAgICAgICAgIHRpbGVTdHJ1Y3R1cmUsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50U3RydWN0dXJlLFxuICAgICAgICAgICAgICAgIHByZWNpbmN0RGF0YWJpbixcbiAgICAgICAgICAgICAgICAvKnN0YXJ0T2Zmc2V0SW5EYXRhYmluPSovMCxcbiAgICAgICAgICAgICAgICBwcmVjaW5jdFBvc2l0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBwYWNrZXRMZW5ndGhDYWxjdWxhdG9yQ29udGFpbmVyLmNhbGN1bGF0b3I7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvcXVhbGl0eS1sYXllcnMvanBpcC1xdWFsaXR5LWxheWVycy1jYWNoZS5qcyIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBQZGZqc0pweERlY29kZXJMZWdhY3k7XG5cbnZhciBqR2xvYmFscyA9IHJlcXVpcmUoJ2oyay1qcGlwLWdsb2JhbHMuanMnKTtcblxuaW1wb3J0IHsgSnB4SW1hZ2UgfSBmcm9tICdqcHguanMnO1xuXG5mdW5jdGlvbiBQZGZqc0pweERlY29kZXJMZWdhY3koKSB7XG4gICAgdGhpcy5faW1hZ2UgPSBuZXcgSnB4SW1hZ2UoKTtcbn1cblxuUGRmanNKcHhEZWNvZGVyTGVnYWN5LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVnaW9uVG9QYXJzZSA9IHtcbiAgICAgICAgICAgIGxlZnQgIDogZGF0YS5vZmZzZXRJblJlZ2lvbi5vZmZzZXRYLFxuICAgICAgICAgICAgdG9wICAgOiBkYXRhLm9mZnNldEluUmVnaW9uLm9mZnNldFksXG4gICAgICAgICAgICByaWdodCA6IGRhdGEub2Zmc2V0SW5SZWdpb24ub2Zmc2V0WCArIGRhdGEub2Zmc2V0SW5SZWdpb24ud2lkdGgsXG4gICAgICAgICAgICBib3R0b206IGRhdGEub2Zmc2V0SW5SZWdpb24ub2Zmc2V0WSArIGRhdGEub2Zmc2V0SW5SZWdpb24uaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgY3VycmVudENvbnRleHQgPSBzZWxmLl9pbWFnZS5wYXJzZUNvZGVzdHJlYW0oXG4gICAgICAgICAgICBkYXRhLmhlYWRlcnNDb2Rlc3RyZWFtLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIGRhdGEuaGVhZGVyc0NvZGVzdHJlYW0ubGVuZ3RoLFxuICAgICAgICAgICAgeyBpc09ubHlQYXJzZUhlYWRlcnM6IHRydWUgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YS5jb2RlYmxvY2tzRGF0YSkge1xuICAgICAgICAgICAgc2VsZi5faW1hZ2UuYWRkUGFja2V0c0RhdGEoY3VycmVudENvbnRleHQsIGRhdGEuY29kZWJsb2Nrc0RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnByZWNpbmN0Q29lZmZpY2llbnRzKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEucHJlY2luY3RDb2VmZmljaWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJlY2luY3QgPSBkYXRhLnByZWNpbmN0Q29lZmZpY2llbnRzW2ldO1xuICAgICAgICAgICAgICAgIHNlbGYuX2ltYWdlLnNldFByZWNpbmN0Q29lZmZpY2llbnRzKFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCwgcHJlY2luY3QuY29lZmZpY2llbnRzLCBwcmVjaW5jdC50aWxlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHByZWNpbmN0LmMsIHByZWNpbmN0LnIsIHByZWNpbmN0LnApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzZWxmLl9pbWFnZS5kZWNvZGUoY3VycmVudENvbnRleHQsIHsgcmVnaW9uVG9QYXJzZTogcmVnaW9uVG9QYXJzZSB9KTtcblxuICAgICAgICB2YXIgcGl4ZWxzID0gc2VsZi5fY29weVRpbGVzUGl4ZWxzVG9PbmVQaXhlbHNBcnJheShzZWxmLl9pbWFnZS50aWxlcywgcmVnaW9uVG9QYXJzZSwgc2VsZi5faW1hZ2UuY29tcG9uZW50c0NvdW50KTtcbiAgICAgICAgcmVzb2x2ZShwaXhlbHMpO1xuICAgIH0pO1xufTtcblxuUGRmanNKcHhEZWNvZGVyTGVnYWN5LnByb3RvdHlwZS5fY29weVRpbGVzUGl4ZWxzVG9PbmVQaXhlbHNBcnJheSA9XG4gICAgZnVuY3Rpb24gY29weVRpbGVzUGl4ZWxzVG9PbmVQaXhlbHNBcnJheSh0aWxlcywgcmVzdWx0UmVnaW9uLCBjb21wb25lbnRzQ291bnQpIHtcbiAgICAgICAgXG4gICAgdmFyIGZpcnN0VGlsZSA9IHRpbGVzWzBdO1xuICAgIHZhciB3aWR0aCA9IHJlc3VsdFJlZ2lvbi5yaWdodCAtIHJlc3VsdFJlZ2lvbi5sZWZ0O1xuICAgIHZhciBoZWlnaHQgPSByZXN1bHRSZWdpb24uYm90dG9tIC0gcmVzdWx0UmVnaW9uLnRvcDtcbiAgICBcbiAgICAvL2lmIChmaXJzdFRpbGUubGVmdCA9PT0gcmVzdWx0UmVnaW9uLmxlZnQgJiZcbiAgICAvLyAgICBmaXJzdFRpbGUudG9wID09PSByZXN1bHRSZWdpb24udG9wICYmXG4gICAgLy8gICAgZmlyc3RUaWxlLndpZHRoID09PSB3aWR0aCAmJlxuICAgIC8vICAgIGZpcnN0VGlsZS5oZWlnaHQgPT09IGhlaWdodCAmJlxuICAgIC8vICAgIGNvbXBvbmVudHNDb3VudCA9PT0gNCkge1xuICAgIC8vICAgIFxuICAgIC8vICAgIHJldHVybiBmaXJzdFRpbGU7XG4gICAgLy99XG4gICAgXG4gICAgdmFyIHJlc3VsdCA9IG5ldyBJbWFnZURhdGEod2lkdGgsIGhlaWdodCk7XG4gICAgICBcbiAgICB2YXIgYnl0ZXNQZXJQaXhlbCA9IDQ7XG4gICAgdmFyIHJnYmFJbWFnZVN0cmlkZSA9IHdpZHRoICogYnl0ZXNQZXJQaXhlbDtcbiAgICBcbiAgICB2YXIgdGlsZUluZGV4ID0gMDtcbiAgICBcbiAgICAvL2ZvciAodmFyIHggPSAwOyB4IDwgbnVtVGlsZXNYOyArK3gpIHtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGlsZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIHRpbGVSaWdodCA9IHRpbGVzW2ldLmxlZnQgKyB0aWxlc1tpXS53aWR0aDtcbiAgICAgICAgdmFyIHRpbGVCb3R0b20gPSB0aWxlc1tpXS50b3AgKyB0aWxlc1tpXS5oZWlnaHQ7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uTGVmdCA9IE1hdGgubWF4KHJlc3VsdFJlZ2lvbi5sZWZ0LCB0aWxlc1tpXS5sZWZ0KTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvblRvcCA9IE1hdGgubWF4KHJlc3VsdFJlZ2lvbi50b3AsIHRpbGVzW2ldLnRvcCk7XG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25SaWdodCA9IE1hdGgubWluKHJlc3VsdFJlZ2lvbi5yaWdodCwgdGlsZVJpZ2h0KTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbkJvdHRvbSA9IE1hdGgubWluKHJlc3VsdFJlZ2lvbi5ib3R0b20sIHRpbGVCb3R0b20pO1xuICAgICAgICBcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbldpZHRoID0gaW50ZXJzZWN0aW9uUmlnaHQgLSBpbnRlcnNlY3Rpb25MZWZ0O1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uSGVpZ2h0ID0gaW50ZXJzZWN0aW9uQm90dG9tIC0gaW50ZXJzZWN0aW9uVG9wO1xuICAgICAgICBcbiAgICAgICAgaWYgKGludGVyc2VjdGlvbkxlZnQgIT09IHRpbGVzW2ldLmxlZnQgfHxcbiAgICAgICAgICAgIGludGVyc2VjdGlvblRvcCAhPT0gdGlsZXNbaV0udG9wIHx8XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25XaWR0aCAhPT0gdGlsZXNbaV0ud2lkdGggfHxcbiAgICAgICAgICAgIGludGVyc2VjdGlvbkhlaWdodCAhPT0gdGlsZXNbaV0uaGVpZ2h0KSB7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRocm93ICdVbnN1cHBvcnRlZCB0aWxlcyB0byBjb3B5JztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVPZmZzZXRYUGl4ZWxzID0gaW50ZXJzZWN0aW9uTGVmdCAtIHJlc3VsdFJlZ2lvbi5sZWZ0O1xuICAgICAgICB2YXIgdGlsZU9mZnNldFlQaXhlbHMgPSBpbnRlcnNlY3Rpb25Ub3AgLSByZXN1bHRSZWdpb24udG9wO1xuICAgICAgICAgICAgXG4gICAgICAgIHZhciB0aWxlT2Zmc2V0Qnl0ZXMgPVxuICAgICAgICAgICAgdGlsZU9mZnNldFhQaXhlbHMgKiBieXRlc1BlclBpeGVsICtcbiAgICAgICAgICAgIHRpbGVPZmZzZXRZUGl4ZWxzICogcmdiYUltYWdlU3RyaWRlO1xuXG4gICAgICAgIHRoaXMuX2NvcHlUaWxlKFxuICAgICAgICAgICAgcmVzdWx0LmRhdGEsIHRpbGVzW2ldLCB0aWxlT2Zmc2V0Qnl0ZXMsIHJnYmFJbWFnZVN0cmlkZSwgY29tcG9uZW50c0NvdW50KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblBkZmpzSnB4RGVjb2RlckxlZ2FjeS5wcm90b3R5cGUuX2NvcHlUaWxlID0gZnVuY3Rpb24gY29weVRpbGUoXG4gICAgdGFyZ2V0SW1hZ2UsIHRpbGUsIHRhcmdldEltYWdlU3RhcnRPZmZzZXQsIHRhcmdldEltYWdlU3RyaWRlLCBjb21wb25lbnRzQ291bnQpIHtcbiAgICBcbiAgICB2YXIgck9mZnNldCA9IDA7XG4gICAgdmFyIGdPZmZzZXQgPSAxO1xuICAgIHZhciBiT2Zmc2V0ID0gMjtcbiAgICB2YXIgcGl4ZWxzT2Zmc2V0ID0gMTtcbiAgICBcbiAgICB2YXIgcGl4ZWxzID0gdGlsZS5waXhlbHMgfHwgdGlsZS5pdGVtcztcbiAgICBcbiAgICBpZiAoY29tcG9uZW50c0NvdW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50c0NvdW50ID0gcGl4ZWxzLmxlbmd0aCAvICh0aWxlLndpZHRoICogdGlsZS5oZWlnaHQpO1xuICAgIH1cbiAgICBcbiAgICBzd2l0Y2ggKGNvbXBvbmVudHNDb3VudCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBnT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIGJPZmZzZXQgPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBwaXhlbHNPZmZzZXQgPSAzO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgcGl4ZWxzT2Zmc2V0ID0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyAnVW5zdXBwb3J0ZWQgY29tcG9uZW50cyBjb3VudCAnICsgY29tcG9uZW50c0NvdW50O1xuICAgIH1cbiAgICBcbiAgICB2YXIgdGFyZ2V0SW1hZ2VJbmRleCA9IHRhcmdldEltYWdlU3RhcnRPZmZzZXQ7XG4gICAgdmFyIHBpeGVsID0gMDtcbiAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHRpbGUuaGVpZ2h0OyArK3kpIHtcbiAgICAgICAgdmFyIHRhcmdldEltYWdlU3RhcnRMaW5lID0gdGFyZ2V0SW1hZ2VJbmRleDtcbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdGlsZS53aWR0aDsgKyt4KSB7XG4gICAgICAgICAgICB0YXJnZXRJbWFnZVt0YXJnZXRJbWFnZUluZGV4ICsgMF0gPSBwaXhlbHNbcGl4ZWwgKyByT2Zmc2V0XTtcbiAgICAgICAgICAgIHRhcmdldEltYWdlW3RhcmdldEltYWdlSW5kZXggKyAxXSA9IHBpeGVsc1twaXhlbCArIGdPZmZzZXRdO1xuICAgICAgICAgICAgdGFyZ2V0SW1hZ2VbdGFyZ2V0SW1hZ2VJbmRleCArIDJdID0gcGl4ZWxzW3BpeGVsICsgYk9mZnNldF07XG4gICAgICAgICAgICB0YXJnZXRJbWFnZVt0YXJnZXRJbWFnZUluZGV4ICsgM10gPSAyNTU7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHBpeGVsICs9IHBpeGVsc09mZnNldDtcbiAgICAgICAgICAgIHRhcmdldEltYWdlSW5kZXggKz0gNDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdGFyZ2V0SW1hZ2VJbmRleCA9IHRhcmdldEltYWdlU3RhcnRMaW5lICsgdGFyZ2V0SW1hZ2VTdHJpZGU7XG4gICAgfVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvYXBpL3BkZmpzLWpweC1kZWNvZGVyLWxlZ2FjeS5qcyIsIi8qIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZXNsaW50IG5vLXZhcjogZXJyb3IgKi9cblxuLy8gaW1wb3J0ICcuL2NvbXBhdGliaWxpdHknO1xuLy8gaW1wb3J0IHsgUmVhZGFibGVTdHJlYW0gfSBmcm9tICcuL3N0cmVhbXNfcG9seWZpbGwnO1xuLy8gaW1wb3J0IHsgVVJMIH0gZnJvbSAnLi91cmxfcG9seWZpbGwnO1xuXG5jb25zdCBJREVOVElUWV9NQVRSSVggPSBbMSwgMCwgMCwgMSwgMCwgMF07XG5jb25zdCBGT05UX0lERU5USVRZX01BVFJJWCA9IFswLjAwMSwgMCwgMCwgMC4wMDEsIDAsIDBdO1xuXG5jb25zdCBOYXRpdmVJbWFnZURlY29kaW5nID0ge1xuICBOT05FOiAnbm9uZScsXG4gIERFQ09ERTogJ2RlY29kZScsXG4gIERJU1BMQVk6ICdkaXNwbGF5Jyxcbn07XG5cbi8vIFBlcm1pc3Npb24gZmxhZ3MgZnJvbSBUYWJsZSAyMiwgU2VjdGlvbiA3LjYuMy4yIG9mIHRoZSBQREYgc3BlY2lmaWNhdGlvbi5cbmNvbnN0IFBlcm1pc3Npb25GbGFnID0ge1xuICBQUklOVDogMHgwNCxcbiAgTU9ESUZZX0NPTlRFTlRTOiAweDA4LFxuICBDT1BZOiAweDEwLFxuICBNT0RJRllfQU5OT1RBVElPTlM6IDB4MjAsXG4gIEZJTExfSU5URVJBQ1RJVkVfRk9STVM6IDB4MTAwLFxuICBDT1BZX0ZPUl9BQ0NFU1NJQklMSVRZOiAweDIwMCxcbiAgQVNTRU1CTEU6IDB4NDAwLFxuICBQUklOVF9ISUdIX1FVQUxJVFk6IDB4ODAwLFxufTtcblxuY29uc3QgVGV4dFJlbmRlcmluZ01vZGUgPSB7XG4gIEZJTEw6IDAsXG4gIFNUUk9LRTogMSxcbiAgRklMTF9TVFJPS0U6IDIsXG4gIElOVklTSUJMRTogMyxcbiAgRklMTF9BRERfVE9fUEFUSDogNCxcbiAgU1RST0tFX0FERF9UT19QQVRIOiA1LFxuICBGSUxMX1NUUk9LRV9BRERfVE9fUEFUSDogNixcbiAgQUREX1RPX1BBVEg6IDcsXG4gIEZJTExfU1RST0tFX01BU0s6IDMsXG4gIEFERF9UT19QQVRIX0ZMQUc6IDQsXG59O1xuXG5jb25zdCBJbWFnZUtpbmQgPSB7XG4gIEdSQVlTQ0FMRV8xQlBQOiAxLFxuICBSR0JfMjRCUFA6IDIsXG4gIFJHQkFfMzJCUFA6IDMsXG59O1xuXG5jb25zdCBBbm5vdGF0aW9uVHlwZSA9IHtcbiAgVEVYVDogMSxcbiAgTElOSzogMixcbiAgRlJFRVRFWFQ6IDMsXG4gIExJTkU6IDQsXG4gIFNRVUFSRTogNSxcbiAgQ0lSQ0xFOiA2LFxuICBQT0xZR09OOiA3LFxuICBQT0xZTElORTogOCxcbiAgSElHSExJR0hUOiA5LFxuICBVTkRFUkxJTkU6IDEwLFxuICBTUVVJR0dMWTogMTEsXG4gIFNUUklLRU9VVDogMTIsXG4gIFNUQU1QOiAxMyxcbiAgQ0FSRVQ6IDE0LFxuICBJTks6IDE1LFxuICBQT1BVUDogMTYsXG4gIEZJTEVBVFRBQ0hNRU5UOiAxNyxcbiAgU09VTkQ6IDE4LFxuICBNT1ZJRTogMTksXG4gIFdJREdFVDogMjAsXG4gIFNDUkVFTjogMjEsXG4gIFBSSU5URVJNQVJLOiAyMixcbiAgVFJBUE5FVDogMjMsXG4gIFdBVEVSTUFSSzogMjQsXG4gIFRIUkVFRDogMjUsXG4gIFJFREFDVDogMjYsXG59O1xuXG5jb25zdCBBbm5vdGF0aW9uU3RhdGVNb2RlbFR5cGUgPSB7XG4gIE1BUktFRDogJ01hcmtlZCcsXG4gIFJFVklFVzogJ1JldmlldycsXG59O1xuXG5jb25zdCBBbm5vdGF0aW9uTWFya2VkU3RhdGUgPSB7XG4gIE1BUktFRDogJ01hcmtlZCcsXG4gIFVOTUFSS0VEOiAnVW5tYXJrZWQnLFxufTtcblxuY29uc3QgQW5ub3RhdGlvblJldmlld1N0YXRlID0ge1xuICBBQ0NFUFRFRDogJ0FjY2VwdGVkJyxcbiAgUkVKRUNURUQ6ICdSZWplY3RlZCcsXG4gIENBTkNFTExFRDogJ0NhbmNlbGxlZCcsXG4gIENPTVBMRVRFRDogJ0NvbXBsZXRlZCcsXG4gIE5PTkU6ICdOb25lJyxcbn07XG5cbmNvbnN0IEFubm90YXRpb25SZXBseVR5cGUgPSB7XG4gIEdST1VQOiAnR3JvdXAnLFxuICBSRVBMWTogJ1InLFxufTtcblxuY29uc3QgQW5ub3RhdGlvbkZsYWcgPSB7XG4gIElOVklTSUJMRTogMHgwMSxcbiAgSElEREVOOiAweDAyLFxuICBQUklOVDogMHgwNCxcbiAgTk9aT09NOiAweDA4LFxuICBOT1JPVEFURTogMHgxMCxcbiAgTk9WSUVXOiAweDIwLFxuICBSRUFET05MWTogMHg0MCxcbiAgTE9DS0VEOiAweDgwLFxuICBUT0dHTEVOT1ZJRVc6IDB4MTAwLFxuICBMT0NLRURDT05URU5UUzogMHgyMDAsXG59O1xuXG5jb25zdCBBbm5vdGF0aW9uRmllbGRGbGFnID0ge1xuICBSRUFET05MWTogMHgwMDAwMDAxLFxuICBSRVFVSVJFRDogMHgwMDAwMDAyLFxuICBOT0VYUE9SVDogMHgwMDAwMDA0LFxuICBNVUxUSUxJTkU6IDB4MDAwMTAwMCxcbiAgUEFTU1dPUkQ6IDB4MDAwMjAwMCxcbiAgTk9UT0dHTEVUT09GRjogMHgwMDA0MDAwLFxuICBSQURJTzogMHgwMDA4MDAwLFxuICBQVVNIQlVUVE9OOiAweDAwMTAwMDAsXG4gIENPTUJPOiAweDAwMjAwMDAsXG4gIEVESVQ6IDB4MDA0MDAwMCxcbiAgU09SVDogMHgwMDgwMDAwLFxuICBGSUxFU0VMRUNUOiAweDAxMDAwMDAsXG4gIE1VTFRJU0VMRUNUOiAweDAyMDAwMDAsXG4gIERPTk9UU1BFTExDSEVDSzogMHgwNDAwMDAwLFxuICBET05PVFNDUk9MTDogMHgwODAwMDAwLFxuICBDT01COiAweDEwMDAwMDAsXG4gIFJJQ0hURVhUOiAweDIwMDAwMDAsXG4gIFJBRElPU0lOVU5JU09OOiAweDIwMDAwMDAsXG4gIENPTU1JVE9OU0VMQ0hBTkdFOiAweDQwMDAwMDAsXG59O1xuXG5jb25zdCBBbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0ge1xuICBTT0xJRDogMSxcbiAgREFTSEVEOiAyLFxuICBCRVZFTEVEOiAzLFxuICBJTlNFVDogNCxcbiAgVU5ERVJMSU5FOiA1LFxufTtcblxuY29uc3QgU3RyZWFtVHlwZSA9IHtcbiAgVU5LTk9XTjogJ1VOS05PV04nLFxuICBGTEFURTogJ0ZMQVRFJyxcbiAgTFpXOiAnTFpXJyxcbiAgRENUOiAnRENUJyxcbiAgSlBYOiAnSlBYJyxcbiAgSkJJRzogJ0pCSUcnLFxuICBBODU6ICdBODUnLFxuICBBSFg6ICdBSFgnLFxuICBDQ0Y6ICdDQ0YnLFxuICBSTFg6ICdSTFgnLCAvLyBQREYgc2hvcnQgbmFtZSBpcyAnUkwnLCBidXQgdGVsZW1ldHJ5IHJlcXVpcmVzIHRocmVlIGNoYXJzLlxufTtcblxuY29uc3QgRm9udFR5cGUgPSB7XG4gIFVOS05PV046ICdVTktOT1dOJyxcbiAgVFlQRTE6ICdUWVBFMScsXG4gIFRZUEUxQzogJ1RZUEUxQycsXG4gIENJREZPTlRUWVBFMDogJ0NJREZPTlRUWVBFMCcsXG4gIENJREZPTlRUWVBFMEM6ICdDSURGT05UVFlQRTBDJyxcbiAgVFJVRVRZUEU6ICdUUlVFVFlQRScsXG4gIENJREZPTlRUWVBFMjogJ0NJREZPTlRUWVBFMicsXG4gIFRZUEUzOiAnVFlQRTMnLFxuICBPUEVOVFlQRTogJ09QRU5UWVBFJyxcbiAgVFlQRTA6ICdUWVBFMCcsXG4gIE1NVFlQRTE6ICdNTVRZUEUxJyxcbn07XG5cbmNvbnN0IFZlcmJvc2l0eUxldmVsID0ge1xuICBFUlJPUlM6IDAsXG4gIFdBUk5JTkdTOiAxLFxuICBJTkZPUzogNSxcbn07XG5cbmNvbnN0IENNYXBDb21wcmVzc2lvblR5cGUgPSB7XG4gIE5PTkU6IDAsXG4gIEJJTkFSWTogMSxcbiAgU1RSRUFNOiAyLFxufTtcblxuLy8gQWxsIHRoZSBwb3NzaWJsZSBvcGVyYXRpb25zIGZvciBhbiBvcGVyYXRvciBsaXN0LlxuY29uc3QgT1BTID0ge1xuICAvLyBJbnRlbnRpb25hbGx5IHN0YXJ0IGZyb20gMSBzbyBpdCBpcyBlYXN5IHRvIHNwb3QgYmFkIG9wZXJhdG9ycyB0aGF0IHdpbGwgYmVcbiAgLy8gMCdzLlxuICBkZXBlbmRlbmN5OiAxLFxuICBzZXRMaW5lV2lkdGg6IDIsXG4gIHNldExpbmVDYXA6IDMsXG4gIHNldExpbmVKb2luOiA0LFxuICBzZXRNaXRlckxpbWl0OiA1LFxuICBzZXREYXNoOiA2LFxuICBzZXRSZW5kZXJpbmdJbnRlbnQ6IDcsXG4gIHNldEZsYXRuZXNzOiA4LFxuICBzZXRHU3RhdGU6IDksXG4gIHNhdmU6IDEwLFxuICByZXN0b3JlOiAxMSxcbiAgdHJhbnNmb3JtOiAxMixcbiAgbW92ZVRvOiAxMyxcbiAgbGluZVRvOiAxNCxcbiAgY3VydmVUbzogMTUsXG4gIGN1cnZlVG8yOiAxNixcbiAgY3VydmVUbzM6IDE3LFxuICBjbG9zZVBhdGg6IDE4LFxuICByZWN0YW5nbGU6IDE5LFxuICBzdHJva2U6IDIwLFxuICBjbG9zZVN0cm9rZTogMjEsXG4gIGZpbGw6IDIyLFxuICBlb0ZpbGw6IDIzLFxuICBmaWxsU3Ryb2tlOiAyNCxcbiAgZW9GaWxsU3Ryb2tlOiAyNSxcbiAgY2xvc2VGaWxsU3Ryb2tlOiAyNixcbiAgY2xvc2VFT0ZpbGxTdHJva2U6IDI3LFxuICBlbmRQYXRoOiAyOCxcbiAgY2xpcDogMjksXG4gIGVvQ2xpcDogMzAsXG4gIGJlZ2luVGV4dDogMzEsXG4gIGVuZFRleHQ6IDMyLFxuICBzZXRDaGFyU3BhY2luZzogMzMsXG4gIHNldFdvcmRTcGFjaW5nOiAzNCxcbiAgc2V0SFNjYWxlOiAzNSxcbiAgc2V0TGVhZGluZzogMzYsXG4gIHNldEZvbnQ6IDM3LFxuICBzZXRUZXh0UmVuZGVyaW5nTW9kZTogMzgsXG4gIHNldFRleHRSaXNlOiAzOSxcbiAgbW92ZVRleHQ6IDQwLFxuICBzZXRMZWFkaW5nTW92ZVRleHQ6IDQxLFxuICBzZXRUZXh0TWF0cml4OiA0MixcbiAgbmV4dExpbmU6IDQzLFxuICBzaG93VGV4dDogNDQsXG4gIHNob3dTcGFjZWRUZXh0OiA0NSxcbiAgbmV4dExpbmVTaG93VGV4dDogNDYsXG4gIG5leHRMaW5lU2V0U3BhY2luZ1Nob3dUZXh0OiA0NyxcbiAgc2V0Q2hhcldpZHRoOiA0OCxcbiAgc2V0Q2hhcldpZHRoQW5kQm91bmRzOiA0OSxcbiAgc2V0U3Ryb2tlQ29sb3JTcGFjZTogNTAsXG4gIHNldEZpbGxDb2xvclNwYWNlOiA1MSxcbiAgc2V0U3Ryb2tlQ29sb3I6IDUyLFxuICBzZXRTdHJva2VDb2xvck46IDUzLFxuICBzZXRGaWxsQ29sb3I6IDU0LFxuICBzZXRGaWxsQ29sb3JOOiA1NSxcbiAgc2V0U3Ryb2tlR3JheTogNTYsXG4gIHNldEZpbGxHcmF5OiA1NyxcbiAgc2V0U3Ryb2tlUkdCQ29sb3I6IDU4LFxuICBzZXRGaWxsUkdCQ29sb3I6IDU5LFxuICBzZXRTdHJva2VDTVlLQ29sb3I6IDYwLFxuICBzZXRGaWxsQ01ZS0NvbG9yOiA2MSxcbiAgc2hhZGluZ0ZpbGw6IDYyLFxuICBiZWdpbklubGluZUltYWdlOiA2MyxcbiAgYmVnaW5JbWFnZURhdGE6IDY0LFxuICBlbmRJbmxpbmVJbWFnZTogNjUsXG4gIHBhaW50WE9iamVjdDogNjYsXG4gIG1hcmtQb2ludDogNjcsXG4gIG1hcmtQb2ludFByb3BzOiA2OCxcbiAgYmVnaW5NYXJrZWRDb250ZW50OiA2OSxcbiAgYmVnaW5NYXJrZWRDb250ZW50UHJvcHM6IDcwLFxuICBlbmRNYXJrZWRDb250ZW50OiA3MSxcbiAgYmVnaW5Db21wYXQ6IDcyLFxuICBlbmRDb21wYXQ6IDczLFxuICBwYWludEZvcm1YT2JqZWN0QmVnaW46IDc0LFxuICBwYWludEZvcm1YT2JqZWN0RW5kOiA3NSxcbiAgYmVnaW5Hcm91cDogNzYsXG4gIGVuZEdyb3VwOiA3NyxcbiAgYmVnaW5Bbm5vdGF0aW9uczogNzgsXG4gIGVuZEFubm90YXRpb25zOiA3OSxcbiAgYmVnaW5Bbm5vdGF0aW9uOiA4MCxcbiAgZW5kQW5ub3RhdGlvbjogODEsXG4gIHBhaW50SnBlZ1hPYmplY3Q6IDgyLFxuICBwYWludEltYWdlTWFza1hPYmplY3Q6IDgzLFxuICBwYWludEltYWdlTWFza1hPYmplY3RHcm91cDogODQsXG4gIHBhaW50SW1hZ2VYT2JqZWN0OiA4NSxcbiAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3Q6IDg2LFxuICBwYWludElubGluZUltYWdlWE9iamVjdEdyb3VwOiA4NyxcbiAgcGFpbnRJbWFnZVhPYmplY3RSZXBlYXQ6IDg4LFxuICBwYWludEltYWdlTWFza1hPYmplY3RSZXBlYXQ6IDg5LFxuICBwYWludFNvbGlkQ29sb3JJbWFnZU1hc2s6IDkwLFxuICBjb25zdHJ1Y3RQYXRoOiA5MSxcbn07XG5cbmNvbnN0IFVOU1VQUE9SVEVEX0ZFQVRVUkVTID0ge1xuICB1bmtub3duOiAndW5rbm93bicsXG4gIGZvcm1zOiAnZm9ybXMnLFxuICBqYXZhU2NyaXB0OiAnamF2YVNjcmlwdCcsXG4gIHNtYXNrOiAnc21hc2snLFxuICBzaGFkaW5nUGF0dGVybjogJ3NoYWRpbmdQYXR0ZXJuJyxcbiAgZm9udDogJ2ZvbnQnLFxufTtcblxuY29uc3QgUGFzc3dvcmRSZXNwb25zZXMgPSB7XG4gIE5FRURfUEFTU1dPUkQ6IDEsXG4gIElOQ09SUkVDVF9QQVNTV09SRDogMixcbn07XG5cbmxldCB2ZXJib3NpdHkgPSBWZXJib3NpdHlMZXZlbC5XQVJOSU5HUztcblxuZnVuY3Rpb24gc2V0VmVyYm9zaXR5TGV2ZWwobGV2ZWwpIHtcbiAgaWYgKE51bWJlci5pc0ludGVnZXIobGV2ZWwpKSB7XG4gICAgdmVyYm9zaXR5ID0gbGV2ZWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VmVyYm9zaXR5TGV2ZWwoKSB7XG4gIHJldHVybiB2ZXJib3NpdHk7XG59XG5cbi8vIEEgbm90aWNlIGZvciBkZXZzLiBUaGVzZSBhcmUgZ29vZCBmb3IgdGhpbmdzIHRoYXQgYXJlIGhlbHBmdWwgdG8gZGV2cywgc3VjaFxuLy8gYXMgd2FybmluZyB0aGF0IFdvcmtlcnMgd2VyZSBkaXNhYmxlZCwgd2hpY2ggaXMgaW1wb3J0YW50IHRvIGRldnMgYnV0IG5vdFxuLy8gZW5kIHVzZXJzLlxuZnVuY3Rpb24gaW5mbyhtc2cpIHtcbiAgaWYgKHZlcmJvc2l0eSA+PSBWZXJib3NpdHlMZXZlbC5JTkZPUykge1xuICAgIGNvbnNvbGUubG9nKGBJbmZvOiAke21zZ31gKTtcbiAgfVxufVxuXG4vLyBOb24tZmF0YWwgd2FybmluZ3MuXG5mdW5jdGlvbiB3YXJuKG1zZykge1xuICBpZiAodmVyYm9zaXR5ID49IFZlcmJvc2l0eUxldmVsLldBUk5JTkdTKSB7XG4gICAgY29uc29sZS5sb2coYFdhcm5pbmc6ICR7bXNnfWApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVucmVhY2hhYmxlKG1zZykge1xuICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0KGNvbmQsIG1zZykge1xuICBpZiAoIWNvbmQpIHtcbiAgICB1bnJlYWNoYWJsZShtc2cpO1xuICB9XG59XG5cbi8vIENoZWNrcyBpZiBVUkxzIGhhdmUgdGhlIHNhbWUgb3JpZ2luLiBGb3Igbm9uLUhUVFAgYmFzZWQgVVJMcywgcmV0dXJucyBmYWxzZS5cbmZ1bmN0aW9uIGlzU2FtZU9yaWdpbihiYXNlVXJsLCBvdGhlclVybCkge1xuICBsZXQgYmFzZTtcbiAgdHJ5IHtcbiAgICBiYXNlID0gbmV3IFVSTChiYXNlVXJsKTtcbiAgICBpZiAoIWJhc2Uub3JpZ2luIHx8IGJhc2Uub3JpZ2luID09PSAnbnVsbCcpIHtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gbm9uLUhUVFAgdXJsXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgb3RoZXIgPSBuZXcgVVJMKG90aGVyVXJsLCBiYXNlKTtcbiAgcmV0dXJuIGJhc2Uub3JpZ2luID09PSBvdGhlci5vcmlnaW47XG59XG5cbi8vIENoZWNrcyBpZiBVUkxzIHVzZSBvbmUgb2YgdGhlIHdoaXRlbGlzdGVkIHByb3RvY29scywgZS5nLiB0byBhdm9pZCBYU1MuXG5mdW5jdGlvbiBfaXNWYWxpZFByb3RvY29sKHVybCkge1xuICBpZiAoIXVybCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzd2l0Y2ggKHVybC5wcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHA6JzpcbiAgICBjYXNlICdodHRwczonOlxuICAgIGNhc2UgJ2Z0cDonOlxuICAgIGNhc2UgJ21haWx0bzonOlxuICAgIGNhc2UgJ3RlbDonOlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGNyZWF0ZSBhIHZhbGlkIGFic29sdXRlIFVSTC5cbiAqXG4gKiBAcGFyYW0ge1VSTHxzdHJpbmd9IHVybCAtIEFuIGFic29sdXRlLCBvciByZWxhdGl2ZSwgVVJMLlxuICogQHBhcmFtIHtVUkx8c3RyaW5nfSBiYXNlVXJsIC0gQW4gYWJzb2x1dGUgVVJMLlxuICogQHJldHVybnMgRWl0aGVyIGEgdmFsaWQge1VSTH0sIG9yIGBudWxsYCBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwodXJsLCBiYXNlVXJsKSB7XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICBjb25zdCBhYnNvbHV0ZVVybCA9IGJhc2VVcmwgPyBuZXcgVVJMKHVybCwgYmFzZVVybCkgOiBuZXcgVVJMKHVybCk7XG4gICAgaWYgKF9pc1ZhbGlkUHJvdG9jb2woYWJzb2x1dGVVcmwpKSB7XG4gICAgICByZXR1cm4gYWJzb2x1dGVVcmw7XG4gICAgfVxuICB9IGNhdGNoIChleCkgeyAvKiBgbmV3IFVSTCgpYCB3aWxsIHRocm93IG9uIGluY29ycmVjdCBkYXRhLiAqLyB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBzaGFkb3cob2JqLCBwcm9wLCB2YWx1ZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSwgfSk7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuY29uc3QgUGFzc3dvcmRFeGNlcHRpb24gPSAoZnVuY3Rpb24gUGFzc3dvcmRFeGNlcHRpb25DbG9zdXJlKCkge1xuICBmdW5jdGlvbiBQYXNzd29yZEV4Y2VwdGlvbihtc2csIGNvZGUpIHtcbiAgICB0aGlzLm5hbWUgPSAnUGFzc3dvcmRFeGNlcHRpb24nO1xuICAgIHRoaXMubWVzc2FnZSA9IG1zZztcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICB9XG5cbiAgUGFzc3dvcmRFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIFBhc3N3b3JkRXhjZXB0aW9uLmNvbnN0cnVjdG9yID0gUGFzc3dvcmRFeGNlcHRpb247XG5cbiAgcmV0dXJuIFBhc3N3b3JkRXhjZXB0aW9uO1xufSkoKTtcblxuY29uc3QgVW5rbm93bkVycm9yRXhjZXB0aW9uID0gKGZ1bmN0aW9uIFVua25vd25FcnJvckV4Y2VwdGlvbkNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIFVua25vd25FcnJvckV4Y2VwdGlvbihtc2csIGRldGFpbHMpIHtcbiAgICB0aGlzLm5hbWUgPSAnVW5rbm93bkVycm9yRXhjZXB0aW9uJztcbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gICAgdGhpcy5kZXRhaWxzID0gZGV0YWlscztcbiAgfVxuXG4gIFVua25vd25FcnJvckV4Y2VwdGlvbi5wcm90b3R5cGUgPSBuZXcgRXJyb3IoKTtcbiAgVW5rbm93bkVycm9yRXhjZXB0aW9uLmNvbnN0cnVjdG9yID0gVW5rbm93bkVycm9yRXhjZXB0aW9uO1xuXG4gIHJldHVybiBVbmtub3duRXJyb3JFeGNlcHRpb247XG59KSgpO1xuXG5jb25zdCBJbnZhbGlkUERGRXhjZXB0aW9uID0gKGZ1bmN0aW9uIEludmFsaWRQREZFeGNlcHRpb25DbG9zdXJlKCkge1xuICBmdW5jdGlvbiBJbnZhbGlkUERGRXhjZXB0aW9uKG1zZykge1xuICAgIHRoaXMubmFtZSA9ICdJbnZhbGlkUERGRXhjZXB0aW9uJztcbiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7XG4gIH1cblxuICBJbnZhbGlkUERGRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICBJbnZhbGlkUERGRXhjZXB0aW9uLmNvbnN0cnVjdG9yID0gSW52YWxpZFBERkV4Y2VwdGlvbjtcblxuICByZXR1cm4gSW52YWxpZFBERkV4Y2VwdGlvbjtcbn0pKCk7XG5cbmNvbnN0IE1pc3NpbmdQREZFeGNlcHRpb24gPSAoZnVuY3Rpb24gTWlzc2luZ1BERkV4Y2VwdGlvbkNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIE1pc3NpbmdQREZFeGNlcHRpb24obXNnKSB7XG4gICAgdGhpcy5uYW1lID0gJ01pc3NpbmdQREZFeGNlcHRpb24nO1xuICAgIHRoaXMubWVzc2FnZSA9IG1zZztcbiAgfVxuXG4gIE1pc3NpbmdQREZFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIE1pc3NpbmdQREZFeGNlcHRpb24uY29uc3RydWN0b3IgPSBNaXNzaW5nUERGRXhjZXB0aW9uO1xuXG4gIHJldHVybiBNaXNzaW5nUERGRXhjZXB0aW9uO1xufSkoKTtcblxuY29uc3QgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uID1cbiAgICAoZnVuY3Rpb24gVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uQ2xvc3VyZSgpIHtcbiAgZnVuY3Rpb24gVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uKG1zZywgc3RhdHVzKSB7XG4gICAgdGhpcy5uYW1lID0gJ1VuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbic7XG4gICAgdGhpcy5tZXNzYWdlID0gbXNnO1xuICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICB9XG5cbiAgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24uY29uc3RydWN0b3IgPSBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb247XG5cbiAgcmV0dXJuIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjtcbn0pKCk7XG5cbi8qKlxuICogRXJyb3IgY2F1c2VkIGR1cmluZyBwYXJzaW5nIFBERiBkYXRhLlxuICovXG5jb25zdCBGb3JtYXRFcnJvciA9IChmdW5jdGlvbiBGb3JtYXRFcnJvckNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIEZvcm1hdEVycm9yKG1zZykge1xuICAgIHRoaXMubWVzc2FnZSA9IG1zZztcbiAgfVxuXG4gIEZvcm1hdEVycm9yLnByb3RvdHlwZSA9IG5ldyBFcnJvcigpO1xuICBGb3JtYXRFcnJvci5wcm90b3R5cGUubmFtZSA9ICdGb3JtYXRFcnJvcic7XG4gIEZvcm1hdEVycm9yLmNvbnN0cnVjdG9yID0gRm9ybWF0RXJyb3I7XG5cbiAgcmV0dXJuIEZvcm1hdEVycm9yO1xufSkoKTtcblxuLyoqXG4gKiBFcnJvciB1c2VkIHRvIGluZGljYXRlIHRhc2sgY2FuY2VsbGF0aW9uLlxuICovXG5jb25zdCBBYm9ydEV4Y2VwdGlvbiA9IChmdW5jdGlvbiBBYm9ydEV4Y2VwdGlvbkNsb3N1cmUoKSB7XG4gIGZ1bmN0aW9uIEFib3J0RXhjZXB0aW9uKG1zZykge1xuICAgIHRoaXMubmFtZSA9ICdBYm9ydEV4Y2VwdGlvbic7XG4gICAgdGhpcy5tZXNzYWdlID0gbXNnO1xuICB9XG5cbiAgQWJvcnRFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7XG4gIEFib3J0RXhjZXB0aW9uLmNvbnN0cnVjdG9yID0gQWJvcnRFeGNlcHRpb247XG5cbiAgcmV0dXJuIEFib3J0RXhjZXB0aW9uO1xufSkoKTtcblxuY29uc3QgTnVsbENoYXJhY3RlcnNSZWdFeHAgPSAvXFx4MDAvZztcblxuZnVuY3Rpb24gcmVtb3ZlTnVsbENoYXJhY3RlcnMoc3RyKSB7XG4gIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuICAgIHdhcm4oJ1RoZSBhcmd1bWVudCBmb3IgcmVtb3ZlTnVsbENoYXJhY3RlcnMgbXVzdCBiZSBhIHN0cmluZy4nKTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG4gIHJldHVybiBzdHIucmVwbGFjZShOdWxsQ2hhcmFjdGVyc1JlZ0V4cCwgJycpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvU3RyaW5nKGJ5dGVzKSB7XG4gIGFzc2VydChieXRlcyAhPT0gbnVsbCAmJiB0eXBlb2YgYnl0ZXMgPT09ICdvYmplY3QnICYmXG4gICAgICAgICBieXRlcy5sZW5ndGggIT09IHVuZGVmaW5lZCwgJ0ludmFsaWQgYXJndW1lbnQgZm9yIGJ5dGVzVG9TdHJpbmcnKTtcbiAgY29uc3QgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xuICBjb25zdCBNQVhfQVJHVU1FTlRfQ09VTlQgPSA4MTkyO1xuICBpZiAobGVuZ3RoIDwgTUFYX0FSR1VNRU5UX0NPVU5UKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnl0ZXMpO1xuICB9XG4gIGNvbnN0IHN0ckJ1ZiA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBNQVhfQVJHVU1FTlRfQ09VTlQpIHtcbiAgICBjb25zdCBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7XG4gICAgY29uc3QgY2h1bmsgPSBieXRlcy5zdWJhcnJheShpLCBjaHVua0VuZCk7XG4gICAgc3RyQnVmLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBjaHVuaykpO1xuICB9XG4gIHJldHVybiBzdHJCdWYuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIGFzc2VydCh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJywgJ0ludmFsaWQgYXJndW1lbnQgZm9yIHN0cmluZ1RvQnl0ZXMnKTtcbiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXNbaV0gPSBzdHIuY2hhckNvZGVBdChpKSAmIDB4RkY7XG4gIH1cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG4vKipcbiAqIEdldHMgbGVuZ3RoIG9mIHRoZSBhcnJheSAoQXJyYXksIFVpbnQ4QXJyYXksIG9yIHN0cmluZykgaW4gYnl0ZXMuXG4gKiBAcGFyYW0ge0FycmF5fFVpbnQ4QXJyYXl8c3RyaW5nfSBhcnJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGFycmF5Qnl0ZUxlbmd0aChhcnIpIHtcbiAgaWYgKGFyci5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBhcnIubGVuZ3RoO1xuICB9XG4gIGFzc2VydChhcnIuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkKTtcbiAgcmV0dXJuIGFyci5ieXRlTGVuZ3RoO1xufVxuXG4vKipcbiAqIENvbWJpbmVzIGFycmF5IGl0ZW1zIChhcnJheXMpIGludG8gc2luZ2xlIFVpbnQ4QXJyYXkgb2JqZWN0LlxuICogQHBhcmFtIHtBcnJheX0gYXJyIC0gdGhlIGFycmF5IG9mIHRoZSBhcnJheXMgKEFycmF5LCBVaW50OEFycmF5LCBvciBzdHJpbmcpLlxuICogQHJldHVybnMge1VpbnQ4QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIGFycmF5c1RvQnl0ZXMoYXJyKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gIC8vIFNob3J0Y3V0OiBpZiBmaXJzdCBhbmQgb25seSBpdGVtIGlzIFVpbnQ4QXJyYXksIHJldHVybiBpdC5cbiAgaWYgKGxlbmd0aCA9PT0gMSAmJiAoYXJyWzBdIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICByZXR1cm4gYXJyWzBdO1xuICB9XG4gIGxldCByZXN1bHRMZW5ndGggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgcmVzdWx0TGVuZ3RoICs9IGFycmF5Qnl0ZUxlbmd0aChhcnJbaV0pO1xuICB9XG4gIGxldCBwb3MgPSAwO1xuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0TGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGxldCBpdGVtID0gYXJyW2ldO1xuICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtID0gc3RyaW5nVG9CeXRlcyhpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW0gPSBuZXcgVWludDhBcnJheShpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXRlbUxlbmd0aCA9IGl0ZW0uYnl0ZUxlbmd0aDtcbiAgICBkYXRhLnNldChpdGVtLCBwb3MpO1xuICAgIHBvcyArPSBpdGVtTGVuZ3RoO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBzdHJpbmczMih2YWx1ZSkge1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgodmFsdWUgPj4gMjQpICYgMHhmZiwgKHZhbHVlID4+IDE2KSAmIDB4ZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICh2YWx1ZSA+PiA4KSAmIDB4ZmYsIHZhbHVlICYgMHhmZik7XG59XG5cbi8vIENhbGN1bGF0ZSB0aGUgYmFzZSAyIGxvZ2FyaXRobSBvZiB0aGUgbnVtYmVyIGB4YC4gVGhpcyBkaWZmZXJzIGZyb20gdGhlXG4vLyBuYXRpdmUgZnVuY3Rpb24gaW4gdGhlIHNlbnNlIHRoYXQgaXQgcmV0dXJucyB0aGUgY2VpbGluZyB2YWx1ZSBhbmQgdGhhdCBpdFxuLy8gcmV0dXJucyAwIGluc3RlYWQgb2YgYEluZmluaXR5YC9gTmFOYCBmb3IgYHhgIHZhbHVlcyBzbWFsbGVyIHRoYW4vZXF1YWwgdG8gMC5cbmZ1bmN0aW9uIGxvZzIoeCkge1xuICBpZiAoeCA8PSAwKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIE1hdGguY2VpbChNYXRoLmxvZzIoeCkpO1xufVxuXG5mdW5jdGlvbiByZWFkSW50OChkYXRhLCBzdGFydCkge1xuICByZXR1cm4gKGRhdGFbc3RhcnRdIDw8IDI0KSA+PiAyNDtcbn1cblxuZnVuY3Rpb24gcmVhZFVpbnQxNihkYXRhLCBvZmZzZXQpIHtcbiAgcmV0dXJuIChkYXRhW29mZnNldF0gPDwgOCkgfCBkYXRhW29mZnNldCArIDFdO1xufVxuXG5mdW5jdGlvbiByZWFkVWludDMyKGRhdGEsIG9mZnNldCkge1xuICByZXR1cm4gKChkYXRhW29mZnNldF0gPDwgMjQpIHwgKGRhdGFbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAgICAgIChkYXRhW29mZnNldCArIDJdIDw8IDgpIHwgZGF0YVtvZmZzZXQgKyAzXSkgPj4+IDA7XG59XG5cbi8vIExhenkgdGVzdCB0aGUgZW5kaWFubmVzcyBvZiB0aGUgcGxhdGZvcm1cbi8vIE5PVEU6IFRoaXMgd2lsbCBiZSAndHJ1ZScgZm9yIHNpbXVsYXRlZCBUeXBlZEFycmF5c1xuZnVuY3Rpb24gaXNMaXR0bGVFbmRpYW4oKSB7XG4gIGNvbnN0IGJ1ZmZlcjggPSBuZXcgVWludDhBcnJheSg0KTtcbiAgYnVmZmVyOFswXSA9IDE7XG4gIGNvbnN0IHZpZXczMiA9IG5ldyBVaW50MzJBcnJheShidWZmZXI4LmJ1ZmZlciwgMCwgMSk7XG4gIHJldHVybiAodmlldzMyWzBdID09PSAxKTtcbn1cblxuLy8gQ2hlY2tzIGlmIGl0J3MgcG9zc2libGUgdG8gZXZhbCBKUyBleHByZXNzaW9ucy5cbmZ1bmN0aW9uIGlzRXZhbFN1cHBvcnRlZCgpIHtcbiAgdHJ5IHtcbiAgICBuZXcgRnVuY3Rpb24oJycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldywgbm8tbmV3LWZ1bmNcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5jb25zdCByZ2JCdWYgPSBbJ3JnYignLCAwLCAnLCcsIDAsICcsJywgMCwgJyknXTtcblxuY2xhc3MgVXRpbCB7XG4gIC8vIG1ha2VDc3NSZ2IoKSBjYW4gYmUgY2FsbGVkIHRob3VzYW5kcyBvZiB0aW1lcy4gVXNpbmcgwrRyZ2JCdWZgIGF2b2lkc1xuICAvLyBjcmVhdGluZyBtYW55IGludGVybWVkaWF0ZSBzdHJpbmdzLlxuICBzdGF0aWMgbWFrZUNzc1JnYihyLCBnLCBiKSB7XG4gICAgcmdiQnVmWzFdID0gcjtcbiAgICByZ2JCdWZbM10gPSBnO1xuICAgIHJnYkJ1Zls1XSA9IGI7XG4gICAgcmV0dXJuIHJnYkJ1Zi5qb2luKCcnKTtcbiAgfVxuXG4gIC8vIENvbmNhdGVuYXRlcyB0d28gdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgdG9nZXRoZXIgYW5kIHJldHVybnMgdGhlIHJlc3VsdC5cbiAgc3RhdGljIHRyYW5zZm9ybShtMSwgbTIpIHtcbiAgICByZXR1cm4gW1xuICAgICAgbTFbMF0gKiBtMlswXSArIG0xWzJdICogbTJbMV0sXG4gICAgICBtMVsxXSAqIG0yWzBdICsgbTFbM10gKiBtMlsxXSxcbiAgICAgIG0xWzBdICogbTJbMl0gKyBtMVsyXSAqIG0yWzNdLFxuICAgICAgbTFbMV0gKiBtMlsyXSArIG0xWzNdICogbTJbM10sXG4gICAgICBtMVswXSAqIG0yWzRdICsgbTFbMl0gKiBtMls1XSArIG0xWzRdLFxuICAgICAgbTFbMV0gKiBtMls0XSArIG0xWzNdICogbTJbNV0gKyBtMVs1XVxuICAgIF07XG4gIH1cblxuICAvLyBGb3IgMmQgYWZmaW5lIHRyYW5zZm9ybXNcbiAgc3RhdGljIGFwcGx5VHJhbnNmb3JtKHAsIG0pIHtcbiAgICBjb25zdCB4dCA9IHBbMF0gKiBtWzBdICsgcFsxXSAqIG1bMl0gKyBtWzRdO1xuICAgIGNvbnN0IHl0ID0gcFswXSAqIG1bMV0gKyBwWzFdICogbVszXSArIG1bNV07XG4gICAgcmV0dXJuIFt4dCwgeXRdO1xuICB9XG5cbiAgc3RhdGljIGFwcGx5SW52ZXJzZVRyYW5zZm9ybShwLCBtKSB7XG4gICAgY29uc3QgZCA9IG1bMF0gKiBtWzNdIC0gbVsxXSAqIG1bMl07XG4gICAgY29uc3QgeHQgPSAocFswXSAqIG1bM10gLSBwWzFdICogbVsyXSArIG1bMl0gKiBtWzVdIC0gbVs0XSAqIG1bM10pIC8gZDtcbiAgICBjb25zdCB5dCA9ICgtcFswXSAqIG1bMV0gKyBwWzFdICogbVswXSArIG1bNF0gKiBtWzFdIC0gbVs1XSAqIG1bMF0pIC8gZDtcbiAgICByZXR1cm4gW3h0LCB5dF07XG4gIH1cblxuICAvLyBBcHBsaWVzIHRoZSB0cmFuc2Zvcm0gdG8gdGhlIHJlY3RhbmdsZSBhbmQgZmluZHMgdGhlIG1pbmltdW0gYXhpYWxseVxuICAvLyBhbGlnbmVkIGJvdW5kaW5nIGJveC5cbiAgc3RhdGljIGdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KHIsIG0pIHtcbiAgICBjb25zdCBwMSA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0ociwgbSk7XG4gICAgY29uc3QgcDIgPSBVdGlsLmFwcGx5VHJhbnNmb3JtKHIuc2xpY2UoMiwgNCksIG0pO1xuICAgIGNvbnN0IHAzID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclswXSwgclszXV0sIG0pO1xuICAgIGNvbnN0IHA0ID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclsyXSwgclsxXV0sIG0pO1xuICAgIHJldHVybiBbXG4gICAgICBNYXRoLm1pbihwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksXG4gICAgICBNYXRoLm1pbihwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSksXG4gICAgICBNYXRoLm1heChwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksXG4gICAgICBNYXRoLm1heChwMVsxXSwgcDJbMV0sIHAzWzFdLCBwNFsxXSlcbiAgICBdO1xuICB9XG5cbiAgc3RhdGljIGludmVyc2VUcmFuc2Zvcm0obSkge1xuICAgIGNvbnN0IGQgPSBtWzBdICogbVszXSAtIG1bMV0gKiBtWzJdO1xuICAgIHJldHVybiBbbVszXSAvIGQsIC1tWzFdIC8gZCwgLW1bMl0gLyBkLCBtWzBdIC8gZCxcbiAgICAgIChtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQsIChtWzRdICogbVsxXSAtIG1bNV0gKiBtWzBdKSAvIGRdO1xuICB9XG5cbiAgLy8gQXBwbHkgYSBnZW5lcmljIDNkIG1hdHJpeCBNIG9uIGEgMy12ZWN0b3IgdjpcbiAgLy8gICB8IGEgYiBjIHwgICB8IFggfFxuICAvLyAgIHwgZCBlIGYgfCB4IHwgWSB8XG4gIC8vICAgfCBnIGggaSB8ICAgfCBaIHxcbiAgLy8gTSBpcyBhc3N1bWVkIHRvIGJlIHNlcmlhbGl6ZWQgYXMgW2EsYixjLGQsZSxmLGcsaCxpXSxcbiAgLy8gd2l0aCB2IGFzIFtYLFksWl1cbiAgc3RhdGljIGFwcGx5M2RUcmFuc2Zvcm0obSwgdikge1xuICAgIHJldHVybiBbXG4gICAgICBtWzBdICogdlswXSArIG1bMV0gKiB2WzFdICsgbVsyXSAqIHZbMl0sXG4gICAgICBtWzNdICogdlswXSArIG1bNF0gKiB2WzFdICsgbVs1XSAqIHZbMl0sXG4gICAgICBtWzZdICogdlswXSArIG1bN10gKiB2WzFdICsgbVs4XSAqIHZbMl1cbiAgICBdO1xuICB9XG5cbiAgLy8gVGhpcyBjYWxjdWxhdGlvbiB1c2VzIFNpbmd1bGFyIFZhbHVlIERlY29tcG9zaXRpb24uXG4gIC8vIFRoZSBTVkQgY2FuIGJlIHJlcHJlc2VudGVkIHdpdGggZm9ybXVsYSBBID0gVVNWLiBXZSBhcmUgaW50ZXJlc3RlZCBpbiB0aGVcbiAgLy8gbWF0cml4IFMgaGVyZSBiZWNhdXNlIGl0IHJlcHJlc2VudHMgdGhlIHNjYWxlIHZhbHVlcy5cbiAgc3RhdGljIHNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG0pIHtcbiAgICBjb25zdCB0cmFuc3Bvc2UgPSBbbVswXSwgbVsyXSwgbVsxXSwgbVszXV07XG5cbiAgICAvLyBNdWx0aXBseSBtYXRyaXggbSB3aXRoIGl0cyB0cmFuc3Bvc2UuXG4gICAgY29uc3QgYSA9IG1bMF0gKiB0cmFuc3Bvc2VbMF0gKyBtWzFdICogdHJhbnNwb3NlWzJdO1xuICAgIGNvbnN0IGIgPSBtWzBdICogdHJhbnNwb3NlWzFdICsgbVsxXSAqIHRyYW5zcG9zZVszXTtcbiAgICBjb25zdCBjID0gbVsyXSAqIHRyYW5zcG9zZVswXSArIG1bM10gKiB0cmFuc3Bvc2VbMl07XG4gICAgY29uc3QgZCA9IG1bMl0gKiB0cmFuc3Bvc2VbMV0gKyBtWzNdICogdHJhbnNwb3NlWzNdO1xuXG4gICAgLy8gU29sdmUgdGhlIHNlY29uZCBkZWdyZWUgcG9seW5vbWlhbCB0byBnZXQgcm9vdHMuXG4gICAgY29uc3QgZmlyc3QgPSAoYSArIGQpIC8gMjtcbiAgICBjb25zdCBzZWNvbmQgPSBNYXRoLnNxcnQoKGEgKyBkKSAqIChhICsgZCkgLSA0ICogKGEgKiBkIC0gYyAqIGIpKSAvIDI7XG4gICAgY29uc3Qgc3ggPSBmaXJzdCArIHNlY29uZCB8fCAxO1xuICAgIGNvbnN0IHN5ID0gZmlyc3QgLSBzZWNvbmQgfHwgMTtcblxuICAgIC8vIFNjYWxlIHZhbHVlcyBhcmUgdGhlIHNxdWFyZSByb290cyBvZiB0aGUgZWlnZW52YWx1ZXMuXG4gICAgcmV0dXJuIFtNYXRoLnNxcnQoc3gpLCBNYXRoLnNxcnQoc3kpXTtcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSByZWN0YW5nbGUgcmVjdD1beDEsIHkxLCB4MiwgeTJdIHNvIHRoYXQgKHgxLHkxKSA8ICh4Mix5MilcbiAgLy8gRm9yIGNvb3JkaW5hdGUgc3lzdGVtcyB3aG9zZSBvcmlnaW4gbGllcyBpbiB0aGUgYm90dG9tLWxlZnQsIHRoaXNcbiAgLy8gbWVhbnMgbm9ybWFsaXphdGlvbiB0byAoQkwsVFIpIG9yZGVyaW5nLiBGb3Igc3lzdGVtcyB3aXRoIG9yaWdpbiBpbiB0aGVcbiAgLy8gdG9wLWxlZnQsIHRoaXMgbWVhbnMgKFRMLEJSKSBvcmRlcmluZy5cbiAgc3RhdGljIG5vcm1hbGl6ZVJlY3QocmVjdCkge1xuICAgIGNvbnN0IHIgPSByZWN0LnNsaWNlKDApOyAvLyBjbG9uZSByZWN0XG4gICAgaWYgKHJlY3RbMF0gPiByZWN0WzJdKSB7XG4gICAgICByWzBdID0gcmVjdFsyXTtcbiAgICAgIHJbMl0gPSByZWN0WzBdO1xuICAgIH1cbiAgICBpZiAocmVjdFsxXSA+IHJlY3RbM10pIHtcbiAgICAgIHJbMV0gPSByZWN0WzNdO1xuICAgICAgclszXSA9IHJlY3RbMV07XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgLy8gUmV0dXJucyBhIHJlY3RhbmdsZSBbeDEsIHkxLCB4MiwgeTJdIGNvcnJlc3BvbmRpbmcgdG8gdGhlXG4gIC8vIGludGVyc2VjdGlvbiBvZiByZWN0MSBhbmQgcmVjdDIuIElmIG5vIGludGVyc2VjdGlvbiwgcmV0dXJucyAnZmFsc2UnXG4gIC8vIFRoZSByZWN0YW5nbGUgY29vcmRpbmF0ZXMgb2YgcmVjdDEsIHJlY3QyIHNob3VsZCBiZSBbeDEsIHkxLCB4MiwgeTJdXG4gIHN0YXRpYyBpbnRlcnNlY3QocmVjdDEsIHJlY3QyKSB7XG4gICAgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gICAgICByZXR1cm4gYSAtIGI7XG4gICAgfVxuXG4gICAgLy8gT3JkZXIgcG9pbnRzIGFsb25nIHRoZSBheGVzXG4gICAgY29uc3Qgb3JkZXJlZFggPSBbcmVjdDFbMF0sIHJlY3QxWzJdLCByZWN0MlswXSwgcmVjdDJbMl1dLnNvcnQoY29tcGFyZSk7XG4gICAgY29uc3Qgb3JkZXJlZFkgPSBbcmVjdDFbMV0sIHJlY3QxWzNdLCByZWN0MlsxXSwgcmVjdDJbM11dLnNvcnQoY29tcGFyZSk7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICByZWN0MSA9IFV0aWwubm9ybWFsaXplUmVjdChyZWN0MSk7XG4gICAgcmVjdDIgPSBVdGlsLm5vcm1hbGl6ZVJlY3QocmVjdDIpO1xuXG4gICAgLy8gWDogZmlyc3QgYW5kIHNlY29uZCBwb2ludHMgYmVsb25nIHRvIGRpZmZlcmVudCByZWN0YW5nbGVzP1xuICAgIGlmICgob3JkZXJlZFhbMF0gPT09IHJlY3QxWzBdICYmIG9yZGVyZWRYWzFdID09PSByZWN0MlswXSkgfHxcbiAgICAgICAgKG9yZGVyZWRYWzBdID09PSByZWN0MlswXSAmJiBvcmRlcmVkWFsxXSA9PT0gcmVjdDFbMF0pKSB7XG4gICAgICAvLyBJbnRlcnNlY3Rpb24gbXVzdCBiZSBiZXR3ZWVuIHNlY29uZCBhbmQgdGhpcmQgcG9pbnRzXG4gICAgICByZXN1bHRbMF0gPSBvcmRlcmVkWFsxXTtcbiAgICAgIHJlc3VsdFsyXSA9IG9yZGVyZWRYWzJdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBZOiBmaXJzdCBhbmQgc2Vjb25kIHBvaW50cyBiZWxvbmcgdG8gZGlmZmVyZW50IHJlY3RhbmdsZXM/XG4gICAgaWYgKChvcmRlcmVkWVswXSA9PT0gcmVjdDFbMV0gJiYgb3JkZXJlZFlbMV0gPT09IHJlY3QyWzFdKSB8fFxuICAgICAgICAob3JkZXJlZFlbMF0gPT09IHJlY3QyWzFdICYmIG9yZGVyZWRZWzFdID09PSByZWN0MVsxXSkpIHtcbiAgICAgIC8vIEludGVyc2VjdGlvbiBtdXN0IGJlIGJldHdlZW4gc2Vjb25kIGFuZCB0aGlyZCBwb2ludHNcbiAgICAgIHJlc3VsdFsxXSA9IG9yZGVyZWRZWzFdO1xuICAgICAgcmVzdWx0WzNdID0gb3JkZXJlZFlbMl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cblxuY29uc3QgUERGU3RyaW5nVHJhbnNsYXRlVGFibGUgPSBbXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXG4gIDB4MkQ4LCAweDJDNywgMHgyQzYsIDB4MkQ5LCAweDJERCwgMHgyREIsIDB4MkRBLCAweDJEQywgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxcbiAgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMHgyMDIyLCAweDIwMjAsIDB4MjAyMSwgMHgyMDI2LCAweDIwMTQsXG4gIDB4MjAxMywgMHgxOTIsIDB4MjA0NCwgMHgyMDM5LCAweDIwM0EsIDB4MjIxMiwgMHgyMDMwLCAweDIwMUUsIDB4MjAxQyxcbiAgMHgyMDFELCAweDIwMTgsIDB4MjAxOSwgMHgyMDFBLCAweDIxMjIsIDB4RkIwMSwgMHhGQjAyLCAweDE0MSwgMHgxNTIsIDB4MTYwLFxuICAweDE3OCwgMHgxN0QsIDB4MTMxLCAweDE0MiwgMHgxNTMsIDB4MTYxLCAweDE3RSwgMCwgMHgyMEFDXG5dO1xuXG5mdW5jdGlvbiBzdHJpbmdUb1BERlN0cmluZyhzdHIpIHtcbiAgY29uc3QgbGVuZ3RoID0gc3RyLmxlbmd0aCwgc3RyQnVmID0gW107XG4gIGlmIChzdHJbMF0gPT09ICdcXHhGRScgJiYgc3RyWzFdID09PSAnXFx4RkYnKSB7XG4gICAgLy8gVVRGMTZCRSBCT01cbiAgICBmb3IgKGxldCBpID0gMjsgaSA8IGxlbmd0aDsgaSArPSAyKSB7XG4gICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgICAgICAoc3RyLmNoYXJDb2RlQXQoaSkgPDwgOCkgfCBzdHIuY2hhckNvZGVBdChpICsgMSkpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgY29kZSA9IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlW3N0ci5jaGFyQ29kZUF0KGkpXTtcbiAgICAgIHN0ckJ1Zi5wdXNoKGNvZGUgPyBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpIDogc3RyLmNoYXJBdChpKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHJCdWYuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvVVRGOFN0cmluZyhzdHIpIHtcbiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3RyKSk7XG59XG5cbmZ1bmN0aW9uIHV0ZjhTdHJpbmdUb1N0cmluZyhzdHIpIHtcbiAgcmV0dXJuIHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU9iaihvYmopIHtcbiAgZm9yIChsZXQga2V5IGluIG9iaikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNCb29sKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbic7XG59XG5cbmZ1bmN0aW9uIGlzTnVtKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNTdHJpbmcodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHYpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ID09PSAnb2JqZWN0JyAmJiB2ICE9PSBudWxsICYmIHYuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikge1xuICBpZiAoYXJyMS5sZW5ndGggIT09IGFycjIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBhcnIxLmV2ZXJ5KGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQgPT09IGFycjJbaW5kZXhdO1xuICB9KTtcbn1cblxuLy8gQ2hlY2tzIGlmIGNoIGlzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNoYXJhY3RlcnM6IFNQQUNFLCBUQUIsIENSIG9yIExGLlxuZnVuY3Rpb24gaXNTcGFjZShjaCkge1xuICByZXR1cm4gKGNoID09PSAweDIwIHx8IGNoID09PSAweDA5IHx8IGNoID09PSAweDBEIHx8IGNoID09PSAweDBBKTtcbn1cblxuLyoqXG4gKiBQcm9taXNlIENhcGFiaWxpdHkgb2JqZWN0LlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFByb21pc2VDYXBhYmlsaXR5XG4gKiBAcHJvcGVydHkge1Byb21pc2V9IHByb21pc2UgLSBBIFByb21pc2Ugb2JqZWN0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBzZXR0bGVkIC0gSWYgdGhlIFByb21pc2UgaGFzIGJlZW4gZnVsZmlsbGVkL3JlamVjdGVkLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcmVzb2x2ZSAtIEZ1bGZpbGxzIHRoZSBQcm9taXNlLlxuICogQHByb3BlcnR5IHtmdW5jdGlvbn0gcmVqZWN0IC0gUmVqZWN0cyB0aGUgUHJvbWlzZS5cbiAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBwcm9taXNlIGNhcGFiaWxpdHkgb2JqZWN0LlxuICogQGFsaWFzIGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5XG4gKlxuICogQHJldHVybiB7UHJvbWlzZUNhcGFiaWxpdHl9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KCkge1xuICBjb25zdCBjYXBhYmlsaXR5ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgbGV0IGlzU2V0dGxlZCA9IGZhbHNlO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYXBhYmlsaXR5LCAnc2V0dGxlZCcsIHtcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gaXNTZXR0bGVkO1xuICAgIH0sXG4gIH0pO1xuICBjYXBhYmlsaXR5LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBjYXBhYmlsaXR5LnJlc29sdmUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBpc1NldHRsZWQgPSB0cnVlO1xuICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICB9O1xuICAgIGNhcGFiaWxpdHkucmVqZWN0ID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICBpc1NldHRsZWQgPSB0cnVlO1xuICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBjYXBhYmlsaXR5O1xufVxuXG5jb25zdCBjcmVhdGVPYmplY3RVUkwgPSAoZnVuY3Rpb24gY3JlYXRlT2JqZWN0VVJMQ2xvc3VyZSgpIHtcbiAgLy8gQmxvYi9jcmVhdGVPYmplY3RVUkwgaXMgbm90IGF2YWlsYWJsZSwgZmFsbGluZyBiYWNrIHRvIGRhdGEgc2NoZW1hLlxuICBjb25zdCBkaWdpdHMgPVxuICAgICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChkYXRhLCBjb250ZW50VHlwZSwgZm9yY2VEYXRhU2NoZW1hID0gZmFsc2UpIHtcbiAgICBpZiAoIWZvcmNlRGF0YVNjaGVtYSAmJiBVUkwuY3JlYXRlT2JqZWN0VVJMKSB7XG4gICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2RhdGFdLCB7IHR5cGU6IGNvbnRlbnRUeXBlLCB9KTtcbiAgICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICAgIH1cblxuICAgIGxldCBidWZmZXIgPSBgZGF0YToke2NvbnRlbnRUeXBlfTtiYXNlNjQsYDtcbiAgICBmb3IgKGxldCBpID0gMCwgaWkgPSBkYXRhLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHtcbiAgICAgIGNvbnN0IGIxID0gZGF0YVtpXSAmIDB4RkY7XG4gICAgICBjb25zdCBiMiA9IGRhdGFbaSArIDFdICYgMHhGRjtcbiAgICAgIGNvbnN0IGIzID0gZGF0YVtpICsgMl0gJiAweEZGO1xuICAgICAgY29uc3QgZDEgPSBiMSA+PiAyLCBkMiA9ICgoYjEgJiAzKSA8PCA0KSB8IChiMiA+PiA0KTtcbiAgICAgIGNvbnN0IGQzID0gaSArIDEgPCBpaSA/ICgoYjIgJiAweEYpIDw8IDIpIHwgKGIzID4+IDYpIDogNjQ7XG4gICAgICBjb25zdCBkNCA9IGkgKyAyIDwgaWkgPyAoYjMgJiAweDNGKSA6IDY0O1xuICAgICAgYnVmZmVyICs9IGRpZ2l0c1tkMV0gKyBkaWdpdHNbZDJdICsgZGlnaXRzW2QzXSArIGRpZ2l0c1tkNF07XG4gICAgfVxuICAgIHJldHVybiBidWZmZXI7XG4gIH07XG59KSgpO1xuXG5leHBvcnQge1xuICBGT05UX0lERU5USVRZX01BVFJJWCxcbiAgSURFTlRJVFlfTUFUUklYLFxuICBPUFMsXG4gIFZlcmJvc2l0eUxldmVsLFxuICBVTlNVUFBPUlRFRF9GRUFUVVJFUyxcbiAgQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSxcbiAgQW5ub3RhdGlvbkZpZWxkRmxhZyxcbiAgQW5ub3RhdGlvbkZsYWcsXG4gIEFubm90YXRpb25NYXJrZWRTdGF0ZSxcbiAgQW5ub3RhdGlvblJlcGx5VHlwZSxcbiAgQW5ub3RhdGlvblJldmlld1N0YXRlLFxuICBBbm5vdGF0aW9uU3RhdGVNb2RlbFR5cGUsXG4gIEFubm90YXRpb25UeXBlLFxuICBGb250VHlwZSxcbiAgSW1hZ2VLaW5kLFxuICBDTWFwQ29tcHJlc3Npb25UeXBlLFxuICBBYm9ydEV4Y2VwdGlvbixcbiAgSW52YWxpZFBERkV4Y2VwdGlvbixcbiAgTWlzc2luZ1BERkV4Y2VwdGlvbixcbiAgTmF0aXZlSW1hZ2VEZWNvZGluZyxcbiAgUGFzc3dvcmRFeGNlcHRpb24sXG4gIFBhc3N3b3JkUmVzcG9uc2VzLFxuICBQZXJtaXNzaW9uRmxhZyxcbiAgU3RyZWFtVHlwZSxcbiAgVGV4dFJlbmRlcmluZ01vZGUsXG4gIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbixcbiAgVW5rbm93bkVycm9yRXhjZXB0aW9uLFxuICBVdGlsLFxuICBGb3JtYXRFcnJvcixcbiAgYXJyYXlCeXRlTGVuZ3RoLFxuICBhcnJheXNUb0J5dGVzLFxuICBhc3NlcnQsXG4gIGJ5dGVzVG9TdHJpbmcsXG4gIGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5LFxuICBjcmVhdGVPYmplY3RVUkwsXG4gIGdldFZlcmJvc2l0eUxldmVsLFxuICBpbmZvLFxuICBpc0FycmF5QnVmZmVyLFxuICBpc0FycmF5RXF1YWwsXG4gIGlzQm9vbCxcbiAgaXNFbXB0eU9iaixcbiAgaXNOdW0sXG4gIGlzU3RyaW5nLFxuICBpc1NwYWNlLFxuICBpc1NhbWVPcmlnaW4sXG4gIGNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwsXG4gIGlzTGl0dGxlRW5kaWFuLFxuICBpc0V2YWxTdXBwb3J0ZWQsXG4gIGxvZzIsXG4gIHJlYWRJbnQ4LFxuICByZWFkVWludDE2LFxuICByZWFkVWludDMyLFxuICByZW1vdmVOdWxsQ2hhcmFjdGVycyxcbiAgUmVhZGFibGVTdHJlYW0sXG4gIFVSTCxcbiAgc2V0VmVyYm9zaXR5TGV2ZWwsXG4gIHNoYWRvdyxcbiAgc3RyaW5nMzIsXG4gIHN0cmluZ1RvQnl0ZXMsXG4gIHN0cmluZ1RvUERGU3RyaW5nLFxuICBzdHJpbmdUb1VURjhTdHJpbmcsXG4gIHV0ZjhTdHJpbmdUb1N0cmluZyxcbiAgd2FybixcbiAgdW5yZWFjaGFibGUsXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vdmVuZG9yL3BkZi5qcy9zaGFyZWQvdXRpbC5qcyIsIi8qIENvcHlyaWdodCAyMDEyIE1vemlsbGEgRm91bmRhdGlvblxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZXNsaW50IG5vLXZhcjogZXJyb3IgKi9cblxuLy8gVGFibGUgQy0yXG5jb25zdCBRZVRhYmxlID0gW1xuICB7IHFlOiAweDU2MDEsIG5tcHM6IDEsIG5scHM6IDEsIHN3aXRjaEZsYWc6IDEsIH0sXG4gIHsgcWU6IDB4MzQwMSwgbm1wczogMiwgbmxwczogNiwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgxODAxLCBubXBzOiAzLCBubHBzOiA5LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDBBQzEsIG5tcHM6IDQsIG5scHM6IDEyLCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDA1MjEsIG5tcHM6IDUsIG5scHM6IDI5LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDAyMjEsIG5tcHM6IDM4LCBubHBzOiAzMywgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHg1NjAxLCBubXBzOiA3LCBubHBzOiA2LCBzd2l0Y2hGbGFnOiAxLCB9LFxuICB7IHFlOiAweDU0MDEsIG5tcHM6IDgsIG5scHM6IDE0LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDQ4MDEsIG5tcHM6IDksIG5scHM6IDE0LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDM4MDEsIG5tcHM6IDEwLCBubHBzOiAxNCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgzMDAxLCBubXBzOiAxMSwgbmxwczogMTcsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MjQwMSwgbm1wczogMTIsIG5scHM6IDE4LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDFDMDEsIG5tcHM6IDEzLCBubHBzOiAyMCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgxNjAxLCBubXBzOiAyOSwgbmxwczogMjEsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4NTYwMSwgbm1wczogMTUsIG5scHM6IDE0LCBzd2l0Y2hGbGFnOiAxLCB9LFxuICB7IHFlOiAweDU0MDEsIG5tcHM6IDE2LCBubHBzOiAxNCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHg1MTAxLCBubXBzOiAxNywgbmxwczogMTUsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4NDgwMSwgbm1wczogMTgsIG5scHM6IDE2LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDM4MDEsIG5tcHM6IDE5LCBubHBzOiAxNywgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgzNDAxLCBubXBzOiAyMCwgbmxwczogMTgsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MzAwMSwgbm1wczogMjEsIG5scHM6IDE5LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDI4MDEsIG5tcHM6IDIyLCBubHBzOiAxOSwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgyNDAxLCBubXBzOiAyMywgbmxwczogMjAsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MjIwMSwgbm1wczogMjQsIG5scHM6IDIxLCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDFDMDEsIG5tcHM6IDI1LCBubHBzOiAyMiwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgxODAxLCBubXBzOiAyNiwgbmxwczogMjMsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MTYwMSwgbm1wczogMjcsIG5scHM6IDI0LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDE0MDEsIG5tcHM6IDI4LCBubHBzOiAyNSwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgxMjAxLCBubXBzOiAyOSwgbmxwczogMjYsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MTEwMSwgbm1wczogMzAsIG5scHM6IDI3LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDBBQzEsIG5tcHM6IDMxLCBubHBzOiAyOCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgwOUMxLCBubXBzOiAzMiwgbmxwczogMjksIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MDhBMSwgbm1wczogMzMsIG5scHM6IDMwLCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDA1MjEsIG5tcHM6IDM0LCBubHBzOiAzMSwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgwNDQxLCBubXBzOiAzNSwgbmxwczogMzIsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MDJBMSwgbm1wczogMzYsIG5scHM6IDMzLCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDAyMjEsIG5tcHM6IDM3LCBubHBzOiAzNCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgwMTQxLCBubXBzOiAzOCwgbmxwczogMzUsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MDExMSwgbm1wczogMzksIG5scHM6IDM2LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDAwODUsIG5tcHM6IDQwLCBubHBzOiAzNywgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgwMDQ5LCBubXBzOiA0MSwgbmxwczogMzgsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MDAyNSwgbm1wczogNDIsIG5scHM6IDM5LCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDAwMTUsIG5tcHM6IDQzLCBubHBzOiA0MCwgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHgwMDA5LCBubXBzOiA0NCwgbmxwczogNDEsIHN3aXRjaEZsYWc6IDAsIH0sXG4gIHsgcWU6IDB4MDAwNSwgbm1wczogNDUsIG5scHM6IDQyLCBzd2l0Y2hGbGFnOiAwLCB9LFxuICB7IHFlOiAweDAwMDEsIG5tcHM6IDQ1LCBubHBzOiA0Mywgc3dpdGNoRmxhZzogMCwgfSxcbiAgeyBxZTogMHg1NjAxLCBubXBzOiA0NiwgbmxwczogNDYsIHN3aXRjaEZsYWc6IDAsIH0sXG5dO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgaW1wbGVtZW50cyB0aGUgUU0gQ29kZXIgZGVjb2RpbmcgYXMgZGVmaW5lZCBpblxuICogICBKUEVHIDIwMDAgUGFydCBJIEZpbmFsIENvbW1pdHRlZSBEcmFmdCBWZXJzaW9uIDEuMFxuICogICBBbm5leCBDLjMgQXJpdGhtZXRpYyBkZWNvZGluZyBwcm9jZWR1cmVcbiAqIGF2YWlsYWJsZSBhdCBodHRwOi8vd3d3LmpwZWcub3JnL3B1YmxpYy9mY2QxNTQ0NC0xLnBkZlxuICpcbiAqIFRoZSBhcml0aG1ldGljIGRlY29kZXIgaXMgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGNvbnRleHQgbW9kZWxzIHRvIGRlY29kZVxuICogSlBFRzIwMDAgYW5kIEpCSUcyIHN0cmVhbXMuXG4gKi9cbmNsYXNzIEFyaXRobWV0aWNEZWNvZGVyIHtcbiAgLy8gQy4zLjUgSW5pdGlhbGlzYXRpb24gb2YgdGhlIGRlY29kZXIgKElOSVRERUMpXG4gIGNvbnN0cnVjdG9yKGRhdGEsIHN0YXJ0LCBlbmQpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuYnAgPSBzdGFydDtcbiAgICB0aGlzLmRhdGFFbmQgPSBlbmQ7XG5cbiAgICB0aGlzLmNoaWdoID0gZGF0YVtzdGFydF07XG4gICAgdGhpcy5jbG93ID0gMDtcblxuICAgIHRoaXMuYnl0ZUluKCk7XG5cbiAgICB0aGlzLmNoaWdoID0gKCh0aGlzLmNoaWdoIDw8IDcpICYgMHhGRkZGKSB8ICgodGhpcy5jbG93ID4+IDkpICYgMHg3Rik7XG4gICAgdGhpcy5jbG93ID0gKHRoaXMuY2xvdyA8PCA3KSAmIDB4RkZGRjtcbiAgICB0aGlzLmN0IC09IDc7XG4gICAgdGhpcy5hID0gMHg4MDAwO1xuICB9XG5cbiAgLy8gQy4zLjQgQ29tcHJlc3NlZCBkYXRhIGlucHV0IChCWVRFSU4pXG4gIGJ5dGVJbigpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGxldCBicCA9IHRoaXMuYnA7XG5cbiAgICBpZiAoZGF0YVticF0gPT09IDB4RkYpIHtcbiAgICAgIGlmIChkYXRhW2JwICsgMV0gPiAweDhGKSB7XG4gICAgICAgIHRoaXMuY2xvdyArPSAweEZGMDA7XG4gICAgICAgIHRoaXMuY3QgPSA4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnArKztcbiAgICAgICAgdGhpcy5jbG93ICs9IChkYXRhW2JwXSA8PCA5KTtcbiAgICAgICAgdGhpcy5jdCA9IDc7XG4gICAgICAgIHRoaXMuYnAgPSBicDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYnArKztcbiAgICAgIHRoaXMuY2xvdyArPSBicCA8IHRoaXMuZGF0YUVuZCA/IChkYXRhW2JwXSA8PCA4KSA6IDB4RkYwMDtcbiAgICAgIHRoaXMuY3QgPSA4O1xuICAgICAgdGhpcy5icCA9IGJwO1xuICAgIH1cbiAgICBpZiAodGhpcy5jbG93ID4gMHhGRkZGKSB7XG4gICAgICB0aGlzLmNoaWdoICs9ICh0aGlzLmNsb3cgPj4gMTYpO1xuICAgICAgdGhpcy5jbG93ICY9IDB4RkZGRjtcbiAgICB9XG4gIH1cblxuICAvLyBDLjMuMiBEZWNvZGluZyBhIGRlY2lzaW9uIChERUNPREUpXG4gIHJlYWRCaXQoY29udGV4dHMsIHBvcykge1xuICAgIC8vIENvbnRleHRzIGFyZSBwYWNrZWQgaW50byAxIGJ5dGU6XG4gICAgLy8gaGlnaGVzdCA3IGJpdHMgY2FycnkgY3guaW5kZXgsIGxvd2VzdCBiaXQgY2FycmllcyBjeC5tcHNcbiAgICBsZXQgY3hfaW5kZXggPSBjb250ZXh0c1twb3NdID4+IDEsIGN4X21wcyA9IGNvbnRleHRzW3Bvc10gJiAxO1xuICAgIGNvbnN0IHFlVGFibGVJY3ggPSBRZVRhYmxlW2N4X2luZGV4XTtcbiAgICBjb25zdCBxZUljeCA9IHFlVGFibGVJY3gucWU7XG4gICAgbGV0IGQ7XG4gICAgbGV0IGEgPSB0aGlzLmEgLSBxZUljeDtcblxuICAgIGlmICh0aGlzLmNoaWdoIDwgcWVJY3gpIHtcbiAgICAgIC8vIGV4Y2hhbmdlTHBzXG4gICAgICBpZiAoYSA8IHFlSWN4KSB7XG4gICAgICAgIGEgPSBxZUljeDtcbiAgICAgICAgZCA9IGN4X21wcztcbiAgICAgICAgY3hfaW5kZXggPSBxZVRhYmxlSWN4Lm5tcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhID0gcWVJY3g7XG4gICAgICAgIGQgPSAxIF4gY3hfbXBzO1xuICAgICAgICBpZiAocWVUYWJsZUljeC5zd2l0Y2hGbGFnID09PSAxKSB7XG4gICAgICAgICAgY3hfbXBzID0gZDtcbiAgICAgICAgfVxuICAgICAgICBjeF9pbmRleCA9IHFlVGFibGVJY3gubmxwcztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGlnaCAtPSBxZUljeDtcbiAgICAgIGlmICgoYSAmIDB4ODAwMCkgIT09IDApIHtcbiAgICAgICAgdGhpcy5hID0gYTtcbiAgICAgICAgcmV0dXJuIGN4X21wcztcbiAgICAgIH1cbiAgICAgIC8vIGV4Y2hhbmdlTXBzXG4gICAgICBpZiAoYSA8IHFlSWN4KSB7XG4gICAgICAgIGQgPSAxIF4gY3hfbXBzO1xuICAgICAgICBpZiAocWVUYWJsZUljeC5zd2l0Y2hGbGFnID09PSAxKSB7XG4gICAgICAgICAgY3hfbXBzID0gZDtcbiAgICAgICAgfVxuICAgICAgICBjeF9pbmRleCA9IHFlVGFibGVJY3gubmxwcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGQgPSBjeF9tcHM7XG4gICAgICAgIGN4X2luZGV4ID0gcWVUYWJsZUljeC5ubXBzO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBDLjMuMyByZW5vcm1EO1xuICAgIGRvIHtcbiAgICAgIGlmICh0aGlzLmN0ID09PSAwKSB7XG4gICAgICAgIHRoaXMuYnl0ZUluKCk7XG4gICAgICB9XG5cbiAgICAgIGEgPDw9IDE7XG4gICAgICB0aGlzLmNoaWdoID0gKCh0aGlzLmNoaWdoIDw8IDEpICYgMHhGRkZGKSB8ICgodGhpcy5jbG93ID4+IDE1KSAmIDEpO1xuICAgICAgdGhpcy5jbG93ID0gKHRoaXMuY2xvdyA8PCAxKSAmIDB4RkZGRjtcbiAgICAgIHRoaXMuY3QtLTtcbiAgICB9IHdoaWxlICgoYSAmIDB4ODAwMCkgPT09IDApO1xuICAgIHRoaXMuYSA9IGE7XG5cbiAgICBjb250ZXh0c1twb3NdID0gY3hfaW5kZXggPDwgMSB8IGN4X21wcztcbiAgICByZXR1cm4gZDtcbiAgfVxufVxuXG5leHBvcnQge1xuICBBcml0aG1ldGljRGVjb2Rlcixcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi92ZW5kb3IvcGRmLmpzL2NvcmUvYXJpdGhtZXRpY19kZWNvZGVyLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBkZmpzSnB4UGl4ZWxzRGVjb2RlcjtcblxudmFyIFBkZmpzSnB4Q29udGV4dFBvb2wgPSByZXF1aXJlKCdwZGZqcy1qcHgtY29udGV4dC1wb29sLmpzJyk7XG5cbmZ1bmN0aW9uIFBkZmpzSnB4UGl4ZWxzRGVjb2RlcigpIHtcbiAgICB0aGlzLl9jb250ZXh0UG9vbCA9IG5ldyBQZGZqc0pweENvbnRleHRQb29sKCk7XG59XG5cbi8qKlxuICogXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YSBcbiAqL1xuUGRmanNKcHhQaXhlbHNEZWNvZGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGRhdGEpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgaW1hZ2UgPSBzZWxmLl9jb250ZXh0UG9vbC5pbWFnZTtcbiAgICAgICAgdmFyIGN1cnJlbnRDb250ZXh0ID0gc2VsZi5fY29udGV4dFBvb2wuZ2V0Q29udGV4dChkYXRhLmhlYWRlcnNDb2Rlc3RyZWFtKTtcblxuICAgICAgICB2YXIgcmVnaW9uVG9QYXJzZSA9IHtcbiAgICAgICAgICAgIGxlZnQgIDogZGF0YS5vZmZzZXRJblJlZ2lvbi5vZmZzZXRYLFxuICAgICAgICAgICAgdG9wICAgOiBkYXRhLm9mZnNldEluUmVnaW9uLm9mZnNldFksXG4gICAgICAgICAgICByaWdodCA6IGRhdGEub2Zmc2V0SW5SZWdpb24ub2Zmc2V0WCArIGRhdGEub2Zmc2V0SW5SZWdpb24ud2lkdGgsXG4gICAgICAgICAgICBib3R0b206IGRhdGEub2Zmc2V0SW5SZWdpb24ub2Zmc2V0WSArIGRhdGEub2Zmc2V0SW5SZWdpb24uaGVpZ2h0XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgaW1hZ2VUaWxlc1ggPSBkYXRhLmltYWdlVGlsZXNYO1xuICAgICAgICB2YXIgYm91bmRzVGlsZXNYID0gZGF0YS50aWxlc0JvdW5kcy5tYXhUaWxlWEV4Y2x1c2l2ZSAtIGRhdGEudGlsZXNCb3VuZHMubWluVGlsZVg7XG4gICAgICAgIHZhciBtaW5UaWxlWCA9IGRhdGEudGlsZXNCb3VuZHMubWluVGlsZVg7XG4gICAgICAgIHZhciBtaW5UaWxlWSA9IGRhdGEudGlsZXNCb3VuZHMubWluVGlsZVk7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEucHJlY2luY3RDb2VmZmljaWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjb2VmZnMgPSBkYXRhLnByZWNpbmN0Q29lZmZpY2llbnRzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgaW1hZ2VUaWxlSW5kZXggPSBjb2VmZnMua2V5LnRpbGVJbmRleDtcbiAgICAgICAgICAgIHZhciBpbWFnZVRpbGVYID0gaW1hZ2VUaWxlSW5kZXggJSBpbWFnZVRpbGVzWDtcbiAgICAgICAgICAgIHZhciBpbWFnZVRpbGVZID0gTWF0aC5mbG9vcihpbWFnZVRpbGVJbmRleCAvIGltYWdlVGlsZXNYKTtcbiAgICAgICAgICAgIHZhciBpbkJvdW5kc1RpbGVYID0gaW1hZ2VUaWxlWCAtIG1pblRpbGVYO1xuICAgICAgICAgICAgdmFyIGluQm91bmRzVGlsZVkgPSBpbWFnZVRpbGVZIC0gbWluVGlsZVk7XG4gICAgICAgICAgICB2YXIgaW5Cb3VuZHNUaWxlSW5kZXggPSBpbkJvdW5kc1RpbGVYICsgKGluQm91bmRzVGlsZVkgKiBib3VuZHNUaWxlc1gpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpbWFnZS5zZXRQcmVjaW5jdENvZWZmaWNpZW50cyhcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCxcbiAgICAgICAgICAgICAgICBjb2VmZnMuY29lZmZpY2llbnRzLFxuICAgICAgICAgICAgICAgIGluQm91bmRzVGlsZUluZGV4LFxuICAgICAgICAgICAgICAgIGNvZWZmcy5rZXkuY29tcG9uZW50LFxuICAgICAgICAgICAgICAgIGNvZWZmcy5rZXkucmVzb2x1dGlvbkxldmVsLFxuICAgICAgICAgICAgICAgIGNvZWZmcy5rZXkucHJlY2luY3RJbmRleEluQ29tcG9uZW50UmVzb2x1dGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGltYWdlLmRlY29kZShjdXJyZW50Q29udGV4dCwgeyByZWdpb25Ub1BhcnNlOiByZWdpb25Ub1BhcnNlIH0pO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBzZWxmLl9jb3B5VGlsZXNQaXhlbHNUb09uZVBpeGVsc0FycmF5KGltYWdlLnRpbGVzLCByZWdpb25Ub1BhcnNlLCBpbWFnZS5jb21wb25lbnRzQ291bnQpO1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIENvcHkgdGlsZXMgcGl4ZWxzIHRvIG9uZSBwaXhlbHMgYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5fSB0aWxlcyBcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXN1bHRSZWdpb24gTGVmdCwgdG9wLCByaWdodCBhbmQgYm90dG9tIGluZGljZXMuXG4gKiBAcGFyYW0ge251bWJlcn0gY29tcG9uZW50c0NvdW50IE51bWJlciBvZiBjb21wb25lbnRzLlxuICovXG5QZGZqc0pweFBpeGVsc0RlY29kZXIucHJvdG90eXBlLl9jb3B5VGlsZXNQaXhlbHNUb09uZVBpeGVsc0FycmF5ID1cbiAgICBmdW5jdGlvbiBjb3B5VGlsZXNQaXhlbHNUb09uZVBpeGVsc0FycmF5KHRpbGVzLCByZXN1bHRSZWdpb24sIGNvbXBvbmVudHNDb3VudCkge1xuICAgICAgICBcbiAgICB2YXIgZmlyc3RUaWxlID0gdGlsZXNbMF07XG4gICAgdmFyIHdpZHRoID0gcmVzdWx0UmVnaW9uLnJpZ2h0IC0gcmVzdWx0UmVnaW9uLmxlZnQ7XG4gICAgdmFyIGhlaWdodCA9IHJlc3VsdFJlZ2lvbi5ib3R0b20gLSByZXN1bHRSZWdpb24udG9wO1xuICAgIFxuICAgIC8vaWYgKGZpcnN0VGlsZS5sZWZ0ID09PSByZXN1bHRSZWdpb24ubGVmdCAmJlxuICAgIC8vICAgIGZpcnN0VGlsZS50b3AgPT09IHJlc3VsdFJlZ2lvbi50b3AgJiZcbiAgICAvLyAgICBmaXJzdFRpbGUud2lkdGggPT09IHdpZHRoICYmXG4gICAgLy8gICAgZmlyc3RUaWxlLmhlaWdodCA9PT0gaGVpZ2h0ICYmXG4gICAgLy8gICAgY29tcG9uZW50c0NvdW50ID09PSA0KSB7XG4gICAgLy8gICAgXG4gICAgLy8gICAgcmV0dXJuIGZpcnN0VGlsZTtcbiAgICAvL31cbiAgICBcbiAgICB2YXIgcmVzdWx0ID0gbmV3IEltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIFxuICAgIHZhciBieXRlc1BlclBpeGVsID0gNDsgLy8gNCBjb21wb25lbnRzIHBlciBwaXhlbCAtIFJHQkFcbiAgICB2YXIgcmdiYUltYWdlU3RyaWRlID0gd2lkdGggKiBieXRlc1BlclBpeGVsOyAvLyBJbWFnZSAnc3RyaWRlJ1xuICAgIFxuICAgIHZhciB0aWxlSW5kZXggPSAwO1xuICAgIFxuICAgIC8vZm9yICh2YXIgeCA9IDA7IHggPCBudW1UaWxlc1g7ICsreCkge1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aWxlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgdGlsZVJpZ2h0ID0gdGlsZXNbaV0ubGVmdCArIHRpbGVzW2ldLndpZHRoO1xuICAgICAgICB2YXIgdGlsZUJvdHRvbSA9IHRpbGVzW2ldLnRvcCArIHRpbGVzW2ldLmhlaWdodDtcbiAgICAgICAgXG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25MZWZ0ID0gTWF0aC5tYXgocmVzdWx0UmVnaW9uLmxlZnQsIHRpbGVzW2ldLmxlZnQpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uVG9wID0gTWF0aC5tYXgocmVzdWx0UmVnaW9uLnRvcCwgdGlsZXNbaV0udG9wKTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvblJpZ2h0ID0gTWF0aC5taW4ocmVzdWx0UmVnaW9uLnJpZ2h0LCB0aWxlUmlnaHQpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uQm90dG9tID0gTWF0aC5taW4ocmVzdWx0UmVnaW9uLmJvdHRvbSwgdGlsZUJvdHRvbSk7XG4gICAgICAgIFxuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uV2lkdGggPSBpbnRlcnNlY3Rpb25SaWdodCAtIGludGVyc2VjdGlvbkxlZnQ7XG4gICAgICAgIHZhciBpbnRlcnNlY3Rpb25IZWlnaHQgPSBpbnRlcnNlY3Rpb25Cb3R0b20gLSBpbnRlcnNlY3Rpb25Ub3A7XG4gICAgICAgIFxuICAgICAgICBpZiAoaW50ZXJzZWN0aW9uTGVmdCAhPT0gdGlsZXNbaV0ubGVmdCB8fFxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uVG9wICE9PSB0aWxlc1tpXS50b3AgfHxcbiAgICAgICAgICAgIGludGVyc2VjdGlvbldpZHRoICE9PSB0aWxlc1tpXS53aWR0aCB8fFxuICAgICAgICAgICAgaW50ZXJzZWN0aW9uSGVpZ2h0ICE9PSB0aWxlc1tpXS5oZWlnaHQpIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhyb3cgJ1Vuc3VwcG9ydGVkIHRpbGVzIHRvIGNvcHknO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgdGlsZU9mZnNldFhQaXhlbHMgPSBpbnRlcnNlY3Rpb25MZWZ0IC0gcmVzdWx0UmVnaW9uLmxlZnQ7XG4gICAgICAgIHZhciB0aWxlT2Zmc2V0WVBpeGVscyA9IGludGVyc2VjdGlvblRvcCAtIHJlc3VsdFJlZ2lvbi50b3A7XG4gICAgICAgICAgICBcbiAgICAgICAgdmFyIHRpbGVPZmZzZXRCeXRlcyA9XG4gICAgICAgICAgICB0aWxlT2Zmc2V0WFBpeGVscyAqIGJ5dGVzUGVyUGl4ZWwgK1xuICAgICAgICAgICAgdGlsZU9mZnNldFlQaXhlbHMgKiByZ2JhSW1hZ2VTdHJpZGU7XG5cbiAgICAgICAgdGhpcy5fY29weVRpbGUoXG4gICAgICAgICAgICByZXN1bHQuZGF0YSwgdGlsZXNbaV0sIHRpbGVPZmZzZXRCeXRlcywgcmdiYUltYWdlU3RyaWRlLCBjb21wb25lbnRzQ291bnQpO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBIb3Jpem9udGFsbHkgc3RyaWRlIHRocm91Z2ggcGl4ZWxzIHRvIGZvcm0gdGFyZ2V0SW1hZ2Ugb3ZlciByZWdpb24uXG4gKiBAcGFyYW0ge251bWJlcltdfSB0YXJnZXRJbWFnZSBcbiAqIEBwYXJhbSB7b2JqZWN0fSB0aWxlIFxuICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldEltYWdlU3RhcnRPZmZzZXQgV2hlcmUgdG8gc3RhcnQgY29weWluZyB0aWxlcyBpbiB0aGUgdGFyZ2V0IGltYWdlLlxuICogQHBhcmFtIHtudW1iZXJ9IHRhcmdldEltYWdlU3RyaWRlIFxuICogQHBhcmFtIHsqfSBjb21wb25lbnRzQ291bnQgTnVtYmVyIG9mIGNvbXBvbmVudHMgaW4gdGlsZS5cbiAqL1xuUGRmanNKcHhQaXhlbHNEZWNvZGVyLnByb3RvdHlwZS5fY29weVRpbGUgPSBmdW5jdGlvbiBjb3B5VGlsZShcbiAgICB0YXJnZXRJbWFnZSwgdGlsZSwgdGFyZ2V0SW1hZ2VTdGFydE9mZnNldCwgdGFyZ2V0SW1hZ2VTdHJpZGUsIGNvbXBvbmVudHNDb3VudCkge1xuICAgIFxuICAgIC8vIFJHQiBvZmZzZXRzXG4gICAgdmFyIHJPZmZzZXQgPSAwO1xuICAgIHZhciBnT2Zmc2V0ID0gMTtcbiAgICB2YXIgYk9mZnNldCA9IDI7XG4gICAgdmFyIHBpeGVsc09mZnNldCA9IDE7IC8vID8/XG4gICAgXG4gICAgLy8gTGV0IHBpeGVscyBiZSB0aWxlLnBpeGVscyBpZiBkZWZpbmVkLCBvdGhlcndpc2UgdGlsZS5pdGVtc1xuICAgIHZhciBwaXhlbHMgPSB0aWxlLnBpeGVscyB8fCB0aWxlLml0ZW1zO1xuICAgIFxuICAgIC8vIENhbGN1bGF0ZSBjb21wb25lbnRzIGlmIHVuZGVmaW5lZFxuICAgIGlmIChjb21wb25lbnRzQ291bnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnRzQ291bnQgPSBwaXhlbHMubGVuZ3RoIC8gKHRpbGUud2lkdGggKiB0aWxlLmhlaWdodCk7XG4gICAgfVxuICAgIFxuICAgIC8vIFBlcmZvcm0gb2Zmc2V0cyBkZXBlbmRpbmcgb24gbnVtYmVyIG9mIGNvbXBvbmVudHNcbiAgICBzd2l0Y2ggKGNvbXBvbmVudHNDb3VudCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBnT2Zmc2V0ID0gMDsgLy8gR3JleXNjYWxlP1xuICAgICAgICAgICAgYk9mZnNldCA9IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHBpeGVsc09mZnNldCA9IDM7IC8vIFJHQj9cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHBpeGVsc09mZnNldCA9IDQ7IC8vIFJHQmE/XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgJ1Vuc3VwcG9ydGVkIGNvbXBvbmVudHMgY291bnQgJyArIGNvbXBvbmVudHNDb3VudDsgLy8gVGhpcyBpcyB0aHJvd2luZyBmb3IgRGluZ28gZmlsZXMgdy8gMTAwMCBjb21wb25lbnRzXG4gICAgfVxuICAgIFxuICAgIHZhciB0YXJnZXRJbWFnZUluZGV4ID0gdGFyZ2V0SW1hZ2VTdGFydE9mZnNldDsgLy8gPz9cbiAgICB2YXIgcGl4ZWwgPSAwOyAvLyBXaGljaCBwaXhlbD8/XG4gICAgZm9yICh2YXIgeSA9IDA7IHkgPCB0aWxlLmhlaWdodDsgKyt5KSB7XG4gICAgICAgIHZhciB0YXJnZXRJbWFnZVN0YXJ0TGluZSA9IHRhcmdldEltYWdlSW5kZXg7IC8vID8/XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHRpbGUud2lkdGg7ICsreCkge1xuICAgICAgICAgICAgdGFyZ2V0SW1hZ2VbdGFyZ2V0SW1hZ2VJbmRleCArIDBdID0gcGl4ZWxzW3BpeGVsICsgck9mZnNldF07XG4gICAgICAgICAgICB0YXJnZXRJbWFnZVt0YXJnZXRJbWFnZUluZGV4ICsgMV0gPSBwaXhlbHNbcGl4ZWwgKyBnT2Zmc2V0XTtcbiAgICAgICAgICAgIHRhcmdldEltYWdlW3RhcmdldEltYWdlSW5kZXggKyAyXSA9IHBpeGVsc1twaXhlbCArIGJPZmZzZXRdO1xuICAgICAgICAgICAgdGFyZ2V0SW1hZ2VbdGFyZ2V0SW1hZ2VJbmRleCArIDNdID0gMjU1O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwaXhlbCArPSBwaXhlbHNPZmZzZXQ7XG4gICAgICAgICAgICB0YXJnZXRJbWFnZUluZGV4ICs9IDQ7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHRhcmdldEltYWdlSW5kZXggPSB0YXJnZXRJbWFnZVN0YXJ0TGluZSArIHRhcmdldEltYWdlU3RyaWRlO1xuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2FwaS9wZGZqcy1qcHgtcGl4ZWxzLWRlY29kZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUGRmanNKcHhDb2VmZmljaWVudHNEZWNvZGVyO1xuXG52YXIgUGRmanNKcHhDb250ZXh0UG9vbCA9IHJlcXVpcmUoJ3BkZmpzLWpweC1jb250ZXh0LXBvb2wuanMnKTtcblxuZnVuY3Rpb24gUGRmanNKcHhDb2VmZmljaWVudHNEZWNvZGVyKCkge1xuICAgIHRoaXMuX2NvbnRleHRQb29sID0gbmV3IFBkZmpzSnB4Q29udGV4dFBvb2woKTtcbn1cblxuUGRmanNKcHhDb2VmZmljaWVudHNEZWNvZGVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0KGRhdGEsIGtleSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciBpbWFnZSA9IHNlbGYuX2NvbnRleHRQb29sLmltYWdlO1xuICAgICAgICB2YXIgY3VycmVudENvbnRleHQgPSBzZWxmLl9jb250ZXh0UG9vbC5nZXRDb250ZXh0KGRhdGEuaGVhZGVyc0NvZGVzdHJlYW0pO1xuICAgICAgICBpZiAoZGF0YS5jb2RlYmxvY2tzRGF0YSkge1xuICAgICAgICAgICAgaW1hZ2UuYWRkUGFja2V0c0RhdGEoY3VycmVudENvbnRleHQsIGRhdGEuY29kZWJsb2Nrc0RhdGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnByZWNpbmN0Q29lZmZpY2llbnRzKSB7XG4gICAgICAgICAgICAvLyBOT1RFOiBBcHBhcmVudGx5IGRlYWQgY29kZSB0aGF0IGNhbiBiZSByZW1vdmVkXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGEucHJlY2luY3RDb2VmZmljaWVudHMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJlY2luY3QgPSBkYXRhLnByZWNpbmN0Q29lZmZpY2llbnRzW2pdO1xuICAgICAgICAgICAgICAgIGltYWdlLnNldFByZWNpbmN0Q29lZmZpY2llbnRzKFxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCwgcHJlY2luY3QuY29lZmZpY2llbnRzLCBwcmVjaW5jdC50aWxlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHByZWNpbmN0LmMsIHByZWNpbmN0LnIsIHByZWNpbmN0LnApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB2YXIgY29lZmZpY2llbnRzID0gaW1hZ2UuZGVjb2RlUHJlY2luY3RDb2VmZmljaWVudHMoXG4gICAgICAgICAgICBjdXJyZW50Q29udGV4dCxcbiAgICAgICAgICAgIC8qdGlsZUluZGV4PSovMCxcbiAgICAgICAgICAgIGtleS5jb21wb25lbnQsXG4gICAgICAgICAgICBrZXkucmVzb2x1dGlvbkxldmVsLFxuICAgICAgICAgICAga2V5LnByZWNpbmN0SW5kZXhJbkNvbXBvbmVudFJlc29sdXRpb24pO1xuXG4gICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICBjb2VmZmljaWVudHM6IGNvZWZmaWNpZW50cyxcbiAgICAgICAgICAgIG1pblF1YWxpdHk6IGRhdGEubWluUXVhbGl0eVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2FwaS9wZGZqcy1qcHgtY29lZmZpY2llbnRzLWRlY29kZXIuanMiXSwic291cmNlUm9vdCI6IiJ9